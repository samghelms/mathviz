[{"file": "1601.03976.tex", "nexttext": "\n\n\n\nThe numerical calculation of \\eqref{cent_blocking} leads to numerical problems for large values of $S$ and $L$.\nSo, to compute $b$, we used the following numerically stable recursive formula~\\cite{teletraffic}: \n \n \n", "itemtype": "equation", "pos": 15806, "prevtext": " \n\\maketitle\n\n\\begin{abstract}\n Networks connecting distributed cloud services through multiple data centers are called cloud networks. \n These types of networks play a crucial role in cloud computing and a holistic performance evaluation is essential before planning a \n converged network-cloud environment. We analyze a specific case where some resources  can be centralized \nin one datacenter or distributed among multiple data centers.  The economy of scale in centralizing resources in a single \npool of resources can be overcome by an increase in communication costs. \nWe propose an analytical model to evaluate tradeoffs in terms of application requirements, usage patterns, number of resources and communication costs.\nWe numerically evaluate the proposed model in a case study inspired by the oil and gas industry, \nindicating how to cope with the tradeoff between statistical multiplexing advantages of centralization and the corresponding increase in communication infrastructure costs.\n\\end{abstract}\n\n\n\n\\section{Introduction}\n\\label{sec:Intro}\n\n\nCloud computing is a large-scale distributed computing paradigm that is\ndriven by economies of scale, in which a pool of computing resources (e.g., networks, servers, storage, applications, and services) \nare provisioned, delivered and released on demand to users over a network \\cite{foster2008cloud}. \nTo the user, the available capabilities often appear to be unlimited and can\nbe elastically provisioned in any quantity at any time \\cite{mell2011nist}. \n\nTo improve cloud performance and resiliency, the current trend is to deploy the services across multiple and geographically distant sites\n\\cite{CloudNetworks}.\nIn this context, cloud networks (networks connecting cloud services hosted in multiple data centers) play a crucial role in cloud computing \nand are an indispensable ingredient\nfor high performance cloud computing \\cite{duan2012survey}.\n\n\n\nThis work is motivated by a real-world project of deployment of an Oil \\& Gas \\emph{(O\\&G)} application in multiple sites. Because  \\emph{O\\&G} possesses a high cost per license, buy one license per user can be very expensive. Because a user can run multiple applications, like e-mails clients or spreadsheets softwares, the single user licensing aproach results in a waste of resources due to license underutilization. One solution often used in corporate environments for cost minimization is share a license between multiple users with the adoption of the floating licensing approach \\cite{hamadani1998automatic}. \nIn this approach, a limited number of licenses is stored in a pool shared among a large  \nnumber of users.\n When a user wishes to run the application, a license is requested to a license server.\nThe task of a software license server is to determine and control the number of active replicas of the software based on the \nlicense entitlements that an organization owns or the system capabilities. If a license is available, the license server allows the application to run. \nWhen the user finishes the application, the license is reclaimed by the license server \nand made available to other users. To avoid user's misbehavior, the application periodically sends license renewal requests to the license server.\nIf the client machine does not receive an answer, a timeout is detected and the application is closed.\n\nThe sharing of scarce resources (licenses) among users taking advantage of the probabilistic pattern of user's access produces  \\emph{statistical multiplexing gains}. The sharing  increases the utilization of the licences and reduces the number needed to satisfy users requirements. This gain can be viewed as a consequence of the law of large numbers and increases as the number os users sharing a resourse increases. It is important to notice that there are more users than licenses,    therefore it is possible that a user cannot get an available license. In this case he waits or he is blocked. Systems of the first type are called \\emph{waiting systems} while the second type systems are called \\emph{loss-systems} \\cite{teletraffic}. We modelled the licensing system as a \\emph{loss-system}.  The probability of not get a license is the \\emph{blocking probability}. Because blocking is inconvenient to users, the blocking probablity is a Service Level Agreement (SLA) parameter.\n\nA cloud is as a set of one or more \\emph{resource units (RUs)} running services that are requested by users. Application server and licence server are examples of servers running in RUs.\nThe set of \\emph{O\\&G} applications is so image intensive and demands so much \n  bandwidth  that  users  and RUs running the application servers have to be in the same local area network due to performance constraints.\n   The cloud architecture can be a federated network of public or private clouds, hosting the software floating license cloud service, the \\emph{O\\&G} application itself and other corporative applications.  Licenses are consolidated remote to users in a single pool  (Figure \\ref{CentralizedLicenseServers})\nor near to users spread over multiple pools in multiple sites (Figure \\ref{RemoteLicenseServers}).\n\nThe single pool and multiple pool architectures considered in this paper make use  of soft-state signaling solutions~\\cite{ji2003comparison}.  In soft-state solutions, installed state at a remote site needs to be frequently refreshed by  clients running the  application.  Otherwise,  the state times out (and is removed).  \nSoft-state solutions are quite common, being used in a variety of protocols as RSVP, SRM, SIP and IGMP, to name a few. In hard-state solutions, in contrast, state remains installed until explicitly removed.  Soft-state requires well-provisioned links for frequently updating states at remote sites through a WAN.\n\n\n\n\n\n\n\nIn the single pool case, the federated clouds are linked by the network cloud in \nsuch a way that background traffic\ncompetes with the request/response signaling traffic. Due to congestion generated \nby the background traffic,  timeouts can occur and \nthe application might be prematurely closed. \nIn this situation, the cloud network capacity needs to be increased to reduce the premature \ntimeout probability.   In the multi-pool case,   users access local (but typically more scarce) resources at distributed pools,  the connection is typically over over-provisioned local area networks (LANs) and timeouts due to congestion rarely occur.  \nWhile the single pool explores the\nstatistical multiplexing gains due to resource sharing, such economy of scale gains might be percluded by an increase in communication costs. \n\\begin{enumerate}\n\\item How to quantify  advantages and disadvantages of consolidating resources in a single \npool?\n\\item What is required (in terms of resources and infrastructure upgrades) to satisfy the service level agreements? \n\\end{enumerate}\n\nWhile partially answering the questions above, our key contributions are the following:\n\n\\begin{enumerate}\n\\item \\textbf{holistic analysis of license serving: } we propose an integrated framework for the assessment of benefits and costs of service infrastructures accounting for  software and network aspects. We apply our framework to the analysis of how to distribute resources in a cloud environment;\n\\item \\textbf{analytical model: } we specialize the proposed framework to analyze the tradeoffs involved in resource distribution accounting for   \ngains due to statistical multiplexing  and costs due to congestion;\n\\item \\textbf{case study: } we numerically investigate the proposed model using a case inspired by a real-world Oil \\& Gas setup.\n\\end{enumerate}\n\n\nThe remainder of this paper is organized as follows. Related work is\n discussed in Section \\ref{sec:trabalhos_relacionados}.\nIn Section \\ref{sec:modelo} we present the proposed analytical model. \nSection \\ref{sec:exemplos} contains the numerical \nexamples, Section~\\ref{sec:discu} presents further discussion about the model applicability   and Section \\ref{sec:conclusions} concludes the paper.\n\n\\begin{figure}[h]\n\\begin{center}\n    \\includegraphics[width=0.66\\textwidth]{Centralized_Pool.pdf}\n\\end{center}\n\\caption{Centralized  servers (single pool)}\n\\label{CentralizedLicenseServers}\n\\end{figure}\n\n\n\n\\begin{figure}[h]\n\\begin{center}\n    \\includegraphics[width=0.66\\textwidth]{Distributed_Pool.pdf}\n\\end{center}\n\\caption{Distributed servers (multiple pools)}\n\\label{RemoteLicenseServers}\n\\end{figure}\n\n\n\n\n\n\n\\section{Related Work}\n\\label{sec:trabalhos_relacionados}\n\nSince networking has a strong impact on end-to-end cloud service, a holistic performance evaluation is essential before planning a \nconverged network-cloud environment. Performance evaluation on the sufficient number of computational resources necessary to meet a desired \nService Level Agreement (SLA) in a cost-effective way has attracted extensive research interest \\cite{brandwacht2013models,khazaei2012performance}.\n\\cite{duan2014holistic} has proposed a modeling and analysis approach by exploiting network\ncalculus theory to define a general profile that can characterize service capability of either a network or Cloud service.\n\nOur work is closely related to  the facility location problem in operations research~\\cite{facloc}.   In facility location problems, the aim is optimally place facilities so as to minimize transportation costs. While we also target minimization of service costs, we consider the interplay between those and statistical gains due to multiplexing, timeout probabilities due to congestion and blocking probability due to resource exhaustion. \n\n\\cite{khazaei2012performance} modeled the blocking probability of a cloud with a large number of Resource Units (RUs) and general service times given by \na $M/G/m/m+r$ queuing system with single task arrivals and a task buffer of finite capacity.\n\\cite{brandwacht2013models}\nevaluated finite population and heterogeneous resource requests using the blocking probability as an SLA performance measure to dimension clouds. \nThey showed that infinite source models may lead to an overestimation of the number of RUs.\n\nAlthough the papers above are related to ours, none of them considered the tradeoff between gains due to statistical multiplexing  and costs to support remote traffic.  \nWhile~\\cite{khazaei2012performance} and ~\\cite{brandwacht2013models}\n  considered  blocking of RUs,~\\cite{duan2014holistic} considered  network-cloud service capabilities.  \nTo the best of our knowledge, this paper is the first to bridge the two aspects in an integrated manner. \n\n\\section{Model and Notation}\n\\label{sec:modelo}\n\nWe begin by describing the system of interest in this paper.  A cloud is a pool of one or more RUs that can be requested by users. These units can be virtual machines (VM) \nor CPUs. We assume that there are RUs acting as signaling (control) servers and application servers. Each signaling  server controls one pool of \napplication states. To simplify presentation, we assume that each running instance of the application is associated to an application state.\n\n\n\n\t  \n\\begin{table}[h!]\n\\center\n\\begin{tabular}{ll}\n\\hline \n\\hline\nvariable & description \\\\\n\\hline\n$N$ & number of sites \\\\\n$S$ & population size \\\\\n$S_i$ & population at site $i$ \\\\\n$L$ & number of supported application states (resources) \\\\\n$L_i$ & number of supported application states (resources) at pool $i$ \\\\\n$\\lambda$ &  request arrival rate per user (requests/hour)\\\\\n$1/\\mu$ & average duration of a session (hours)\\\\\n$\\rho$ & $\\lambda/\\mu$\\\\\n$C_0$ & initial circuit capacity (Mbps)\\\\\n$C'$ & additional circuit capacity (Mbps)\\\\\n$C$ & circuit capacity (Mbps) $(C=C'+C_0)$ \\\\ \n$1/M$ & packet mean size ($\\textrm{bits}^{-1}$)\\\\\n$\\Lambda$ & background packet arrival rate (pkts/s)\\\\\n$r$ &rate at which application states are checked $(\\textrm{s}^{-1})$\\\\\n$\\tau$ & timeout detection threshold (s) \\\\\n\\hline\n\\hline\nmetric & description \\\\\n\\hline\n$b_c$ & blocking probability in the centralized setup \\\\\n$b_d$ & blocking probability in the distributed setup \\\\\n$p$ & timeout probability in the distributed setup \\\\\n$s_c $ & success probability in the centralized setup \\\\\n$s_d $ & success probability in the distributed setup \\\\ \n$s $ & required success probability defined in SLA \\\\\n\\hline\n\\end{tabular}\n\\caption{Table of notation}\n\\label{Notation}\n\\end{table}\n\n\nWe consider a population of $S$  users divided into $N$ sites (or pools in the distributed case).  \nEach site $i$ comprises $S_i$ users.  \nEach user initiates new application instances at rate $\\lambda$. \nIf the  signaling server is able  to allocate space to store state information associated to the new instance, the requester  accesses the VM until the service is completed. When the user finishes its session, the space used to store state information is reclaimed by the license server and made available to other users. Each session duration is exponentially distributed with mean $1/\\mu$ hours. Let $\\rho=\\lambda/\\mu$. Table \\ref{Notation} summarizes the notation used throughout the rest of the paper.\n\n\n\n\nBased on observed real-world signaling packets, application periodically send state renewal requests to the signaling servers at fixed rate of $r$ attempts/s and detects a timeout if it does not receive an answer  after $\\tau$ seconds.\nIn the single  pool architecture \nrequests traverse a circuit with capacity $C$ competing with background traffic.  Background packets arrive at rate $\\Lambda$ pkts/s and each packet requires exponentially distributed service \nwith mean $1/M$. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\\subsection{Blocking probability}\n\n\n\n\n\n\n\nTo characterize the blocking probability, we use a finite source queueing model with homogeneous service \ndistribution and no waiting time, \nas given by the well-known \\textit{Engset formula} \\cite{teletraffic}. The aggregated arrival \nrate of renewal requests is proportional to the number of idle users and the aggregate service rate is proportional to active users to whom access was granted. \nThe state transition diagram of the finite source model is illustrated in Figure \\ref{fig:engset}.\n\n\n\\begin{figure}\n\\begin{tikzpicture}[->,>=stealth',shorten >=1pt,node distance=2.25cm,\n\t    thick,main node/.style={circle,draw,font=\\sffamily\\scriptsize\\bfseries}]\n\t    \n\t    \\node[main node] (0) {$0$};\n\t    \\node[main node] (1) [right of=0] {$1$};\n\t    \\node         (d1)  [right of = 1]   {$\\cdots$};\n\t    \\node[main node] (i) [right of=d1] {$i$}; \n\t    \\node (d2) [right of=i] {$\\cdots$};\n\t    \\node[main node,text width=0.55cm] (n-1) [right of=d2] {\\tiny$L-1$};\n\t    \\node[main node] (n) [right of=n-1] {$L$};\n\n\t      \\path[style={font=\\sffamily\\small}]\n\t\t(0) edge[bend left,below] node [above]{\\scriptsize$S\\lambda$} (1)\n\t\t(1) edge[bend left,below] node [above]{\\scriptsize$(S-1)\\lambda$} (d1)\n\t\t    edge[bend left,above] node [below] {\\scriptsize$\\mu$} (0)\n\t\t(d1)  edge[bend left,above]node [below] {\\scriptsize$2\\mu$} (1)\n\t\t    edge[bend left,below] node [above]{} (i)\n\t\t(i) edge[bend left,below] node [above]{\\scriptsize$(S-i)\\lambda$} (d2) \n\t\t     edge[bend left,above]node [below] {\\scriptsize$i\\mu$} (d1)\t\n\t\t(d2)  edge[bend left,above]node [below] {} (i)\n\t\t    edge[bend left,below] node [above]{} (n-1)\n\t\t(n-1)  edge[bend left,below] node [above]{\\scriptsize$(S-L+1)\\lambda$} (n) \n\t\t     edge[bend left,above]node [below] {\\scriptsize$(L-1)\\mu$} (d2)\t   \n\t\t(n)  edge[bend left,above]node [below] {\\scriptsize$L\\mu$} (n-1);\t    \n\\end{tikzpicture}\n\\caption{State transition diagram for the finite source model}\n\\label{fig:engset}\n\\end{figure}\n  \n\n\nThe states of the application replicas   can be consolidated in a single pool or distributed across multiple pools. \nLet $b(L,S)$ be the blocking probability for a population of size $S$ associated to a  signaling server that has capacity to handle  $L$ application states.  \n\n", "index": 1, "text": "\\begin{equation}\nb(L,S)=\\frac{\\binom{S-1}{L}(\\frac{\\lambda}{\\mu})^L}{\\sum^{L}_{i=0}\\binom{S-1}{i}(\\frac{\\lambda}{\\mu})^i}\n\\label{cent_blocking}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m1\" class=\"ltx_Math\" alttext=\"b(L,S)=\\frac{\\binom{S-1}{L}(\\frac{\\lambda}{\\mu})^{L}}{\\sum^{L}_{i=0}\\binom{S-1%&#10;}{i}(\\frac{\\lambda}{\\mu})^{i}}\" display=\"block\"><mrow><mrow><mi>b</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>L</mi><mo>,</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mfrac><mrow><mrow><mo>(</mo><mfrac linethickness=\"0pt\"><mrow><mi>S</mi><mo>-</mo><mn>1</mn></mrow><mi>L</mi></mfrac><mo>)</mo></mrow><mo>\u2062</mo><msup><mrow><mo stretchy=\"false\">(</mo><mfrac><mi>\u03bb</mi><mi>\u03bc</mi></mfrac><mo stretchy=\"false\">)</mo></mrow><mi>L</mi></msup></mrow><mrow><msubsup><mo largeop=\"true\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>L</mi></msubsup><mrow><mrow><mo>(</mo><mfrac linethickness=\"0pt\"><mrow><mi>S</mi><mo>-</mo><mn>1</mn></mrow><mi>i</mi></mfrac><mo>)</mo></mrow><mo>\u2062</mo><msup><mrow><mo stretchy=\"false\">(</mo><mfrac><mi>\u03bb</mi><mi>\u03bc</mi></mfrac><mo stretchy=\"false\">)</mo></mrow><mi>i</mi></msup></mrow></mrow></mfrac></mrow></math>", "type": "latex"}, {"file": "1601.03976.tex", "nexttext": "\n\nWhen referring to the centralized setup,  we might denote $b(L,S)$ simply by $b_c$.\nIn the centralized case, $b_c$ is given by:\n\n", "itemtype": "equation", "pos": 16183, "prevtext": "\n\n\n\nThe numerical calculation of \\eqref{cent_blocking} leads to numerical problems for large values of $S$ and $L$.\nSo, to compute $b$, we used the following numerically stable recursive formula~\\cite{teletraffic}: \n \n \n", "index": 3, "text": "\\begin{equation}\nb(j,S)=\\frac{\\rho(S-j+1)b(j-1,S)}{j+\\rho(S-j+1)b(j-1,S)}, \\textrm{ where } b(0,S)=1 \\textrm{ and } 1\\le j \\le L\n\\label{cent_blocking_numerical}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E2.m1\" class=\"ltx_Math\" alttext=\"b(j,S)=\\frac{\\rho(S-j+1)b(j-1,S)}{j+\\rho(S-j+1)b(j-1,S)},\\textrm{ where }b(0,S%&#10;)=1\\textrm{ and }1\\leq j\\leq L\" display=\"block\"><mrow><mrow><mrow><mi>b</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>j</mi><mo>,</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mfrac><mrow><mi>\u03c1</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>S</mi><mo>-</mo><mi>j</mi></mrow><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mi>b</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>j</mi><mo>-</mo><mn>1</mn></mrow><mo>,</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mi>j</mi><mo>+</mo><mrow><mi>\u03c1</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>S</mi><mo>-</mo><mi>j</mi></mrow><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mi>b</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>j</mi><mo>-</mo><mn>1</mn></mrow><mo>,</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mfrac></mrow><mo>,</mo><mrow><mrow><mtext>\u00a0where\u00a0</mtext><mo>\u2062</mo><mi>b</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo>,</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mn>1</mn><mo>\u2062</mo><mtext>\u00a0and\u00a0</mtext><mo>\u2062</mo><mn>1</mn></mrow><mo>\u2264</mo><mi>j</mi><mo>\u2264</mo><mi>L</mi></mrow></mrow></math>", "type": "latex"}, {"file": "1601.03976.tex", "nexttext": "\n\n\nIn the distributed scenario, there is one signaling server at each pool.  Users compete for access to the signaling server of their corresponding pools and each pool $i$ has its associated blocking probability $b(L_i,S_i)$. Let $b_d$ be the blocking probability in the distributed case, given as the weighted sum of the blocking probabilities at each pool.  \nSo, the blocking probability in the distributed case is given by:\n\n", "itemtype": "equation", "pos": 16488, "prevtext": "\n\nWhen referring to the centralized setup,  we might denote $b(L,S)$ simply by $b_c$.\nIn the centralized case, $b_c$ is given by:\n\n", "index": 5, "text": "\\begin{equation}\nb_c=b(L,S)\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E3.m1\" class=\"ltx_Math\" alttext=\"b_{c}=b(L,S)\" display=\"block\"><mrow><msub><mi>b</mi><mi>c</mi></msub><mo>=</mo><mrow><mi>b</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>L</mi><mo>,</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.03976.tex", "nexttext": "\nwhere\n\n", "itemtype": "equation", "pos": 16958, "prevtext": "\n\n\nIn the distributed scenario, there is one signaling server at each pool.  Users compete for access to the signaling server of their corresponding pools and each pool $i$ has its associated blocking probability $b(L_i,S_i)$. Let $b_d$ be the blocking probability in the distributed case, given as the weighted sum of the blocking probabilities at each pool.  \nSo, the blocking probability in the distributed case is given by:\n\n", "index": 7, "text": "\\begin{equation}\nb_d =  \\sum_{i=1}^N  \\frac{S_i}{S} b(L_i,S_i) \n\\label{mult_blocking}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E4.m1\" class=\"ltx_Math\" alttext=\"b_{d}=\\sum_{i=1}^{N}\\frac{S_{i}}{S}b(L_{i},S_{i})\" display=\"block\"><mrow><msub><mi>b</mi><mi>d</mi></msub><mo>=</mo><mrow><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mrow><mfrac><msub><mi>S</mi><mi>i</mi></msub><mi>S</mi></mfrac><mo>\u2062</mo><mi>b</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>L</mi><mi>i</mi></msub><mo>,</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.03976.tex", "nexttext": "\n\n\n\n\n\\subsection{Timeout Due To Congestion}\n\nIn this section we assume that each client periodically sends state renewal requests \nto the signaling server, at a constant rate of  $r$ requests per second.\nEach renewal request is also referred to as a \\emph{probe}.  \nIf the client does not receive an answer in $\\tau$ seconds ($\\tau < 1/r$), a timeout is detected \nand the application is closed. \nNote that due to network congestion, the chances of occurring a timeout if \nthe signaling server is\ncentralized is higher than if the signaling  server is closer to end-users.\n\n\n\n\n\n\n\nLet $D_i$ be the duration of the $i$-th subinterval in which the state is checked.\nLet $\\tilde{N}$ be the number of times that probes are sent to the server until a timeout is \ngenerated, without counting the last probe ($\\tilde{N} \\ge 0$).\nLet $q$ be the probability that a probe successfully yields a state renewal. Then,\n   $\\tilde{N} \\sim Geometric(1-q)$, \n\n", "itemtype": "equation", "pos": 17065, "prevtext": "\nwhere\n\n", "index": 9, "text": "\\begin{equation}\nS=\\sum^N_{i=1}S_i \\,\\,\\, , \\,\\,\\, L=\\sum^N_{i=1}L_i \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E5.m1\" class=\"ltx_Math\" alttext=\"S=\\sum^{N}_{i=1}S_{i}\\,\\,\\,,\\,\\,\\,L=\\sum^{N}_{i=1}L_{i}\" display=\"block\"><mrow><mrow><mi>S</mi><mo>=</mo><mrow><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mpadded width=\"+5.1pt\"><msub><mi>S</mi><mi>i</mi></msub></mpadded></mrow></mrow><mo rspace=\"7.6pt\">,</mo><mrow><mi>L</mi><mo>=</mo><mrow><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>L</mi><mi>i</mi></msub></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.03976.tex", "nexttext": "\nLet $D$ be the time until a timeout, where $D$ is given as a function of $D_i$ and $N$ \nas follows,\n\n", "itemtype": "equation", "pos": 18089, "prevtext": "\n\n\n\n\n\\subsection{Timeout Due To Congestion}\n\nIn this section we assume that each client periodically sends state renewal requests \nto the signaling server, at a constant rate of  $r$ requests per second.\nEach renewal request is also referred to as a \\emph{probe}.  \nIf the client does not receive an answer in $\\tau$ seconds ($\\tau < 1/r$), a timeout is detected \nand the application is closed. \nNote that due to network congestion, the chances of occurring a timeout if \nthe signaling server is\ncentralized is higher than if the signaling  server is closer to end-users.\n\n\n\n\n\n\n\nLet $D_i$ be the duration of the $i$-th subinterval in which the state is checked.\nLet $\\tilde{N}$ be the number of times that probes are sent to the server until a timeout is \ngenerated, without counting the last probe ($\\tilde{N} \\ge 0$).\nLet $q$ be the probability that a probe successfully yields a state renewal. Then,\n   $\\tilde{N} \\sim Geometric(1-q)$, \n\n", "index": 11, "text": "\\begin{equation}\nP(\\tilde{N}=n)=q^n (1-q) \\,\\,,\\,\\, n \\ge 0\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E6.m1\" class=\"ltx_Math\" alttext=\"P(\\tilde{N}=n)=q^{n}(1-q)\\,\\,,\\,\\,n\\geq 0\" display=\"block\"><mrow><mi>P</mi><mrow><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>N</mi><mo stretchy=\"false\">~</mo></mover><mo>=</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msup><mi>q</mi><mi>n</mi></msup><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>-</mo><mi>q</mi><mo rspace=\"5.9pt\" stretchy=\"false\">)</mo></mrow><mo rspace=\"5.9pt\">,</mo><mi>n</mi><mo>\u2265</mo><mn>0</mn></mrow></math>", "type": "latex"}, {"file": "1601.03976.tex", "nexttext": "\n  where $D_0=0$.   \nIn the remainder of this section we assume that \n$D_i\\sim Constant(\\frac{1}{r})$ for $i=1, 2, 3, \\ldots$ but \nthe argument presented below easily generalizes for the case where $D_i$ has general distribution, \nand  $D_1, D_2, \\ldots$ are independent and identically distributed with Laplace transform given by $e^{(-s/r)}$. \n\nConditioning on $\\tilde{N}$, \nthe Laplace transform of $D$ can be derived as:\n\n", "itemtype": "equation", "pos": 18264, "prevtext": "\nLet $D$ be the time until a timeout, where $D$ is given as a function of $D_i$ and $N$ \nas follows,\n\n", "index": 13, "text": "\\begin{equation}\n  D = D_0 + D_1 + D_2 + \\ldots + D_{\\tilde{N}}  + D_{\\tilde{N}+1} \\\\\n  \\label{D}  \n  \\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E7.m1\" class=\"ltx_Math\" alttext=\"D=D_{0}+D_{1}+D_{2}+\\ldots+D_{\\tilde{N}}+D_{\\tilde{N}+1}\\\\&#10;\" display=\"block\"><mrow><mi>D</mi><mo>=</mo><mrow><msub><mi>D</mi><mn>0</mn></msub><mo>+</mo><msub><mi>D</mi><mn>1</mn></msub><mo>+</mo><msub><mi>D</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant=\"normal\">\u2026</mi><mo>+</mo><msub><mi>D</mi><mover accent=\"true\"><mi>N</mi><mo stretchy=\"false\">~</mo></mover></msub><mo>+</mo><msub><mi>D</mi><mrow><mover accent=\"true\"><mi>N</mi><mo stretchy=\"false\">~</mo></mover><mo>+</mo><mn>1</mn></mrow></msub></mrow></mrow></math>", "type": "latex"}, {"file": "1601.03976.tex", "nexttext": " \nwhere $\\tilde{N}(z)$ is the z transform of $\\tilde{N}$,\n   \\begin{eqnarray} \\label{eqnz}\n     \\tilde{N}(z) &=&  \\frac{1-q}{1- z q} \n  \\end{eqnarray}\nand\n\n", "itemtype": "equation", "pos": -1, "prevtext": "\n  where $D_0=0$.   \nIn the remainder of this section we assume that \n$D_i\\sim Constant(\\frac{1}{r})$ for $i=1, 2, 3, \\ldots$ but \nthe argument presented below easily generalizes for the case where $D_i$ has general distribution, \nand  $D_1, D_2, \\ldots$ are independent and identically distributed with Laplace transform given by $e^{(-s/r)}$. \n\nConditioning on $\\tilde{N}$, \nthe Laplace transform of $D$ can be derived as:\n\n", "index": 15, "text": "\\begin{equation}\n   D^{\\star}(s) =  \\tilde{N}(z)\\bigg|_{z=e^{-(\\frac{s}{r})}} D_{\\tilde{N}+1}^{\\star}(s) \\\\\n  \\label{D_star}\n  \\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E8.m1\" class=\"ltx_Math\" alttext=\"D^{\\star}(s)=\\tilde{N}(z)\\bigg{|}_{z=e^{-(\\frac{s}{r})}}D_{\\tilde{N}+1}^{\\star%&#10;}(s)\\\\&#10;\" display=\"block\"><mrow><mrow><msup><mi>D</mi><mo>\u22c6</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><msub><mrow><mrow><mover accent=\"true\"><mi>N</mi><mo stretchy=\"false\">~</mo></mover><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo fence=\"true\" maxsize=\"210%\" minsize=\"210%\">|</mo></mrow><mrow><mi>z</mi><mo>=</mo><msup><mi>e</mi><mrow><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mfrac><mi>s</mi><mi>r</mi></mfrac><mo stretchy=\"false\">)</mo></mrow></mrow></msup></mrow></msub><mo>\u2062</mo><msubsup><mi>D</mi><mrow><mover accent=\"true\"><mi>N</mi><mo stretchy=\"false\">~</mo></mover><mo>+</mo><mn>1</mn></mrow><mo>\u22c6</mo></msubsup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.03976.tex", "nexttext": "\nWe substitute~\\eqref{eqnz} and ~\\eqref{eqdi}  into~\\eqref{D_star} to obtain\n\\begin{eqnarray}\n    D^{\\star}(s) &=& e^{-{s}/{r}}\\bigg( \\frac{1-q  }{1- e^{-{s}/{r}}q }\\bigg) \n\n\\label{D_star_fim}\n\\end{eqnarray}\n\n\n\n\nNext, we characterize the network congestion which will cause the timeouts. This characterization is the first step in deriving a formula for the \ntimeout in terms of $C$ in such a way that tradeoffs can be evaluated in terms of $L$ and $C$.\n\n  Let $Y$ be the delay experienced by a probing packet that traverses a link with capacity\n   $C$  subject to  exogenous (background) traffic with arrival rate $\\Lambda$ and size exponentially distributed with mean $1/M$.  \n  The CDF of $Y$ is given by  $F_Y(y)=P(Y < y)$.  Then, the probability that a \n  state renewal request\n  succeeds is given by $q=P(Y  < \\tau)$. \n  In the remainder of this paper,\n   we assume that the delay is characterized by an \n   M/M/1 queue, and that the overhead caused by \n state renewal requests into the link is negligible compared to the exogenous traffic. \n Then, it follows from~\\cite[equation (5.119)]{kleinrock} that\n \n", "itemtype": "equation", "pos": 19101, "prevtext": " \nwhere $\\tilde{N}(z)$ is the z transform of $\\tilde{N}$,\n   \\begin{eqnarray} \\label{eqnz}\n     \\tilde{N}(z) &=&  \\frac{1-q}{1- z q} \n  \\end{eqnarray}\nand\n\n", "index": 17, "text": "\\begin{equation} \\label{eqdi}\n    D_{\\tilde{N}+1}^{\\star}(s) = D_i^{\\star}(s) = e^{-s/r}, \\qquad i=1, 2, 3, \\ldots\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E9.m1\" class=\"ltx_Math\" alttext=\"D_{\\tilde{N}+1}^{\\star}(s)=D_{i}^{\\star}(s)=e^{-s/r},\\qquad i=1,2,3,\\ldots\" display=\"block\"><mrow><mrow><mrow><msubsup><mi>D</mi><mrow><mover accent=\"true\"><mi>N</mi><mo stretchy=\"false\">~</mo></mover><mo>+</mo><mn>1</mn></mrow><mo>\u22c6</mo></msubsup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><msubsup><mi>D</mi><mi>i</mi><mo>\u22c6</mo></msubsup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><msup><mi>e</mi><mrow><mo>-</mo><mrow><mi>s</mi><mo>/</mo><mi>r</mi></mrow></mrow></msup></mrow><mo rspace=\"22.5pt\">,</mo><mrow><mi>i</mi><mo>=</mo><mrow><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.03976.tex", "nexttext": "  \n\nThe \\emph{target session duration}  is the desired duration of the session as determined\nby the user requirements.   \nLet the target session duration time be exponentially distributed with mean $1/\\mu$,\n and let $L$ be the random variable that characterizes\nthe target session duration, $L \\sim Exponential(\\mu)$.  The actual session duration \nmight be smaller than the target session duration if a timeout occurs.  \n\nLet $p$ be the probability of timeout. A timeout occurs if the target session duration is greater than the time until a renewal\nrequest fails.  Therefore, $p$ is given by: \n  \n", "itemtype": "equation", "pos": -1, "prevtext": "\nWe substitute~\\eqref{eqnz} and ~\\eqref{eqdi}  into~\\eqref{D_star} to obtain\n\\begin{eqnarray}\n    D^{\\star}(s) &=& e^{-{s}/{r}}\\bigg( \\frac{1-q  }{1- e^{-{s}/{r}}q }\\bigg) \n\n\\label{D_star_fim}\n\\end{eqnarray}\n\n\n\n\nNext, we characterize the network congestion which will cause the timeouts. This characterization is the first step in deriving a formula for the \ntimeout in terms of $C$ in such a way that tradeoffs can be evaluated in terms of $L$ and $C$.\n\n  Let $Y$ be the delay experienced by a probing packet that traverses a link with capacity\n   $C$  subject to  exogenous (background) traffic with arrival rate $\\Lambda$ and size exponentially distributed with mean $1/M$.  \n  The CDF of $Y$ is given by  $F_Y(y)=P(Y < y)$.  Then, the probability that a \n  state renewal request\n  succeeds is given by $q=P(Y  < \\tau)$. \n  In the remainder of this paper,\n   we assume that the delay is characterized by an \n   M/M/1 queue, and that the overhead caused by \n state renewal requests into the link is negligible compared to the exogenous traffic. \n Then, it follows from~\\cite[equation (5.119)]{kleinrock} that\n \n", "index": 19, "text": "\\begin{equation} \nq=1-e^{-( MC-\\Lambda)\\tau}\n\\label{MM1_waiting_time}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E10.m1\" class=\"ltx_Math\" alttext=\"q=1-e^{-(MC-\\Lambda)\\tau}\" display=\"block\"><mrow><mi>q</mi><mo>=</mo><mrow><mn>1</mn><mo>-</mo><msup><mi>e</mi><mrow><mo>-</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>M</mi><mo>\u2062</mo><mi>C</mi></mrow><mo>-</mo><mi mathvariant=\"normal\">\u039b</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mi>\u03c4</mi></mrow></mrow></msup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.03976.tex", "nexttext": "\n where $D^{\\star}(\\mu)$ is the Laplace transform of $D$  given by \\eqref{D_star}, evaluated\n at the point $s=\\mu$.\n \n Our goal is to obtain a simple expression for $p$ as a function of $C$. \nTo this aim, we substitute~\\eqref{MM1_waiting_time} into \\eqref{D_star_fim}  and make use\nof  \\eqref{P_timeout1} to obtain $p$,\n   \\begin{eqnarray}\n    p &=&  e^{-\\mu/r}\\left( \\frac{e^{-( MC-\\Lambda)\\tau}  }\n    {1- e^{-{\\mu}/{r}}\\left(1- e^{-( MC-\\Lambda)\\tau}\\right)}\\right) \n  \\label{P_timeout_final}\n  \\end{eqnarray}  \n  Note that if $q=0$ then $p=e^{-\\mu/r}$. \n  This is an expected result, as $q=0$ means that the state renewal will fail and timeout will only occur if the target duration is greater than \n  $1/r$, the interval between renewal requests.\n  The probability that\n  the application cannot be  started  at first place is captured through $b_c$.\n  \n\n\n\n\n\n\n\n\n\n  \n  After some algebraic manipulation, it is possible to derive an explicit formula for the required link capacity $C$ as a  function of the targeted timeout probability   $p$, \n  the application characteristics ($\\tau$ and $1/r$), usage \n  patterns ($\\mu$) and background traffic characteristics ($\\Lambda$ and $M$):\n  \n", "itemtype": "equation", "pos": 21023, "prevtext": "  \n\nThe \\emph{target session duration}  is the desired duration of the session as determined\nby the user requirements.   \nLet the target session duration time be exponentially distributed with mean $1/\\mu$,\n and let $L$ be the random variable that characterizes\nthe target session duration, $L \\sim Exponential(\\mu)$.  The actual session duration \nmight be smaller than the target session duration if a timeout occurs.  \n\nLet $p$ be the probability of timeout. A timeout occurs if the target session duration is greater than the time until a renewal\nrequest fails.  Therefore, $p$ is given by: \n  \n", "index": 21, "text": "\\begin{equation}\n  p = P(L>D)= D^{\\star}(s) \\Big|_{s=\\mu} = D^{\\star}(\\mu)\n  \\label{P_timeout1}\n  \\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E11.m1\" class=\"ltx_Math\" alttext=\"p=P(L&gt;D)=D^{\\star}(s)\\Big{|}_{s=\\mu}=D^{\\star}(\\mu)\" display=\"block\"><mrow><mi>p</mi><mo>=</mo><mi>P</mi><mrow><mo stretchy=\"false\">(</mo><mi>L</mi><mo>&gt;</mo><mi>D</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msup><mi>D</mi><mo>\u22c6</mo></msup><mrow><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><msub><mo maxsize=\"160%\" minsize=\"160%\">|</mo><mrow><mi>s</mi><mo>=</mo><mi>\u03bc</mi></mrow></msub><mo>=</mo><msup><mi>D</mi><mo>\u22c6</mo></msup><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow></math>", "type": "latex"}, {"file": "1601.03976.tex", "nexttext": "\n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\\subsection{Success Probability}\n\nWe consider the probability of success $s$ the main SLA parameter. The success is defined by being granted access to the application  and being successful in all\nattempts of state renewal.\n\nLet $s_c$  be the probability of success in the centralized setup. This probability is the product of the probability of not being blocked (1-$b_c$)  \ntimes the probability that all attempts succeeded (1-$p$), with $b_c$ and $p$ given by \\eqref{cent_blocking} and \\eqref{P_timeout_final}.  \n\n", "itemtype": "equation", "pos": 22323, "prevtext": "\n where $D^{\\star}(\\mu)$ is the Laplace transform of $D$  given by \\eqref{D_star}, evaluated\n at the point $s=\\mu$.\n \n Our goal is to obtain a simple expression for $p$ as a function of $C$. \nTo this aim, we substitute~\\eqref{MM1_waiting_time} into \\eqref{D_star_fim}  and make use\nof  \\eqref{P_timeout1} to obtain $p$,\n   \\begin{eqnarray}\n    p &=&  e^{-\\mu/r}\\left( \\frac{e^{-( MC-\\Lambda)\\tau}  }\n    {1- e^{-{\\mu}/{r}}\\left(1- e^{-( MC-\\Lambda)\\tau}\\right)}\\right) \n  \\label{P_timeout_final}\n  \\end{eqnarray}  \n  Note that if $q=0$ then $p=e^{-\\mu/r}$. \n  This is an expected result, as $q=0$ means that the state renewal will fail and timeout will only occur if the target duration is greater than \n  $1/r$, the interval between renewal requests.\n  The probability that\n  the application cannot be  started  at first place is captured through $b_c$.\n  \n\n\n\n\n\n\n\n\n\n  \n  After some algebraic manipulation, it is possible to derive an explicit formula for the required link capacity $C$ as a  function of the targeted timeout probability   $p$, \n  the application characteristics ($\\tau$ and $1/r$), usage \n  patterns ($\\mu$) and background traffic characteristics ($\\Lambda$ and $M$):\n  \n", "index": 23, "text": "\\begin{equation}\n  C = \\frac{1}{M}\\bigg(\\Lambda +\\frac{1}{\\tau}\\ln\\bigg(\\frac{p(e^{\\frac{\\mu}{r}}-1)}{p-1}  \\bigg)\\bigg)\n  \\label{Capacity}\n  \\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E12.m1\" class=\"ltx_Math\" alttext=\"C=\\frac{1}{M}\\bigg{(}\\Lambda+\\frac{1}{\\tau}\\ln\\bigg{(}\\frac{p(e^{\\frac{\\mu}{r}%&#10;}-1)}{p-1}\\bigg{)}\\bigg{)}\" display=\"block\"><mrow><mi>C</mi><mo>=</mo><mrow><mfrac><mn>1</mn><mi>M</mi></mfrac><mo>\u2062</mo><mrow><mo maxsize=\"210%\" minsize=\"210%\">(</mo><mrow><mi mathvariant=\"normal\">\u039b</mi><mo>+</mo><mrow><mfrac><mn>1</mn><mi>\u03c4</mi></mfrac><mo>\u2062</mo><mrow><mi>ln</mi><mo>\u2061</mo><mrow><mo maxsize=\"210%\" minsize=\"210%\">(</mo><mfrac><mrow><mi>p</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msup><mi>e</mi><mfrac><mi>\u03bc</mi><mi>r</mi></mfrac></msup><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mi>p</mi><mo>-</mo><mn>1</mn></mrow></mfrac><mo maxsize=\"210%\" minsize=\"210%\">)</mo></mrow></mrow></mrow></mrow><mo maxsize=\"210%\" minsize=\"210%\">)</mo></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.03976.tex", "nexttext": "\n\n\n\nLet $s_d$ be the probability of success in the  distributed scenario. As the application and the signaling server are in the same cloud\n$p$ is zero. On the other hand, the signaling servers at each pool have less resources than the central server, which  might increase the probability of blocking.\nThen, $s_d$ is given by: \n\n", "itemtype": "equation", "pos": 23012, "prevtext": "\n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\\subsection{Success Probability}\n\nWe consider the probability of success $s$ the main SLA parameter. The success is defined by being granted access to the application  and being successful in all\nattempts of state renewal.\n\nLet $s_c$  be the probability of success in the centralized setup. This probability is the product of the probability of not being blocked (1-$b_c$)  \ntimes the probability that all attempts succeeded (1-$p$), with $b_c$ and $p$ given by \\eqref{cent_blocking} and \\eqref{P_timeout_final}.  \n\n", "index": 25, "text": "\\begin{equation}\ns_c=(1-b_c) (1-p) \n\\label{psuccess_cent}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E13.m1\" class=\"ltx_Math\" alttext=\"s_{c}=(1-b_{c})(1-p)\" display=\"block\"><mrow><msub><mi>s</mi><mi>c</mi></msub><mo>=</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mn>1</mn><mo>-</mo><msub><mi>b</mi><mi>c</mi></msub></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mn>1</mn><mo>-</mo><mi>p</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.03976.tex", "nexttext": "\n\nIn light of equations \\eqref{psuccess_cent} and \\eqref{psuccess_distributed}, we are ready to quantify the tradeoff mentioned in the beginning of this paper.  The centralized setup \nis associated to a smaller blocking probability as resources are multiplexed in a single pool. Nonetheless, users incur a  \ntimeout probability due to network congestion.  This tradeoff motivates an optimization problem, where the network designer is faced with a decision \nbetween centralizing the  pool of resources or distributing resources across multiple pools.\n\n\\subsection{Optimization Problem}\n\\label{sub:optimization}\n\n\nThe optimization problem consists of minimizing costs for a given success probability defined in an SLA. Formulas \n\\eqref{cent_blocking}, \\eqref{mult_blocking} and \\eqref{P_timeout_final} are consolidated in equations \n\\eqref{psuccess_cent} and \\eqref{psuccess_distributed}. These equations\ngive the success probability in terms of application usage patterns, number of users, licenses and pools, renewal attempts characteristic, capacity\nand traffic of the network cloud. The communication and resource costs  determine the  merits of the centralized and distributed scenarios.  \n\n\n\nNext, we present the resource allocation problem in the centralized scenario:\n\\begin{eqnarray}\n\\textrm{minimize} &:& \\,\\,\\,\\,\\, c=\\alpha L+\\beta nC' \\label{cost1} \\\\\n\\textrm{subject to}  &:&  \\,\\,\\,\\,\\,s_c \\ge  s\\\\\n\\textrm{constraint on variables}  &:&  \\,\\,\\,\\,\\,L \\ge 0, \\,\\, C' \\ge 0\n\\label{optimization_problem_sc}\n\\end{eqnarray}\n\nThe corresponding distributed resource allocation problem is: \n\\begin{eqnarray}\n\\textrm{minimize} &:& \\,\\,\\,\\,\\, c=\\alpha L+\\beta nC'\\\\\n\\textrm{subject to}  &:&  \\,\\,\\,\\,\\,s_d \\ge  s\\\\\n\\textrm{constraint on variables}  &:&  \\,\\,\\,\\,\\,L \\ge 0, \\,\\, C' = 0\n\\label{optimization_problem_sd}\n\\end{eqnarray}\nwhere $c$ is the cost in the centralized or distributed scenario,\n$\\alpha$ is the cost per maintained state (resource), $\\beta$ is the cost per Mbps and $n$\nis the number of sites that need to be upgraded in terms of capacity.  We consider a link with initial capacity $C_0$.   Let \n$C'$ be the marginal capacity added to the link.  Let $C=C_0+C'$ be the total link capacity (also referred to simply as \\emph{link capacity}).  Note that the   timeout probability $p$ is a function of the total capacity $C$. \nThe probability of success is given by \\eqref{psuccess_cent} and \\eqref{psuccess_distributed}  in the centralized and distributed scenarios, respectively. \nThe scenario with the minimum cost between the centralized resource allocation problem and distributed resource allocation is the scenario with the total minimum cost.\n\nLet $c_c^{\\star}$ and $c_d^{\\star}$ be the minimum costs achieved through the centralized and distributed setups, respectively.  \nThen, the network designer chooses the centralized or the distributed setups so as to minimize the minimum feasible cost $c^{\\star}$:\n\\begin{eqnarray}\nc^{\\star}= \\min (c_c^{\\star} , c_d^{\\star}) \n\\end{eqnarray}\n\nIn order to find the optimal solution, \nwe used an \\textit{interior point method} in which the derivatives\nare approximated by a solver as implemented in  Matlab\\textsuperscript{\\textregistered} convex optimization toolbox.\n\n \n\n\n\n\n\n  \n\n\n  \n\n\n\\section{Numerical Examples}\n\\label{sec:exemplos}\nIn this section we numerically investigate \nthe proposed model.\nOur goals are to a) numerically illustrate the tradeoffs between blocking probability and timeout probability and b) indicate the applicability of the  \noptimization problem proposed, quantifying the advantages and disadvantages of central and distributed pools of resources.  Our examples in  this section \nare motivated by the  previously mentioned  Oil \\& Gas application. In this application, signaling servers associate one license to each  running instance of an application.  Therefore, in what follows we refer to \\emph{licenses} and  \\emph{application state resources} interchangeably.\n\n\nThe first analysis is a comparison between the blocking probability in the centralized and in the distributed case as shown in Figure  \\ref{fig:P_bloq}(a).\nIn terms of blocking probability, the centralized architecture is always better. The logarithm of the blocking \nprobability,  plotted in Figure \\ref{fig:P_bloq}(b), shows that the advantage of the centralized architecture increases as the number of available licenses increases.  We refer to the reduction in blocking probability due to centralization as \\emph{licensing statistical multiplexing gains}.  \n\n\n\\begin{figure}\n\\begin{center}\n  \\begin{tabular}{l r}\n   \\subfigure[Blocking Probability]{\n    \\resizebox{0.48\\textwidth}{!}{ \n\t    \\includegraphics[width=0.95\\textwidth]{P_bloqueio-eps-converted-to.pdf}\n\t  }\t  \n\t}  \n  \\subfigure[log(Blocking Probability)]{\n    \\resizebox{0.48\\textwidth}{!}{ \n\t  \\includegraphics[width=0.95\\textwidth]{log_P_bloqueio-eps-converted-to.pdf}\n\t  }\n\t}  \n\\end{tabular}\n\\end{center}\n\\vspace{-0.2in}\n\\caption{Blocking probability, $\\frac{1}{\\mu} = 8$  hours, $S = 30$  users, $\\rho=0.8$, blue=centralized, red=distributed versus number of \nlicenses}\n\\label{fig:P_bloq}\n\\vspace{-0.2in}\n\\end{figure}\n\n\n\nFigure \\ref{fig:P_timeout}(a) shows the timeout probability due to congestion $p$ as a function of the link capacity $C$ for  $\\tau=0.01$ and $\\tau=0.05$. \nAs the  capacity  $C$ increases,  $p$ decreases.  When $C = \\infty$ (over-provisioning) we have $p=0$.  Figure \\ref{fig:P_timeout}(a) also shows the significant impact of the timeout detection threshold $\\tau$. When $\\tau=0.05$, a small increase in capacity can reduce $p$\nto zero. When $\\tau=0.01$ it is necessary to double the capacity (from 10 Mbps to 20 Mbps) to achieve the same result. In as $\\tau$ increases, $p$ sharply decreases to zero for small values of $C$.  On the other hand, when $\\tau \\approx 0$  the centralized architecture is infeasible. Roughly speaking, if an application developer wishes to allow the application to be used in different sites with a centralized floating \nlicensing approach and the network capacity is small, the parameter $\\tau$ must  be relaxed.\n\n\n\n\n\nFigure \\ref{fig:P_timeout_X_rho}(b) shows how the timeout probability due to congestion ($p$)  varies as a function of the the utilization factor for different workloads and link \ncapacity ranges.\nWe vary the link capacity in the range of [10,25] (red line) and [1,15] (blue line) adjusting the offered workload accordingly.  Given a target value for $p$, the higher capacity network \n(red line)   can operate at a higher utilization level than the lower capacity network (blue line). \nWe refer to this increase in    supported utilization  due to increased capacity as \\emph{networking statistical multiplexing gain}. One of its consequence is that it is better to have one higher-speed link\ninstead of having n-parallel lower-speed links to carry the same amount of traffic \\cite{pioro2004routing}.\n\n\n\n \n\n\n\n\\begin{figure}[h]\n\\begin{center}\n\\begin{tabular}{cc}\n    \\includegraphics[width=0.48\\textwidth]{P_timeout-eps-converted-to.pdf}\n& \n    \\includegraphics[width=0.48\\textwidth]{P_timeout_X_rho-eps-converted-to.pdf} \\\\\n    (a) & (b)\n    \\end{tabular}\n\\end{center}\n\\caption{Timeout probability due to congestion ($p$) for different values of (a) $\\tau$  (for fixed $\\Lambda=900$ pkts/s) and (b) $\\Lambda$ (for fixed $\\tau=0.01$s). $\\frac{1}{\\mu} = 8$  hours, $\\frac{1}{r} = 120$ s,  $\\frac{1}{M}=1250 $ Bytes.   In figure (b):  \nred line, $\\Lambda = 900$ pkt/s and $C \\in [10,25]$ Mbps; blue line, $\\Lambda = 90$ pkt/s and $C \\in [1,15]$ Mbps.   }\n\\label{fig:P_timeout_X_rho} \\label{fig:P_timeout}\n\\end{figure}\n\n\n\n\n\\begin{figure}[h!]\n\\hspace{-0.25in}\n\\bgroup\n\\setlength\\tabcolsep{0pt}  \\begin{tabular}{cc} \\setlength\\tabcolsep{0pt} \n      \\includegraphics[width=0.55\\textwidth]{3d1-eps-converted-to.pdf} & \\hspace{-0.18in}\n\t  \\includegraphics[width=0.5\\textwidth]{tradeoff_a_b-eps-converted-to.pdf} \\\\\n\t  (a) $s_c$ (centralized architecture) & (b) contour plots  \\\\\n\\end{tabular}\n\\egroup\n\\caption{Graphical solution of optimization problem: (a) $s_c$ as a function of capacity and number of licenses,  (b)  contour plots of $c_c=L+2C'$ (magenta and green lines), $s_c=0.95$ (red curve) and $s_d=0.95$ (blue curve).   ${1}/{\\mu} = {1}/{\\lambda}= 8$  hours, $S = 30$ users, \n$\\frac{1}{\\mu} = 8$  hours, ${1}/{r} = 120$ s, $\\tau = 0.01$ s, ${1}/{M}=1250 $ Bytes, $\\Lambda=900$, $C_0=10$ Mbps.   ``Capacity'' refers to $C=C_0+C'$.}\n\\label{fig:Optimizations1}\n\\end{figure}\n\nFigure \\ref{fig:Optimizations1}(a) shows the centralized probability of success $s_c$ as a function of the  the number of available licenses and link capacity. \nThe success probability approaches one  when both the \nlink capacity and the number of licenses are increased.   Note that unilaterally   over-provisioning the link capacity or the number of licenses is not sufficient in order to achieve high values of $s_c$.  \n\n\n\n\nThe optimization problem described in Section~\\ref{sub:optimization} admits a graphical   solution. We start considering the centralized architecture.   Recall that $C'$ is the marginal capacity added to a link of initial capacity $C_0$ resulting in a link with  capacity $C=C'+C_0$.  Varying the values of $C'$ and $L$, we affect the cost given by~\\eqref{cost1}.   For each value of the cost variable, $c$, we have a corresponding line in the $(L,C)$ plane characterized by $c = \\alpha L + \\beta n (C-C_0)$.  Given a set of  cost values, we characterize a family of parallel lines in the $(L,C)$ plane, where $L=1, 2, \\ldots$ and $C \\ge C_0$.\nThe minimum value of $c$ for which the corresponding line    intersects the  curve associated to the constraint $s_c \\ge s$ corresponds to the optimal centralized solution $c_c^\\star$. In the distributed architecture, let $L^{\\star}$ be the minimum value of $L$ for which the constraint  $s_d \\ge s$ is satisfied.  As in the distributed architecture we assume that licenses and additional state resources are accessed locally, we have  $C'=0$. Therefore,   the optimal distributed solution $c_d^\\star$ occurs at  $(L,C)=(L^{\\star}, C_0)$.      We compare the centralized and distributed solutions and select the one with minimum cost.\n\n\n\nFigures \\ref{fig:Optimizations1}(b),  \\ref{fig:Optimizations2}(a) and \\ref{fig:Optimizations2}(b) \nillustrate the  graphical solution. \nIn all cases the population consists of 30 users, $C_0 = 10$ Mbps and $s=0.95$. When considering distributed solutions, the population is  split  equally between two distinct \nsites.   In \nFigure \\ref{fig:Optimizations1}(b) the cost per license is twice the cost per Mbps, meaning that $L+2C'=c$. \nThe cost curve marked with ``23'' (magenta line) represents a scenario in which $c=23$, i.e., $L+2C'= 23$. The cost curve marked with ``29'' (green line) represents a scenario in which  $c=29$, i.e., \n$L+2C'= 29$. The red curve is a contour plot of the centralized architecture constraint  wherein $s_c=0.95$, and the blue curve is a contour plot of the distributed  architecture constraint  wherein $s_d=0.95$.\nThe  intersection  between a cost line and a constraint curve  \ncorresponding  to the smallest feasible cost  \noccurs at the bottom of Figure~\\ref{fig:Optimizations1}(b).  \nThis means that the distributed architecture is the best choice, $c^{\\star}=c_d^{\\star}=23$, and $L=23$ is the minimum number of licenses that satisfies the SLA requirement. \nTo achieve the same SLA, the cost of the centralized architecture would be 29. \n \n\n\nFigure \\ref{fig:Optimizations2}(a) shows  the graphical solution of the optimization problem when the cost per Megabit/s is five times the cost per \nlicense. In this case the distributed architecture is  again the best solution.  \nThe intersection  between a cost line and a constraint curve  \ncorresponding  to the smallest feasible cost  \noccurs at the bottom of Figure~\\ref{fig:Optimizations2}(a).  At point $(L,C)=(22,10)$ (or, equivalently, $(L,C')=(22,0)$),  the cost line  $L+10C'=c_d^{\\star}$ (magenta line), where $c^{\\star}=c_d^{\\star}=22$, intersects  the distributed architecture constraint given by $s_d=0.95$ (blue line).  \nIn this case, to satisfy the service level  agreement the cost of the centralized architecture would be   $c_c^{\\star}=98$. The communication cost makes the centralized architecture not viable.  \n\n\nFigure \\ref{fig:Optimizations2}(b) shows an example where the centralized architecture outperforms the distributed one.  The cost per license is five times the cost per Megabit/s. In this case, $10L+2C'=c_d^{\\star}$ (magenta line), where $c^{\\star}= c_d^{\\star}=212$, intersects  the red curve associated to the centralized architecture constraint, $s_c=0.95$.  The blue curve corresponding  to the distributed architecture constraint  does not intersect  lines associated to costs smaller than or equal to 230. \n\n\n\nAs our numerical examples indicate, the proposed methodology allows  an efficient,  principled and graphical exploration of different parameter combinations.  The insights obtained from the model   provide a ``bird's-eye view''  perspective of  different available options.   After a set of  options is selected, detailed and computational intensive  simulations are used to choose the preferred one.   \n\n\n\n\n\n\n\\begin{figure}[h!]\n\\begin{center}\n\\bgroup\n\\hspace{-0.1in}\n\\setlength\\tabcolsep{0pt}  \\begin{tabular}{cc} \\setlength\\tabcolsep{0pt} \n      \\includegraphics[width=0.5\\textwidth]{tradeoff_10a_b-eps-converted-to.pdf} & \\hspace{-0.05in}\n\t  \\includegraphics[width=0.5\\textwidth]{tradeoff_a_10b-eps-converted-to.pdf} \\\\\n\t  (a)  $c_c=L+10C'$  & (b)  $c_c=10L+2C'$  \\\\\n\\end{tabular}\n\\egroup\n\\end{center}\n\\vspace{-0.1in}\n\\caption{Graphical views of optimization problem: (a) $c_c=L+10C'$,  (b) $c_c=10L+2C'$.    ${1}/{\\mu} = {1}/{\\lambda}= 8$  hours, $S = 30$ users, \n${1}/{\\mu} = 8$  hours, ${1}/{r} = 120$ s, $\\tau = 0.01$ s, ${1}/{M}=1250 $ Bytes, $\\Lambda=900$, $C_0=10$ Mbps.  ``Capacity'' refers to $C=C_0+C'$. }\n\\label{fig:Optimizations2}\n\\end{figure}\n\n\n\n\n\n\n\n\nThe proposed methodology is a first step in the study of tradeoffs between statistical multiplexing and infrastructure costs in cloud systems.  The analytical model introduced in this paper can be used to investigate the advantages and disadvantages of centralizing signaling servers.  It  allows for what-if analysis of different system parameters, and can be used to explore the state space in a principled way.  \nIn addition, it can also be used to assist practitioners in setting the state renewal timeout  parameter ($\\tau$).  Small values of $\\tau$ will yield frequent premature timeouts whereas  larger values  will delay the release of licenses of applications that  unnecessarily remain  active after a user leaves its desktop or after a crash.   \n\n\n\n\nWe note that in order to obtain a tractable model, we made some simplifying assumptions some of which are discussed below.\n\n\\textbf{Channel model characteristics: } the channel model is one of the building blocks of our framework.  In this paper, we consider an M/M/1 queue to model the channel characteristics.  This model can be easily adjusted and adapted according to the needs, while still maintaining  the general framework.\n\n\\textbf{Network protocol influence: } we do not model specifics of network protocols such as retransmissions or packet prioritization.  Instead, we take a simplifying approach according to which a timeout occurs if a renewal packet experiences   delay larger than the threshold $\\tau$.  The adjustment of the delay-related metrics according to different system characteristics is subject for future work.  \n\n\n\\textbf{Available network infrastructure: } we assume an enterprise scenario in which publicly available cloud infrastructures cannot be used due to privacy and safety issues.   Therefore, the infrastructure must be provisioned and planned by a single authority, which motivates the tradeoffs between infrastructure costs and multiplexing benefits discussed in this paper.  \n\n\n\\section{Conclusions}\n\\label{sec:conclusions}\n\nCloud services are increasingly deployed across multiple and geographically distant sites creating a demand for a holistic performance evaluation before planning \na converged computing-networking cloud service. We analyzed a case study inspired by a real-world oil and gas industry where a floating license service \ncan be distributed among multiple data centers or centralized in a single pool. The centralized case is an example of network-computing cloud service in which\nthe statistical multiplexing advantages of centralization can be overcome by the corresponding increase in communication infrastructure costs.\n\nWe derived an analytical model to evaluate tradeoffs in terms of application requirements, usage patterns and communication costs. The numerical results \nshowed that the best solution depends \non the relation of these several parameters. \nWe believe that this model can serve as a guideline for capacity planning of computing and networks resources of floating \nlicensing applications and can be a starting point for bridging the computing and networks aspects in an integrated manner.\n\n{\n\\bibliographystyle{IEEEtran}\n\\bibliography{eduardo_v8}\n}\n\n\n\n", "itemtype": "equation", "pos": 23413, "prevtext": "\n\n\n\nLet $s_d$ be the probability of success in the  distributed scenario. As the application and the signaling server are in the same cloud\n$p$ is zero. On the other hand, the signaling servers at each pool have less resources than the central server, which  might increase the probability of blocking.\nThen, $s_d$ is given by: \n\n", "index": 27, "text": "\\begin{equation}\ns_d=1-b_d\n\\label{psuccess_distributed}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E14.m1\" class=\"ltx_Math\" alttext=\"s_{d}=1-b_{d}\" display=\"block\"><mrow><msub><mi>s</mi><mi>d</mi></msub><mo>=</mo><mrow><mn>1</mn><mo>-</mo><msub><mi>b</mi><mi>d</mi></msub></mrow></mrow></math>", "type": "latex"}]