[{"file": "1601.05361.tex", "nexttext": "\nwhere $\\mathbf{x}$ is the position, $\\boldsymbol{\\xi}$ is the microscopic velocity, $t$ is the time, $\\mathbf{F}$ is the external force and $m$ is mass of the particles.\nThe above equation gives the time evolution of the distribution function, $f(\\mathbf{x}, \\boldsymbol{\\xi}, t)$, by knowing the collision operator, $\\left(\\partial f/\\partial t\\right)_{\\mathrm{coll}}$, which includes all information about atomic aspects of scattering process of the particles in the gas. \nThe Bhatnagar-Gross-Krook (BGK) collision term~\\cite{bhatnagar1954model},\n\n", "itemtype": "equation", "pos": 7369, "prevtext": "\n\n\\title[Fluid dynamics in porous media with Sailfish]{Fluid dynamics in porous media with Sailfish}\n\n\\author{Rodrigo C. V. Coelho$^{1,2}$, Rodrigo F. Neumann$^{2}$ }\n\\address{$^1$ Instituto de F\\'isica, Universidade Federal do Rio de Janeiro (UFRJ), Caixa Postal 68528, Rio de Janeiro 21941-972, Brazil}\n\\address{$^2$ IBM Research, Av. Pasteur 138 \\& 146, Urca, Rio de Janeiro, CEP 22290-240, Brazil}\n\\ead{\\mailto{rcvcoelho@if.ufrj.br}, \\mailto{rneumann@br.ibm.com}}\n\n\n\\begin{abstract}\nIn this work we show the application of Sailfish to the study of fluid dynamics in porous media.\nSailfish is an open-source software based on the lattice-Boltzmann method.\nThis application of computational fluid dynamics is of particular interest to the oil and gas industry and the subject could be a starting point for an undergraduate or graduate student in physics or engineering.\nWe built artificial samples of porous media with different porosities and used Sailfish to simulate the fluid flow through in order to calculate permeability and tortuosity.\nWe also present a simple way to obtain the specific superficial area of porous media using \\texttt{Python} libraries.\nTo contextualize these concepts, we test the Kozeny--Carman equation, discuss its validity and calculate the Kozeny's constant for our artificial samples.\n\n\\end{abstract}\n\n\n\n\n\\section{Introduction}\n\nA porous medium is characterized by containing pores, i.e. void space, in its interior.\nThese pores can be all connected, as in a sand pack, or not, as in Styrofoam.\nIf the goal is to study the fluid flow in porous media, only those with connected pores must be considered.\nThe understanding of fluid dynamics properties of porous media is particularly relevant to the oil and gas industry, since oil is found in underground porous rocks (reservoirs).\nIt is crucial to estimate the permeability of a rock reservoir to hydrocarbons in order to assist decision-making and oil recovery strategies.\nPermeability can be measured experimentally or calculated as a function of other porous rock properties such as porosity, tortuosity and specific surface area.\nThe most popular empirical relationship use to calculate the permeability from those quantities is the Kozeny--Carman equation~\\cite{kozeny1927kapillare, carman1997fluid}, but there are many other formulas for more specific purposes~\\cite{Xu2008}.\n\nIn this context, computational fluid dynamics (CFD) plays an important role and the Lattice Boltzmann Method (LBM) has many advantages over other methods making it a good choice to address systems with complex geometries.\nLBM is a relatively new CFD technique with increasing popularity over the last twenty years.\nIt was very successful in simulating complex flows, such as fluids with immiscible components, interfacial problems and flows in complex geometries (e.g., in porous media).\nIn recent years, LBM has been extended even to semiclassical~\\cite{coelho14} and relativistic fluids~\\cite{mendoza10}.\nThe advantage over other methods lies in the simplicity of its dynamics, easy handling of complex geometries and, especially, its flexibility for implementation in parallel computing.\nSailfish~\\cite{Januszewski2014} is a open-source LBM/CFD solver that comes with many examples ready to use.\nIt has a simple \\texttt{Python} interface, which takes little to learn and is already optimized for Graphics Processing Units (GPUs).\nIts advantages make it an appropriate choice for the study of flow in porous media, even for beginners in this subject.\n\nIn this work we propose a simple and efficient way to study fluid dynamics in porous media by using Sailfish.\nWe built porous media samples artificially by placing obstacles in random positions allowing them to overlap.\nThere are other models in literature to build artificial porous media.\nMany authors adopt a porous medium made of identical spheres placed in a regular lattice~\\cite{Pan2006,santos05}.\nKoponen, Kataja and Timonen~\\cite{koponen97,koponen96} used a two-dimensional porous media composed by identical squares placed in random positions.\nWe show how to calculate the most important fluid dynamics properties of porous media, in order to analyze the applicability of Kozeny--Carman equation to our artificial samples.\nWe also present an original and simple method to measure the specific surface area (SSA) from a digital rock tomography based on \\texttt{Python} image-processing libraries.\nAll the content of this work was produced with open-source software.\n\nThis paper is organized as follows.\nIn Sec.~\\ref{the-sailfish-sec} an introduction to Sailfish is presented.\nIn Sec.~\\ref{artificial-porous-media} the algorithm used to build artificial samples is explained.\nIn Sec.~\\ref{permeability-sec} we demonstrate how the permeability was calculated using the output from simulation.\nIn Sec.~\\ref{KC-eq-section} we apply the Kozeny--Carman equation to our samples and calculate its Kozeny's constant.\nIn Sec.~\\ref{specific-surface-area} our method to calculate the SSA is presented and tested for a simple case and, in Sec. \\ref{tortusity-sec}, a simple way to calculate the tortuosity from the output data is shown.\nFinally, in Sec. \\ref{conclusion-sec} a discussion about the results and our concluding remarks are provided.\n\n\n\\section{The Sailfish}\n\\label{the-sailfish-sec}\n\nThis section contains a brief introduction to Sailfish~\\cite{Januszewski2014}, the software we used to simulate fluid flow in our artificially-created porous media.\nWe do not intend to provide a tutorial, for a very detailed one can be found at the developer's website~\\footnote{Download Sailfish and see the tutorial at \\url{http://sailfish.us.edu.pl}}, where you can download and follow the instructions to start using it.\nSailfish requires no actual installation step, since the code is written in an interpreted programming language: \\texttt{Python}.\nThe required packages are all enumerated in Sailfish's website.\nA graphics card or GPU is also needed to run the calculations in parallel.\n\nThe main advantage of Sailfish is its ease of use.\nIt comes with many strategic examples that can be run and easily adapted to the needs of the user.\nAs all routines and examples are written in \\texttt{Python}, they are easy to read and write -- as compared to compiled languages like \\texttt{Fortran} and \\texttt{C/C++} -- without compromising the computational performance, for all the time-consuming calculations run in the massively-parallel GPU.\nSailfish offers a high-level programming interface with several built-in functionalities, so that the user only needs to provide simple instructions like the boundary and initial conditions, physical parameters of the fluid and select the LBM relaxation dynamics.\nProgramming general-purpose GPUs is usually a difficult task, but Sailfish hides this complexity away and makes all parallelization behind the scenes~\\cite{Januszewski2014}.\nSimulations in Sailfish can be made interactive which, combined to its high performance, makes it a powerful tool to illustrate hydrodynamic principles in the classroom in real-time.\nWhile a simulation is running in visualization mode, one can add new (solid) obstacles by freehand drawing them with a cursor.\n\nThe LBM~\\cite{mohamad}, in which Sailfish is based, is a numerical method to solve the Boltzmann equation~\\cite{kremer}, that in its finite-difference form is\n\n", "index": 1, "text": "\\begin{equation}\n\\frac{f(\\mathbf{x}+\\boldsymbol{\\xi}\\Delta t, \\boldsymbol{\\xi} + \\frac{\\mathbf{F}}{m} \\Delta t , t + \\Delta t) - f(\\mathbf{x}, \\boldsymbol{\\xi}, t)}{\\Delta t} = \\left(\\frac{\\partial f}{\\partial t}\\right)_{\\mathrm{coll}}, \n\\label{EqBoltzmann}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m1\" class=\"ltx_Math\" alttext=\"\\frac{f(\\mathbf{x}+\\boldsymbol{\\xi}\\Delta t,\\boldsymbol{\\xi}+\\frac{\\mathbf{F}}%&#10;{m}\\Delta t,t+\\Delta t)-f(\\mathbf{x},\\boldsymbol{\\xi},t)}{\\Delta t}=\\left(%&#10;\\frac{\\partial f}{\\partial t}\\right)_{\\mathrm{coll}},\" display=\"block\"><mrow><mrow><mfrac><mrow><mrow><mi>f</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>\ud835\udc31</mi><mo>+</mo><mrow><mi>\ud835\udf43</mi><mo>\u2062</mo><mi mathvariant=\"normal\">\u0394</mi><mo>\u2062</mo><mi>t</mi></mrow></mrow><mo>,</mo><mrow><mi>\ud835\udf43</mi><mo>+</mo><mrow><mfrac><mi>\ud835\udc05</mi><mi>m</mi></mfrac><mo>\u2062</mo><mi mathvariant=\"normal\">\u0394</mi><mo>\u2062</mo><mi>t</mi></mrow></mrow><mo>,</mo><mrow><mi>t</mi><mo>+</mo><mrow><mi mathvariant=\"normal\">\u0394</mi><mo>\u2062</mo><mi>t</mi></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mrow><mi>f</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc31</mi><mo>,</mo><mi>\ud835\udf43</mi><mo>,</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mrow><mi mathvariant=\"normal\">\u0394</mi><mo>\u2062</mo><mi>t</mi></mrow></mfrac><mo>=</mo><msub><mrow><mo>(</mo><mfrac><mrow><mo>\u2202</mo><mo>\u2061</mo><mi>f</mi></mrow><mrow><mo>\u2202</mo><mo>\u2061</mo><mi>t</mi></mrow></mfrac><mo>)</mo></mrow><mi>coll</mi></msub></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.05361.tex", "nexttext": "\nis the simplest and most commonly used in LBM. \nIt assumes that the non-equilibrium function $f(\\mathbf{x}, \\boldsymbol{\\xi}, t)$ tends to the equilibrium function $f^{\\mathrm{eq}}(\\mathbf{x}, \\boldsymbol{\\xi}, t)$ with a characteristic time $\\tau$, called ``relaxation time''. \nIn LBM the position and velocity spaces are discretized as illustrated in Fig. \\ref{discrete-space}. \nThe time step $\\Delta t$, used in \\eref{EqBoltzmann}, is the time for a particle move from its site to the first neighbor site and this time step with the lattice parameter ($a$) form a system of unities called \\textit{lattice units}~\\cite{mohamad}, which can be converted for any other system of unities.\n\\begin{figure}[htb]\n\\center\n\\includegraphics[width=0.5\\linewidth]{figure1.eps}\n\\caption{Discretization of position and velocity spaces using the D2Q9 lattice.}\n\\label{discrete-space}\n\\end{figure}\n\n\n\n\\section{Fluid flow in porous media}\n\\label{basic-comcepts-sec}\n\nThe most relevant quantities related to fluid dynamics in porous media are porosity, tortuosity, surface area and permeability.\nIn this section we define these concepts and relate them using the Kozeny--Carman equation.\n\nWe start with the porosity, that is defined as the fraction $\\phi = V_{\\mathrm{pores}} / V_{\\mathrm{total}}$ of the total volume that is occupied by connected pores.\nNon-connected pores, as in Styrofoam, do not allow flow and, therefore, are out of our scope.\nIn case the medium has both connected and non-connected pores, the volume occupied by the latter must be disregarded.\n\n\\begin{figure}[htb]\n\\center\n\\includegraphics[width=0.5\\linewidth]{figure2.eps}\n\\caption{Example of a fluid streamline for tortuosity calculations.}\n\\label{tort-ex}\n\\end{figure}\nTortuosity~\\cite{Clennell97, sheidegger} is a geometrical figure-of-merit that indicates how much the fluid flow streamlines deviate from straight paths.\nIt is defined as the ratio between the total length along the streamline and its effective length, as depicted in figure~\\ref{tort-ex}.\nNote that $\\tau \\geq 1$.\nIf the streamline is given by a function $f(x)$, as exemplified in figure ~\\ref{tort-ex}, the tortuosity can be calculated as\n\n", "itemtype": "equation", "pos": 8191, "prevtext": "\nwhere $\\mathbf{x}$ is the position, $\\boldsymbol{\\xi}$ is the microscopic velocity, $t$ is the time, $\\mathbf{F}$ is the external force and $m$ is mass of the particles.\nThe above equation gives the time evolution of the distribution function, $f(\\mathbf{x}, \\boldsymbol{\\xi}, t)$, by knowing the collision operator, $\\left(\\partial f/\\partial t\\right)_{\\mathrm{coll}}$, which includes all information about atomic aspects of scattering process of the particles in the gas. \nThe Bhatnagar-Gross-Krook (BGK) collision term~\\cite{bhatnagar1954model},\n\n", "index": 3, "text": "\\begin{equation*}\n\\left(\\frac{\\partial f}{\\partial t}\\right)_{\\mathrm{coll}} = - \\frac{f(\\mathbf{x}, \\boldsymbol{\\xi}, t) - f^{\\mathrm{eq}}(\\mathbf{x}, \\boldsymbol{\\xi}, t)}{\\tau},\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"\\left(\\frac{\\partial f}{\\partial t}\\right)_{\\mathrm{coll}}=-\\frac{f(\\mathbf{x}%&#10;,\\boldsymbol{\\xi},t)-f^{\\mathrm{eq}}(\\mathbf{x},\\boldsymbol{\\xi},t)}{\\tau},\" display=\"block\"><mrow><mrow><msub><mrow><mo>(</mo><mfrac><mrow><mo>\u2202</mo><mo>\u2061</mo><mi>f</mi></mrow><mrow><mo>\u2202</mo><mo>\u2061</mo><mi>t</mi></mrow></mfrac><mo>)</mo></mrow><mi>coll</mi></msub><mo>=</mo><mrow><mo>-</mo><mfrac><mrow><mrow><mi>f</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc31</mi><mo>,</mo><mi>\ud835\udf43</mi><mo>,</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mrow><msup><mi>f</mi><mi>eq</mi></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc31</mi><mo>,</mo><mi>\ud835\udf43</mi><mo>,</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mi>\u03c4</mi></mfrac></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.05361.tex", "nexttext": "\n\nThe internal area of obstacles in contact with the fluid greatly influences the fluid dynamics.\nUltimately, the SSA (or ``surface-to-volume ratio'') is responsible for the strength of surface interaction effects.\nThis figure-of-merit is defined as $s = A_{\\mathrm{obs}} / V_{\\mathrm{obs}}$, where $A_{\\mathrm{obs}}$ is the surface area of obstacles and $V_{\\mathrm{obs}}$ is their total volume.\n\nIn general, permeability is the quantity of greatest interest in the study of flow through porous media.\nIt quantifies how easily a specific fluid passes through the media, i.e, the inverse of a ``flow resistance''.\nIn its simplest formulation, it depends only on the geometry of the medium and the viscosity of the fluid, $\\mu$, and can be calculated using Darcy's law~\\cite{darcy1856determination, whitaker1986flow},\n\n", "itemtype": "equation", "pos": 10557, "prevtext": "\nis the simplest and most commonly used in LBM. \nIt assumes that the non-equilibrium function $f(\\mathbf{x}, \\boldsymbol{\\xi}, t)$ tends to the equilibrium function $f^{\\mathrm{eq}}(\\mathbf{x}, \\boldsymbol{\\xi}, t)$ with a characteristic time $\\tau$, called ``relaxation time''. \nIn LBM the position and velocity spaces are discretized as illustrated in Fig. \\ref{discrete-space}. \nThe time step $\\Delta t$, used in \\eref{EqBoltzmann}, is the time for a particle move from its site to the first neighbor site and this time step with the lattice parameter ($a$) form a system of unities called \\textit{lattice units}~\\cite{mohamad}, which can be converted for any other system of unities.\n\\begin{figure}[htb]\n\\center\n\\includegraphics[width=0.5\\linewidth]{figure1.eps}\n\\caption{Discretization of position and velocity spaces using the D2Q9 lattice.}\n\\label{discrete-space}\n\\end{figure}\n\n\n\n\\section{Fluid flow in porous media}\n\\label{basic-comcepts-sec}\n\nThe most relevant quantities related to fluid dynamics in porous media are porosity, tortuosity, surface area and permeability.\nIn this section we define these concepts and relate them using the Kozeny--Carman equation.\n\nWe start with the porosity, that is defined as the fraction $\\phi = V_{\\mathrm{pores}} / V_{\\mathrm{total}}$ of the total volume that is occupied by connected pores.\nNon-connected pores, as in Styrofoam, do not allow flow and, therefore, are out of our scope.\nIn case the medium has both connected and non-connected pores, the volume occupied by the latter must be disregarded.\n\n\\begin{figure}[htb]\n\\center\n\\includegraphics[width=0.5\\linewidth]{figure2.eps}\n\\caption{Example of a fluid streamline for tortuosity calculations.}\n\\label{tort-ex}\n\\end{figure}\nTortuosity~\\cite{Clennell97, sheidegger} is a geometrical figure-of-merit that indicates how much the fluid flow streamlines deviate from straight paths.\nIt is defined as the ratio between the total length along the streamline and its effective length, as depicted in figure~\\ref{tort-ex}.\nNote that $\\tau \\geq 1$.\nIf the streamline is given by a function $f(x)$, as exemplified in figure ~\\ref{tort-ex}, the tortuosity can be calculated as\n\n", "index": 5, "text": "\\begin{equation}\n\\tau = \\frac{\\int\\!dL}{L_{\\mathrm{eff}}} = \\frac{\\int_0^{L_{\\mathrm{eff}}} \\sqrt{1+\\left(\\frac{\\partial f}{\\partial x}\\right)^2}dx}{L_{\\mathrm{eff}}}.\n\\label{tort-eq}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E2.m1\" class=\"ltx_Math\" alttext=\"\\tau=\\frac{\\int\\!dL}{L_{\\mathrm{eff}}}=\\frac{\\int_{0}^{L_{\\mathrm{eff}}}\\sqrt{%&#10;1+\\left(\\frac{\\partial f}{\\partial x}\\right)^{2}}dx}{L_{\\mathrm{eff}}}.\" display=\"block\"><mrow><mrow><mi>\u03c4</mi><mo>=</mo><mfrac><mrow><mo largeop=\"true\" rspace=\"0.8pt\" symmetric=\"true\">\u222b</mo><mrow><mo>\ud835\udc51</mo><mi>L</mi></mrow></mrow><msub><mi>L</mi><mi>eff</mi></msub></mfrac><mo>=</mo><mfrac><mrow><msubsup><mo largeop=\"true\" symmetric=\"true\">\u222b</mo><mn>0</mn><msub><mi>L</mi><mi>eff</mi></msub></msubsup><mrow><msqrt><mrow><mn>1</mn><mo>+</mo><msup><mrow><mo>(</mo><mfrac><mrow><mo>\u2202</mo><mo>\u2061</mo><mi>f</mi></mrow><mrow><mo>\u2202</mo><mo>\u2061</mo><mi>x</mi></mrow></mfrac><mo>)</mo></mrow><mn>2</mn></msup></mrow></msqrt><mo>\u2062</mo><mrow><mo>\ud835\udc51</mo><mi>x</mi></mrow></mrow></mrow><msub><mi>L</mi><mi>eff</mi></msub></mfrac></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.05361.tex", "nexttext": "\nwhere $\\frac{dP}{dx^j}$ is the pressure gradient along direction $x^j$ and $\\langle u^i \\rangle$ is the average velocity of the fluid in the direction $x^i$.\nNote that, in general, permeability is a $3 \\times 3$ tensor, but in practical cases we are usually interested only in the diagonal components $\\{ \\kappa_{xx}, \\kappa_{yy}, \\kappa_{zz} \\}$.\nThe SI unit for permeability is $m^2$, however, the ``darcy'' $(1\\,\\mathrm{darcy} = 10^{-12}\\,m^2)$ is the most used.\n\nThe four concepts presented previously are related by the Kozeny--Carman equation\n\n", "itemtype": "equation", "pos": 11572, "prevtext": "\n\nThe internal area of obstacles in contact with the fluid greatly influences the fluid dynamics.\nUltimately, the SSA (or ``surface-to-volume ratio'') is responsible for the strength of surface interaction effects.\nThis figure-of-merit is defined as $s = A_{\\mathrm{obs}} / V_{\\mathrm{obs}}$, where $A_{\\mathrm{obs}}$ is the surface area of obstacles and $V_{\\mathrm{obs}}$ is their total volume.\n\nIn general, permeability is the quantity of greatest interest in the study of flow through porous media.\nIt quantifies how easily a specific fluid passes through the media, i.e, the inverse of a ``flow resistance''.\nIn its simplest formulation, it depends only on the geometry of the medium and the viscosity of the fluid, $\\mu$, and can be calculated using Darcy's law~\\cite{darcy1856determination, whitaker1986flow},\n\n", "index": 7, "text": "\\begin{equation}\n\\kappa _{ij} = \\frac{\\mu \\langle u^i \\rangle}{\\frac{dP}{dx^j}} \\, ,\n\\label{darcy-eq}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E3.m1\" class=\"ltx_Math\" alttext=\"\\kappa_{ij}=\\frac{\\mu\\langle u^{i}\\rangle}{\\frac{dP}{dx^{j}}}\\,,\" display=\"block\"><mrow><mrow><msub><mi>\u03ba</mi><mrow><mi>i</mi><mo>\u2062</mo><mi>j</mi></mrow></msub><mo>=</mo><mpadded width=\"+1.7pt\"><mfrac><mrow><mi>\u03bc</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">\u27e8</mo><msup><mi>u</mi><mi>i</mi></msup><mo stretchy=\"false\">\u27e9</mo></mrow></mrow><mfrac><mrow><mi>d</mi><mo>\u2062</mo><mi>P</mi></mrow><mrow><mi>d</mi><mo>\u2062</mo><msup><mi>x</mi><mi>j</mi></msup></mrow></mfrac></mfrac></mpadded></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.05361.tex", "nexttext": "\nwhere $C$ is an empirical and dimensionless constant, known as ``Kozeny's constant''.\nConsider, for instance, a medium composed of identical spheres with diameter $d$, equally distributed in a bed packed~\\cite{kaviany}.\nIn this case, the SSA is $s=A_{\\mathrm{sphere}}/ V_{\\mathrm{sphere}} = 6/d$.\nSo ~\\eref{kcequation} becomes\n\n", "itemtype": "equation", "pos": 12238, "prevtext": "\nwhere $\\frac{dP}{dx^j}$ is the pressure gradient along direction $x^j$ and $\\langle u^i \\rangle$ is the average velocity of the fluid in the direction $x^i$.\nNote that, in general, permeability is a $3 \\times 3$ tensor, but in practical cases we are usually interested only in the diagonal components $\\{ \\kappa_{xx}, \\kappa_{yy}, \\kappa_{zz} \\}$.\nThe SI unit for permeability is $m^2$, however, the ``darcy'' $(1\\,\\mathrm{darcy} = 10^{-12}\\,m^2)$ is the most used.\n\nThe four concepts presented previously are related by the Kozeny--Carman equation\n\n", "index": 9, "text": "\\begin{equation}\n\\kappa = \\frac{1}{C s^2}\\frac{\\phi^3}{(1-\\phi)^2},\n\\label{kcequation}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E4.m1\" class=\"ltx_Math\" alttext=\"\\kappa=\\frac{1}{Cs^{2}}\\frac{\\phi^{3}}{(1-\\phi)^{2}},\" display=\"block\"><mrow><mrow><mi>\u03ba</mi><mo>=</mo><mrow><mfrac><mn>1</mn><mrow><mi>C</mi><mo>\u2062</mo><msup><mi>s</mi><mn>2</mn></msup></mrow></mfrac><mo>\u2062</mo><mfrac><msup><mi>\u03d5</mi><mn>3</mn></msup><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mn>1</mn><mo>-</mo><mi>\u03d5</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup></mfrac></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.05361.tex", "nexttext": "\nNote that the dimensionality is entirely contained within $d^2$, which agrees with the fact that the dimension of $\\kappa$ is \\textit{length-squared}.\nThe Kozeny--Carman is not the only existing permeability-porosity relationship~\\cite{Xu2008}, but it works fairly well for granular beds as in our case.\n\n\\subsection{Artificial porous media}\n\\label{artificial-porous-media}\n\nIn this section we describe the algorithm we developed to build artificial samples.\nAn object-oriented implementation example for such algorithm, written in \\texttt{Python}, is available as a Supplementary Material.\nOur intention was to produce a more realistic porous medium than the usual bed packed, but with more controllable parameters than the real samples digitized from rock tomography.\nIn this way, we can, for instance, relate the geometry of the obstacles to permeability.\n\nThe input parameters for the algorithm are: the length of obstacles, the length of the sample and the target porosity.\nThe obstacle's shape is determined by the equation of a spheroid with radii $\\{ r_x, r_y, r_z \\}$ centered at $(x_c, y_c, z_c)$.\nThe samples are rectangular parallelepipeds, for which three lengths $\\{ L_x, L_y, L_z \\}$ are required as inputs.\nThe last input is the target porosity $(\\phi_{\\mathrm{t}})$, that is the desired porosity for the sample within a tolerance $\\varepsilon$.\n\nGiven these input parameters, the algorithm builds a sample by placing obstacles in random positions, one at a time.\nAfter creating an obstacle, the algorithm checks if the target porosity has been reached.\nIf not, another obstacle is added.\nThe algorithm stops when $|\\phi-\\phi_{\\mathrm{t}}| \\leq \\varepsilon$, as depicted in figure ~\\ref{artificial-fluxogram}.\n\\begin{figure}[htb]\n\\center\n\\includegraphics[width=0.8\\linewidth]{figure3.eps}\n\\caption{Flowchart of the algorithm used to generate artificial porous media samples.}\n\\label{artificial-fluxogram}\n\\end{figure}\n\nFor our simulations, we used samples with $208^3$ nodes, spherical obstacles with diameters between $d = 12$ and $d = 30$ and porosities in the range $0.2 \\leq \\phi \\leq 0.4$.\nThe number of nodes $(\\sim 9 \\times 10^6)$ was limited by the available GPU memory.\nIn figure ~\\ref{artificial-blocs-por}, we see some slices of artificial samples generated by our algorithm side-by-side with slices of real digitized rock tomographies for comparison.\nThese artificial samples have the same obstacle diameter $(d=20)$ but different porosities: $0.2$, $0.3$ and $0.4$.\nSince the spheres are allowed to overlap, they form more complex structures that are very close to those observed in real porous media.\nThis leads to more realistic simulations of fluid flow.\n\\begin{figure}[htb]\n\\center\n\\includegraphics[width=\\linewidth]{figure4.eps}\n\\caption{Comparison between slices of our artificial samples and of real rocks taken from the literature~\\cite{rabbani14}.\nThe artificial media were built using spherical obstacles with diameter of 20 nodes and with target porosity as indicated in each figure.}\n\\label{artificial-blocs-por}\n\\end{figure}\n\n\n\\subsection{Permeability}\n\\label{permeability-sec}\n\nThe two main methods for inducing fluid flow in a porous medium using Sailfish are: by setting a pressure difference across the sample or a body force acting on every fluid node.\nAlthough the pressure method is closer to what is done in experiments, we observed that equilibrium is reached much faster with the force method.\nThis happens because all points of the fluid feel the driving force at the same time when using the force method, instead of by propagation of shock waves as in the pressure method.\nIn order to detect when equilibrium is achieved in our simulations, we calculate $\\left \\vert \\vert\\boldsymbol{u}_{\\mathrm{new}}\\vert - \\vert\\boldsymbol{u}_{\\mathrm{old}}\\vert \\right \\vert /\\vert\\boldsymbol{u}_{\\mathrm{new}}\\vert$ at every time step for every point of the fluid and, when the maximum value of this quantity is less than a given threshold, the simulation stops.\nWe found $5 \\times 10^{-7}$ to be sufficient for our purposes.\n\nThe permeability is calculated using Darcy's law but, as it assumes a pressure gradient instead of a body force, we modify it using the relation $\\frac{dP}{dx^j} dx^j = F_j/A_j$, where $F_j$ is the body force along direction $x^j$ and $A_j$ is the cross-sectional area of the fluid at the boundary where the pressure is applied.\nThe cross-sectional area of the fluid is $\\phi$ times the total area.\nTherefore, given a force density $\\mathbf{f} = f_x \\mathbf{i}$, Darcy's law becomes\n\n", "itemtype": "equation", "pos": 12667, "prevtext": "\nwhere $C$ is an empirical and dimensionless constant, known as ``Kozeny's constant''.\nConsider, for instance, a medium composed of identical spheres with diameter $d$, equally distributed in a bed packed~\\cite{kaviany}.\nIn this case, the SSA is $s=A_{\\mathrm{sphere}}/ V_{\\mathrm{sphere}} = 6/d$.\nSo ~\\eref{kcequation} becomes\n\n", "index": 11, "text": "\\begin{equation}\n\\kappa = \\frac{d^2}{36 C}\\frac{\\phi^3}{(1-\\phi)^2}.\n\\label{kc-spheres}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E5.m1\" class=\"ltx_Math\" alttext=\"\\kappa=\\frac{d^{2}}{36C}\\frac{\\phi^{3}}{(1-\\phi)^{2}}.\" display=\"block\"><mrow><mrow><mi>\u03ba</mi><mo>=</mo><mrow><mfrac><msup><mi>d</mi><mn>2</mn></msup><mrow><mn>36</mn><mo>\u2062</mo><mi>C</mi></mrow></mfrac><mo>\u2062</mo><mfrac><msup><mi>\u03d5</mi><mn>3</mn></msup><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mn>1</mn><mo>-</mo><mi>\u03d5</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup></mfrac></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.05361.tex", "nexttext": "\nwhich is the equation use to calculate permeability.\n\nSince permeability, porosity and viscosity are not velocity-dependent, we expect the applied force $f_x$ and the mean velocity $v_x = \\langle u^x \\rangle$ to be proportional to each other.\nWe tested this by taking an artificial sample with porosity $\\phi = 0.3$, obstacles with diameters $d = 16$ nodes and using it as input for fluid flow simulations with different driving forces.\nThe fluid had viscosity $\\mu=0.01$ in lattice units.\nThe result is shown is figure ~\\ref{VxF}.\nWe see that the function $v_x = \\alpha f_x$ fits well the simulated data points, with a proportionality constant of $\\alpha = (26.67 \\pm 0.02)$ in lattice units.\nUsing ~\\eref{darcy-force}, we determined the permeability of the sample to be $\\kappa = (8.001 \\pm 0.006) \\times 10^{-2}$ in lattice units.\n\\begin{figure}[htb]\n\\center\n\\includegraphics[width=0.5\\linewidth]{figure5.eps}\n\\caption{Proportionality between the mean velocity and the applied force for a given artificial sample with $\\phi =0.30$ and $d=16$.}\n\\label{VxF}\n\\end{figure}\n\n\n\n\\subsection{The Kozeny--Carman equation}\n\\label{KC-eq-section}\n\nWe calculated the permeability using ~\\eref{darcy-force} and estimated the Kozeny's constant of the artificial porous media samples created using the method described in Section~\\ref{artificial-porous-media}.\nIn other to determine the individual contributions from porosity and obstacle dimension to the permeability, we built 210 samples with $208^3$ nodes: 10 obstacle diameters $d \\in [12, 30]$ and 21 porosities $\\phi \\in [0.2, 0.4]$, for each diameter.\nThe fluid viscosity was $0.01$ and the external force, $f_x = 10^{-5}$.\nThe results are shown in figure ~\\ref{perm-fit}.\nOne sees that permeability increases with porosity for a given obstacle diameter.\nAnalogously, for a given porosity, permeability also increases with obstacle diameter.\nNext, we investigate the suitability of the Kozeny--Carman equation to describe our data.\n\nEquation~\\eref{kc-spheres} tells us that permeability is proportional to $d^2$ or, in other words, that there is a scale-law involving obstacle dimensions and permeability.\nIn order to turn permeability into a scale-free non-dimensional quantity, we calculate $\\kappa/d^2$, and confirm that all points fall (despite fluctiations) within the same curve (see figure ~\\ref{perm-fit-scaled}).\nWe fit the function\n\n", "itemtype": "equation", "pos": 17323, "prevtext": "\nNote that the dimensionality is entirely contained within $d^2$, which agrees with the fact that the dimension of $\\kappa$ is \\textit{length-squared}.\nThe Kozeny--Carman is not the only existing permeability-porosity relationship~\\cite{Xu2008}, but it works fairly well for granular beds as in our case.\n\n\\subsection{Artificial porous media}\n\\label{artificial-porous-media}\n\nIn this section we describe the algorithm we developed to build artificial samples.\nAn object-oriented implementation example for such algorithm, written in \\texttt{Python}, is available as a Supplementary Material.\nOur intention was to produce a more realistic porous medium than the usual bed packed, but with more controllable parameters than the real samples digitized from rock tomography.\nIn this way, we can, for instance, relate the geometry of the obstacles to permeability.\n\nThe input parameters for the algorithm are: the length of obstacles, the length of the sample and the target porosity.\nThe obstacle's shape is determined by the equation of a spheroid with radii $\\{ r_x, r_y, r_z \\}$ centered at $(x_c, y_c, z_c)$.\nThe samples are rectangular parallelepipeds, for which three lengths $\\{ L_x, L_y, L_z \\}$ are required as inputs.\nThe last input is the target porosity $(\\phi_{\\mathrm{t}})$, that is the desired porosity for the sample within a tolerance $\\varepsilon$.\n\nGiven these input parameters, the algorithm builds a sample by placing obstacles in random positions, one at a time.\nAfter creating an obstacle, the algorithm checks if the target porosity has been reached.\nIf not, another obstacle is added.\nThe algorithm stops when $|\\phi-\\phi_{\\mathrm{t}}| \\leq \\varepsilon$, as depicted in figure ~\\ref{artificial-fluxogram}.\n\\begin{figure}[htb]\n\\center\n\\includegraphics[width=0.8\\linewidth]{figure3.eps}\n\\caption{Flowchart of the algorithm used to generate artificial porous media samples.}\n\\label{artificial-fluxogram}\n\\end{figure}\n\nFor our simulations, we used samples with $208^3$ nodes, spherical obstacles with diameters between $d = 12$ and $d = 30$ and porosities in the range $0.2 \\leq \\phi \\leq 0.4$.\nThe number of nodes $(\\sim 9 \\times 10^6)$ was limited by the available GPU memory.\nIn figure ~\\ref{artificial-blocs-por}, we see some slices of artificial samples generated by our algorithm side-by-side with slices of real digitized rock tomographies for comparison.\nThese artificial samples have the same obstacle diameter $(d=20)$ but different porosities: $0.2$, $0.3$ and $0.4$.\nSince the spheres are allowed to overlap, they form more complex structures that are very close to those observed in real porous media.\nThis leads to more realistic simulations of fluid flow.\n\\begin{figure}[htb]\n\\center\n\\includegraphics[width=\\linewidth]{figure4.eps}\n\\caption{Comparison between slices of our artificial samples and of real rocks taken from the literature~\\cite{rabbani14}.\nThe artificial media were built using spherical obstacles with diameter of 20 nodes and with target porosity as indicated in each figure.}\n\\label{artificial-blocs-por}\n\\end{figure}\n\n\n\\subsection{Permeability}\n\\label{permeability-sec}\n\nThe two main methods for inducing fluid flow in a porous medium using Sailfish are: by setting a pressure difference across the sample or a body force acting on every fluid node.\nAlthough the pressure method is closer to what is done in experiments, we observed that equilibrium is reached much faster with the force method.\nThis happens because all points of the fluid feel the driving force at the same time when using the force method, instead of by propagation of shock waves as in the pressure method.\nIn order to detect when equilibrium is achieved in our simulations, we calculate $\\left \\vert \\vert\\boldsymbol{u}_{\\mathrm{new}}\\vert - \\vert\\boldsymbol{u}_{\\mathrm{old}}\\vert \\right \\vert /\\vert\\boldsymbol{u}_{\\mathrm{new}}\\vert$ at every time step for every point of the fluid and, when the maximum value of this quantity is less than a given threshold, the simulation stops.\nWe found $5 \\times 10^{-7}$ to be sufficient for our purposes.\n\nThe permeability is calculated using Darcy's law but, as it assumes a pressure gradient instead of a body force, we modify it using the relation $\\frac{dP}{dx^j} dx^j = F_j/A_j$, where $F_j$ is the body force along direction $x^j$ and $A_j$ is the cross-sectional area of the fluid at the boundary where the pressure is applied.\nThe cross-sectional area of the fluid is $\\phi$ times the total area.\nTherefore, given a force density $\\mathbf{f} = f_x \\mathbf{i}$, Darcy's law becomes\n\n", "index": 13, "text": "\\begin{equation}\n\\kappa = \\frac{\\mu v_x \\phi}{f_x},\n\\label{darcy-force}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E6.m1\" class=\"ltx_Math\" alttext=\"\\kappa=\\frac{\\mu v_{x}\\phi}{f_{x}},\" display=\"block\"><mrow><mrow><mi>\u03ba</mi><mo>=</mo><mfrac><mrow><mi>\u03bc</mi><mo>\u2062</mo><msub><mi>v</mi><mi>x</mi></msub><mo>\u2062</mo><mi>\u03d5</mi></mrow><msub><mi>f</mi><mi>x</mi></msub></mfrac></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.05361.tex", "nexttext": "\nto the data points, with $C$ (Kozeny's constant) as the free parameter.\nIts value was determined to be $C =  3.18 \\pm 0.02$.\nAs the fit uncertainty represents less than $1\\%$ of the main value, we consider ~\\eref{KC-simp} to be in good agreement with our simulated data points.\n\nFor simplicity, some approximations were made while fitting ~\\eref{KC-simp} to the data points.\nThe obstacle diameter $d$ is taken as the \\textit{theoretical} diameter but the \\textit{effective} one might be slightly different due to the ``digital'' nature of the spheres, i.e., being composed of cubic pixels (see figure ~\\ref{sphere-pixels}).\nAlso, we used the SSA of non-overlapping spheres, $s=6/d$, although we allow the spheres to overlap.\nIn the next sections we present an analysis of the impact of such approximations.\n\nDespite those simplifications, the value we obtained for Kozeny's constant is consistent with previously published values in the literature.\nFor instance, $C=5$ for a bed packed of non-overlapping spheres~\\cite{Xu2008} and, typically, between $2.2$ and $8.9$ for a fibrous media~\\cite{Yazdchi2011}.\n\n\\begin{figure}[htb]\n\\centering\n\\begin{subfigure}[h]{0.49\\textwidth}\n  \\caption{\\hfill~}\n  \\includegraphics[width=\\columnwidth]{figure6.eps}\n  \\label{perm-fit}\n\\end{subfigure}\n\\begin{subfigure}[h]{0.49\\textwidth}\n  \\caption{\\hfill~}\n  \\includegraphics[width=\\columnwidth]{figure7.eps}\n  \\label{perm-fit-scaled}\n\\end{subfigure}\n\\caption{Permeability dependence on porosity and obstacle diameter.\n(\\subref{perm-fit}) Permeability as a function of porosity for several obstacle diameters.\n(\\subref{perm-fit-scaled}) Non-dimensional permeability as a function of porosity for several obstacle diameters.\nThe curve fit is given by ~\\eref{KC-simp} with $C =  3.18 \\pm 0.02$. }\n\\label{fig:permeability}\n\\end{figure}\n\n\\subsection{Specific superficial area}\n\\label{specific-surface-area}\n\nWith the increasing popularization of Digital Rock Physics~\\cite{andra2013digital-I, andra2013digital-II}, some recent works proposed new techniques to calculate the SSA~\\cite{rabbani14}, but they are still quite complex and indirect.\nMeasuring the SSA of porous rocks experimentally is a hard task~\\cite{lowell12} but it is important to understand the rock's properties~\\cite{Suvachittanont96}.\nWe propose a methodology to calculate the SSA using widely-available \\texttt{Python} libraries for image-processing.\nThe advantage of our method is that it provides a visual interpretation of what is being calculated, making it simple enough to be understood and applied by beginners.\n\nTo calculate the SSA of a digital rock sample, we use the ``binary\\_erosion'' method of the SciPy library~\\footnote{See \\url{http://www.scipy-lectures.org/advanced/image_processing/}}.\nThis operation \\textit{erodes} the image by removing a layer of pixels at the rock/pore boundary.\nWhen the eroded image is subtracted from the original, what remains are the pixels at the surface, which allows us to calculate the SSA using its basic definition.\nA \\texttt{Python} implementation example is provided in the Supplementary Material section.\n\nThe first application of this method is a simple problem with analytical solution that consists in calculating the SSA of a single sphere for different radii.\nIn figure ~\\ref{area-sphere}, we see the results for radii ranging from $5$ to $70$ compared to the analytical solution, $s=3/R$.\nWe see that the data follows the same behavior of the analytical curve, but with a small discrepancy that vanishes as the radius increases.\nThis difference is due to a limitation in the spatial resolution that all digital images are subjected to.\nIn figure ~\\ref{sphere-pixels} we see three slices of spheres with different radii.\nThe sphere with $R=5$ is far from a spheroidal shape, while that with $R=70$ is much closer.\nThe better the spatial resolution, the more accurate is the proposed methodology.\nHowever, since the available GPU memory is limited, we cannot use arbitrarily large sample sizes to achieve higher resolutions.\n\n\\begin{figure}[htb]\n\\centering\n\\begin{subfigure}[h]{0.5\\textwidth}\n  \\caption{\\hfill~}\n  \\includegraphics[width=\\columnwidth]{figure8.eps}\n  \\label{area-sphere}\n\\end{subfigure}\n\\begin{subfigure}[h]{0.6\\textwidth}\n  \\caption{\\hfill~}\n  \\includegraphics[width=\\columnwidth]{figure9.eps}\n  \\label{sphere-pixels}\n\\end{subfigure}\n\\caption{Specific surface area calculated according to the method in Sec.~\\ref{specific-surface-area}.\n(\\subref{area-sphere}) Specific surface area for a single sphere as a function of radius, compared to the analytical expression.\nThe inset shows a slice of a sphere with $R=70$ and its surface area in red.\n(\\subref{sphere-pixels}) Slices at the equator of digital spheres with different radii.\nThe larger the radii, the closer the figure gets to a spherical shape.}\n\\label{fig:SSA1}\n\\end{figure}\n\nAfter this simple, but revealing, example we calculated the SSA for our porous media samples.\nfigure~\\ref{surface0_30} shows the surface of the obstacles, that is, the outermost layer isolated using the erosion operation.\nWe clearly see the contour of the overlapped spheres and some partially filled circles, due to the finite resolution issue.\nIn figure ~\\ref{area-por} we show the SSA obtained as a result of our method for 21 samples with $d=20$ and different porosities.\nThe SSA clearly depends on porosity, which was not considered in our previous calculation of the Kozeny's constant.\nThis dependence occurs due to obstacles being able to overlap~\\cite{koponen97}, which changes their shape to non-spherical.\nIf the spheres were isolated from each other, as in a close-packed structure, the SSA would be $s=3/R$ as for a single sphere.\n\n\\begin{figure}[htb]\n\\centering\n\\begin{subfigure}[h]{0.49\\textwidth}\n  \\caption{\\hfill~}\n  \\includegraphics[width=\\columnwidth]{figure10.eps}\n  \\label{surface0_30}\n\\end{subfigure}\n\\begin{subfigure}[h]{0.49\\textwidth}\n  \\caption{\\hfill~}\n  \\includegraphics[width=\\columnwidth]{figure11.eps}\n  \\label{area-por}\n\\end{subfigure}\n\\caption{Specific surface are for porous media built using $d=20$ nodes as obstacle diameter.\n(\\subref{surface0_30}) A slice showing the SSA of an artificial porous media sample with $\\phi=0.3$.\n(\\subref{area-por}) Specific surface area as a function of porosity for a given obstacle diameter.}\n\\label{fig:SSA2}\n\\end{figure}\n\n\\subsection{Tortuosity}\n\\label{tortusity-sec}\n\nIn general, is difficult to calculate tortuosity using its basic definition, ~\\eref{tort-eq}, for one would have to know exactly the central streamline.\nHowever, if one has the velocity field, there is an easier way to perform this calculation.\nIt has been shown~\\cite{koponen96} that ~\\eref{tort-eq} is equivalent to\n\n", "itemtype": "equation", "pos": 19797, "prevtext": "\nwhich is the equation use to calculate permeability.\n\nSince permeability, porosity and viscosity are not velocity-dependent, we expect the applied force $f_x$ and the mean velocity $v_x = \\langle u^x \\rangle$ to be proportional to each other.\nWe tested this by taking an artificial sample with porosity $\\phi = 0.3$, obstacles with diameters $d = 16$ nodes and using it as input for fluid flow simulations with different driving forces.\nThe fluid had viscosity $\\mu=0.01$ in lattice units.\nThe result is shown is figure ~\\ref{VxF}.\nWe see that the function $v_x = \\alpha f_x$ fits well the simulated data points, with a proportionality constant of $\\alpha = (26.67 \\pm 0.02)$ in lattice units.\nUsing ~\\eref{darcy-force}, we determined the permeability of the sample to be $\\kappa = (8.001 \\pm 0.006) \\times 10^{-2}$ in lattice units.\n\\begin{figure}[htb]\n\\center\n\\includegraphics[width=0.5\\linewidth]{figure5.eps}\n\\caption{Proportionality between the mean velocity and the applied force for a given artificial sample with $\\phi =0.30$ and $d=16$.}\n\\label{VxF}\n\\end{figure}\n\n\n\n\\subsection{The Kozeny--Carman equation}\n\\label{KC-eq-section}\n\nWe calculated the permeability using ~\\eref{darcy-force} and estimated the Kozeny's constant of the artificial porous media samples created using the method described in Section~\\ref{artificial-porous-media}.\nIn other to determine the individual contributions from porosity and obstacle dimension to the permeability, we built 210 samples with $208^3$ nodes: 10 obstacle diameters $d \\in [12, 30]$ and 21 porosities $\\phi \\in [0.2, 0.4]$, for each diameter.\nThe fluid viscosity was $0.01$ and the external force, $f_x = 10^{-5}$.\nThe results are shown in figure ~\\ref{perm-fit}.\nOne sees that permeability increases with porosity for a given obstacle diameter.\nAnalogously, for a given porosity, permeability also increases with obstacle diameter.\nNext, we investigate the suitability of the Kozeny--Carman equation to describe our data.\n\nEquation~\\eref{kc-spheres} tells us that permeability is proportional to $d^2$ or, in other words, that there is a scale-law involving obstacle dimensions and permeability.\nIn order to turn permeability into a scale-free non-dimensional quantity, we calculate $\\kappa/d^2$, and confirm that all points fall (despite fluctiations) within the same curve (see figure ~\\ref{perm-fit-scaled}).\nWe fit the function\n\n", "index": 15, "text": "\\begin{equation}\n\\frac{\\kappa}{d^2} = \\frac{1}{36 C}\\frac{\\phi^3}{(1-\\phi)^2}\n\\label{KC-simp}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E7.m1\" class=\"ltx_Math\" alttext=\"\\frac{\\kappa}{d^{2}}=\\frac{1}{36C}\\frac{\\phi^{3}}{(1-\\phi)^{2}}\" display=\"block\"><mrow><mfrac><mi>\u03ba</mi><msup><mi>d</mi><mn>2</mn></msup></mfrac><mo>=</mo><mrow><mfrac><mn>1</mn><mrow><mn>36</mn><mo>\u2062</mo><mi>C</mi></mrow></mfrac><mo>\u2062</mo><mfrac><msup><mi>\u03d5</mi><mn>3</mn></msup><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mn>1</mn><mo>-</mo><mi>\u03d5</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup></mfrac></mrow></mrow></math>", "type": "latex"}, {"file": "1601.05361.tex", "nexttext": "\nwhere $|\\boldsymbol{u}|$ is the modulus of local velocity, $u^j$ is the local velocity along the direction of flow $x^j$ and $\\langle \\cdot \\rangle$ represents a spatial average.\nThis method has been extensively tested~\\cite{matyka12} and its results agree with theoretical predictions.\n\nThe tortuosity was calculated using the aforementioned method for samples with $d=20$, as in figure ~\\ref{tort-por}.\nWe found a linear relationship between $\\tau$ and $\\phi$ in this range of porosities, despite all the noise, similar to previous reports in the literature~\\cite{koponen96,koponen97}.\nWe adjusted a linear function to the data points and obtained $\\tau(\\phi) = 1.79 - 1.08 \\phi$.\n\\begin{figure}[htb]\n\\center\n\\includegraphics[width=0.5\\linewidth]{figure12.eps}\n\\caption{Relationship between tortuosity and porosity for samples with obstacle diameter $d=20$.}\n\\label{tort-por}\n\\end{figure}\n\n\n\n\\section{Conclusion}\n\\label{conclusion-sec}\n\nThis present article had two goals: (i) constructing an algorithm to build artificial porous media samples and (ii) presenting how the main properties of porous media are calculate using the output from LBM simulations.\nThe first goal was addressed in Sec.~\\ref{artificial-porous-media}.\nIdentical spheroidal obstacles were placed in random positions (allowing overlap), creating structures similar to those observed in real rock samples, as exemplified in figure~\\ref{artificial-porous-media}.\n\nTo achieve the second goal, we developed the following analysis.\nIn Sec.~\\ref{permeability-sec} we calculated the permeability of a particular sample using Darcy's law and verified that the drift velocity is linear to the external force.\nIn Sec.~\\ref{KC-eq-section} we investigated whether the Kozeny--Carman equation applies to the permeability-porosity relationship of our samples, obtaining a good agreement as seen in figure ~\\ref{perm-fit-scaled}.\nAlthough we allowed obstacles to overlap in our artificial samples, destroying their otherwise spherical shape, figure ~\\ref{perm-fit} shows that permeability still depends on the obstacle diameter, which allowed us to use a scale-law leading to figure ~\\ref{perm-fit-scaled}.\nIn Sec.~\\ref{specific-surface-area}, we developed our technique for calculating the specific surface area in digital samples, tested it on a single sphere for different radii and obtained good agreement to the analytic solution for big radii.\nIn Sec.~\\ref{tortusity-sec} we presented a simple method to calculate tortuosity from the velocity field of the fluid.\n\nSailfish is a powerful LBM solver with many features that are out of the scope of this work.\nMore complex flows can be simulated in porous media using Sailfish, such as multiphase~\\cite{Huang11} and turbulent flows~\\cite{Ren16}.\nOne can also use Sailfish and the techniques described here to perform fluid dynamics studies inside fractures, which is another interesting subject for the oil and gas industry.\nThe relationship between SSA and porosity in porous media is yet another interesting subject for future works~\\cite{koponen97}.\n\n\\ack\nR.C.V. Coelho thanks CNPq for financial support.\n\n\\section*{References}\n\\bibliography{reference}\n\n\n", "itemtype": "equation", "pos": 26623, "prevtext": "\nto the data points, with $C$ (Kozeny's constant) as the free parameter.\nIts value was determined to be $C =  3.18 \\pm 0.02$.\nAs the fit uncertainty represents less than $1\\%$ of the main value, we consider ~\\eref{KC-simp} to be in good agreement with our simulated data points.\n\nFor simplicity, some approximations were made while fitting ~\\eref{KC-simp} to the data points.\nThe obstacle diameter $d$ is taken as the \\textit{theoretical} diameter but the \\textit{effective} one might be slightly different due to the ``digital'' nature of the spheres, i.e., being composed of cubic pixels (see figure ~\\ref{sphere-pixels}).\nAlso, we used the SSA of non-overlapping spheres, $s=6/d$, although we allow the spheres to overlap.\nIn the next sections we present an analysis of the impact of such approximations.\n\nDespite those simplifications, the value we obtained for Kozeny's constant is consistent with previously published values in the literature.\nFor instance, $C=5$ for a bed packed of non-overlapping spheres~\\cite{Xu2008} and, typically, between $2.2$ and $8.9$ for a fibrous media~\\cite{Yazdchi2011}.\n\n\\begin{figure}[htb]\n\\centering\n\\begin{subfigure}[h]{0.49\\textwidth}\n  \\caption{\\hfill~}\n  \\includegraphics[width=\\columnwidth]{figure6.eps}\n  \\label{perm-fit}\n\\end{subfigure}\n\\begin{subfigure}[h]{0.49\\textwidth}\n  \\caption{\\hfill~}\n  \\includegraphics[width=\\columnwidth]{figure7.eps}\n  \\label{perm-fit-scaled}\n\\end{subfigure}\n\\caption{Permeability dependence on porosity and obstacle diameter.\n(\\subref{perm-fit}) Permeability as a function of porosity for several obstacle diameters.\n(\\subref{perm-fit-scaled}) Non-dimensional permeability as a function of porosity for several obstacle diameters.\nThe curve fit is given by ~\\eref{KC-simp} with $C =  3.18 \\pm 0.02$. }\n\\label{fig:permeability}\n\\end{figure}\n\n\\subsection{Specific superficial area}\n\\label{specific-surface-area}\n\nWith the increasing popularization of Digital Rock Physics~\\cite{andra2013digital-I, andra2013digital-II}, some recent works proposed new techniques to calculate the SSA~\\cite{rabbani14}, but they are still quite complex and indirect.\nMeasuring the SSA of porous rocks experimentally is a hard task~\\cite{lowell12} but it is important to understand the rock's properties~\\cite{Suvachittanont96}.\nWe propose a methodology to calculate the SSA using widely-available \\texttt{Python} libraries for image-processing.\nThe advantage of our method is that it provides a visual interpretation of what is being calculated, making it simple enough to be understood and applied by beginners.\n\nTo calculate the SSA of a digital rock sample, we use the ``binary\\_erosion'' method of the SciPy library~\\footnote{See \\url{http://www.scipy-lectures.org/advanced/image_processing/}}.\nThis operation \\textit{erodes} the image by removing a layer of pixels at the rock/pore boundary.\nWhen the eroded image is subtracted from the original, what remains are the pixels at the surface, which allows us to calculate the SSA using its basic definition.\nA \\texttt{Python} implementation example is provided in the Supplementary Material section.\n\nThe first application of this method is a simple problem with analytical solution that consists in calculating the SSA of a single sphere for different radii.\nIn figure ~\\ref{area-sphere}, we see the results for radii ranging from $5$ to $70$ compared to the analytical solution, $s=3/R$.\nWe see that the data follows the same behavior of the analytical curve, but with a small discrepancy that vanishes as the radius increases.\nThis difference is due to a limitation in the spatial resolution that all digital images are subjected to.\nIn figure ~\\ref{sphere-pixels} we see three slices of spheres with different radii.\nThe sphere with $R=5$ is far from a spheroidal shape, while that with $R=70$ is much closer.\nThe better the spatial resolution, the more accurate is the proposed methodology.\nHowever, since the available GPU memory is limited, we cannot use arbitrarily large sample sizes to achieve higher resolutions.\n\n\\begin{figure}[htb]\n\\centering\n\\begin{subfigure}[h]{0.5\\textwidth}\n  \\caption{\\hfill~}\n  \\includegraphics[width=\\columnwidth]{figure8.eps}\n  \\label{area-sphere}\n\\end{subfigure}\n\\begin{subfigure}[h]{0.6\\textwidth}\n  \\caption{\\hfill~}\n  \\includegraphics[width=\\columnwidth]{figure9.eps}\n  \\label{sphere-pixels}\n\\end{subfigure}\n\\caption{Specific surface area calculated according to the method in Sec.~\\ref{specific-surface-area}.\n(\\subref{area-sphere}) Specific surface area for a single sphere as a function of radius, compared to the analytical expression.\nThe inset shows a slice of a sphere with $R=70$ and its surface area in red.\n(\\subref{sphere-pixels}) Slices at the equator of digital spheres with different radii.\nThe larger the radii, the closer the figure gets to a spherical shape.}\n\\label{fig:SSA1}\n\\end{figure}\n\nAfter this simple, but revealing, example we calculated the SSA for our porous media samples.\nfigure~\\ref{surface0_30} shows the surface of the obstacles, that is, the outermost layer isolated using the erosion operation.\nWe clearly see the contour of the overlapped spheres and some partially filled circles, due to the finite resolution issue.\nIn figure ~\\ref{area-por} we show the SSA obtained as a result of our method for 21 samples with $d=20$ and different porosities.\nThe SSA clearly depends on porosity, which was not considered in our previous calculation of the Kozeny's constant.\nThis dependence occurs due to obstacles being able to overlap~\\cite{koponen97}, which changes their shape to non-spherical.\nIf the spheres were isolated from each other, as in a close-packed structure, the SSA would be $s=3/R$ as for a single sphere.\n\n\\begin{figure}[htb]\n\\centering\n\\begin{subfigure}[h]{0.49\\textwidth}\n  \\caption{\\hfill~}\n  \\includegraphics[width=\\columnwidth]{figure10.eps}\n  \\label{surface0_30}\n\\end{subfigure}\n\\begin{subfigure}[h]{0.49\\textwidth}\n  \\caption{\\hfill~}\n  \\includegraphics[width=\\columnwidth]{figure11.eps}\n  \\label{area-por}\n\\end{subfigure}\n\\caption{Specific surface are for porous media built using $d=20$ nodes as obstacle diameter.\n(\\subref{surface0_30}) A slice showing the SSA of an artificial porous media sample with $\\phi=0.3$.\n(\\subref{area-por}) Specific surface area as a function of porosity for a given obstacle diameter.}\n\\label{fig:SSA2}\n\\end{figure}\n\n\\subsection{Tortuosity}\n\\label{tortusity-sec}\n\nIn general, is difficult to calculate tortuosity using its basic definition, ~\\eref{tort-eq}, for one would have to know exactly the central streamline.\nHowever, if one has the velocity field, there is an easier way to perform this calculation.\nIt has been shown~\\cite{koponen96} that ~\\eref{tort-eq} is equivalent to\n\n", "index": 17, "text": "\\begin{equation}\n\\tau = \\frac{\\langle | \\boldsymbol{u} | \\rangle}{\\langle u^j \\rangle},\n\\label{tort-method}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E8.m1\" class=\"ltx_Math\" alttext=\"\\tau=\\frac{\\langle|\\boldsymbol{u}|\\rangle}{\\langle u^{j}\\rangle},\" display=\"block\"><mrow><mrow><mi>\u03c4</mi><mo>=</mo><mfrac><mrow><mo stretchy=\"false\">\u27e8</mo><mrow><mo stretchy=\"false\">|</mo><mi>\ud835\udc96</mi><mo stretchy=\"false\">|</mo></mrow><mo stretchy=\"false\">\u27e9</mo></mrow><mrow><mo stretchy=\"false\">\u27e8</mo><msup><mi>u</mi><mi>j</mi></msup><mo stretchy=\"false\">\u27e9</mo></mrow></mfrac></mrow><mo>,</mo></mrow></math>", "type": "latex"}]