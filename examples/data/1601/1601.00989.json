[{"file": "1601.00989.tex", "nexttext": "\n\nRecall that types are partial specifications for, not attributes of, the arrows.  Normally, extra structure naturally merges endpoint labels at a common vertex. Then diagrams look exactly as in strict category theory, but without  constraints.  In the following examples, it will become evident that attaching a target or codomain to a function or relation would only provide negative added value.\n\n\n\\subsection{Some illustrations of concrete category theory --- selected topics}\n\n\n\\noindent{\\em Convention}{\\hp1} In some contexts, {\\em family} is a graphic synonym for {\\em function} \\cite[p.~77]{Bour54then} \\cite[p.~34]{Halm60nast}. An {\\em $I$-family} is a function with domain $I$, called {\\em index set}.\n\n\\paragraph{Product}\n\nThe first topic has significant fundamental and practical interest. \n\n\\begin{defin}[Product]\\label{prddfn}\nThe {\\em Cartesian product} ${\\Pi}{\\hspace*{{0.2}ex}} T$ of a family $T$ of sets is the set of functions $f$ such that ${\\mathcal{D}} f = {{\\mathcal{D}}\\,} T$ and $f(x) {\\in} T(x)$ for all $x$ in ${\\mathcal{D}} f$.\n\\end{defin}\n\nProducts support {\\em dependent types} and {\\em tolerances on functions} \\cite{Bout03cgf} that can be tight, e.g., if $T$ is a family of singletons, declaring $f : {\\Pi}{\\hspace*{{0.2}ex}} T$ fully specifies $f$.  Hence types as partial specifications can be arbitrarily fine, and ${\\Pi}{\\hspace*{{0.2}ex}} T {\\subseteq} {{\\mathcal{D}}\\,} T \\rightarrow {{\\raisebox{-.1 ex}{\\large\\pacmat{\\cup}}}\\,} T$.\n   \\par Another example is $T := (X, Y)$.  An $n$-{\\em tuple} is a function whose domain consists of the first $n$ natural numbers \\cite[p.~45]{Halm60nast}\\cite[p.~75]{Kran05raaf}\\cite[p.~9]{Royd68rean}.  For an $n$-tuple $T$ of sets, one can use infix notation, e.g., ${\\Pi}{\\hspace*{{0.2}ex}}(X, Y) = X {\\times} Y$.  This view also resolves the ``terminological friction'' discussed by Halmos \\cite[p.~36]{Halm60nast}.\n   \\par To obtain the usual point-free characterization of ${\\Pi}{\\hspace*{{0.2}ex}} T$,  we let $I := {{\\mathcal{D}}\\,} T$ and define an $I$-family ${\\uppi}$ of {\\em projection functions} by ${\\uppi}_i {\\in} {\\Pi}{\\hspace*{{0.2}ex}} T \\rightarrow T_i$ and ${\\uppi}_i t = t_i$. Note: an illustrative equivalent declaration is ${\\uppi} {:} {\\Pi}{\\hspace*{{0.2}ex}}_{i {:} I} ({\\Pi}{\\hspace*{{0.2}ex}} T \\rightarrow T_i)$.\n\n\\begin{therm}\\label{prdthm} Let $T$ be an $I$-family of sets, all nonempty {\\em (to avoid ${\\Pi}{\\hspace*{{0.2}ex}} T = \\emptyset$)}.  \n{\\par\\noindent\\textbf{{\\em(i)}}} For any set $S$ and $I$-family $f$ of functions with $f_i {\\in} S \\rightarrow T_i$, there exists a unique $g : S \\rightarrow {\\Pi}{\\hspace*{{0.2}ex}} T$ satisfying $f_i = {\\uppi}_i {\\circ} g$. Specifically, $g = f{^{\\mathsf{T}}}$ {\\em (transpose)}.\n{\\par\\noindent\\textbf{{\\em(ii)}}} Let ${\\gamma}$ be an $I$-family of functions with ${\\gamma}_i {\\in} C \\rightarrow T_i$ and the property that, for any set $S$ and $I$-family $f$ of functions with $f_i {\\in} S \\rightarrow T_i$, there exists a unique $h : S \\rightarrow C$ satisfying $f_i = {\\gamma}_i {\\circ} h$. Then there is a bijection between $C$ and ${\\Pi}{\\hspace*{{0.2}ex}} T$.\n\\em\n{\\par\\noindent\\textbf{{Proof}}}{\\hp1} \\textbf{(i)} Solving $f_i = {\\uppi}_i {\\circ} g$ for $g$: for any $i$ in $I$ and $s$ in $S$, $f_i s = ({\\uppi}_i {\\circ} g)\\,s = {\\uppi}_i(g\\,s) = (g\\,s)\\,i$. By definition, $(f{^{\\mathsf{T}}} s) i = f_i s$, so $g = f{^{\\mathsf{T}}}$.\n{\\em Example}\\/: let $f := {\\uppi}$, so ${\\uppi}_i = {\\uppi}_i {\\circ} {\\uppi}{^{\\mathsf{T}}}$.  Note that $({\\uppi}{^{\\mathsf{T}}} t) i = {\\uppi}_i t = t_i = ({\\mathrm{id}}_{{\\Pi}{\\hspace*{{0.2}ex}} T} t) i$.  In fact, ${\\uppi}{^{\\mathsf{T}}} = {\\mathrm{id}}_{{\\Pi}{\\hspace*{{0.2}ex}} T}$.\n{\\par\\noindent\\textbf{{(ii)}}} Letting $f := {\\gamma}$ in (i), ${\\gamma}_i = {\\uppi}_i {\\circ} {\\gamma}{^{\\mathsf{T}}}$.  Letting $f := {\\uppi}$ in (ii), ${\\uppi}_i = {\\gamma}_i {\\circ} h$.  Hence ${\\gamma}_i = {\\gamma}_i {\\circ} h {\\circ} {\\gamma}{^{\\mathsf{T}}}$ and ${\\uppi}_i = {\\uppi}_i {\\circ} {\\gamma}{^{\\mathsf{T}}} {\\circ} h$. By uniqueness, $h {\\circ} {\\gamma}{^{\\mathsf{T}}} = {\\mathrm{id}}_C$ and ${\\gamma}{^{\\mathsf{T}}} {\\circ} h = {\\mathrm{id}}_{{\\Pi}{\\hspace*{{0.2}ex}} T}$.  So ${\\gamma}{^{\\mathsf{T}}}$ is a bijection from $C$ to ${\\Pi}{\\hspace*{{0.2}ex}} T$ and $h$ is its inverse.\n\\end{therm}\n\nThis compact yet detailed proof was made possible by the {\\em generic operator} ${^{\\mathsf{T}}}$ for {\\em transposition} \\cite{Bout03cgf}, defined by $(f{^{\\mathsf{T}}} s) i = f_i s$, as recalled inside the proof.  Dependencies may be easier to trace by writing $\\mathrm{g}_f$ for $g$ in part (i) and $\\mathrm{h}_{{\\gamma},f}$ for $h$ in part (ii) of the statement.  Thus, $f := {\\uppi}$ makes $\\text{h}_{{\\gamma},{\\uppi}}$ the inverse of ${\\gamma}{^{\\mathsf{T}}}$.\n   \\par Part (i) is depicted in Figure \\ref{CCPU}.\nDashed lines reflect multiple instances, one for each $i$ in $I$, forming a 3D cone.\n\n\\begin{figure}[h!]\n", "itemtype": "equation", "pos": 53583, "prevtext": "\n\\begin{frontmatter}\n\\title{Why mathematics needs engineering}\n\\author{Raymond Boute, INTEC, Ghent University \\hp2 \\texttt{raymond.boute@pandora.be}} \n\n\n\n\\begin{abstract}\n\\noindent  Engineering needs mathematics, but the converse is also increasingly evident. Indeed,  mathematics is still recovering from the drawbacks of several ``reforms''.  Encouraging is the revived interest in proofs indicated by various recent {\\em introduction to proof}-type textbooks.  Yet, many of these texts defeat their own purpose by self-conflicting definitions. Most affected are fundamental concepts such as relations and functions, despite flawless accounts 50 years ago. We take the viewpoint that definitions and theorems are tools for capturing, analyzing and understanding mathematical concepts and hence, like any tools, require diligent engineering.  This is illustrated for relations and functions, their algebraic properties and their relation to category theory, with the {\\em Halmos principle} for definitions and the {\\em Arnold principle} for axiomatization as design guidelines.\n\\end{abstract}\n\n\\begin{keyword}\nalgebra, analysis, calculus, category theory, codomain, definition, design, domain, engineering, function, logic, mathematics, relation, soundness\n\\end{keyword}\n\n\\end{frontmatter}\n\n\n\n\\section{Introduction: Mathematics and Engineering}\\label{intro}\n\n\n\n\\noindent Mathematics has been intertwined with engineering since antiquity ~\\cite{Boye91hima,Russ04fore}.\n   \\par Kline notes that ``{\\em More than anything else mathematics is a method}\\/''~\\cite{Klin53miwc}.  Arguably, the primary purpose of this method is {\\em effective reasoning}. This view best explains what Wigner calls {\\em the unreasonable effectiveness of mathematics}~\\cite{Wign60ueom}, in particular its practical usefulness far beyond the originally intended application areas.  From this perspective, the dichotomy between Platonism and formalism dissolves:  mathematical objects {\\em do}\\/ exist,  albeit in an abstract universe.  Formalism, definitions and theorems are the tools to study them.\n   \\par Tools, being artifacts, deserve careful design, borrowing criteria and guidelines from engineering.  Some of these also been discussed by Jos\\'e Oliveira \\cite{Oliv97form} in another context.  Here we focus on using engineering principles in mathematics.\n   \\par Foremost is enhancing the effectiveness in reasoning. Symbolic notation properly designed and used yields extra guidance via the shape of the expressions.  It should function like well-meshed gears in a Swiss precision clockwork.\n   \\par Aptness and economy in capturing the abstract objects of interest ensures conceptual malleability, generality and practical usefulness. Human factors are influential here, and it is often overlooked that this is a highly individual matter of temperament and background.  Even so, everyone benefits from clear conceptualization and reasoning.  For instance, {\\em separation of concerns} avoids the common misconceptions caused by intellectual noise and conceptual tangling.  \n   \\par In classical mathematics, methods and notations were often thought-out carefully.  In algebra, for instance, symbolic notation started with Diophantus and evolved into its current form via Vi\\`ete and Descartes~\\cite{Bash99lcvd,Boye91hima}, rarely violating good design practices, thus making symbolic calculation today's norm. In comparison, notations from ``modern mathematics'' as used in everyday practice are substandard, hampering symbolic reasoning and thus making it unpopular. \n   \\par The cause of this stagnation is largely historical.  When introducing so-called ``modern mathematics'', forgetting its roots caused serious educational mistakes, denounced in rather strong terms by Arnold~\\cite{Arno97otma}.  In a severe overreaction, the view of mathematics as a method was sacrificed in favor of mathematics as a bag of tricks and attempting to elicit motivation by so-called ``real-life'' examples no more realistic than the {\\em farmer-sells-potatoes}-type problems in grade school --- and in PISA tests! The well-proven structure {\\em definition-examples-theorems} was frowned upon, and mathematical exposition had to become a ``narrative''. \n   \\par As a result, classics like Rudin's {\\em Principles of Mathematical Analysis}~\\cite{Rudi64poma} are, as Krantz observes, ``{\\em often no longer suitable, or appear to be inaccessible, to the present crop of students}'' \\cite{Kran05raaf}. Here the blame does not fall on the students.\n   \\par Narratives lack the punctuation provided by headings like ``Definition'' and ``Theorem'', which help novices to distinguish between, say, statements that can be deduced from earlier ones and statements introducing new elements.\n   \\par If {\\em definition-examples-theorems} expositions often deserve criticism, it is not for the usual reasons (take your pick), but because definitions are usually presented as ``given'', or as arbitrary points of departure for a game of logic.  In fact, definitions are the result of {\\em design decisions}.  They also determine the flavor of the theorems (and proofs) derived from them.  Hence it is crucial for understanding that these decisions are explained and justified.\n   \\par In mathematics texts, this is all too rarely done.  One of the few exceptions is Halmos's {\\em Naive Set Theory}~\\cite{Halm60nast} which, if only for this reason (yet also for other reasons!), should be required reading for all beginning students --- and many mathematicians as well.  Halmos not only explains the design decisions and their shortcomings for most conventions, but also does not shrink back from calling some poor practices ``unacceptable but generally accepted''.  Quine~\\cite{Quin69stil} even designates lesser offenses as ``glaring perversity'', which seems an apt characterization of mathematicians acting against better judgment.\n   \\par  Indeed, perceived ``general acceptance'' is often taken as a licence to perpetuate junk conventions.  Users of inept designs typically defend them by feigning confusion at proper alternatives, calling them ``nonstandard'' even if they have been around for a long time and are routinely used by plenty of other authors. \n   \\par If  an engineer is sloppy, his design may fail, even catastrophically. Mathematicians often condone sloppiness, even if it sets bad examples and abuses confidence.  Discerning students will be dissatisfied by the discrepancy between the reputation of mathematics as being precise and actual practice.  Others may even get confused if insecure teachers insist on ``doing things as in the book''. \n   \\par Yet, the engineering literature is not blameless either.  Years ago Lee and Varaiya~\\cite{LeeV00sisy} corrected many inept mathematical practices in signal processing.\n   \\par Playing down such issues as ``just a matter of notation'' is misleading. Poor notation prevents the shape of expressions from giving guidance in reasoning.  It also reflects poor understanding, according to Boileau's aphorism ``{\\em Ce que l'on con\\c{c}oit bien s'\\'enonce clairement -- Et les mots pour le dire arrivent ais\\'ement}''.  If authors misunderstand their own definitions, what about their students?\n   \\par ``If it ain't broke, don't fix it'' is another engineering maxim.  Yet, as we shall see, even basic concepts that worked fine 50 years ago somehow got ``broke''.\n   \\par This paper addresses the issue in the title by presenting a design view on various concepts from the literature, but it is {\\em not} some linear, complete proposal.\n   \\par Often references include page numbers to make them truly useful for the reader.  For brevity, co-authors are omitted when mentioning names in the text.\n\n\n\n\\section{Case study A -- Relations: two logically equivalent definitions}\n\n\n\n\n\\subsection{Simple and safe formulations}\n\n\n\\noindent The simplest ``modern'' definition of a {\\em relation} is typical in older texts such as Bourbaki~\\cite[p.~71]{Bour54then},\nSuppes~\\cite[p.~57]{Supp72axst}, Tarski~\\cite[p.~3]{Tars87stwv}, but only in a few current books, such as Jech~\\cite[p.~10]{Jech03stth}, Scheinerman~\\cite[p.~73]{Sche12madi} and Zakon~\\cite[p.~8]{Zako04maan}.\n\n\\begin{defin}[Relation]\\label{rela}\nA relation is a set of ordered pairs.\\em\n\\\\Equivalently, in symbols ~\\cite{Bour54then,Supp72axst}: $R\\;{\\mathrm{isrel}} {\\equiv} \\forall z {\\,.\\,} z {\\in} R {\\Rightarrow} \\exists x {\\,.\\,} \\exists y {\\,.\\,} z = (x, y)${\\hp1}.\n\\end{defin}\n\nTaking {\\em set} and {\\em ordered pair} colloquially, and with `nonmathematical' examples, the word statement of {Definition~\\ref}{rela} is even accessible at grade school level.\n   \\par In this paper, when saying just ``pair'', we always mean ``ordered pair''.\n   \\par Some notational design issues arise here. First, an ordered pair is commonly written $(x, y)$. Some authors use $\\langle x, y\\rangle$, a waste of symbols.  In fact, one can even write $x, y$ and reserve parentheses for emphasis or disambiguation, which also covers $n$-tuples like $(x, y, z)$ and trees like $((x, y), z)$.  Identifying $(x, y, z)$ with $((x, y), z)$ as in Bourbaki~\\cite[p.~70]{Bour54then} is clearly a bad design decision. \n   \\par Second, the literature diverges about writing $(x, y)$ or $(y, x)$ and $x\\,R\\,y$ or $y\\,R\\,x$. Quine~\\cite[p.~24]{Quin69stil} offers many good reasons for following Peano and G\\\"odel in using the {\\em natural order} from spoken language, writing ``$a$ is the father of $b$'' as $a\\,F\\,b$, and ``$a$ is smaller than $b$'' as $a < b$.  Similar reasons would favor writing, for instance, ``velocity versus time'' as $(v, t)$.  However, mathematicians used to writing the ``independent variable'' first might feel disoriented---unlike novices! Tradition can be reconciled with reason by writing $(x, y) {\\in} R$ iff $y\\,R\\,x$.  For human engineering reasons, such conventions should be stated conspicuously.\n\n\\paragraph{Intermezzo: Quine, the angry notational engineer} In an uncharacteristic diatribe of nearly two pages~\\cite[p.~24--26]{Quin69stil}, Quine deplores the ``sorry business'' and ``glaring perversity'' of ill-designed notations.  He concludes (a) ``{\\em I have given much space to a logically trivial point of convention because in practice it is so vexatious.}''; (b) ``{\\em [Whoever] switched a seemingly minor point of usage out of willfulness or carelessness cannot have suspected what a burden he created.}''.\n{\\\\\\hspace*{1em}} These remarks reflect typical engineering concerns. Indeed, (a) reminds us that avoiding flaws during the design phase is easy compared with repair afterwards (one line versus lengthy arguments), and (b) emphasizes the importance of taking into account the interests of the users, namely, the future generations.\n\n\\paragraph{Auxiliary notions} Most authors using {Definition~\\ref}{rela} add {Definitions~\\ref}{dora}, \\ref{XtoY} and \\ref{cmpcnv}.\n\n\\begin{defin}[Domain, range]\\label{dora}{~}\n\\\\The {\\em domain} of a relation $R$ is the set of first members of the pairs in $R$.  The {\\em range} of a relation $R$ is the set of second members of the pairs in $R$.\\em\n\\\\Notation: the literature mentions various self-explanatory notations such as ${{\\mathcal{D}}\\,} R$ or $\\mathrm{Dom}(R)$ for the domain of $R$ and ${\\mathcal{R}\\,} R$ or $\\mathrm{Ran}(R)$ for the range of $R$.  \n\\end{defin}\n\n\\begin{defin}[Relation from \\boldmath$X$ to $Y$\\unboldmath]\\label{XtoY}\nA {\\em relation from $X$ to $Y$}is a relation whose domain is a subset of $X$ and whose range is a subset of $Y$.\\em\n\\\\Equivalently, in symbols: $R\\,{\\mathrm{isrel}}\\;(X, Y) {\\equiv} R\\;{\\mathrm{isrel}} {\\wedge} {{\\mathcal{D}}\\,} R {\\subseteq} X {\\wedge} {\\mathcal{R}\\,} R {\\subseteq} Y${\\hp1}. \n\\\\Notation: Writing $R : X {\\text{${{\\leftrightarrow\\hspace{-1.8ex}\\rightarrow}}$}} Y$ or $R : X \\leftrightarrow Y$ introduces a relation from $X$ to $Y$. \n\\end{defin}\n\n{\\em Aside}{\\hp1} As in Meyer \\cite[p.~23]{Meye91itpl}, $X {\\text{${{\\leftrightarrow\\hspace{-1.8ex}\\rightarrow}}$}} Y$ denotes the set of relations from $X$ to~$Y$.\nAlso, the symbol~:~clearly distinguishes bindings from statements.  A {\\em binding} $i : S$, read ``$i$ \\underline{in} $S$'', {\\em introduces} an identifier $i$ for an object in a set $S$, whereas  $i {\\in} S$, read ``$i$ \\underline{is in} $S$'' (or similar) is a {\\em statement} in which $i$ is {\\em used}.  Proper symbolism passes the {\\em prose test}: transliterating formulas into words must yield sentences with correct grammar. The RHS of $S {\\subseteq} T {\\equiv} {\\forall\\,} x {:} S {\\,.\\,} x {\\in} T$ is read ``for all $x$ \\underline{in} $S$, $x$ \\underline{is in} $T$'' or ``every $x$ \\underline{in} $S$ \\underline{is in} $T$''.  Lamport \\cite[p.~289]{Lamp03spec} notes that the common forms $\\{x \\in S {\\,|\\,} p\\}$ and $\\{e {\\,|\\,} x \\in T\\}$, where $p$ is a boolean expression and $e$ is any expression, are ambiguous if $p$ is $x {\\in} T$ and $e$ is $x {\\in} S$.  Writing $\\{x {:} S {\\,|\\,} p\\}$ and $\\{e {\\,|\\,} x {:} T\\}$ yields $\\{x {:} S {\\,|\\,} x {\\in} T\\} = S {\\cap} T$ and $\\{x {\\in} S {\\,|\\,} x {:} T\\} {\\subseteq} {\\mathbb{B}}$.    \\par Finally, $S$ in $i : S$ is called a {\\em type} and expresses a range for $i$, not an attribute of $i$. Hence the $X$ and~$Y$ figuring in $R : X {\\text{${{\\leftrightarrow\\hspace{-1.8ex}\\rightarrow}}$}} Y$ are attributes of the type $X {\\text{${{\\leftrightarrow\\hspace{-1.8ex}\\rightarrow}}$}} Y$, not of $R$.  This concludes the aside.\n   \\par The following formulation is independent of the $(x, y)$ versus $(y, x)$ issue.\n\n\\begin{defin}[Composition, converse]\\label{cmpcnv} \nThe {\\em composition} $S {\\circ} R$ of relations $S$ and $R$ is the relation such that $z(S {\\circ} R)x \\equiv \\exists y . z\\,S\\,y \\wedge y\\,R\\,x$.\n\\\\The {\\em converse} $R{^{\\scriptscriptstyle\\smile}}$ of a relation $R$ is the relation defined by $x\\,R{^{\\scriptscriptstyle\\smile}}\\,y \\equiv y\\,R\\,x$.\n\\end{defin}\n\nComposition is called {\\em relative product} by Suppes~\\cite[p.~63]{Supp72axst} and Tarski~\\cite[p.~3]{Tars87stwv}, and {\\em resultant} by Quine~\\cite[p.~22]{Quin69stil}.  Suppes writes $S / R$, the others $S | R$.\n\n\n\\subsection{Entering murky waters: misconceptions, unsoundness and poor judgement}\n\n\n\\noindent All books in our {\\em introduction to proof} sample \\cite[p.~172]{Bloc11praf}, \\cite[p.~101]{Daep03rwap} , \\cite[p.~93]{Daep11rwap}, \\cite[p.~155]{Garn10dima}, \\cite[p.~86]{Gete12imsp}, \\cite[p.~51]{Good06dima}, \\cite[p.~267]{Grie93logi}, \\cite[p.~192]{Hamm09bopr}, \\cite[p.~176]{Robe10impt}, \\cite[p.~135]{Smit10atta}, \\cite[p.~171]{Vell09htpi} except \\cite[p.~73]{Sche12madi} combine {Definitions~\\ref}{rela} and \\ref{XtoY} as follows. \n\n\\begin{defin}[Relation from \\boldmath$X$ to $Y$\\unboldmath]\\label{relcomb}{~} A {\\em relation from $X$ to $Y$} is a subset of $X {\\times} Y$. \\em Equivalently, in symbols: $R\\;{\\mathrm{isrel}}'\\;(X, Y) {\\equiv} R {\\subseteq} X {\\times} Y${\\hp1}.\n\\end{defin}\n\nThis forces defining {\\em relation} backwards, as a relation from $X$ to $Y$ for some $X, Y$. Also, using Cartesian products at this stage may be an educational burden~\\cite{Shua75dima}.  \n   \\par A more serious problem is that disregarding {\\em separation of concerns} carries a heavy price in understanding, apparently even for the authors.  Most fail to recognize that {Definitions~\\ref}{XtoY} and \\ref{relcomb} are equivalent: $R\\;{\\mathrm{isrel}}\\;(X, Y) {\\equiv} R\\;{\\mathrm{isrel}}'\\;(X, Y)$.\n   \\par Indeed, many textbooks strongly suggest that {Definition~\\ref}{relcomb} somehow ``glues'' $X$ and $Y$ to the relation, and that one cannot even define just {\\em relation} without adding ``{\\em from $X$ and $Y$}''. Some texts remain vague here, but the litmus test for one's understanding of a mathematical concept is the view on {\\em equality}, in this case: when is a relation $R$ from $X$ to $Y$ equal to a relation $S$ from $U$ to $V$?\n   \\par The answer was evident 50 years ago: with relations defined as sets, $R = S$ iff both contain the same elements, regardless of $X$, $Y$, $U$, $V$.  Defining equality anew often causes unsoundness, typically by stating that $R = S$ also requires $X = U$ and $Y = V$ \\cite[p.~179]{Robe10impt}.  Indeed, if $R {\\subseteq} X {\\times} Y$, $X \\neq {\\emptyset}$ and $Y \\subset V$, then $R {\\subseteq} X {\\times} V$ and $Y \\neq V$, so $R = R$ would require $Y = V$, a contradiction. \n   \\par Many texts \\cite[p.~180]{Robe10impt}, \\cite[p.~141]{Smit10atta}, \\cite[p.~236]{Vell09htpi}, \\cite[p.~94]{Wall12bgdm} define $S {\\circ} R$ for a relation $R$ from $X$ to $Y$ and a relation $S$ from $U$ to $V$ only for the case $U = Y$.  Since $R {\\subseteq} X {\\times} Y {\\subseteq} X {\\times} (Y {\\cup} U)$ and $S {\\subseteq} U {\\times} V {\\subseteq} (Y {\\cup} U) {\\times} V$, this is not restrictive, unless one accepts the aforementioned unsound view on equality.\n   \\par {\\em Aside}{\\hp1} As a restrictive variant of a {\\em relation from $X$ to $Y$}, Bourbaki~\\cite[p.~72]{Bour54then} defines a {\\em correspondence from $X$ to $Y$} as a triple $(R, X, Y)$ where $R {\\subseteq} X {\\times} Y$, and restricts composition of $(R, X, Y)$ and $(S, U, V)$ to the case $U = Y$.\n\n\n\n\\section{Case study B -- Functions}\n\n\n\n\\noindent Poor design decisions for relations reappear for functions with a vengeance.\nThis is especially unfortunate since, as Herstein puts it, {\\em Without exaggeration this {\\em [namely, a {\\em mapping} or {\\em function}]} is probably the single most important and universal notion that runs through all of mathematics.}~\\cite{Hers64alge}.\n   \\par The ``modern'' definition of {\\em function} was issue-free 50 years ago, and still is in analysis/calculus books~\\cite{Apos67calc,Bart64tera,Flet66maan,Kolm70inra,Kran05raaf,Lars09calc,Royd68rean,Rudi64poma,Stew10calc,Sull14calc,Zako04maan}, but unsoundness appears since 2005 in {\\em transition to proof} texts \\cite{Bloc11praf,Char12mapr,Daep03rwap,Daep11rwap,Garn10dima,Gete12imsp,Hamm09bopr,Robe10impt,Smit10atta}.\n   \\par In passing, we mention some harmful myths that can be read between the lines in textbooks but surface explicitly in oral and written conversations. Myth \\#0 (a meta-myth actually) holds that divergences in definitions just reflect different needs in various disciplines \\cite{Shua75dima}.  However, our samples come from algebra, analysis/calculus, discrete math, logic, set theory, and reveal that nearly {\\em all} of them use the {\\em same} function concept, differing only in the care devoted to design and formulation. Myth \\#0 is harmful in trying to divert closer scrutiny. \n   \\par Recurrent points of interests are: (i)~defining {\\em function}, (ii)~function equality, (iii)~function from $X$ to $Y$, (iv)~onto-ness, (v)~function composition and inverse. \n\n\n\\subsection{Once again: simple and safe formulations}\n\n\n{\\par\\noindent\\textbf{{(i)}}} A relation $R$ is called {\\em functional}~\\cite{Bour54then,Meye91itpl} iff no two pairs in $R$ have the same first member.   Hence the following phrasings are equivalent; the choice depends on whether {\\em relations} are skipped, as in analysis/calculus texts, or defined first. \n\n\\begin{defin}[Function]\\label{AB} \n{\\em (A) Apostol~\\cite[p.~53]{Apos67calc}:} A {\\em function} $f$ is a set of ordered pairs $(x, y)$ no two of which have the same first member.\n\\\\{\\em (B) Bourbaki~\\cite[p.~77]{Bour54then}:} A {\\em function} is a functional relation.\n\\end{defin}\n\n{Definition~\\ref}{AB} is also found in Dasgupta \\cite[p.~10]{Dasg14sett}, Flett~\\cite[p.~4]{Flet66maan}, Jech \\cite[p.~11]{Jech03stth}, Mendelson \\cite[p.~6]{Mend87itml}, Scheinerman \\cite[p.~167]{Sche12madi}, Suppes \\cite[p.~86]{Supp72axst}, Tarski \\cite[p.~3]{Tars87stwv}, Zakon~\\cite[p.~10]{Zako04maan}. Functionality justifies writing $y = f(x)$ iff $(x, y) {\\in} f$.  As in \\cite[p.~1]{Macl71cfwm}, one may write $f\\,x$ instead of $f(x)$ when no ambiguity results. Authors using {Definition~\\ref}{AB} introduce the domain and range as in {Definition~\\ref}{dora}.\n\n   {\\par\\textbf{{(ii)}}} This results in the following theorem, quoted from Apostol \\cite[p.~54]{Apos67calc}.\n\n\\begin{therm}[Equality]\\label{apotherm}\nFunctions $f$ and $g$ are equal iff {\\hp1} {{\\normalfont}(a)} $f$ and $g$ have the same domain, and {{\\normalfont}(b)} $f(x) = g(x)$ for every $x$ in the domain of $f$.\n\\end{therm}\n\n   {\\par\\textbf{{(iii)}}} Authors starting from {Definition~\\ref}{AB}, including Apostol~\\cite[p.~578]{Apos67calc}, Dasgupta \\cite[p.~10]{Dasg14sett}, Flett~\\cite[p.~5]{Flet66maan}, Jech \\cite[p.~11]{Jech03stth}, Scheinerman \\cite[p.~169]{Sche12madi} and Zakon \\cite[p.~10]{Zako04maan}, use the following common notions for classifying functions.    \n\n\\begin{defin}[Function from \\boldmath$X$ to $Y$\\unboldmath]\\label{fXtY} A {\\em function from $X$ (in)to $Y$} is a function with domain~$X$ and range included in~$Y$.\\em\n\\\\Notation: writing $f : X \\rightarrow Y$ introduces a function $f$ from $X$ to $Y$.\n\\end{defin}\n\nThis is the ISO standard~\\cite[p.~15]{ISOs09quun}, where a {\\em function} is defined in broader terms, mentioned later.  Divergent views on $f {:} X \\rightarrow Y$ are {\\em nonstandard}. \n   \\par  It is convenient reading $X \\rightarrow Y$ as the set of functions from $X$ to $Y$ and $X \\,{\\text { \\settowidth{\\wa}{{{\\text{${{\\rightarrow}}$}}}}\\settowidth {\\wb} {{\\raisebox{0.25ex}{{\\text{${{\\scriptscriptstyle/\\;}}$}}}}} {{\\text{${{\\rightarrow}}$}}}\\hskip-0.5\\wa\\hskip-0.5\\wb {\\raisebox{0.25ex}{{\\text{${{\\scriptscriptstyle/\\;}}$}}}}\\hskip0.5\\wa\\hskip-0.5\\wb}}\\, Y$ as the set of functional relations from $X$ to $Y$ \\cite[pp.~25--26]{Meye91itpl}.  Such types serve as {\\em partial specifications} for functions. Tighter types are defined later.  \n\n   {\\par\\textbf{{(iv)}}} Next, we consider {\\em onto-ness} as defined by authors using {Definitions~\\ref}{AB} and \\ref{fXtY}, for instance, Flett \\cite[p.~5]{Flet66maan}, Jech \\cite[p.~11]{Jech03stth}, Mendelson \\cite[p.~6]{Mend87itml}, Scheinerman \\cite[p.~172]{Sche12madi}, Tarski \\cite[p.~3]{Tars87stwv} and Zakon \\cite[p.~11]{Zako04maan}.\n\n\\begin{defin}[Onto \\boldmath$Y$\\unboldmath]\\label{ontoY} For any set $Y$, a function is said to be {\\em onto $Y$}, or {\\em surjective on $Y$}, iff its range is $Y$.\n\\end{defin}\n\nNote that {\\em onto} is a preposition, and appears as such in {Definition~\\ref}{ontoY}, which is also used by many authors (listed later) who do {\\em not} start from {Definition~\\ref}{AB}.\n   \\par The dual notion of ``$f$ is {\\em onto $Y$}'' (${\\mathcal{R}} f = Y$) is ``$f$ is {\\em total on $X$} (${\\mathcal{D}} f = X$).  The dual notion of ``$f$ is {\\em into $Y$}'' (${\\mathcal{R}} f {\\subseteq} Y$) is ``$f$ is {\\em partial on $X$}'' (${\\mathcal{D}} f {\\subseteq} X$).  A~function $f : X \\,{\\text { \\settowidth{\\wa}{{{\\text{${{\\rightarrow}}$}}}}\\settowidth {\\wb} {{\\raisebox{0.25ex}{{\\text{${{\\scriptscriptstyle/\\;}}$}}}}} {{\\text{${{\\rightarrow}}$}}}\\hskip-0.5\\wa\\hskip-0.5\\wb {\\raisebox{0.25ex}{{\\text{${{\\scriptscriptstyle/\\;}}$}}}}\\hskip0.5\\wa\\hskip-0.5\\wb}}\\, Y$ is often called a {\\em partial function}, but is $\\{(0, 1), (2, 3)\\}$ a partial function? Grammatically correct is: a {\\em function from part of $X$ to $Y$}.\n   {\\par\\textbf{{(v)}}} For composition, we mention two equivalent formulations. Formulation (A) skips relations, as in Apostol~\\cite[p.~140]{Apos67calc}, Flett~\\cite[p.~11]{Flet66maan}, Mendelson~\\cite[p.~7]{Mend87itml} and many others, listed later.  Formulation (B) is based on relations.\n\n\\begin{defin}[Function composition \\boldmath$g {\\circ} f$\\unboldmath]\\label{compos} {\\em (for {\\em any} functions $g$ and $f$)}\n\\\\{\\em(A)} $g {\\circ} f$ is the function whose domain consists of all $x$ in ${\\mathcal{D}} f$ that satisfy $f(x) {\\in} {\\mathcal{D}} g$ and whose value $(g {\\circ} f)(x)$ for arbitrary $x$ in that domain is $g(f(x))$.\n\\\\{\\em(B)} \\em $g {\\circ} f$ follows {Definition~\\ref}{cmpcnv} assuming natural order as in Quine~\\cite[p.~24]{Quin69stil}; otherwise $f$ and $g$ must be swapped, e.g., $g {\\circ} f = f / g$ in Suppes~\\cite[p.~87]{Supp72axst}, $g {\\circ} f = f | g$ in Tarski~\\cite[p.~3]{Tars87stwv}.  Proof obligation: showing that $g {\\circ} f$ is functional.\n\\end{defin}\n\n\n\\subsection{Wearing the ice thin: convoluted formulations}\n\n\n{\\par\\noindent\\textbf{{(i--iii)}}} {Definitions~\\ref}{AB} and \\ref{fXtY} are sometimes crammed together, starting as early as Halmos \\cite[p.~30]{Halm60nast} and Herstein \\cite[p.~10]{Hers64alge}, and more often in current texts including Krantz \\cite[p.~20]{Kran05raaf}, Velleman \\cite[p.~226]{Vell09htpi} and others, listed later.\n\n\\begin{defin}[Function from \\boldmath$X$ to $Y$\\unboldmath]\\label{C} Let $X$ and $Y$ be sets.\n\\par {\\em (a)} A {\\em function $f$ from $X$ to $Y$}, written $f {:} X \\rightarrow Y$, is a relation $f {\\subseteq} X {\\times} Y$ satisfying the property that for each $x$ in $X$ the relation $f$ contains exactly one ordered pair of the form $(x, y)$.\n\\par {\\em (b)} The set $X$ is called the {\\em domain of $f$}.\n\\end{defin}\n\nAs a warning against uncritical copying, we reproduced the widespread but unacceptable phrasing, which suggests that the function is written $f {:} X \\rightarrow Y$ (in fact, the function is written just $f$), and that $f {\\subseteq} X {\\times} Y$ is a relation (in fact, it is a statement about the relation $f$).  Proper  phrasings are evident.\n\n\n\n   \\par All authors using {Definition~\\ref}{C} overlook that part (b) requires proving that $X$ is fully determined by $f$ as defined in (a).  This is easy; the result is $X = {\\mathcal{D}} f$.\n   \\par More importantly, users of {Definition~\\ref}{C} fail to realize its logical equivalence to {Definition~\\ref}{AB} (proof: exercise), including the standard meaning of $f : X \\rightarrow Y$.  Still, the different formulation has a huge impact on clarity.  By disregarding separation of concerns, {Definition~\\ref}{C} has given rise to Myth \\#1, which holds that one cannot define {\\em function} by itself, but only {\\em function from $X$ to $Y$}.\n   \\par The common pitfalls are exposed by the litmus test: equality. Surprisingly few present-day texts using {Definition~\\ref}{C} mention {Theorem~\\ref}{apotherm}, found only in Daepp~\\cite[p.~152]{Daep03rwap}, Gerstein \\cite[p.~113]{Gete12imsp} and Smith et al.~\\cite[p.~189]{Smit10atta}.  Instead, many define equality anew, all too often unsoundly, as demonstrated later.\n   {\\par\\textbf{{(iv)}}} ``Classical'' authors using {Definition~\\ref}{C} (or similar), including Bartle \\cite[p.~13]{Bart64tera}, Halmos \\cite[p.~31]{Halm60nast}, Herstein \\cite[p.~12]{Hers64alge}, Kolmogorov \\cite[p.~5]{Kolm70inra}, say that $f$ is {\\em onto~$Y$} iff ${\\mathcal{R}} f = Y$, as in {Definition~\\ref}{ontoY}, using ``onto'' as a {\\em preposition}.  Some of the few ``modern'' users of {Definition~\\ref}{C} who write ``onto $Y$'' are Gerstein \\cite[p.~118]{Gete12imsp} and Smith \\cite[pp.~xvii, 205]{Smit10atta}, but their formulation lacks generality. \n\n   {\\par\\textbf{{(v)}}}  Most ``classical'' authors using {Definition~\\ref}{C} (or similar), including  Bartle~\\cite[p.~40]{Halm60nast} and Halmos~\\cite[p.~40]{Halm60nast}, define $g {\\circ} f$ for arbitrary functions $f$ and $g$, as in {Definition~\\ref}{compos}.  Only a few classical texts \\cite[p.~13]{Hers64alge}\\cite[p.~9]{Royd68rean} restrict coverage of $g {\\circ} f$ for functions $f : X \\rightarrow Y$ and $g : U \\rightarrow V$ to the special case $U = Y$.\n   \\par Most ``modern'' texts succumb to this restriction, including Bloch \\cite[p.~146]{Bloc11praf},  Roberts \\cite[p.~226]{Robe10impt},  Scheinerman \\cite[p.~183]{Sche12madi}, Smith \\cite[p.~197]{Smit10atta}, Velleman \\cite[p.~231]{Vell09htpi}.  An intermediate form requiring ${\\mathcal{R}} f {\\subseteq} {\\mathcal{D}} g$ appears in Daepp (2003) \\cite[p.~175]{Daep03rwap}, Daepp (2011) \\cite[p.~167]{Daep11rwap}, Jech \\cite[p.~11]{Jech03stth} and Krantz \\cite[p.~22]{Kran05raaf}.  The general form appears in Larson \\cite[p.~25]{Lars09calc} and Stewart \\cite[p.~40]{Stew10calc} which, not surpringly, are calculus texts, since restricted composition is impractical. \n\n\n\\subsection{Falling through the ice: common yet unsound additions to {Definition~\\ref}{C}}\n\n\n{\\par\\noindent\\textbf{{(i--iii)}}} {Definition~\\ref}{C} is the sound part of definitions in {\\em transition to proof} texts, but Bloch \\cite[p.~131]{Bloc11praf}, Chartrand \\cite[p.~216]{Char12mapr}, Daepp \\cite[p.~147]{Daep03rwap}\\cite[p.~143]{Daep11rwap}, Garnier \\cite[p.~224]{Garn10dima} Gersting \\cite[p.~383]{Gete12imsp},  Hammack \\cite[p.~195]{Hamm09bopr}, Roberts \\cite[p.~220]{Robe10impt}, Smith \\cite[p.~185]{Smit10atta},  Gilbert \\cite[p.13]{Gilb08elma} and Wallis \\cite[p.~106]{Wall12bgdm}, add\n\n\\begin{defin}[Codomain]\\label{cod} {\\em {Definition~\\ref}{C}}{\\em(c)} $Y$ is called the {\\em codomain of $f$}.\n\\end{defin}\n\nHowever, just like {Definition~\\ref}{C}(b), adding 10(c) entails a proof obligation.  Recognizing this clearly reveals a logical contradiction.  Indeed, the definiendum is {\\em codomain of $f$}, the definiens is $Y$, but $Y$ is not uniquely determined by $f$. As for relations, letting $f {\\subseteq} X {\\times} Y \\subset X {\\times} Y'$ reveals a contradiction.   \n   \\par Still, some authors uphold Myth \\#2: writing $f : X \\rightarrow Y$ makes $Y$ an attribute of $f$ by specifying $f {\\subseteq} X {\\times} Y$.  Yet, all this says about $Y$ is ${\\mathcal{R}} f {\\subseteq} Y$.\n   \\par Myth \\#3 maintains that {Definition~\\ref}{C} contains ambiguities allowing multiple views, making logical contradictions just a matter of interpretation.  Yet, in {Definition~\\ref}{C}(a), the definiendum and the definiens are clear (except as written in \\cite[p.~131]{Bloc11praf}), using the unambiguous concepts {\\em subset} and {\\em Cartesian product}.\n   \\par Also, insofar as {Definition~\\ref}{cod} makes the perceptive reader wonder if the authors really mean ``codomain {\\em of $f$}'', further context indicates they mostly do. \n   \\par Again equality is most revealing.  Apart from three exceptions mentioned, all {\\em transition to proof} texts using {Definition~\\ref}{cod} overlook {Theorem~\\ref}{apotherm} and define equality anew.  Roberts \\cite[p.~223]{Robe10impt} avoids conflict with {Definition~\\ref}{C} by using the statement of {Theorem~\\ref}{apotherm}.  Others, e.g., Bloch \\cite[p.~136]{Bloc11praf}, Garnier \\cite[p.~224]{Garn10dima}, Hammack \\cite[p.~198]{Hamm09bopr} extend this statement with ${\\mathrm{cod}\\,} f = {\\mathrm{cod}\\,} g$, indirectly contradicting {Definition~\\ref}{C}.\n\n\n\nInterestingly, Smith \\cite[p.~189]{Smit10atta} explicitly states that function equality does {\\em not} require equal codomains! \n   {\\par\\textbf{{(iv)}}} Unsoundness also results from improper use of ``{\\em onto}'' as an adjective, as in Bloch \\cite[p.~155]{Bloc11praf}, Daepp \\cite[p.~163]{Daep03rwap}\\cite[p.~157]{Daep11rwap}, Gries~\\cite[282]{Grie93logi}, Hammack \\cite[p.~199]{Hamm09bopr}, Krantz \\cite[p.~22]{Kran05raaf},\nRoberts \\cite[p.~231]{Robe10impt} and Velleman \\cite[p.~236]{Vell09htpi}.\n\n\\begin{defin}[Onto]\\label{onto} A function $f : X \\rightarrow Y$ is {\\em onto} {\\em (surjective)} iff ${\\mathcal{R}} f = Y$.\n\\end{defin}\n\nWith {Definition~\\ref}{onto}, the same function can be both onto and not onto depending on whether or not the set $Y$ appearing in $f : X \\rightarrow Y$ happens to be ${\\mathcal{R}} f$.\n   {\\par\\textbf{{(v)}}} All texts adding {Definition~\\ref}{cod} require for $g {\\circ} f$ that ${\\mathcal{D}} g = {\\mathcal{C}} f$ and for the inverse $f^-$ that ${\\mathcal{R}} f = {\\mathcal{C}} f$. This is impractical for applications, e.g., in calculus.\n\n\n\\subsection{Design considerations, variant concepts, and evaluation}\n\n\n\\noindent Many textbooks and countless blogs use the term {\\em codomain}, typically in the unsound way described.  Even though most authors using {Definition~\\ref}{C}/\\ref{cod} seem to sense the problems with squeezing in codomains, they somehow feel obliged to try. Of course, they needn't! Clearly, a proper account for {\\em codomain} is overdue. \n   \\par In view of the earlier analysis, the term {\\em codomain} is best (i) simply discarded, or (ii) used as the symmetric counterpart of {\\em domain}, thus far called {\\em range}, or (iii) recognized as an attribute of a type like $X \\rightarrow Y$ or $X \\,{\\text { \\settowidth{\\wa}{{{\\text{${{\\rightarrow}}$}}}}\\settowidth {\\wb} {{\\raisebox{0.25ex}{{\\text{${{\\scriptscriptstyle/\\;}}$}}}}} {{\\text{${{\\rightarrow}}$}}}\\hskip-0.5\\wa\\hskip-0.5\\wb {\\raisebox{0.25ex}{{\\text{${{\\scriptscriptstyle/\\;}}$}}}}\\hskip0.5\\wa\\hskip-0.5\\wb}}\\, Y$, not of a function. \n   \\par A quite different approach is defining a variant of the function concept such that the set $Y$ in $f : X \\rightarrow Y$ is truly part of $f$, safely called {\\em the codomain of~$f$}.\n   \\par For instance, Bourbaki initially defines a function \\cite[p.~76]{Bour54then} as a triple $(F, A, B)$ where $F$ is a functional relation with domain $A$ and range included in~$B$.  Such a triple is subsequently called an {\\em application from $A$ into $B$} \\cite[p.~76]{Bour54then}, which avoids confusion with using {\\em function} for a functional relation \\cite[p.~77]{Bour54then}.  The term {\\em codomain} is not mentioned in \\cite{Bour54then} --- so let's not blame Bourbaki! \n   \\par The engineering question is: what purpose might such a variant serve?\n   \\par For the sake of generality, this issue is best disassociated from the set of pairs view, whose predominance in the discussion thus far just reflects random literature samples from diverse areas of mathematics.  Many authors, including Lang~\\cite[p.~38]{Lang83unan}, Lee~\\cite[p.~48]{LeeV00sisy},  Royden~\\cite[p.~8]{Royd68rean} and Spivey~\\cite[p.~29]{Spiv89thzn}, note that a set of pairs is really a \\emph{representation} of a function, called its \\emph{graph}. Hence let's broaden the {\\em representational} {Definition~\\ref}{AB} to a {\\em conceptual} one, inspired by the Goursat/Courant style, but generalized to arbitrary domains and properly distinguishing $f$ from $f(x)$.  For instance, the ISO standard~\\cite[p.~15]{ISOs09quun} just says that a {\\em function} $f$ assigns to each $x$ in its domain a unique value $f(x)$.  Here ``assigns'' can be made precise by an {\\em assertion} of the form $A(x, f(x))$, called {\\em relation} by Bourbaki \\cite[p.~47]{Bour54then}, but not to be confused with a set of pairs. \n   \\par {\\em Equality} is pivotal for mathematical objects. Distinguishing functions on the basis of possible assignments outside their domain would be an useless complication, hence these values are best declared irrelevant for a function.  \n   \\par (A) The minimalist, ``no frills'' design reflecting this view is the following.\n\n\\begin{defin}[The {\\em function} concept: minimalist design]\\label{funcon}{~}\n\\par {\\em i.} A {\\em function} $f$ is an object fully specified by {\\em(a)}~a set ${\\mathcal{D}} f$, called {\\em the domain of $f$}, and {\\em(b)}~for each $x$ in ${\\mathcal{D}} f$ a unique {\\em value}, written $f(x)$ or $f\\,x$.\n\\par {\\em ii.} The stipulation ``{\\em fully specified}'' means that $f = g$ if {\\em(a)}~${\\mathcal{D}} f = {\\mathcal{D}} g$ and {\\em(b)}~$f(x) = g(x)$ for all $x$ in ${\\mathcal{D}} f$. {\\em(Note: ``only if'' by Leibniz's principle \\cite{Grie93logi})}\n\\par {\\em iii.} A {\\em function $f$ from $X$ to $Y$} is a function such that {\\em(a)}~${\\mathcal{D}} f = X$ and {\\em(b)}~$f(x) {\\in} Y$ for all $x$ in $X$.  Such a function is introduced by writing $f : X \\rightarrow Y$.\n\\end{defin}\n\n{Definition~\\ref}{funcon}.iii simply follows the ISO standard: ${\\mathcal{D}} f = X$ and ${\\mathcal{R}} f {\\subseteq} Y$, where ${\\mathcal{R}} f = \\{f(x) {\\,|\\,} x {:} {\\mathcal{D}} f\\}$. Types of the form $X \\rightarrow Y$ are partial specifications.  An illustration is defining $\\mathrm{sqrt} {:} {\\mathbb{R}}_{\\geq 0} \\rightarrow {\\mathbb{R}}_{\\geq 0}$ with $(\\mathrm{sqrt}\\,x)^2 = x$. {\\em Composition} is unrestricted: ${{\\mathcal{D}}\\,} (g {\\circ} f) = \\{x {:} {\\mathcal{D}} f {\\,|\\,} f(x) {\\in} {\\mathcal{D}} g\\}$ and $(g {\\circ} f)\\,x = g(f\\,x)$ as usual.\n   \\par Composition also supports {\\em specification by proxy}: specifying $g {:} Y \\rightarrow Z$ via $f {:} X \\rightarrowtriangle Y$ ($\\rightarrowtriangle$ indicating onto) and $h {:} X \\rightarrow Z$ by $g(f\\,x) = h\\,x$. {\\em Well-definedness} (functionality) of $g$ requires $h(x) = h(x')$ whenever $f(x) = f(x')$.\n   \\par An example is defining the inverse: let $g := f^-$, $Y := {\\mathcal{R}\\,} f$, $Z := X$ and  $h := {\\mathrm{id}}_X$. Well-definedness of $f^-$ amounts to $f$ being 1-1.  In the general scheme, if $f$ is 1-1, then $g$ is well-defined and $g {\\circ} f = h$ is equivalent to $g = h {\\circ} f^-$.  Pattern matching is an instance: compare $g(\\mathrm{cons}(a, x)) = h(a, x)$ and $g\\,s = h(\\mathrm{cons}^- s)$.\n   \\par The set of pairs view will remain a useful analogy, e.g., in defining $f^-$ as the object represented by the inverse relation, which is functional iff $f$ is 1-1.\n   \\par (B) A typical non-minimalist design variant of {Definition~\\ref}{funcon} would add: \n i.(c)~a~set ${\\mathcal{C}} f$, called {\\em the codomain of $f$};{\\hp1}\\ \n ii.(c) ${\\mathcal{C}} f = {\\mathcal{C}} g$;{\\hp1}\\ iii.(c) ${\\mathcal{C}} f = Y$.\n   \\par Logically, composition and inverses {\\em could} still be defined without restriction (exercise).  However, authors using codomains do restrict $g {\\circ} f$ by ${\\mathcal{D}} g = {\\mathcal{C}} f$ and define inverses for 1-1 functions only if the latter are ``onto'' [their codomain]. \n   \\par So the issue boils down to: what are the costs and the merits of codomains?  \n   \\par Shuard~\\cite{Shua75dima} published perhaps the only paper evaluating the function-with-codomain variant.  Her single (!) argument {\\em in favor} is using {\\em onto} as an adjective. Yet, the ability to say that ``$f$ is onto $Y$ but not onto $Z$'' is more selective.\n   \\par Shuard's argument {\\em against} is more solid: simplicity.  She states: ``{\\em Flett's definition wins hands down as simplicity in analysis is concerned}''. Her next statement, ``{\\em In algebra, however, it is more convenient to start by mentioning the codomain of a function}'' (resembling Myth \\#0), is left unsubstantiated.  Excellent algebra texts such as Herstein~\\cite{Hers64alge} do fine with the standard variant.  \n   \\par In Shuard's paper and all other sources consulted, suggestions that attaching a codomain {\\em might} be convenient turns out to be fallacious, typically overlooking that the standard view regarding $f : X \\rightarrow Y$ already implies ${\\mathcal{R}} f {\\subseteq} Y$.  This view covers all sensible purposes of $f : X \\rightarrow Y$, ``mentioning'' $Y$ included, and without making $Y$ a function attribute.  Only for topology further study is needed to determine whether viewing $Y$ as an attribute of a function $f : X \\rightarrow Y$ is just some tradition based on  similar oversights or has genuine advantages.\n   \\par Still, what's the harm in a function-with-codomain, beside complexity? \n   \\par From a conceptual and practical viewpoint, burdening a function with a codomain affects all other definitions, complicates equality and impoverishes the function algebra for inverses, composition, merge, override and so on \\cite{Meye91itpl}.  Shuard~\\cite[p.~10]{Shua75dima} notes that the only analysis book that she knows to use codomains~{\\cite{Spre70eora} gets into trouble by defining the inverse of a 1-1 function $f$ to have domain ${\\mathcal{R}} f$ as usual and ignoring that codomain users require surjectivity.  She adds that ``{\\em the distinction between $f : A \\rightarrow {\\mathbb{R}}$ and $f_1 : A \\rightarrow f(A)$ is so tedious that it is clearly better forgotten at this stage}''.  One might say: ``{\\em clearly better avoided from the start}'', matching Smith's view on equality \\cite[p.~189]{Smit10atta}. \n   \\par {\\em Aside: programming versus mathematics} {\\hp1} Types and signatures of ``functions'' in programming~\\cite[Section 3.8]{Garn10dima} and some proof assistants typically are unique attributes by design.  They are easier to implement than general symbolic computation of, say, ${{\\mathcal{D}}\\,} (g {\\circ} f)$, but remain rather crude approximations of types as partial specifications following the ISO standard.  Indeed, the generality provided free of charge by the minimalist/standard view (illustrated  for $g {\\circ} f$ and $f^-$) is common fare in {\\em mainstream mathematics}, by which we mean: the mathematics routinely applied by the large majority of users, ranging from mathematicians active in analysis/calculus, linear algebra, discrete math etc. to engineers active in signals and systems.  Such users would be justified in dismissing as impractical any definition that infringes on these ``acquired rights''.\n   \\par Similar considerations in the context of specification languages are found in~\\cite{Lamp99slan}.  In the specification language TLA$^+$~\\cite[p.~48]{Lamp03spec}, the notation $[X \\rightarrow Y]$ has the meaning of $X \\rightarrow Y$ as defined by the ISO standard.\n   \\par Not surprisingly, nearly all calculus/analysis texts avoid codomains and simply proceed from {Definition~\\ref}{AB} or \\ref{funcon} or equivalent, the most complete picture being presented by Flett~\\cite[pp.~4--6]{Flet66maan}.  In this manner, calculus/analysis books succeed in giving a proper account in about one page, without being too terse, and often before page 10.  Functions are too important to postpone their introduction beyond page 100, only to get them bogged down in unsoundness.\n   \\par {\\em Conclusion}\\hp2 For mainstream mathematics, attaching a codomain onto a function has no verified merits but increases complexity  and reduces generality.  Hence any definition that accepts such drawbacks entails a heavy obligation of justifying the design, even if it concerns only some niche area.\n\n\n\n\\section{Engineering mathematical abstraction}\n\n\n\n\\noindent Abstraction is a very useful intellectual tool in science, especially engineering. It allows reasoning about the essentials, without sidetracking by elements causing unnecessary complications. Of course, {\\em unnecessary} is the operative word.\n   \\par Being a tool, abstraction requires engineering. Criteria include not just soundness, but also effectiveness in reasoning. Parnas~\\cite{Parn90educ} deplored 25 years ago that ``{\\em Those working in theoretical computing science lack an appreciation for the simplicity and elegance of mature mathematics}''.   Little has changed. The context in \\cite{Parn90educ} makes clear that {\\em mature} refers to mainstream mathematics as characterized earlier. Symbolic reasoning has been kept from reaching maturity by decades of stifling in favor of ``narrative'' prose~\\cite{Vell09htpi}, but that is another story.\n   \\par Engineering mathematical abstraction involves {\\em balance}. Abstraction easily degenerates into obfuscation, making it ineffective as a tool for general use.\n\n\n\n\\section{Illustration A: functions and the Halmos principle}\n\n\n\n\\noindent The function concept is the result of a long evolution.  Its ``modern'' formulation as in {Definition~\\ref}{AB} is a one-liner in the most positive sense: a degree of simplicity and clarity that is unlikely to be surpassed. This is typical for a final design. Arguably, non-equivalent variants need a different name to avoid confusion\n\\footnote{Halmos~\\cite{Halm57bour} is quite amused by Bourbaki's habit of abandoning their ``innovations'' in favor of common terminology. Still, Bourbaki's term {\\em application} for the ``triples'' variant \\cite[p.~76]{Bour54then} at least avoids confusion with using {\\em function} for the common variant \\cite[p.~77]{Bour54then}.}.\n   \\par Yet even when using the set-of-pairs definition as a reference basis, in practice one rarely thinks about functions as sets, and set theory serves only as a handy framework, as noted by Halmos  \\cite[p.~31]{Halm60nast}, and illustrated by {Definition~\\ref}{funcon}.\n   \\par Reducing concepts to a set-theoretic representation is conceptually chafing and causes ``freak properties'' or ``accidental facts''  \\cite[pp.~25, 45]{Halm60nast}.  Two examples: defining a function as a set (of pairs) yields $(x,y) {\\in} f$, and defining an ordered pair $(a, b)$ as $\\{\\{a\\}, \\{a, b\\}\\}$ yields $\\{a, b\\} {\\in} (a, b)$.  Halmos considers such effects ``{\\em a small price to pay for conceptual economy}'' and offers two solutions.\n   \\par One solution is axiomatization.  Bourbaki~\\cite[p.~68]{Bour54then} characterizes pairs by the equality axiom $(x, y) = (x', y') {\\Rightarrow} x = x' {\\wedge} y = y'$.  {Definition~\\ref}{funcon} characterizes functions by the equality axiom $f = g \\Leftarrow {\\mathcal{D}} f = {\\mathcal{D}} g {\\wedge} {\\forall\\,} x {:} {\\mathcal{D}} f {\\,.\\,} f(x) = g(x)$. In both examples, the converse is trivial by Leibniz's principle~\\cite[p.~60]{Grie93logi}.\n   \\par The other solution consists in using overly concrete definitions only to derive theorems that capture the essence of a concept, and then declaring ``{\\em the definition has served its purpose by now and will never be used again}'' \\cite[p.~25]{Halm60nast}.  Although many others tacitly follow this approach as well, we name it the {\\em Halmos principle} after the author who made it explicit as a design strategy.\n   \\par According to Halmos, ``{\\em The mathematician's choice is between having to remember a few more axioms and forgetting a few accidental facts; the choice is pretty clearly a matter of taste}''.  Still, expressiveness and support for reasoning are more reliable criteria.  The choice also depends on each specific concept.\n   \\par For instance, distinguishing functions from sets as in {Definition~\\ref}{funcon} helps disambiguating common expressions such as $f^n$ and $S^n$.  This is secondary. \n    \\par For reasoning, the ``set of  pairs'' view remains a powerful simplifying analogy, as shown for composition and inverses.  It is linked to {Definition~\\ref}{funcon} as the {\\em graph} of a function: ${\\mathcal{G}} f = \\{(x, f\\,x) {\\,|\\,} x {:} {\\mathcal{D}} f\\}$. Clearly, $f = g {\\Rightarrow} {\\mathcal{G}} f = {\\mathcal{G}} g$ by Leibniz's principle. By {Definition~\\ref}{funcon}.ii, ${\\mathcal{G}} f = {\\mathcal{G}} g {\\Rightarrow} f = g$.  Hence ${\\mathcal{G}}$ is invertible and can be omitted (left implicit) when using the ``set of pairs'' view as an analogy.\n\n\n\n\\section{Illustration B: Preparing category theory for engineering}\n\n\n\n\n\\subsection{Categories and the Arnold Principle}\n\n\n\\noindent The practical potential of category theory has been demonstrated in~\\cite{Bird97aofp}.  This book, as well as \\cite{Arbi75asaf}, are among the best introductions to the subject.\n   \\par Still, an engineer would ask: {\\em why} use category theory? A non-evasive answer is: to support the algebraic elegance and practical benefits of the point-free style, which has proven useful throughout engineering. For instance, in systems modeling, this style has helped making common notations more general~\\cite{Bout03cgf} and free of errors that ``undermine the students' confidence in mathematics''~\\cite{LeeV00sisy}.\n   \\par Why {\\em category} theory? Because it is ready-made and seems plug-and-play.\n   \\par Yet, the literature based on this view reveals grave mismatches. Category theory is about {\\em arrows}.  In the {\\em strict} (i.e., textbook) variant, each arrow $a$ has a unique {\\em source} ${{\\mathrm{src}}\\,} a$ and {\\em target} ${{\\mathrm{tgt}}\\,} a$. {\\em Composition} $b {\\circ} a$ requires ${{\\mathrm{src}}\\,} b = {{\\mathrm{tgt}}\\,} a$.  In this setup, a {\\em function} $f$ corresponds to many {\\em arrows} (one for each triple $f, A, B$), as noted by Bird \\cite[p.~26]{Bird97aofp} and Pierce \\cite[p.~2]{Pier91ctcs}.  The target attribute inherits all burdens of the codomain.  Hence, in strict category theory, arrows do not fit {\\em relations} and {\\em functions} but {\\em correspondences} and {\\em applications} instead.\n   \\par Pierce \\cite[p.~3]{Pier91ctcs} adds that arrows fit functions in their ``ordinary mathematical meaning'' only in variants of category theory where one cannot always tell for an arrow what its source and target are.  But uniqueness of source and target is precisely why users of strict category theory feel forced to restrict composition!\n   \\par Such design decisions bring to mind the following familiar parable. \n   \\par {\\em The Suit}\\hp1 A man buys a new suit. When he finds it too tight at some places and too loose at others, the tailor shows him how twisting his arms, turning his feet and bending backwards brings relief. When the customer proudly hobbles along in his new suit, a passerby observes ``How sad, this man must have had a terrible accident''.  Says his companion, ``Yes, but he is lucky to have found a true master tailor who can make such a perfectly fitting suit''.\n   \\par The moral is that well-designed axiomatization is fitted to existing concepts, not the other way around like a straitjacket.  Typical examplary designs are group, ring and field theory \\cite{Hers64alge}: they capture commonalities of existing concepts of quite different nature, without distorting them to fit the axioms.\n   \\par Arnold~\\cite{Arno97otma}, one of the greatest 20th century mathematicians, denounces improper use of abstraction by ``the criminal algebraists-axiomatisators''.  Despite this hyperbole, one can hardly deny his observation that often ``{\\em the so-called `axioms' are in fact just (obvious) properties} [of the concepts of interest]''.  This suggests an apt guideline, here called the {\\em Arnold Principle}: unless an axiomatization is applied regularly to objects more abstract than those of primary interest, it is obfuscation.  Arnold mentions Whitney's theorem to warn that more abstract objects may not always exist.  Even if they do exist, proper axiomatization unifies them with the objects of primary interest, but never constrains the latter, which would amount to upside-down design.  Inability to adequately capture functions, ``the single most important and universal notion that runs through all of mathematics''~\\cite{Hers64alge}, inhibits the practicality of category theory.\n   \\par Rather than going for extremes such as dismissing either category theory or its flaws, we show how categorical concepts can suit mainstream mathematics.\n\n\n\\subsection{Reaping the benefits of category theory without the constraints}\n\n\n\\noindent Flawed axiomatization by upside-down design is most effectively avoided by starting from the objects of interest and deriving theorems reflecting abstract properties \\cite{Arno97otma,Bout88sacs}.  When appropriate (by Arnold's principle), such theorems can be recast as axioms afterwards.  The proofs then become evidence that the objects of interest do satisfy these axioms.  Thus, no effort is wasted.\n   \\par Proper design avoids misleading terminology by using {\\em relation} and {\\em function} only in their ordinary mathematical meaning.  For the concepts captured by strict category theory, safe terms are {\\em correspondence} and {\\em application} (or alternatives).  Abstractions of correspondences are often called {\\em allegories} \\cite{Bird97aofp,Frey90caal}.\n   \\par The relevant benefits of category theory are point-free expression and reasoning.  Still, good design should not cause a rift between point-free and point-wise styles, since practical applicability requires safe and smooth mixing of styles.\n   \\par One approach along these design guidelines is {\\em concrete category theory}, which starts from the primary objects of interest (relations and functions as usual, with the standard view on $f : X \\rightarrow Y$), and hence is ``ordinary mathematics''.\n   {\\par\\textbf{{(i)}}} We assume a {\\em relation} $R$ is defined conceptually in the style of {Definition~\\ref}{funcon} (exercise), with the set of pairs view as an analogy: $y\\,R\\,x {\\equiv} (x, y) {\\in} {\\mathcal{G}} R$ and $R = S {\\equiv} {\\mathcal{G}} R = {\\mathcal{G}} S$.  The domain ${{\\mathcal{D}}\\,} R$ and the range ${\\mathcal{R}\\,} R$, defined via {Definition~\\ref}{dora}, are proper attributes of $R$.  Bringing them into the picture often yields sharper results ($=$ instead of ${\\subseteq}$). Composition $S {\\circ} R$ (or $R\\;; S$) and converse $R{^{\\scriptscriptstyle\\smile}}$ follow {Definition~\\ref}{cmpcnv}.  The {\\em identity relation ${\\mathrm{id}}_A$ on $A$} with ${\\mathrm{id}}_A = {\\{{(a, a) {\\,|\\,} a {:} A}\\}}$. Predicate calculus yields the usual collection point-free formulas.\n   {\\par\\textbf{{(ii)}}} A relation $R$ is {\\em functional} iff $R {\\circ} R{^{\\scriptscriptstyle\\smile}} = {\\mathrm{id}}_{{\\mathcal{R}} R}$ (equivalently, $R {\\circ} R{^{\\scriptscriptstyle\\smile}} {\\subseteq} {\\mathrm{id}}_Y$ for $R : X {\\text{${{\\leftrightarrow\\hspace{-1.8ex}\\rightarrow}}$}} Y$).  Such a relation is called a {\\em function}, typically written $f$, $g$, $\\ldots$.\n   \\par Symbolism can be augmented by diagrams of arrows labeled by relation or function expressions, e.g., ${\\stackrel{{f}}{\\longrightarrow}} {\\stackrel{{g}}{\\longrightarrow}}\\;=\\;{\\stackrel{{f;g}}{\\longrightarrow}}$.  Optionally, types can be specified by labels at endpoints of arrows and shaping the latter like the type arrows ${\\text{${{\\leftrightarrow\\hspace{-1.8ex}\\rightarrow}}$}}$, ${\\rightarrow}$ and ${\\text { \\settowidth{\\wa}{{{\\text{${{\\rightarrow}}$}}}}\\settowidth {\\wb} {{\\raisebox{0.25ex}{{\\text{${{\\scriptscriptstyle/\\;}}$}}}}} {{\\text{${{\\rightarrow}}$}}}\\hskip-0.5\\wa\\hskip-0.5\\wb {\\raisebox{0.25ex}{{\\text{${{\\scriptscriptstyle/\\;}}$}}}}\\hskip0.5\\wa\\hskip-0.5\\wb}}$, more conveniently drawn as {\\raisebox{0.5ex}{\\small...}\\hspace{-.6ex}\\raisebox{0.21ex}{$\\scriptstyle\\succ$}}. Here are some illustrations:\n\n", "index": 1, "text": "\n\\[\\bfig\\small\n\\Atriangle/{<<->}`{<->>}`{<->>}/[Y{\\hp1} U`X`V;R`S`R ; S]\n\\Atriangle(1150,0)/{.>}`{<.}`{<.}/[U{\\hp1} Y`V`X;g`f`g {\\circ} f]\n\\Atriangle(2300,0)/{<-}`{->}`{.>}/[Y{\\hp1} U`X`V;f`g`f ; g]\n\\efig\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"\\bfig\\small\\Atriangle/{&lt;&lt;-&gt;}`{&lt;-&gt;&gt;}`{&lt;-&gt;&gt;}/[Y{\\hp 1}U`X`V;R`S`R;S]\\Atriangle(1%&#10;150,0)/{.&gt;}`{&lt;.}`{&lt;.}/[U{\\hp 1}Y`V`X;g`f`g{\\circ}f]\\Atriangle(2300,0)/{&lt;-}`{-&gt;%&#10;}`{.&gt;}/[Y{\\hp 1}U`X`V;f`g`f;g]\\efig\" display=\"block\"><mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\bfig</mtext></merror><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\Atriangle</mtext></merror><mo mathsize=\"90%\" stretchy=\"false\">/</mo><mo mathsize=\"90%\" stretchy=\"false\">\u226a</mo><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mo mathsize=\"90%\" stretchy=\"false\">&gt;</mo><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mo mathsize=\"90%\" stretchy=\"false\">&lt;</mo><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mo mathsize=\"90%\" stretchy=\"false\">\u226b</mo><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mo mathsize=\"90%\" stretchy=\"false\">&lt;</mo><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mo mathsize=\"90%\" stretchy=\"false\">\u226b</mo><mo mathsize=\"90%\" stretchy=\"false\">/</mo><mrow><mo maxsize=\"90%\" minsize=\"90%\">[</mo><mi mathsize=\"90%\">Y</mi><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\hp</mtext></merror><mn mathsize=\"90%\">1</mn><mi mathsize=\"90%\">U</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">X</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">V</mi><mo mathsize=\"90%\" stretchy=\"false\">;</mo><mi mathsize=\"90%\">R</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">S</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">R</mi><mo mathsize=\"90%\" stretchy=\"false\">;</mo><mi mathsize=\"90%\">S</mi><mo maxsize=\"90%\" minsize=\"90%\">]</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\Atriangle</mtext></merror><mrow><mo maxsize=\"90%\" minsize=\"90%\">(</mo><mn mathsize=\"90%\">1150</mn><mo mathsize=\"90%\" stretchy=\"false\">,</mo><mn mathsize=\"90%\">0</mn><mo maxsize=\"90%\" minsize=\"90%\">)</mo></mrow><mo mathsize=\"90%\" stretchy=\"false\">/</mo><mo mathsize=\"90%\" stretchy=\"false\">.</mo><mo mathsize=\"90%\" stretchy=\"false\">&gt;</mo><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mo mathsize=\"90%\" stretchy=\"false\">&lt;</mo><mo mathsize=\"90%\" stretchy=\"false\">.</mo><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mo mathsize=\"90%\" stretchy=\"false\">&lt;</mo><mo mathsize=\"90%\" stretchy=\"false\">.</mo><mo mathsize=\"90%\" stretchy=\"false\">/</mo><mrow><mo maxsize=\"90%\" minsize=\"90%\">[</mo><mi mathsize=\"90%\">U</mi><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\hp</mtext></merror><mn mathsize=\"90%\">1</mn><mi mathsize=\"90%\">Y</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">V</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">X</mi><mo mathsize=\"90%\" stretchy=\"false\">;</mo><mi mathsize=\"90%\">g</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">f</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">g</mi><mo mathsize=\"90%\" stretchy=\"false\">\u2218</mo><mi mathsize=\"90%\">f</mi><mo maxsize=\"90%\" minsize=\"90%\">]</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\Atriangle</mtext></merror><mrow><mo maxsize=\"90%\" minsize=\"90%\">(</mo><mn mathsize=\"90%\">2300</mn><mo mathsize=\"90%\" stretchy=\"false\">,</mo><mn mathsize=\"90%\">0</mn><mo maxsize=\"90%\" minsize=\"90%\">)</mo></mrow><mo mathsize=\"90%\" stretchy=\"false\">/</mo><mo mathsize=\"90%\" stretchy=\"false\">&lt;</mo><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mo mathsize=\"90%\" stretchy=\"false\">&gt;</mo><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mo mathsize=\"90%\" stretchy=\"false\">.</mo><mo mathsize=\"90%\" stretchy=\"false\">&gt;</mo><mo mathsize=\"90%\" stretchy=\"false\">/</mo><mrow><mo maxsize=\"90%\" minsize=\"90%\">[</mo><mi mathsize=\"90%\">Y</mi><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\hp</mtext></merror><mn mathsize=\"90%\">1</mn><mi mathsize=\"90%\">U</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">X</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">V</mi><mo mathsize=\"90%\" stretchy=\"false\">;</mo><mi mathsize=\"90%\">f</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">g</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">f</mi><mo mathsize=\"90%\" stretchy=\"false\">;</mo><mi mathsize=\"90%\">g</mi><mo maxsize=\"90%\" minsize=\"90%\">]</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\efig</mtext></merror></mrow></math>", "type": "latex"}, {"file": "1601.00989.tex", "nexttext": "\n\\caption{Concrete Categorical Cartesian Product and Disjoint Union}\\label{CCPU}\n\\end{figure}\n\nThe proof of (ii) shows that every $I$-family ${\\gamma}$ with the stated property is isomorphic to ${\\uppi}$, hence ``unique up to isomorphism''.\n   \\par This {\\em theorem} faithfully reflects the {\\em definition} of products in category theory \\cite[p.~19]{Pier91ctcs}, while avoiding ``unacceptable but generally accepted'' notations like $(T_i)_{i \\in I}$ for just $T$ and, worse, $\\langle f_i\\rangle_{i \\in I}$ for just $\\langle f\\rangle$, which was proven to be $f{^{\\mathsf{T}}}$.\n   \\par {\\em Aside}{\\hp1} Clearly, ${\\gamma} {:} {\\Pi}{\\hspace*{{0.2}ex}}_{i {:} I} (C \\rightarrow T_i)$ depends on $C$ and $T$.  Similarly, ${\\uppi}$ depends on $T$, which is why some authors write ${\\uppi}^T$.  One can also see the ${\\uppi}_i$ as {\\em operators} (Lamport \\cite[p.~69]{Lamp03spec}) which, unlike functions, do not have a domain. A third view is offered by theories allowing for the set (or {\\em class}) of all pairs, such as the algebra of relations in Tarski~\\cite{Tars87stwv} or set theory with a universal set~$\\mathcal{U}$ in Holmes, where axioms \\cite[p.~30]{Holmxxstus} assert the existence of the {\\em equality relation} $\\{(x, x) {\\,|\\,} x {:} \\mathcal{U}\\}$ and {\\em projection relations} such as $\\{((x, y), x) {\\,|\\,} x {:} \\mathcal{U}; y {:} \\mathcal{U}\\}$.\n\n\\paragraph{Sum}\n\nThis topic illustrates how objects with quite different point-wise definitions resemble each other in point-free form, more specifically as duals.\n\n\\begin{defin}[Disjoint union]\\label{disu}\nThe {\\em disjoint union} ${\\Sigma}{\\hspace*{{0.2}ex}} T$ of a family $T$ of sets is the set of (ordered) pairs such that $(i, x) {\\in} {\\Sigma}{\\hspace*{{0.2}ex}} T$ iff $i {\\in} {{\\mathcal{D}}\\,} T$ and $x {\\in} T_i$.\n\\end{defin}\n\nThis concept is used to express choice in formal language semantics~\\cite[p.~74]{Meye91itpl}.\n   \\par To obtain the usual point-free characterization of ${\\Sigma}{\\hspace*{{0.2}ex}} T$,  we let $I := {{\\mathcal{D}}\\,} T$ and define an $I$-family ${\\uplambda}$ of {\\em labeling functions} by ${\\uplambda}_i {\\in} T_i \\rightarrow {\\Sigma}{\\hspace*{{0.2}ex}} T$ and ${\\uplambda}_i x = (i, x)$.\n\n\\begin{therm}\\label{sumthm} Let $T$ be an $I$-family of sets.  \n{\\par\\noindent\\textbf{{\\em(i)}}} For any set $S$ and $I$-family $f$ of functions with $f_i {\\in} T_i \\rightarrow S$, there exists a unique $g : {\\Sigma}{\\hspace*{{0.2}ex}} T \\rightarrow S$ satisfying $f_i = g {\\circ} {\\uplambda}_i$. Specifically, $g = f{^\\text{\\reflectbox{$\\mathsf C$}}}$ {\\em (uncurry)}.\n{\\par\\noindent\\textbf{{\\em(ii)}}} Let ${\\updelta}$ be an $I$-family of functions with ${\\updelta}_i {\\in} T_i \\rightarrow D$ and the property that, for any set $S$ and $I$-family $f$ of functions with $f_i {\\in} T_i \\rightarrow S$, there exists a unique $h : D \\rightarrow S$ satisfying $f_i = h {\\circ} {\\updelta}_i$. Then there is a bijection between $D$ and ${\\Sigma}{\\hspace*{{0.2}ex}} T$.\n\\em\n{\\par\\noindent\\textbf{{Proof}}}{\\hp1} \\textbf{(i)} Solving $f_i = g {\\circ} {\\uplambda}_i$ for $g$: for any $i$ in $I$ and $s$ in $S$, $f_i s = (g {\\circ} {\\uplambda}_i)\\,s = g({\\uplambda}_i s) = g(i, s)$. By definition, $f{^\\text{\\reflectbox{$\\mathsf C$}}} (i, s) = f_i s$, so $g = f{^\\text{\\reflectbox{$\\mathsf C$}}}$.\n{\\em Example}\\/: let $f := {\\uplambda}$, so ${\\uplambda}_i = {\\uplambda}{^\\text{\\reflectbox{$\\mathsf C$}}} {\\circ} {\\uplambda}_i$.  Note that ${\\uplambda}{^\\text{\\reflectbox{$\\mathsf C$}}}(i, x) = {\\uplambda}_i x = (i, x) = {\\mathrm{id}}_{{\\Sigma}{\\hspace*{{0.2}ex}} T} (i, x)$.   In fact, ${\\uplambda}{^\\text{\\reflectbox{$\\mathsf C$}}} = {\\mathrm{id}}_{{\\Sigma}{\\hspace*{{0.2}ex}} T}$.\n{\\par\\noindent\\textbf{{(ii)}}} Letting $f := {\\updelta}$ in (i), ${\\updelta}_i = {\\updelta}{^\\text{\\reflectbox{$\\mathsf C$}}} {\\circ} {\\uplambda}_i$.  Letting $f := {\\uplambda}$ in (ii), ${\\uplambda}_i = h {\\circ} {\\updelta}_i$.  Hence ${\\updelta}_i = {\\updelta}{^\\text{\\reflectbox{$\\mathsf C$}}} {\\circ} h {\\circ} {\\updelta}_i$ and ${\\uplambda}_i = h {\\circ} {\\updelta}{^\\text{\\reflectbox{$\\mathsf C$}}} {\\circ} {\\uplambda}_i$. By uniqueness, ${\\updelta}{^\\text{\\reflectbox{$\\mathsf C$}}} {\\circ} h = {\\mathrm{id}}_D$ and $h {\\circ} {\\updelta}{^\\text{\\reflectbox{$\\mathsf C$}}} = {\\mathrm{id}}_{{\\Sigma}{\\hspace*{{0.2}ex}} T}$.  So ${\\updelta}{^\\text{\\reflectbox{$\\mathsf C$}}}$ is a bijection from $D$ to ${\\Sigma}{\\hspace*{{0.2}ex}} T$ and $h$ is its inverse.\n\\end{therm}\n\n\\paragraph{Relations, point-free style}\n\nRelational properties of the Cartesian product can be similarly expressed and explored in point-free style.  For instance, given an $I$-family $R$ of relations $R_i$ from $S$ to $T_i$, let us aim for a relation $G$ from $S$ to ${\\Pi}{\\hspace*{{0.2}ex}} T$ such that ${\\uppi}_i {\\circ} G = R_i$.  This requires ${\\uppi}{^{\\scriptscriptstyle\\smile}}_i {\\circ} {\\uppi}_i {\\circ} G = {\\uppi}{^{\\scriptscriptstyle\\smile}}_i {\\circ} R_i$ and, since ${\\mathrm{id}}_{{\\Pi}{\\hspace*{{0.2}ex}} T} {\\subseteq} {\\uppi}{^{\\scriptscriptstyle\\smile}}_i {\\circ} {\\uppi}_i$, also $G {\\subseteq} {\\uppi}{^{\\scriptscriptstyle\\smile}}_i {\\circ} R_i$ (for all $i$ in $I$), hence $G {\\subseteq} {{\\raisebox{-.1 ex}{\\large\\pacmat{\\cap}}}\\,} i {:} I {\\,.\\,} {\\uppi}{^{\\scriptscriptstyle\\smile}}_i {\\circ} R_i$.  Let us define $\\langle R\\rangle$ as ${{\\raisebox{-.1 ex}{\\large\\pacmat{\\cap}}}\\,} i {:} I {\\,.\\,} {\\uppi}{^{\\scriptscriptstyle\\smile}}_i {\\circ} R_i$, so $t\\langle R\\rangle s {\\equiv} I = {\\emptyset} {\\vee} (t {\\in} {\\Pi}{\\hspace*{{0.2}ex}} T {\\wedge} {\\forall\\,} i {:} I {\\,.\\,} t_i\\,R_i\\,s)$.\n   \\par In general, this only yields ${\\uppi}_i {\\circ} \\langle R\\rangle {\\subseteq} R_i$, as in category theory.  Still, if all $R_i$ share a common domain, a sharper result is ${\\uppi}_i {\\circ} \\langle R\\rangle = R_i$, the design goal.  Even sharper is the pointwise form $y\\,({\\uppi}_i {\\circ} \\langle R\\rangle)\\,s {\\equiv} y\\,R_i\\,s {\\wedge} s {\\in} {{\\raisebox{-.1 ex}{\\large\\pacmat{\\cap}}}\\,} i {:} I {\\,.\\,} {{\\mathcal{D}}\\,} R_i$.\n   \\par Assuming $I \\neq {\\emptyset}$, let $T$ and $T'$ be $I$-families of sets and $R$ an $I$-family of relations $R_i$ from $T_i$ to $T'_i$. Define ${\\text{\\large${|}{|}$}} R$ from ${\\Pi}{\\hspace*{{0.2}ex}} T$ to ${\\Pi}{\\hspace*{{0.2}ex}} T'$ by ${\\text{\\large${|}{|}$}} R = \\langle i {:} I {\\,.\\,} R_i {\\circ} {\\uppi}_i\\rangle$, generalizing \\cite[p.~114]{Bird97aofp}.  Now $t' ({\\text{\\large${|}{|}$}} R) t {\\equiv} t' {\\in} {\\Pi}{\\hspace*{{0.2}ex}} T' {\\wedge} t {\\in} {\\Pi}{\\hspace*{{0.2}ex}} T {\\wedge} {\\forall\\,} i {:} I {\\,.\\,} t'_i\\,R_i\\,t_i$.  \n\n\\paragraph{Functors}\n\nA {\\em functor} in category theory maps objects to objects and arrows to arrows. Often one uses the same symbol for both maps, e.g., writing ${\\times}$ for ${\\,{\\pacmat{{|}{|}}}\\,}$, but that is not necessary \\cite[p.~30]{Bird97aofp}. Although notational economy is commendable, in ``working mathematics'' one prefers combining various concepts as convenient, yet still avoid notational confusion.  Hence, if one views relations as sets, the need to distinguish between $R {\\,{\\pacmat{{|}{|}}}\\,} S$ and $R {\\times} S$ is evident. The operator ${\\,{\\pacmat{{|}{|}}}\\,}$ is called {\\em shuffle} in some functional languages and {\\em parallel} by Meyer \\cite[p.~36]{Meye91itpl}.\n\n\\paragraph{Tabulations}\n\nTabulations are helpful in point-free reasoning \\cite{Bird97aofp}.  Let $R {:} X {\\text{${{\\leftrightarrow\\hspace{-1.8ex}\\rightarrow}}$}} Y$. Now $f : R \\rightarrow X$ with $f(x, y) = x$ and $g : R \\rightarrow Y$ with $g(x, y) = y$ satisfy both $R = g {\\circ} f{^{\\scriptscriptstyle\\smile}}$ and $(f{^{\\scriptscriptstyle\\smile}} {\\circ} f) {\\cap} (g{^{\\scriptscriptstyle\\smile}} {\\circ} g) = {\\mathrm{id}}_R$. \n   \\par In category theory, a {\\em tabulation} of a correspondence arrow $r$ from $X$ to $Y$ is a pair of application arrows $f$ from $Z$ to $X$ and $g$ from $Z$ to $Y$ jointly satisfying $r = g {\\circ} f{^{\\scriptscriptstyle\\smile}}$ and $(f{^{\\scriptscriptstyle\\smile}} {\\circ} f) {\\cap} (g{^{\\scriptscriptstyle\\smile}} {\\circ} g) = {\\mathrm{id}}_Z$.  Similar concepts in a more general setting are discussed in Tarski \\cite[p.~96]{Tars87stwv}.\n\n\\paragraph{Currying}\n\nIn its most basic form, Currying transforms a function $f {:} X {\\times} Y \\rightarrow Z$ into a function $f{^\\mathsf{C}}$ of type $X \\rightarrow (Y \\rightarrow Z)$ such that $f{^\\mathsf{C}} x\\,y = f(x, y)$.  For a point-free characterization \\cite[p.~72]{Bird97aofp}\\cite[p.~33]{Pier91ctcs}, one uses an {\\em evaluation} or {\\em application} function $\\alpha_{Y,Z} {:} (Y \\rightarrow Z) {\\times} Y \\rightarrow Z$ defined by $\\alpha_{Y,Z}(g, y) = g(y)$.  One can verify that $f = \\alpha_{Y,Z} {\\circ} (f{^\\mathsf{C}} {\\,{\\pacmat{{|}{|}}}\\,} {\\mathrm{id}}_Y)$; in fact, $h = f{^\\mathsf{C}} \\equiv \\alpha_{Y,Z} {\\circ} (h {\\,{\\pacmat{{|}{|}}}\\,} {\\mathrm{id}}_Y) = f$ (uniqueness).\n\n", "itemtype": "equation", "pos": 58711, "prevtext": "\n\nRecall that types are partial specifications for, not attributes of, the arrows.  Normally, extra structure naturally merges endpoint labels at a common vertex. Then diagrams look exactly as in strict category theory, but without  constraints.  In the following examples, it will become evident that attaching a target or codomain to a function or relation would only provide negative added value.\n\n\n\\subsection{Some illustrations of concrete category theory --- selected topics}\n\n\n\\noindent{\\em Convention}{\\hp1} In some contexts, {\\em family} is a graphic synonym for {\\em function} \\cite[p.~77]{Bour54then} \\cite[p.~34]{Halm60nast}. An {\\em $I$-family} is a function with domain $I$, called {\\em index set}.\n\n\\paragraph{Product}\n\nThe first topic has significant fundamental and practical interest. \n\n\\begin{defin}[Product]\\label{prddfn}\nThe {\\em Cartesian product} ${\\Pi}{\\hspace*{{0.2}ex}} T$ of a family $T$ of sets is the set of functions $f$ such that ${\\mathcal{D}} f = {{\\mathcal{D}}\\,} T$ and $f(x) {\\in} T(x)$ for all $x$ in ${\\mathcal{D}} f$.\n\\end{defin}\n\nProducts support {\\em dependent types} and {\\em tolerances on functions} \\cite{Bout03cgf} that can be tight, e.g., if $T$ is a family of singletons, declaring $f : {\\Pi}{\\hspace*{{0.2}ex}} T$ fully specifies $f$.  Hence types as partial specifications can be arbitrarily fine, and ${\\Pi}{\\hspace*{{0.2}ex}} T {\\subseteq} {{\\mathcal{D}}\\,} T \\rightarrow {{\\raisebox{-.1 ex}{\\large\\pacmat{\\cup}}}\\,} T$.\n   \\par Another example is $T := (X, Y)$.  An $n$-{\\em tuple} is a function whose domain consists of the first $n$ natural numbers \\cite[p.~45]{Halm60nast}\\cite[p.~75]{Kran05raaf}\\cite[p.~9]{Royd68rean}.  For an $n$-tuple $T$ of sets, one can use infix notation, e.g., ${\\Pi}{\\hspace*{{0.2}ex}}(X, Y) = X {\\times} Y$.  This view also resolves the ``terminological friction'' discussed by Halmos \\cite[p.~36]{Halm60nast}.\n   \\par To obtain the usual point-free characterization of ${\\Pi}{\\hspace*{{0.2}ex}} T$,  we let $I := {{\\mathcal{D}}\\,} T$ and define an $I$-family ${\\uppi}$ of {\\em projection functions} by ${\\uppi}_i {\\in} {\\Pi}{\\hspace*{{0.2}ex}} T \\rightarrow T_i$ and ${\\uppi}_i t = t_i$. Note: an illustrative equivalent declaration is ${\\uppi} {:} {\\Pi}{\\hspace*{{0.2}ex}}_{i {:} I} ({\\Pi}{\\hspace*{{0.2}ex}} T \\rightarrow T_i)$.\n\n\\begin{therm}\\label{prdthm} Let $T$ be an $I$-family of sets, all nonempty {\\em (to avoid ${\\Pi}{\\hspace*{{0.2}ex}} T = \\emptyset$)}.  \n{\\par\\noindent\\textbf{{\\em(i)}}} For any set $S$ and $I$-family $f$ of functions with $f_i {\\in} S \\rightarrow T_i$, there exists a unique $g : S \\rightarrow {\\Pi}{\\hspace*{{0.2}ex}} T$ satisfying $f_i = {\\uppi}_i {\\circ} g$. Specifically, $g = f{^{\\mathsf{T}}}$ {\\em (transpose)}.\n{\\par\\noindent\\textbf{{\\em(ii)}}} Let ${\\gamma}$ be an $I$-family of functions with ${\\gamma}_i {\\in} C \\rightarrow T_i$ and the property that, for any set $S$ and $I$-family $f$ of functions with $f_i {\\in} S \\rightarrow T_i$, there exists a unique $h : S \\rightarrow C$ satisfying $f_i = {\\gamma}_i {\\circ} h$. Then there is a bijection between $C$ and ${\\Pi}{\\hspace*{{0.2}ex}} T$.\n\\em\n{\\par\\noindent\\textbf{{Proof}}}{\\hp1} \\textbf{(i)} Solving $f_i = {\\uppi}_i {\\circ} g$ for $g$: for any $i$ in $I$ and $s$ in $S$, $f_i s = ({\\uppi}_i {\\circ} g)\\,s = {\\uppi}_i(g\\,s) = (g\\,s)\\,i$. By definition, $(f{^{\\mathsf{T}}} s) i = f_i s$, so $g = f{^{\\mathsf{T}}}$.\n{\\em Example}\\/: let $f := {\\uppi}$, so ${\\uppi}_i = {\\uppi}_i {\\circ} {\\uppi}{^{\\mathsf{T}}}$.  Note that $({\\uppi}{^{\\mathsf{T}}} t) i = {\\uppi}_i t = t_i = ({\\mathrm{id}}_{{\\Pi}{\\hspace*{{0.2}ex}} T} t) i$.  In fact, ${\\uppi}{^{\\mathsf{T}}} = {\\mathrm{id}}_{{\\Pi}{\\hspace*{{0.2}ex}} T}$.\n{\\par\\noindent\\textbf{{(ii)}}} Letting $f := {\\gamma}$ in (i), ${\\gamma}_i = {\\uppi}_i {\\circ} {\\gamma}{^{\\mathsf{T}}}$.  Letting $f := {\\uppi}$ in (ii), ${\\uppi}_i = {\\gamma}_i {\\circ} h$.  Hence ${\\gamma}_i = {\\gamma}_i {\\circ} h {\\circ} {\\gamma}{^{\\mathsf{T}}}$ and ${\\uppi}_i = {\\uppi}_i {\\circ} {\\gamma}{^{\\mathsf{T}}} {\\circ} h$. By uniqueness, $h {\\circ} {\\gamma}{^{\\mathsf{T}}} = {\\mathrm{id}}_C$ and ${\\gamma}{^{\\mathsf{T}}} {\\circ} h = {\\mathrm{id}}_{{\\Pi}{\\hspace*{{0.2}ex}} T}$.  So ${\\gamma}{^{\\mathsf{T}}}$ is a bijection from $C$ to ${\\Pi}{\\hspace*{{0.2}ex}} T$ and $h$ is its inverse.\n\\end{therm}\n\nThis compact yet detailed proof was made possible by the {\\em generic operator} ${^{\\mathsf{T}}}$ for {\\em transposition} \\cite{Bout03cgf}, defined by $(f{^{\\mathsf{T}}} s) i = f_i s$, as recalled inside the proof.  Dependencies may be easier to trace by writing $\\mathrm{g}_f$ for $g$ in part (i) and $\\mathrm{h}_{{\\gamma},f}$ for $h$ in part (ii) of the statement.  Thus, $f := {\\uppi}$ makes $\\text{h}_{{\\gamma},{\\uppi}}$ the inverse of ${\\gamma}{^{\\mathsf{T}}}$.\n   \\par Part (i) is depicted in Figure \\ref{CCPU}.\nDashed lines reflect multiple instances, one for each $i$ in $I$, forming a 3D cone.\n\n\\begin{figure}[h!]\n", "index": 3, "text": "\n\\[\\bfig\\small\n\\ptriangle/{-->}`{<-}`{<--}/[{{\\Pi}{\\hspace*{{0.2}ex}} T}`{T_i}`S;{{\\uppi}_i}`{f{^{\\mathsf{T}}}}`{f_i}]\n\\ptriangle(1200,0)/{<--}`{->}`{-->}/[{{\\Sigma}{\\hspace*{{0.2}ex}} T}`{T_i}`S;{{\\uplambda}_i}`{f{^\\text{\\reflectbox{$\\mathsf C$}}}}`{f_i}]\n\\efig\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"\\bfig\\small\\ptriangle/{--&gt;}`{&lt;-}`{&lt;--}/[{{\\Pi}{\\hskip 0.0pt}T}`{T_{i}}`S;{{%&#10;\\uppi}_{i}}`{f{{}^{\\mathsf{T}}}}`{f_{i}}]\\ptriangle(1200,0)/{&lt;--}`{-&gt;}`{--&gt;}/[%&#10;{{\\Sigma}{\\hskip 0.0pt}T}`{T_{i}}`S;{{\\uplambda}_{i}}`{f{{}^{\\text{\\reflectbox%&#10;{$\\mathsf{C}$}}}}}`{f_{i}}]\\efig\" display=\"block\"><mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\bfig</mtext></merror><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\ptriangle</mtext></merror><mo mathsize=\"90%\" stretchy=\"false\">/</mo><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mo mathsize=\"90%\" stretchy=\"false\">&gt;</mo><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mo mathsize=\"90%\" stretchy=\"false\">&lt;</mo><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mo mathsize=\"90%\" stretchy=\"false\">&lt;</mo><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mo mathsize=\"90%\" stretchy=\"false\">/</mo><mrow><mo maxsize=\"90%\" minsize=\"90%\">[</mo><mi mathsize=\"90%\" mathvariant=\"normal\">\u03a0</mi><mi mathsize=\"90%\">T</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><msub><mi mathsize=\"90%\">T</mi><mi mathsize=\"90%\">i</mi></msub><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">S</mi><mo mathsize=\"90%\" stretchy=\"false\">;</mo><msub><mi mathsize=\"90%\" mathvariant=\"normal\">\u03c0</mi><mi mathsize=\"90%\">i</mi></msub><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">f</mi><mmultiscripts><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mprescripts/><none/><mi mathsize=\"90%\">\ud835\uddb3</mi></mmultiscripts><msub><mi mathsize=\"90%\">f</mi><mi mathsize=\"90%\">i</mi></msub><mo maxsize=\"90%\" minsize=\"90%\">]</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\ptriangle</mtext></merror><mrow><mo maxsize=\"90%\" minsize=\"90%\">(</mo><mn mathsize=\"90%\">1200</mn><mo mathsize=\"90%\" stretchy=\"false\">,</mo><mn mathsize=\"90%\">0</mn><mo maxsize=\"90%\" minsize=\"90%\">)</mo></mrow><mo mathsize=\"90%\" stretchy=\"false\">/</mo><mo mathsize=\"90%\" stretchy=\"false\">&lt;</mo><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mo mathsize=\"90%\" stretchy=\"false\">&gt;</mo><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mo mathsize=\"90%\" stretchy=\"false\">-</mo><mo mathsize=\"90%\" stretchy=\"false\">&gt;</mo><mo mathsize=\"90%\" stretchy=\"false\">/</mo><mrow><mo maxsize=\"90%\" minsize=\"90%\">[</mo><mi mathsize=\"90%\" mathvariant=\"normal\">\u03a3</mi><mi mathsize=\"90%\">T</mi><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><msub><mi mathsize=\"90%\">T</mi><mi mathsize=\"90%\">i</mi></msub><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">S</mi><mo mathsize=\"90%\" stretchy=\"false\">;</mo><msub><mi mathsize=\"90%\" mathvariant=\"normal\">\u03bb</mi><mi mathsize=\"90%\">i</mi></msub><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mi mathsize=\"90%\">f</mi><mmultiscripts><mi mathsize=\"90%\" mathvariant=\"normal\">`</mi><mprescripts/><none/><mpadded depth=\"1.3pt\" height=\"4.4pt\" width=\"4.7pt\"><mi mathsize=\"90%\">\ud835\udda2</mi></mpadded></mmultiscripts><msub><mi mathsize=\"90%\">f</mi><mi mathsize=\"90%\">i</mi></msub><mo maxsize=\"90%\" minsize=\"90%\">]</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\efig</mtext></merror></mrow></math>", "type": "latex"}, {"file": "1601.00989.tex", "nexttext": "\n\nThe categorical view is that the object $X \\rightarrow Y$ (often written $Y^X$) is fully characterized by the existence of an arrow $\\alpha_{Y,Z} {:} (Y \\rightarrow Z) {\\times} Y \\rightarrow Z$ such that there is a unique arrow $f{^\\mathsf{C}}$ satisfying $f = \\alpha_{Y,Z} {\\circ} (f{^\\mathsf{C}} {\\,{\\pacmat{{|}{|}}}\\,} {\\mathrm{id}}_Y)$.\n   \\par In the wider setting of common mathematics, $f{^\\mathsf{C}}$ is defined for any function~$f$ whose domain is a set $R$ of pairs as follows: ${\\mathcal{D}} f{^\\mathsf{C}} = {{\\mathcal{D}}\\,} R$ and, for any $x$ in ${\\mathcal{D}} f{^\\mathsf{C}}$, $f{^\\mathsf{C}} x {\\in} \\{y {:} {\\mathcal{R}\\,} R {\\,|\\,} (x, y) {\\in} R\\} \\rightarrow {\\mathcal{R}} f$ with $f{^\\mathsf{C}} x\\,y = f(x,y)$.  {\\em Example}: if ${\\mathcal{D}} f = \\{(0,5), (3, 1), (3,2)\\}$ then ${\\mathcal{D}} f{^\\mathsf{C}} = \\{0, 3\\}$, ${{\\mathcal{D}}\\,} (f{^\\mathsf{C}} 3) = \\{1, 2\\}$ and $f{^\\mathsf{C}} 3\\,2 = f(3, 2)$.\n   \\par Conversely, uncurrying $F{^\\text{\\reflectbox{$\\mathsf C$}}}$ is defined for any family of functions $F$ as follows: $F{^\\text{\\reflectbox{$\\mathsf C$}}} {\\in} \\{(x, y) {:} {\\mathcal{D}} F {\\times} {{\\raisebox{-.1 ex}{\\large\\pacmat{\\cup}}}\\,}({\\mathcal{D}} {\\circ} F) {\\,|\\,} y {\\in} {{\\mathcal{D}}\\,} (F\\,x)\\} \\rightarrow {{\\raisebox{-.1 ex}{\\large\\pacmat{\\cup}}}\\,}({\\mathcal{R}} {\\circ} F)$ with $F{^\\text{\\reflectbox{$\\mathsf C$}}}(x, y) = F\\,x\\,y$.\n   \\par Note that $(f{^\\mathsf{C}}){^\\text{\\reflectbox{$\\mathsf C$}}} = f$, but $(F{^\\text{\\reflectbox{$\\mathsf C$}}}){^\\mathsf{C}} = F$ only if ${\\mathcal{R}} F$ contains no empty function.\n\n\n\n\\section{Concluding remarks}\n\n\n\n\\noindent The first part of this paper argued that mathematical definitions and notations are the result of {\\em design} and hence benefit from engineering principles. \n   \\par This was illustrated for some very basic concepts that have fallen into disrepair, apparently due to habits that noted mathematicians consider ``unacceptable'' or evidence of ``glaring perversity''.  Indeed, only perversity explains the neglect for so many impeccable accounts that have been around since decades.\n   \\par Simple design guidelines go a long way.  In particular, definitions require diligent engineering. The discipline of always explicitly justifying design decisions incites more thoughtfulness.  Halmos~\\cite{Halm60nast} provides an unsurpassed example.\n   \\par Judicious use of symbolism is another invaluable tool for sanity checking.  Defining concepts not just in prose but also by very simple formulas, as in Suppes \\cite[p.~57, 86]{Supp72axst}, arguably would have avoided the {\\em codomain} blunder.\n   \\par One empirical engineering principle that does {\\em not} hold in mathematics is that performance requires complexity.  A ``crystal radio'' needs just one (passive) semiconductor; a software-defined radio (SDR) performs better but uses billions of transistors.  For relations and functions, the standard variant is the simplest, yet was found more versatile and general than variants with codomains.  Clearly a very onerous burden of justification rests on such variant definitions!\n   \\par The second part focused on making category theory practical.  Historically, practical use was not a concern, so the need for re-engineering is no surprise.\n   \\par Appreciating this fact took a scholar like Jos\\'e Oliveira, supported by his  background in electrical engineering.  One of his recent papers \\cite{Oliv14prah} points out how relation algebra requires adequate {\\em preparation} to suit the intended purpose.\n   \\par Whereas \\cite{Oliv14prah} is more advanced, we have shown how liberating category theory from unjustified constraints (similar to codomains) extends its practical applicability while preserving its essential ideas, and how full compatibility with ``ordinary mathematics'' makes the style of expression and reasoning accessible to anyone with a high school background and a taste for algebraic elegance.\n   \\par In this way, the basic ideas may become useful and appealing to a wider scientific community rather than remain jargon for a small group of aficionados.\n\n\\paragraph{Acknowledgement} I like to thank Jeremy Gibbons and an anonymous reviewer for many useful comments during the many revisions of this paper and their exemplary patience in discussing critical issues.\n\n\n\n\\section*{References}\n\n\n\n\\begin{thebibliography}{1}\n\n\\small\n\\bibitem{Apos67calc} Tom M. Apostol, \\emph{Calculus, Vol.\\ I}, 2nd.\\ ed. John Wiley (1967)\n\n\\bibitem{Arbi75asaf} Michael A. Arbib and Ernest G. Manes, \\emph{Arrows, structures and functors --- The Categorical Imperative}. Academic Press (1975)\n\n\\bibitem{Arno97otma} Vladimir I. Arnold, \\emph{On Teaching Mathematics}.  Lecture on mathematics education, Paris (1997) \\href{http://pauli.uni-muenster.de/~munsteg/arnold.html}{http://pauli.uni-muenster.de/\\~{}munsteg/arnold.html}\n\n\\bibitem{Barb03csbc}  Lu\\'{\\i}s S. Barbosa, ``Towards a Calculus of State-based Software Components'', {\\em Journal of Universal Computer Science 9}, 8, pp.~891--909 (2003)\n\n\\bibitem{Bart64tera} Robert G. Bartle, \\emph{The Elements of Real Analysis}.  John Wiley (1964)\n\n\\bibitem{Bash99lcvd} Isabella G. Bashmakova and Galina S. Smirnova, ``The literal algebra of Vi\\`ete and Descartes'', \\emph{The American Mathematical Monthly 106}, 3, pp.~260--263 (Mar.\\ 1999)\n\n\\bibitem{Bird97aofp} Richard Bird and Oege De Moor, \\emph{Algebra of Programming}.  Prentice Hall (1997)\n\n\\bibitem{Bloc11praf} Ethan Bloch, \\emph{Proofs and Fundamentals}.  Springer (2011)\n\n\\bibitem{Bour54then} Nicolas Bourbaki, \\emph{Th\\'eorie des ensembles}. Hermann \\& c$^{\\text{ie}}$ (1954)\n\n\\bibitem{Bout88sacs} Raymond Boute, ``On the shortcomings of the axiomatic approach as presently used in Computer Science'', \nin:  \\emph{CompEuro '88. `Design: Concepts, Methods and Tools'}, pp.~184-193 (Apr.\\ 1988)\n\n\\bibitem{Bout03cgf} Raymond Boute, ``Concrete Generic Functionals'', in: Jeremy Gibbons and Johan Jeuring, Eds., \\emph{Generic Programming}, pp.~89-119. Kluwer (2003)\n\n\\bibitem{Boye91hima} Carl B. Boyer and Uta C. Merzbach, \\emph{A History of Mathematics}. Wiley (1991)\n\n\\bibitem{Char12mapr} Gary Chartrand, Albert Polimeni and Ping Zhang, \\emph{Mathematical Proofs: A Transition to Advanced Mathematics (3rd.\\ ed.)}. Pearson (2012) \n\n\\bibitem{Daep03rwap} Ulrich Daepp and Pamela Gorkin, \\emph{Reading, Writing and Proving: a Closer Look at Mathematics}. Springer (2003) \n\n\\bibitem{Daep11rwap} Ulrich Daepp and Pamela Gorkin, \\emph{Reading, Writing and Proving: a Closer Look at Mathematics (2nd.\\ ed.)}. Springer (2011) \n\n\\bibitem{Dasg14sett} Abhijit Dasgupta, \\emph{Set Theory}. Birkh\\\"auser (2014) \n\n\\bibitem{Flet66maan} Thomas M. Flett, \\emph{Mathematical Analysis}. McGraw-Hill (1966) \n\n\\bibitem{Frey90caal} Peter J. Freyd and Andre Scedrov, \\emph{Categories, Allegories}. North Holland (1990) \n\n\\bibitem{Garn10dima} Rowan Garnier and John Taylor, \\emph{Discrete Mathematics --- Proofs, Structures and Applications}.  CRC Press (2010) \n\n\\bibitem{Gete12imsp} Larry Gerstein, \\emph{Introduction to Mathematical Structures and Proofs (2nd.\\ ed.)}.  Springer (2012) \n\n\\bibitem{Geti06mscs} Judith L. Gersting, \\emph{Mathematical Structures for Computer Science (7th.\\ ed.)}.  W. H. Freeman (2013) \n\n\\bibitem{Gilb08elma} Linda Gilbert and Jimmie Gilbert, \\emph{Elements of Modern Algebra (7th.\\ ed.)}.  Cengage Learning (2008) \n\n\\bibitem{Good06dima} Edgar G. Goodaire and Michael M. Parmenter, \\emph{Discrete Mathematics with Graph Theory, 3rd.\\ ed.}.  Pearson Prentice Hall (2006) \n\n\\bibitem{Grie93logi} David Gries and Fred B. Schneider, \\emph{A Logical Approach to Discrete Math}.  Springer (1993) \n\n\\bibitem{Halm57bour} Paul R. Halmos, ``Nicolas Bourbaki'', \\emph{Scientific American, 196}, 5, pp.~88-99 (May 1957)\n\n\\bibitem{Halm60nast} Paul R. Halmos, \\emph{Naive Set Theory}. Van Nostrand Reinhold (1960)\n\n\\bibitem{Hamm09bopr} Richard Hammack, \\emph{Book of Proof}. CC BY-ND (2009) \n\n\\bibitem{Holmxxstus} Randall Holmes, {\\em Elementary Set Theory with a Universal Set}. (on the Web)\n\n\n\n\\bibitem{Hers64alge} Israel Herstein, \\emph{Topics in Algebra}. Xerox College Publishing  (1964)\n\n\\bibitem{ISOs09quun} ISO/IEC, \\emph{Quantities and units --- Part 2: Mathematical signs and symbols to be used in the natural sciences and technology}. ISO 80000-2  (2009)\n\n\\bibitem{Jech03stth} Thomas Jech, \\emph{Set Theory}. Springer (2003)\n\n\\bibitem{Klin53miwc} Morris Kline, \\emph{Mathematics in Western Culture}. Oxford University Press (1953)\n\n\\bibitem{Kolm70inra} Andrey L. Kolmogorov and Sergey V. Fomin, \\emph{Introductory Real Analysis}. Dover (1970)\n\n\\bibitem{Kran05raaf} Steven G. Krantz, \\emph{Real Analysis and Foundations}. Chapman \\& Hall/CRC (2005)\n\n\\bibitem{Lamp99slan} Leslie Lamport and Lawrence C. Paulson, ``Should your specification language be typed?'', \\emph{ACM TOPLAS 21}, 3, pp.~502--526 (May 1999)\n\n\\bibitem{Lamp03spec} Leslie Lamport, \\emph{Specifying Systems --- The TLA+ Language and Tools for Hardware and Software Engineers}. Pearson (2003)\n\n\\bibitem{Lang83unan} Serge Lang, \\emph{Undergraduate Analysis}. Springer-Verlag (1983)\n\n\\bibitem{Lars09calc} Ron Larson and Bruce Edwards, \\emph{Calculus 9e}. Brooks/Cole (2009)\n\n\\bibitem{LeeV00sisy} Edward A. Lee, Pravin Varaiya, ``Introducing Signals and Systems, the Berkeley Approach''.  \\emph{First Signal Processing Education Workshop}, Hunt, Texas (Oct.\\ 2000)\n\n\n\\bibitem{Macl71cfwm} Saunders Mac Lane, \\emph{Categories for the Working Mathematician}. Springer (1971)\n\n\\bibitem{Mend87itml} Eliott Mendelson, \\emph{Introduction to Mathematical Logic  (3rd.\\ ed.)}. Wadsworth \\& Brooks/Cole (1987)\n\n\\bibitem{Meye91itpl} Bertrand Meyer, \\emph{Introduction to the Theory of Programming Languages}. Prentice Hall (1991)\n\n\\bibitem{Oliv97form} Jos\\'e N. Oliveira, {\\em Formal Specification, Rapid Prototyping and Program Calculation --- an Industrial Experiment using the CAMILA/SETS Approach}.  UNU/IIST Seminar, Macau (May 1997)\n\n\\bibitem{Oliv14prah} Jos\\'e N. Oliveira, ``Preparing Relational Algebra for `Just Good Enough' hardware''. In: Peter H\\\"ofner et al.\\ (Eds.), {\\em Relational and Algebraic Methods in Computer Science}, pp.~119--138.  Springer LNCS 8428 (2014)\n\n\\bibitem{Parn90educ} David L. Parnas, ``Education for Computing Professionals'', {\\em IEEE COMPUTER 23}, 1, pp.~17--22 (Jan.\\ 1990)\n\n\\bibitem{Pier91ctcs} Benjamin C. Pierce, \\emph{Basic Category Theory for Computer Scientists}. The MIT Press (1991)\n\n\\bibitem{Quin69stil} Willard V. Quine, \\emph{Set Theory and Its Logic}. Belknap Press of Harvard University Press (1969)\n\n\\bibitem{Reyn98topl} John C. Reynolds, \\emph{Theories of Programming Languages}. Cambridge University Press (1998)\n\n\\bibitem{Robe10impt} Charles E. Roberts, Jr., \\emph{Introduction to Mathematical Proofs --- A Transition}.  CRC Press (2010)\n\n\\bibitem{Royd68rean} Halsey L. Royden, \\emph{Real Analysis}. Macmillan (1968)\n\n\\bibitem{Rudi64poma} Walter Rudin, \\emph{Principles of Mathematical Analysis}. McGraw-Hill (1964)\n\n\\bibitem{Russ04fore} Lucio Russo, \\emph{The Forgotten Revolution}. Springer (2004)\n\n\\bibitem{Sche12madi} Edward R. Scheinerman, \\emph{Mathematics --- A Discrete Introduction (3rd.\\ ed.)}. Cengage Learning (2012)\n\n\\bibitem{Shua75dima} Hilary S. Shuard, ``Does it matter?'', \\emph{The Mathematical Gazette 59}, 407, pp.~7--15 (Mar. 1975)\n\n\\bibitem{Smit10atta} Douglas Smith, Maurice Eggen and Richard St.\\ Andre, \\emph{A Transition to Advanced Mathematics}.  Cengage Learning (2010) \n\n\\bibitem{Spiv89thzn} John Michael Spivey, \\emph{The Z Notation -- A Reference Manual}.  Prentice-Hall (1989)\n\n\n\\bibitem{Spre70eora} David Sprecher, \\emph{Elements of Real Analysis}. Academic Press (1970)\n\n\\bibitem{Stew10calc} James B. Stewart, \\emph{Calculus: Early Transcendentals (7th.\\ ed.)}. Cengage Learning (2010)\n\n\\bibitem{Sull14calc} Michael P. Sullivan and Kathleen Miranda, \\emph{Single Variable Calculus --- Early Transcendentals}.  W. H. Freeman (2014) \n\n\\bibitem{Supp72axst} Patrick Suppes, \\emph{Axiomatic Set Theory}.  Dover (1972) \n\n\\bibitem{Tars87stwv} Alfred Tarski and Steven Givant, \\emph{A Formalization of Set Theory Without Variables}. The American Mathematical Society (1987, reprinted with corrections 1988)\n\n\\bibitem{Vell09htpi} Daniel J. Velleman, \\emph{How To Prove It: A Structured Approach (2nd. ed.)}. Cambridge (5th printing 2009)\n\n\\bibitem{Wall12bgdm} Walter D. Wallis, \\emph{A Beginner's Guide to Discrete Mathematics (2nd. ed.)}. Birkh\\\"auser (2012) \n\n\\bibitem{Wign60ueom} Eugene Wigner, ``The unreasonable effectiveness of mathematics in the natural sciences'', {\\em Communications on Pure and Applied Mathematics 13}, 1, pp.~1--14 (Feb.\\ 1960) \n\n\\bibitem{Zako04maan} Elias Zakon, \\emph{Mathematical Analysis, Vol.\\ I}. Trillia (2004)\n\n\n\\end{thebibliography}\n\\vfill\\eject\n\n\n", "itemtype": "equation", "pos": 67837, "prevtext": "\n\\caption{Concrete Categorical Cartesian Product and Disjoint Union}\\label{CCPU}\n\\end{figure}\n\nThe proof of (ii) shows that every $I$-family ${\\gamma}$ with the stated property is isomorphic to ${\\uppi}$, hence ``unique up to isomorphism''.\n   \\par This {\\em theorem} faithfully reflects the {\\em definition} of products in category theory \\cite[p.~19]{Pier91ctcs}, while avoiding ``unacceptable but generally accepted'' notations like $(T_i)_{i \\in I}$ for just $T$ and, worse, $\\langle f_i\\rangle_{i \\in I}$ for just $\\langle f\\rangle$, which was proven to be $f{^{\\mathsf{T}}}$.\n   \\par {\\em Aside}{\\hp1} Clearly, ${\\gamma} {:} {\\Pi}{\\hspace*{{0.2}ex}}_{i {:} I} (C \\rightarrow T_i)$ depends on $C$ and $T$.  Similarly, ${\\uppi}$ depends on $T$, which is why some authors write ${\\uppi}^T$.  One can also see the ${\\uppi}_i$ as {\\em operators} (Lamport \\cite[p.~69]{Lamp03spec}) which, unlike functions, do not have a domain. A third view is offered by theories allowing for the set (or {\\em class}) of all pairs, such as the algebra of relations in Tarski~\\cite{Tars87stwv} or set theory with a universal set~$\\mathcal{U}$ in Holmes, where axioms \\cite[p.~30]{Holmxxstus} assert the existence of the {\\em equality relation} $\\{(x, x) {\\,|\\,} x {:} \\mathcal{U}\\}$ and {\\em projection relations} such as $\\{((x, y), x) {\\,|\\,} x {:} \\mathcal{U}; y {:} \\mathcal{U}\\}$.\n\n\\paragraph{Sum}\n\nThis topic illustrates how objects with quite different point-wise definitions resemble each other in point-free form, more specifically as duals.\n\n\\begin{defin}[Disjoint union]\\label{disu}\nThe {\\em disjoint union} ${\\Sigma}{\\hspace*{{0.2}ex}} T$ of a family $T$ of sets is the set of (ordered) pairs such that $(i, x) {\\in} {\\Sigma}{\\hspace*{{0.2}ex}} T$ iff $i {\\in} {{\\mathcal{D}}\\,} T$ and $x {\\in} T_i$.\n\\end{defin}\n\nThis concept is used to express choice in formal language semantics~\\cite[p.~74]{Meye91itpl}.\n   \\par To obtain the usual point-free characterization of ${\\Sigma}{\\hspace*{{0.2}ex}} T$,  we let $I := {{\\mathcal{D}}\\,} T$ and define an $I$-family ${\\uplambda}$ of {\\em labeling functions} by ${\\uplambda}_i {\\in} T_i \\rightarrow {\\Sigma}{\\hspace*{{0.2}ex}} T$ and ${\\uplambda}_i x = (i, x)$.\n\n\\begin{therm}\\label{sumthm} Let $T$ be an $I$-family of sets.  \n{\\par\\noindent\\textbf{{\\em(i)}}} For any set $S$ and $I$-family $f$ of functions with $f_i {\\in} T_i \\rightarrow S$, there exists a unique $g : {\\Sigma}{\\hspace*{{0.2}ex}} T \\rightarrow S$ satisfying $f_i = g {\\circ} {\\uplambda}_i$. Specifically, $g = f{^\\text{\\reflectbox{$\\mathsf C$}}}$ {\\em (uncurry)}.\n{\\par\\noindent\\textbf{{\\em(ii)}}} Let ${\\updelta}$ be an $I$-family of functions with ${\\updelta}_i {\\in} T_i \\rightarrow D$ and the property that, for any set $S$ and $I$-family $f$ of functions with $f_i {\\in} T_i \\rightarrow S$, there exists a unique $h : D \\rightarrow S$ satisfying $f_i = h {\\circ} {\\updelta}_i$. Then there is a bijection between $D$ and ${\\Sigma}{\\hspace*{{0.2}ex}} T$.\n\\em\n{\\par\\noindent\\textbf{{Proof}}}{\\hp1} \\textbf{(i)} Solving $f_i = g {\\circ} {\\uplambda}_i$ for $g$: for any $i$ in $I$ and $s$ in $S$, $f_i s = (g {\\circ} {\\uplambda}_i)\\,s = g({\\uplambda}_i s) = g(i, s)$. By definition, $f{^\\text{\\reflectbox{$\\mathsf C$}}} (i, s) = f_i s$, so $g = f{^\\text{\\reflectbox{$\\mathsf C$}}}$.\n{\\em Example}\\/: let $f := {\\uplambda}$, so ${\\uplambda}_i = {\\uplambda}{^\\text{\\reflectbox{$\\mathsf C$}}} {\\circ} {\\uplambda}_i$.  Note that ${\\uplambda}{^\\text{\\reflectbox{$\\mathsf C$}}}(i, x) = {\\uplambda}_i x = (i, x) = {\\mathrm{id}}_{{\\Sigma}{\\hspace*{{0.2}ex}} T} (i, x)$.   In fact, ${\\uplambda}{^\\text{\\reflectbox{$\\mathsf C$}}} = {\\mathrm{id}}_{{\\Sigma}{\\hspace*{{0.2}ex}} T}$.\n{\\par\\noindent\\textbf{{(ii)}}} Letting $f := {\\updelta}$ in (i), ${\\updelta}_i = {\\updelta}{^\\text{\\reflectbox{$\\mathsf C$}}} {\\circ} {\\uplambda}_i$.  Letting $f := {\\uplambda}$ in (ii), ${\\uplambda}_i = h {\\circ} {\\updelta}_i$.  Hence ${\\updelta}_i = {\\updelta}{^\\text{\\reflectbox{$\\mathsf C$}}} {\\circ} h {\\circ} {\\updelta}_i$ and ${\\uplambda}_i = h {\\circ} {\\updelta}{^\\text{\\reflectbox{$\\mathsf C$}}} {\\circ} {\\uplambda}_i$. By uniqueness, ${\\updelta}{^\\text{\\reflectbox{$\\mathsf C$}}} {\\circ} h = {\\mathrm{id}}_D$ and $h {\\circ} {\\updelta}{^\\text{\\reflectbox{$\\mathsf C$}}} = {\\mathrm{id}}_{{\\Sigma}{\\hspace*{{0.2}ex}} T}$.  So ${\\updelta}{^\\text{\\reflectbox{$\\mathsf C$}}}$ is a bijection from $D$ to ${\\Sigma}{\\hspace*{{0.2}ex}} T$ and $h$ is its inverse.\n\\end{therm}\n\n\\paragraph{Relations, point-free style}\n\nRelational properties of the Cartesian product can be similarly expressed and explored in point-free style.  For instance, given an $I$-family $R$ of relations $R_i$ from $S$ to $T_i$, let us aim for a relation $G$ from $S$ to ${\\Pi}{\\hspace*{{0.2}ex}} T$ such that ${\\uppi}_i {\\circ} G = R_i$.  This requires ${\\uppi}{^{\\scriptscriptstyle\\smile}}_i {\\circ} {\\uppi}_i {\\circ} G = {\\uppi}{^{\\scriptscriptstyle\\smile}}_i {\\circ} R_i$ and, since ${\\mathrm{id}}_{{\\Pi}{\\hspace*{{0.2}ex}} T} {\\subseteq} {\\uppi}{^{\\scriptscriptstyle\\smile}}_i {\\circ} {\\uppi}_i$, also $G {\\subseteq} {\\uppi}{^{\\scriptscriptstyle\\smile}}_i {\\circ} R_i$ (for all $i$ in $I$), hence $G {\\subseteq} {{\\raisebox{-.1 ex}{\\large\\pacmat{\\cap}}}\\,} i {:} I {\\,.\\,} {\\uppi}{^{\\scriptscriptstyle\\smile}}_i {\\circ} R_i$.  Let us define $\\langle R\\rangle$ as ${{\\raisebox{-.1 ex}{\\large\\pacmat{\\cap}}}\\,} i {:} I {\\,.\\,} {\\uppi}{^{\\scriptscriptstyle\\smile}}_i {\\circ} R_i$, so $t\\langle R\\rangle s {\\equiv} I = {\\emptyset} {\\vee} (t {\\in} {\\Pi}{\\hspace*{{0.2}ex}} T {\\wedge} {\\forall\\,} i {:} I {\\,.\\,} t_i\\,R_i\\,s)$.\n   \\par In general, this only yields ${\\uppi}_i {\\circ} \\langle R\\rangle {\\subseteq} R_i$, as in category theory.  Still, if all $R_i$ share a common domain, a sharper result is ${\\uppi}_i {\\circ} \\langle R\\rangle = R_i$, the design goal.  Even sharper is the pointwise form $y\\,({\\uppi}_i {\\circ} \\langle R\\rangle)\\,s {\\equiv} y\\,R_i\\,s {\\wedge} s {\\in} {{\\raisebox{-.1 ex}{\\large\\pacmat{\\cap}}}\\,} i {:} I {\\,.\\,} {{\\mathcal{D}}\\,} R_i$.\n   \\par Assuming $I \\neq {\\emptyset}$, let $T$ and $T'$ be $I$-families of sets and $R$ an $I$-family of relations $R_i$ from $T_i$ to $T'_i$. Define ${\\text{\\large${|}{|}$}} R$ from ${\\Pi}{\\hspace*{{0.2}ex}} T$ to ${\\Pi}{\\hspace*{{0.2}ex}} T'$ by ${\\text{\\large${|}{|}$}} R = \\langle i {:} I {\\,.\\,} R_i {\\circ} {\\uppi}_i\\rangle$, generalizing \\cite[p.~114]{Bird97aofp}.  Now $t' ({\\text{\\large${|}{|}$}} R) t {\\equiv} t' {\\in} {\\Pi}{\\hspace*{{0.2}ex}} T' {\\wedge} t {\\in} {\\Pi}{\\hspace*{{0.2}ex}} T {\\wedge} {\\forall\\,} i {:} I {\\,.\\,} t'_i\\,R_i\\,t_i$.  \n\n\\paragraph{Functors}\n\nA {\\em functor} in category theory maps objects to objects and arrows to arrows. Often one uses the same symbol for both maps, e.g., writing ${\\times}$ for ${\\,{\\pacmat{{|}{|}}}\\,}$, but that is not necessary \\cite[p.~30]{Bird97aofp}. Although notational economy is commendable, in ``working mathematics'' one prefers combining various concepts as convenient, yet still avoid notational confusion.  Hence, if one views relations as sets, the need to distinguish between $R {\\,{\\pacmat{{|}{|}}}\\,} S$ and $R {\\times} S$ is evident. The operator ${\\,{\\pacmat{{|}{|}}}\\,}$ is called {\\em shuffle} in some functional languages and {\\em parallel} by Meyer \\cite[p.~36]{Meye91itpl}.\n\n\\paragraph{Tabulations}\n\nTabulations are helpful in point-free reasoning \\cite{Bird97aofp}.  Let $R {:} X {\\text{${{\\leftrightarrow\\hspace{-1.8ex}\\rightarrow}}$}} Y$. Now $f : R \\rightarrow X$ with $f(x, y) = x$ and $g : R \\rightarrow Y$ with $g(x, y) = y$ satisfy both $R = g {\\circ} f{^{\\scriptscriptstyle\\smile}}$ and $(f{^{\\scriptscriptstyle\\smile}} {\\circ} f) {\\cap} (g{^{\\scriptscriptstyle\\smile}} {\\circ} g) = {\\mathrm{id}}_R$. \n   \\par In category theory, a {\\em tabulation} of a correspondence arrow $r$ from $X$ to $Y$ is a pair of application arrows $f$ from $Z$ to $X$ and $g$ from $Z$ to $Y$ jointly satisfying $r = g {\\circ} f{^{\\scriptscriptstyle\\smile}}$ and $(f{^{\\scriptscriptstyle\\smile}} {\\circ} f) {\\cap} (g{^{\\scriptscriptstyle\\smile}} {\\circ} g) = {\\mathrm{id}}_Z$.  Similar concepts in a more general setting are discussed in Tarski \\cite[p.~96]{Tars87stwv}.\n\n\\paragraph{Currying}\n\nIn its most basic form, Currying transforms a function $f {:} X {\\times} Y \\rightarrow Z$ into a function $f{^\\mathsf{C}}$ of type $X \\rightarrow (Y \\rightarrow Z)$ such that $f{^\\mathsf{C}} x\\,y = f(x, y)$.  For a point-free characterization \\cite[p.~72]{Bird97aofp}\\cite[p.~33]{Pier91ctcs}, one uses an {\\em evaluation} or {\\em application} function $\\alpha_{Y,Z} {:} (Y \\rightarrow Z) {\\times} Y \\rightarrow Z$ defined by $\\alpha_{Y,Z}(g, y) = g(y)$.  One can verify that $f = \\alpha_{Y,Z} {\\circ} (f{^\\mathsf{C}} {\\,{\\pacmat{{|}{|}}}\\,} {\\mathrm{id}}_Y)$; in fact, $h = f{^\\mathsf{C}} \\equiv \\alpha_{Y,Z} {\\circ} (h {\\,{\\pacmat{{|}{|}}}\\,} {\\mathrm{id}}_Y) = f$ (uniqueness).\n\n", "index": 5, "text": "\n\\[\\bfig\n\\morphism(0,500)|m|[X {\\times} Y`Z;f]\n\\morphism(0,500)|m|<0,-500>[{}`(Y \\rightarrow Z) {\\times} Y\\phantom{(Y \\rightarrow )};\\phantom {x}f{^\\mathsf{C}} {\\,{\\pacmat{{|}{|}}}\\,} {\\mathrm{id}}_Y]\n\\morphism(80,80)|m|<400,400>[{}`{};{\\text{\\raisebox{-1.5ex}{\\hp3$\\alpha_{Y,Z}$}}}] \n\\efig\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"\\bfig\\morphism(0,500)|m|[X{\\times}Y`Z;f]\\morphism(0,500)|m|&lt;0,-500&gt;[{}`(Y%&#10;\\rightarrow Z){\\times}Y\\phantom{(Y\\rightarrow)};\\phantom{x}f{{}^{\\mathsf{C}}}{%&#10;\\,{\\pacmat{{|}{|}}}\\,}{\\mathrm{id}}_{Y}]\\morphism(80,80)|m|&lt;400,400&gt;[{}`{};{%&#10;\\text{\\raisebox{-6.45pt}{\\hp 3$\\alpha_{Y,Z}$}}}]\\efig\" display=\"block\"><mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\bfig</mtext></merror><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\morphism</mtext></merror><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo>,</mo><mn>500</mn><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">|</mo><mi>m</mi><mo stretchy=\"false\">|</mo><mrow><mo stretchy=\"false\">[</mo><mi>X</mi><mo>\u00d7</mo><mi>Y</mi><mi mathvariant=\"normal\">`</mi><mi>Z</mi><mo>;</mo><mi>f</mi><mo stretchy=\"false\">]</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\morphism</mtext></merror><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo>,</mo><mn>500</mn><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">|</mo><mi>m</mi><mo stretchy=\"false\">|</mo><mo>&lt;</mo><mn>0</mn><mo>,</mo><mo>-</mo><mn>500</mn><mo>&gt;</mo><mrow><mo stretchy=\"false\">[</mo><mi mathvariant=\"normal\">`</mi><mrow><mo stretchy=\"false\">(</mo><mi>Y</mi><mo>\u2192</mo><mi>Z</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u00d7</mo><mi>Y</mi><mo>;</mo><mi>f</mi><mmultiscripts><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\pacmat</mtext></merror><mprescripts/><none/><mi>\ud835\udda2</mi></mmultiscripts><mo stretchy=\"false\">|</mo><mo rspace=\"4.2pt\" stretchy=\"false\">|</mo><msub><mi>id</mi><mi>Y</mi></msub><mo stretchy=\"false\">]</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\morphism</mtext></merror><mrow><mo stretchy=\"false\">(</mo><mn>80</mn><mo>,</mo><mn>80</mn><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">|</mo><mi>m</mi><mo stretchy=\"false\">|</mo><mo>&lt;</mo><mn>400</mn><mo>,</mo><mn>400</mn><mo>&gt;</mo><mrow><mo stretchy=\"false\">[</mo><mi mathvariant=\"normal\">`</mi><mo>;</mo><mpadded depth=\"+6.5pt\" height=\"-6.5pt\" voffset=\"-6.5pt\"><mtext class=\"undefined\"><span xmlns=\"http://www.w3.org/1999/xhtml\" class=\"ltx_ERROR undefined\">\\hp</span></mtext><mtext>3</mtext><msub><mi>\u03b1</mi><mrow><mi>Y</mi><mo>,</mo><mi>Z</mi></mrow></msub></mpadded><mo stretchy=\"false\">]</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\efig</mtext></merror></mrow></math>", "type": "latex"}]