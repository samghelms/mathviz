[{"file": "1601.07797.tex", "nexttext": "\nwhich holds since $r \\in [1,\\sqrt{3})$.\n\n(ii): Use the Pythagorean Theorem\nwith the right angles marked in the Figure~\\ref{fig:calculusa}.\n\\end{proof}\n\n\\begin{figure}[hbt]\n\\centering\n\\begin{subfigure}[b]{0.4\\textwidth}\n\\centering\n  \\includegraphics[scale=0.53]{pictures/circleintersection2}\n  \\caption{}\n\\end{subfigure}\n\\begin{subfigure}[b]{0.45\\textwidth}\n  \\includegraphics[scale=0.5]{pictures/circleintersection1}\n\\caption{}\n\\label{fig:calculusa}\n\\end{subfigure}\n\\caption{The cases (i) and (ii) of Lemma~\\ref{lem:calculus}.}\n\\end{figure}\n\n\n\\begin{lemma}\n\\label{lem:resolving}\nSuppose that $pq$ and $uv$ are \nedges in $G$ that cross.\nLet $G'\\subseteq G$ be the transmission graph induced by \n$p,q,u$ and $v$.  If $\\Psi < \\sqrt{3}$, then $p$ reaches $v$ in \n$G'$ and $u$ reaches $q$ in $G'$.\n\\end{lemma}\n\n\\begin{proof}\nWe may assume that $r_p \\geq r_u$. Furthermore, we set $r_q = r_v = 1$. This \ndoes \nnot add new edges and thus reachability in the new graph \nimplies reachability in $G'$.\nWe show that if either $u$ does not reach $q$ (case 1) \nor $p$ does not reach $v$ (case 2), then $|uv| > r_u$. Hence \n$uv$ cannot be an edge of $G'$ despite our assumption. \n\nCase 1: $u$ does not reach $q$. \nThen we have $p \\notin D(u)$, $q \\notin D(u)$, $p \\notin D(v)$\nand $q \\notin D(v)$. \nEquivalently this gives $u \\notin D(p,r_u) \\cup D(q,r_u)$\nand $ v \\notin D(p,1) \\cup D(q,1)$.  \nThus, the positions of $u$ and $v$ that minimize $|uv|$ \nare the intersections $u \\in C(p,r_u) \\cap C(q,r_u)$ \nand $v \\in C(p,1) \\cap C(q,1)$ on different sides of \nthe line through $p$ and $q$. \nTo further  minimize $|uv|$, observe that $|uv|$ depends on the distance\nof $p$ and $q$ and that $|uv|$ strictly decreases as $|pq|$ grows, i.e., \nas $|pq|$ approaches $\\sqrt{3}$. \nFor the limit case $|pq| = \\sqrt{3}$, we are in the situation \nof Lemma~\\ref{lem:calculus}(i) with $a=u$ and $b=v$ \nand thus we would get $|uv| \\geq r_u$.\nBut since $\\Psi < \\sqrt{3}$, we must have $|pq| < \\sqrt{3}$ and by \nstrict monotonicity, it follows that $|uv| > r_u$,\nas desired. \n\nCase 2: $p$ does not reach $v$. Then we have \n$u \\notin D(p)$, $v \\notin D(p)$, $u \\notin D(q)$ and $v \\notin D(q)$. \nWe scale everything, such that $r_p = \\sqrt{3}$, and we reduce\n$r_v$, $r_q$ once again to $1$. \nNow, the positions of $u$ and $v$ minimizing $|uv|$ are \n$\\{u,v\\} = C(p,\\sqrt{3}) \\cap C(q,1)$. As above, \nfurther minimizing $|uv|$ gives $|pq| = \\sqrt{3}$. \nBy Lemma~\\ref{lem:calculus}(ii), we have $|uv| > \\sqrt{3}$ and \nthus $uv$ cannot be an edge of $G'$ (note that even after scaling we have\n$r_u \\leq \\sqrt{3}$).\n\\end{proof}\n\nWe iteratively resolve crossings in $G$. Call the resulting graph\n$\\widetilde{G}$. Next, we show that for any $p, q \\in P$, if $p$ can\nreach $q$ in $\\widetilde{G}$, then $p$ can also reach $q$ in $G$.\nThis seems to be a bit more difficult than one might expect, because\nwhen resolving the crossings, we introduce new vertices and edges \nto which Lemma~\\ref{lem:resolving} is not directly applicable.\n\n\\begin{lemma}\n\\label{lem:globalreachability}\nFor any two sites $p, q \\in P$,\nif $p$ can reach $q$ in $\\widetilde{G}$ then $p$\ncan reach $q$ in $G$.\n\\end{lemma}\n\n\\begin{proof}\nEach edge $e$ of $\\widetilde{G}$ lies on an edge of $G$ with the\nsame direction. We call it the \\emph{supporting edge} of $e$.\nA pair $p, q \\in P$ such that $p$ can reach \n$q$ in $\\widetilde{G}$, but not in $G$ is called a\n\\emph{bad pair}. Among all bad pairs,\nwe pick $p, q$ such that\nthere is a path $\\pi$ in $\\widetilde{G}$ from $p$ to $q$ with the\nminimum number of \\emph{support switches}, where $\\pi$ changes from\none supporting edge to another.\nLet $p_1q_1,\\dots, p_kq_k$ be the\nsequence of supporting edges as they are visited along \n$\\pi$ ($p_1 = p$, $q_k = q$).\n\n\\begin{figure}[htb]\n\\centering\n\\includegraphics[scale=1.0]{pictures/globalreachability-path}\n\\caption{A path (blue) with $k=7$ supporting edges that is in \n$\\widetilde{G}$ but not in $G$.}\n\\label{fig:globalreachability-path}\n\\end{figure}\n\n\\begin{claim}\nThe following holds in $G$:\n\\textbf{(P1)} $p_1$ reaches $q_2,\\dots,q_{k-1}$;\n\\textbf{(P2)} $p_2,\\dots,p_k$ reach $q_k$;\n\\textbf{(P3)}  $p_1$ does not reach $p_2,\\dots,p_k$; and\n\\textbf{(P4)} there is no edge $q_ip_i$,\nfor $i \\geq 2$.\nFurthermore, for $i = 1,\\dots,k-1$, we have\n\\textbf{(P5)} the line segments \n$\\overline{p_iq_i}$ and\n$\\overline{p_{i+1}q_{i+1}}$ have a common intersection point\n$x_i$ in their interior;\nand \\textbf{(P6)} $x_{i+1}$ lies on the line segment \n$\\overline{x_iq_{i+1}}$. \n\\end{claim}\n\n\\begin{proof}\n\\textbf{P1} and \\textbf{P2} follow from the minimality of $\\pi$,\nand \\textbf{P3} follows from \\textbf{P2}. For \\textbf{P4}, assume \nthat $G$ contains an edge $q_ip_i$, for $i \\geq 2$. \nBy \\textbf{P1}, $p_1$ reaches $q_i$ in $G$ and thus $p_1$ reaches $p_i$,\ndespite \\textbf{P3}.\nFor \\textbf{P5}, since $p_iq_i$ and \n$p_{i+1}q_{i+1}$ are consecutive \nalong $\\pi$, they must intersect in a point $x_i$.\nIf $x_i$ is not in their interior, then\n$x_i = q_i = p_{i+1}$. But then, by \\textbf{P1}, $p_1$ reaches \n$q_i = p_{i+1}$, despite \\textbf{P3}. \n\\textbf{P6} follows because by \\textbf{P4} all supporting\nedges are directed and because the resolution of the crossings preserves\nthe direction of the edges.\n\\end{proof}\n\nBy Lemma~\\ref{lem:resolving}, we have $k \\geq 3$.\nWe now argue that the path $\\pi$ cannot exist.\nSince $p_1q_1$ and $p_2q_2$ cross,\nthe proof of Lemma~\\ref{lem:resolving} shows that $G$ contains one\nof \n$p_1p_2,q_1p_2,p_1q_2$,\nor $q_1q_2$.\nBy \\textbf{P3}, neither \n$p_1p_2$ nor $q_1p_2$\nexist.\nThere are two cases, depending on whether $G$ contains\n$p_1q_2$, or $q_1q_2$ \n(see Fig.~\\ref{fig:globalreachability}).\nEach case will lead to a contradiction with the minimality of $\\pi$.\ns\n\\begin{figure}[htb]\n\\centering\n\\includegraphics[scale=0.7]{pictures/globalreachability}\n\\caption{Either $(p_1q_2)$ or $(p_1q_2)$ locks all edges in \nthe corresponding triangle.}\n\\label{fig:globalreachability}\n\\end{figure}\n\n\\textbf{Case 1.} $G$ contains $p_1q_2$.\nConsider the triangle $\\triangle = p_1x_1q_2$.\nSince $q_2,x_1 \\in D(p_1)$, we have\n$\\triangle \\subset D(p_1)$.\nThus, by \\textbf{P3}, none of $p_2,\\dots,p_k$ \nmay lie inside $\\triangle$.\nBy \\textbf{P6}, $p_3q_3$\nintersects the boundary of $\\triangle$ in the line segment \n$\\overline{x_1q_2}$.\nFirst, suppose that $k = 3$. In this case, we have \n$p_3, q_3 \\not\\in \\triangle$ (otherwise $p_1$ could reach $q_3$).\nThus, $p_3q_3$ intersects the boundary of $\\triangle$\ntwice, so $p_3q_3$ either intersects\n $p_1q_1$ or $p_1q_2$.\nIn both cases, Lemma~\\ref{lem:resolving} shows that $p_1$ reaches\n$q_3$. Thus, we must have $k \\geq 4$.\n\nWe now claim that the intersection $x_3$ of  \n$p_3q_3$ and $p_4q_4$ \nlies in $\\triangle$:\nif $p_3q_3$ intersects $\\triangle$\nonce, then $q_3 \\in \\triangle$, as we already observed that\n$p_3 \\not\\in \\triangle$.\n\\textbf{P6} then gives $x_3 \\in \\triangle$. \nNow suppose $p_3q_3$ intersects\n$\\triangle$ twice, and let $y$ be the second intersection\npoint. We claim that $y$ comes after $x_2$ \nalong $p_3q_3$: otherwise, since $x_3$ comes \nafter $x_2$ on $p_3q_3$ by \\textbf{P6}, \nwe can construct a path with fewer support switches than $\\pi$:\nif $y \\in \\overline{p_1x_1}$, we omit \n$p_2q_2$;\nif $y \\in p_1q_2$, \nwe omit $p_2q_2$\nand substitute $p_1q_1$ with $p_1q_2$.\nBy the same argument, $x_3$ cannot come after $y$ on \n$p_3q_3$.\nThus, $x_3$ lies on \nthe line segment $\\overline{x_2y} \\subset \\triangle$.\nThis establishes $x_3 \\in \\triangle$ for both cases.\nNow, consider the segment $\\overline{p_4x_3}$. Since we observed\n$p_4 \\not\\in\\triangle$, we have that $\\overline{p_4x_3}$\nintersects $\\triangle$, and we can again reroute the $\\pi$ to \nhave fewer support switches.\n\n\\textbf{Case 2.} $G$ contains $q_1q_2$. \nConsider the triangle\n$\\triangle = x_1q_1q_2$. We claim \nthat $\\triangle \\subset D(p_1) \\cup D(q_1)$.\nThen the remaining argument is analogous to \nCase 1. \nLet $D(x_1) \\subseteq D(p_1)$ be the disk with center $x_1$ and $q_1$\non its boundary. Let $C(x_1)$ be the boundary of $D(x_1)$.\nIf $x_1 \\in D(q_1)$, we are done.\nOtherwise, since the two rays from $x_1$ through\n$C(x_1) \\cap C(q_1)$ intersect $D(q_1)$ inside $D(x_1)$,\nall line segments from $x_1$ to a point on $C(q_1)$ lie in\n$D(x_1) \\cup D(q_1)$.\nThe claim follows.\n\\end{proof}\n\n\\paragraph*{Putting it together.}\nTo prove Lemma~\\ref{lem:planarization}, we first construct the sparse\nsubgraph $H$ as in Lemma~\\ref{lem:pruning} in time $O(n \\log n)$.\nThen we iteratively resolve the crossings in $H$ to obtain \n$\\widetilde{H}$.\nSince $H$ has $O(n)$ crossings that can be found in $O(n)$ time, \nthis takes $O(n)$ time.\n\nLet $p, q \\in P$. We must argue that $p$ can reach $q$ in $G$\nif and only if $p$ can reach $q$ in $\\widetilde{H}$.\nLet $\\widetilde{G}$ be the graph obtained by resolving the crossings\nin $G$, as in Lemma~\\ref{lem:globalreachability}.\nWe know that the reachability between $p$ and $q$ is the same in $G$, \n$H$, and $\\widetilde{G}$.\nFurthermore, if $p$ can reach $q$ in $H$, then also \nin $\\widetilde{H}$, and if $p$ can reach $q$ in $\\widetilde{H}$,\nthen also in $\\widetilde{G}$, because (a subdivision of) every edge\nof $\\widetilde{H}$ is present in $\\widetilde{G}$.\nThus, $\\widetilde{H}$ and $G$ have the same reachability\nproperties.\n\n\n\\subsection{Polynomial Dependence on $\\Psi$}\n\\label{sec:psiconst}\nWe now present a standard reachability oracle whose performance parameters \ndepend polynomially on the radius ratio $\\Psi$. \nTogether with Theorem~\\ref{thm:geometricreachability} we will obtain the \nfollowing result:\n\\begin{theorem}\n\\label{thm:2doraclefixed}\nLet $G$ be the transmission graph for a set $P \\subset {\\ensuremath {\\mathbb {{R}}}}^2$\nof $n$ points.\nWe can construct a geometric reachability oracle for $G$\nwith $S(n) = O(\\Psi^5n^{3/2})$ and $Q(n) = O(\\Psi^3\\sqrt{n})$ in\ntime $O(\\Psi^5n^{3/2})$.\n\\end{theorem}\n\nOur approach is based on a geometric separator theorem for\nplanar disks.\nLet ${\\operatorname{\\mathcal{D}}}$ be the disks induced by $P$. We write\n$\\bigcup {\\operatorname{\\mathcal{D}}} := \\bigcup_{D \\in {\\operatorname{\\mathcal{D}}}}D$ and we let\n$\\mu({\\operatorname{\\mathcal{D}}})$ be the area occupied by $\\bigcup {\\operatorname{\\mathcal{D}}}$.\nAlber and Fiala show how to find a separator for ${\\operatorname{\\mathcal{D}}}$\nwith respect to $\\mu(\\cdot)$ \\cite{AlberFiala04}.\n\n\\begin{theorem}[Theorem~4.12 in~\\cite{AlberFiala04}]\n\\label{thm:diskseparator}\nThere exist positive constants $\\alpha < 1$ and $\\beta$ such\nthat the following holds:\nlet ${\\operatorname{\\mathcal{D}}}$ be a set of $n$ disks and $\\Psi$ the ratio of the largest\nand the smallest radius in ${\\operatorname{\\mathcal{D}}}$.\nThen we can find in time $O(\\Psi^2n)$\na partition ${\\mathcal A} \\cup {\\mathcal B} \\cup {\\mathcal S}$ of ${\\operatorname{\\mathcal{D}}}$ satisfying\n(i) $\\bigcup {\\mathcal A} \\cap \\bigcup {\\mathcal B} = \\emptyset$,\n(ii) $\\mu({\\mathcal S}) \\leq \\beta\\Psi^2 \\sqrt{\\mu({\\operatorname{\\mathcal{D}}})}$ and\n(iii) $\\mu({\\mathcal A}),\\mu({\\mathcal B}) \\leq \\alpha \\mu({\\operatorname{\\mathcal{D}}})$.\n\\end{theorem}\nSince any directed path in $G$ lies completely in $\\bigcup {\\mathcal D}$, any path from \na vertex in ${\\mathcal A}$ to a vertex in ${\\mathcal B}$ needs to use at least one vertex of ${\\mathcal S}$, see \nFigure~\\ref{fig:separator}. Since $\\mu({\\mathcal S})$ is small, we can approximate $\\bigcup {\\mathcal S}$ \nwith few grid cells. We choose the diameter of the cells small enough such that \nall vertices in one cell form a clique and are equivalent in terms of reachability. \nWe can thus pick one vertex per cell and store the \nreachability information for it. Applying this idea \nrecursively gives a separator tree\nthat lets us answer reachability queries. Details follow.\n\n\\begin{figure}[htb]\n\\centering\n\\includegraphics[scale=0.9]{2doracle-separator}\n\\caption{Any path from ${\\mathcal A}$ to ${\\mathcal B}$ needs to use at least \none vertex of ${\\mathcal S}$. Since $\\mu({\\mathcal S})$ is small, we can approximate $\\bigcup {\\mathcal S}$ with \nfew grid cells.}\n\\label{fig:separator}\n\\end{figure}\n\n\\paragraph*{Preprocessing Algorithm and Space Requirement.}\nFor the preprocessing phase, consider the grid ${\\operatorname{\\mathcal{Q}}} = {\\operatorname{\\mathcal{Q}}}_0$ whose\ncells have diameter $1$.\nAll vertices in a single cell form a clique in $G$, so it suffices\nto determine the reachability for one such vertex. For each non-empty cell\n$\\sigma \\in {\\operatorname{\\mathcal{Q}}}$, we pick an arbitrary vertex $p_\\sigma \\in P \\cap \\sigma$\nas the \\textit{representative} of $\\sigma$.\nLet $R_{\\mathcal D}$ be the set of all representatives.\nWe recursively create a separator tree $T$\nthat contains all the required reachability information:\nwe compute ${\\mathcal A},{\\mathcal B}$, and ${\\mathcal S}$ according to Theorem~\\ref{thm:diskseparator},\nand we create a node $v$ of the separator tree.\nLet $Q_v$ be all cells in ${\\operatorname{\\mathcal{Q}}}$ that\nintersect $\\bigcup {\\mathcal S}$. Let $R_v$ be their representatives,\nand let ${\\mathcal D}_v$ be all disks with centers in $Q_v$.\nFor each $r \\in R_v$, we store all the representatives of\n$R_{\\mathcal D}$ that $r$ can\nreach and all the representatives that can reach $r$\nin the transmission graph induced by ${\\mathcal D}$ (this graph is a\nsubgraph of $G$).\nWe recursively compute separator trees for  ${\\mathcal A} \\setminus {\\mathcal D}_v$ and\n${\\mathcal B} \\setminus {\\mathcal D}_v$, and\nwe connect them to $v$.\n\nTo obtain the reachability information,\nwe compute a $2$-spanner $H_v$ for the transmission\ngraph induced by $v$, as in Theorem~\\ref{thm:2dspanner}. \nSince we are only\ninterested in the reachability properties of the spanner, \n${\\ensuremath {\\varepsilon}} = 2$ (or any constant) suffices. \nFor each $r \\in R_v$,\nwe compute a BFS tree in $H_v$ with root $r$. Next, we reverse all\nedges in $H_v$, and we again compute BFS-trees for all $r \\in R_v$\nin the transposed graph. This gives the required reachability \ninformation for $v$.\n\nAs $T$ has $O(\\log n)$ levels,\nthe total running time for computing the spanners is\n$O(n\\log n(\\log n + \\log \\Psi))$.\nSince the spanners are sparse, the time for computing the BFS-trees \nis proportional to the total number of representatives for all\nnodes in the tree.\nBelow, we will show that this is at most \n$O(\\Psi^5 n^{3/2})$. The\ntotal preprocessing time is \n$O(n\\log^2 n + n\\log \\Psi + \\Psi^5 n^{3/2}) = \nO(\\Psi^5 n^{3/2})$.\n\nTo bound the space requirement, we show that $|R_{\\mathcal D}| = O(\\mu({\\mathcal D}))$ \nfor any set ${\\mathcal D}$ of disks.\n\n\\begin{lemma}\n\\label{lem:diskunioncover}\nLet ${\\mathcal D}$ be a set of $n$ disks with radius at least $1$. Then\nthe number of cells in ${\\operatorname{\\mathcal{Q}}}_0$ that intersect\n$\\bigcup {\\mathcal D}$ is $O(\\mu({\\mathcal D}))$.\n\\end{lemma}\n\n\\begin{proof}\nSuppose that a cell $\\sigma \\in {\\operatorname{\\mathcal{Q}}}_0$ intersects a\ndisk $D \\in {\\mathcal D}$. Then $D$ contains a disk of radius $1$\nthat intersects the boundary of $\\sigma$.\nThus, the intersection of $\\bigcup {\\mathcal D}$ and the region\nconsisting of $\\sigma$ and its eight surrounding\ncells has area at least $1$. Since there can be only\n$O(\\mu({\\mathcal D}))$ different regions of this kind, the claim follows.\n\\end{proof}\n\nTheorem~\\ref{thm:diskseparator}(ii) and \nLemma~\\ref{lem:diskunioncover} imply that\n$|R_v| = O(\\Psi^2\\sqrt{\\mu({\\mathcal D})})$ and \n$|R_{\\mathcal D}| = O(\\mu({\\mathcal D}))$, so the size of the reachability table at \nnode $v$ is $O(\\Psi^2\\mu({\\mathcal D})^{3/2})$.\nThus, we obtain the following recursion for the \nspace requirement $S(\\mu({\\mathcal D}))$ for a set of\ndisks ${\\mathcal D}$ with respect to\n$\\mu(\\cdot)$:\n\n", "itemtype": "equation", "pos": 33411, "prevtext": "\n\\maketitle\n\n\\begin{abstract}\nLet $P \\subset {\\ensuremath {\\mathbb {{R}}}}^d$ be a set of $n$ points\nin the $d$ dimensions \nsuch that each point $p \\in P$ has an \n\\emph{associated radius} $r_p > 0$.\nThe \\emph{transmission graph} $G$ for $P$ is the\ndirected graph with vertex set \n$P$ such that there is \nan edge from $p$ to $q$ if and only if\n$d(p, q) \\leq r_p$, for any $p, q \\in P$. \n\nA \\emph{reachability oracle} is a data structure\nthat decides for any two vertices $p, q \\in G$\nwhether $G$ has a path from $p$ to $q$.\nThe quality of the oracle is measured\nby the space requirement $S(n)$,\nthe query time $Q(n)$, and the preprocessing time.\nFor transmission graphs of one-dimensional point sets, we can construct in $O(n \\log n)$ time \nan oracle with $Q(n) = O(1)$ and $S(n) = O(n)$.\nFor planar point sets, the ratio $\\Psi$ between the largest and\nthe smallest associated radius turns out to be an important \nparameter. We present three data \nstructures whose quality depends on $\\Psi$:\nthe first works only for $\\Psi < \\sqrt{3}$ and achieves $Q(n) = O(1)$ with\n$S(n) = O(n)$ and preprocessing time $O(n\\log n)$;\nthe second data structure gives\n$Q(n) = O(\\Psi^3 \\sqrt{n})$\n and $S(n) = O(\\Psi^5 n^{3/2})$;\nthe third data structure is randomized with\n$Q(n) = O(n^{2/3}\\log^{1/3} \\Psi \\log^{2/3} n)$ and\n$S(n) = O(n^{5/3}\\log^{1/3} \\Psi \\log^{2/3} n)$\nand answers queries correctly with high probability.\n\\end{abstract}\n\n\\section{Introduction}\nRepresenting the connectivity of a graph in a space efficient, succinct manner,\nwhile supporting fast queries, is \none of the most fundamental data structuring questions on graphs.\nFor an undirected graph, \nit suffices to compute the connected components and\nto store with each vertex a label for the respective component. \nThis leads to a linear-space data \nstructure that can  decide in constant time if any two given vertices are \nconnected. For undirected graphs, however, connectivity is not a symmetric relation \nany more,\nand the problem turns out to be much more challenging.\nThus, if $G$ is a \ndirected graph, we say that \na vertex $s$ can \\emph{reach} a vertex $t$ if there is a directed path in $G$ \nfrom $s$ to $t$. Our goal is to construct a \\emph{reachability oracle}, \na space efficient data structure  that answers \n\\emph{reachability queries}, i.e., that determines for any pair of \nquery vertices $s$ and $t$ whether $s$ can reach $t$. The quality of a \nreachability oracle for a graph with $n$ vertices is measured by three \nparameters: the \\emph{space} $S(n)$, the \\emph{query time} $Q(n)$ and the \n\\emph{preprocessing time}.  The simplest solution stores for \neach pair of vertices whether they can reach each other, leading to a \nreachability oracle with $\\Theta(n^2)$ space and constant query time.\nFor sparse graphs with $O(n)$ edges, storing just the graph and performing a \nbreadth first search for a query yields an $O(n)$ space oracle with \n$O(n)$ query time.\nInterestingly, other than that, we are not aware of any better solutions\nfor general directed graphs, \neven sparse ones. Thus, any result that  \nsimultaneously achieves subquadratic space and sublinear query time would be of \ngreat interest. A lower bound by P\\v{a}tra\\c{s}cu~\\cite{Patrascu11} shows \nthat we cannot hope for $o(\\log n)$ query time with linear space,\nbut it does not rule out constant time queries with slightly superlinear space.\nIn the absence of progress towards \nnon-trivial reachability oracles or better lower bounds, solutions for special \ncases become important.\nFor directed planar graphs, after a long line of research~\\cite{ArikatiEtAl96, \nFrederickson87,Djidjev96,ChenXu00,Thorup04}, \nHolm, Rotenberg and Thorup presented a reachability with optimal \nparameters~\\cite{Holm2014}. \nThis result, as well as most other previous results, is actually not only a \nreachability oracle but it can also return the approximate shortest path \ndistance between the query vertices. \n\n\\emph{Transmission graphs} constitute a graph class that shares many \nsimilarities with planar graphs:\nlet $P \\subset \n{\\ensuremath {\\mathbb {{R}}}}^2$ be a set of points where each point $p \\in P$ has a (transmission) radius \n$r_p$ associated\nwith it. The transmission graph has vertex set $P$ and a \n\\emph{directed} edge between two distinct points $p,q \\in P$ if and only if \n$|pq| \\leq r_p$,\nwhere $|pq|$ denotes the Euclidean distance between $p$ and $q$. Transmission \ngraphs are a common model for directed sensor networks~\\cite{KaplanEtAl15,PelegRoditty10,RickenbachEtAl09}. \nIn this geometric context, it is natural to consider a more general \ntype of query where the target point is an arbitrary point in the plane rather   \na vertex of the graph. In this case, a vertex $s \\in P$ can reach a \\emph{point} $q \\in \n{\\ensuremath {\\mathbb {{R}}}}^2$ if there is a \\emph{vertex} $t \\in P$ such that $s$ reaches $t$ and such that \n$|tq| \\leq r_t$. We call such queries \\emph{geometric reachability queries} \nand oracles for them \\emph{geometric reachability oracles}. \nTo avoid \nambiguities, we sometimes use the term \\emph{standard} reachability query/oracle when \nreferring to the case where the query consists of two vertices. \n\n\\paragraph*{Our Results.}\nIn Section~\\ref{sec:1d} we will see that one-dimensional transmission graphs\nadmit a rich structure that\ncan be exploited to construct a simple linear space geometric reachability\noracle with constant query time and  $O(n \\log n)$ preprocessing time.\n\nIn two dimensions, the situation is much more involved.\nHere, it turns out that the \\emph{radius ratio} $\\Psi$, the ratio of the \nlargest and the smallest transmission radius in $P$, is \nan important parameter.\nIf $\\Psi$ is less than $\\sqrt{3}$, we can turn the\ntransmission graph into a planar graph in $O(n\\log n)$ time,\nwhile preserving the reachability structure\nand keeping the number of vertices linear in $n$.\nAs mentioned above, for planar graphs there is a linear time\nconstruction of a reachability oracle with linear space and \nconstant query time~\\cite{Holm2014}.\nThis construction yields a standard \nreachability oracle. However, in a companion paper\nwe show that any standard reachability oracle can be \ntransformed into a  geometric one by paying an \\emph{additive} \noverhead of $O(\\log n \\log \\Psi)$ in the query time and of $O(n \\log \\Psi)$ \nin the space~\\cite{KaplanEtAl15}. Our final construction needs $O(n)$\nspace and has query time $O(\\log n)$ for geometric queries and $O(1)$ for \nstandard queries. It can be found   \nin Section~\\ref{sec:psisqrt3}.\n\n\nWhen $\\Psi \\ge \\sqrt{3}$, we do not know how to find a planar graph representing \nthe reachability of $G$.\nFortunately, we can use a theorem by Alber and Fiala that allows us\nto find a small and balanced separator with respect to the area of the union\nof the disks~\\cite{AlberFiala04}. This leads to\na standard reachability oracle with query time $O(\\Psi^3\\sqrt{n})$\nand space and preprocessing time $O(\\Psi^5 n^{3/2})$, \nsee Section~\\ref{sec:psiconst}.\n\nWhen $\\Psi$ is even larger, we\ncan use random sampling combined with a quadtree of logarithmic\ndepth\nto obtain a standard reachability oracle with query time $O(n^{2/3}\\log^{1/3} \\Psi \\log^{2/3} n)$,\nspace $O(n^{5/3}\\log^{1/3} \\Psi \\log^{2/3} n)$, and \npreprocessing time $O(n^{5/3}(\\log \\Psi + \\log n) \\log^{1/3} \\Psi \\log^{2/3} n)$. Refer to\nSection~\\ref{sec:psipoly}.\nAgain, we can transform both oracles  \ninto  geometric reachability oracles using the result from the \ncompanion paper~\\cite{KaplanEtAl15}. Since the overhead is \nadditive, the transformation does not affect the performance bounds.\n\n\n\\section{Preliminaries and Notation}\n\\label{sec:prelims}\n\nUnless stated otherwise, we let $P \\subset {\\ensuremath {\\mathbb {{R}}}}^2$ denote a set of\n$n$ points in the plane,\nand we assume that for each point $p$, we have an \n\\emph{associated radius} $r_p > 0$.\nFurthermore, we assume that the input is scaled so that the smallest\nassociated radius is $1$.\nThe elements in $P$ are called \\emph{vertices}.\nThe \\emph{radius ratio} $\\Psi$ of $P$ is defined as\n$\\Psi = \\max_{p, q \\in P} r_p / r_q$.\nGiven a point $p \\in {\\ensuremath {\\mathbb {{R}}}}^2$ and a radius $r$, we denote by $D(p, r)$\nthe closed disk with center $p$ and radius $r$. If $p \\in P$, we \nuse $D(p)$ as a shorthand for $D(p, r_p)$. We write\n$C(p, r)$ for the boundary circle of $D(p, r)$.\n\nOur constructions for the two dimensional reachability oracles make extensive \nuse of planar grids. For $i \\in \\{0, 1, \\dots\\}$,\nwe denote by  ${\\operatorname{\\mathcal{Q}}}_i$ the \\emph{grid at level $i$}. It consists of\naxis-parallel squares with diameter $2^i$ that partition the\nplane in grid-like fashion (the \\emph{cells}).\nEach grid ${\\operatorname{\\mathcal{Q}}}_i$ is aligned so that the origin lies at the corner of a cell.\nWe assume that our model of computation can find in constant time\nfor any given point the grid cell that contains it.\n\nIn the one dimensional case, our construction immediately yields a geometric \nreachability oracle. In the two dimensional case, we are only able to \nconstruct standard reachability oracles directly. However, we can use the following \nresult from the companion paper to transform these oracles into geometric reachability \noracles in a black-box fashion~\\cite{KaplanEtAl15}.\n\n\\begin{theorem}[Theorem~4.3 in \\cite{KaplanEtAl15}]\n\\label{thm:geometricreachability}\nLet $G$ be the transmission graph for set $P$ of $n$ points in the plane with radius \nratio $\\Psi$. Given a reachability oracle for $G$ that uses $S(n)$ space and \nhas query time $Q(n)$, we can compute in time $O(n \\log n \\log \\Psi)$ a \ngeometric reachability oracle with space $S(n) + O(n \\log \\Psi)$ and \nquery time $Q(n) + O(\\log n \\log \\Psi)$. \n\\end{theorem}\n\nTo achieve a fast preproccesing time, we need  a sparse approximation of \nthe transmission graph $G$. Let ${\\ensuremath {\\varepsilon}} > 0$ \nbe constant. \nA $(1+{\\ensuremath {\\varepsilon}})$-\\emph{spanner} for $G$ is a sparse subgraph $H \\subseteq G$ such \nthat for any pair of vertices $p$ and $q$ in $G$ we have $d_H(p,q) \\leq \n(1+{\\ensuremath {\\varepsilon}}) d_G(p,q)$ where $d_H$ and $d_G$ denote the shortest path distance in \n$H$ and in $G$. \nThe companion paper shows that $(1+{\\ensuremath {\\varepsilon}})$-spanners for transmission graphs can be \nconstructed quickly~\\cite{KaplanEtAl15}. \n\\begin{theorem}[Theorem~3.12 in~\\cite{KaplanEtAl15}]\n\\label{thm:2dspanner}\n  Let $G$ be the transmission graph for a set $P$ of\n  $n$ points in the plane \n  with radius ratio $\\Psi$. For any fixed ${\\ensuremath {\\varepsilon}} > 0$,\n  we can compute\n  a $(1+{\\ensuremath {\\varepsilon}})$-spanner for $G$ with $O(n)$ edges in time $O(n(\\log n + \\log \\Psi))$\n  using space $O(n \\log \\Psi)$.\n\\end{theorem}\n\n\\section{Reachability Oracles for 1-dimensional Transmission Graphs}\n\\label{sec:1d}\nIn this section, we prove the existence of efficient reachability \noracles for one-dimensional transmission graphs and show that they\ncan be computed quickly.\n\\begin{theorem}\n\\label{thm:1doracle}\nLet $G$ be the transmission graph of an $n$-point set $P \\subset {\\ensuremath {\\mathbb {{R}}}}$.\nWe can construct in $O(n \\log n)$ time a geometric reachability oracle for \n$G$ with space $S(n) = O(n)$ and query time $Q(n) = O(1)$.\n\\end{theorem}\n\n\\begin{figure}[htb]\n\\centering\n\\includegraphics[scale=1.3]{1doracle-connected-component}\n\\caption{A strongly connected component $C$ (red) and its landmarks. The right \nreachpoint is defined by a vertex of another component (blue).}\n\\label{fig:connected-component}\n\\end{figure}\n\nIt suffices to consider the reachability for each \\emph{strongly \nconnected components} (SCCs) of $G$. \nLet $\\mathcal{C}$ be the set of the SCCs of \n$G$, and let $C \\in \\mathcal{C}$ be one of them.\nWe say that the SCC $C$ can \\emph{reach}\na point $q \\in {\\ensuremath {\\mathbb {{R}}}}^2$, if there is a vertex $p$ in $G$ with $q \\in D(p)$ and \ndirected path in $G$ from a vertex in $C$ to $p$. \nWe say that $C$ can reach an SCC $D \\in \\mathcal{C}$\nif $C$ can reach a vertex in $D$. By strong connectivity,\nthis means that all vertices in $C$ can reach all verticies in $D$.\nNext, we define several landmarks related to\nthe SCC $C$, see Figure~\\ref{fig:connected-component}: the \\emph{leftmost \npoint} of $C$, ${\\operatorname{l}}(C)$,  is the vertex\nin $C$ with the smallest\n$x$-coordinate; the \\emph{left reachpoint} of $C$, ${\\operatorname{lr}}(C)$, is\nthe leftmost point in ${\\ensuremath {\\mathbb {{R}}}}$ that lies in a ball around a vertex in $P$ \nreachable from $C$; and the \\emph{direct\nleft reachpoint} of $C$,  ${\\operatorname{dl}}(C)$, is the leftmost point in\n${\\ensuremath {\\mathbb {{R}}}}$ that lies in a ball around a vertex in $C$, i.e., \n${\\operatorname{dl}}(C) = \\min_{p \\in C} (p - r_p)$.\nThe rightmost point ${\\operatorname{r}}(C)$, right reachpoint ${\\operatorname{rr}}(C)$, and \nthe direct right reachpoint ${\\operatorname{dr}}(C)$ are defined\nanalogously.\nThe \\emph{interval} of $C$, $I_C$, is defined as $I_C = [{\\operatorname{l}}(C), {\\operatorname{r}}(C)]$.\n\n\\begin{lemma}\\label{obs:reachInbetween}\nLet $C \\in \\mathcal{C}$ be a strongly connected component, and let \n$s \\in C$ be a vertex in $C$.\nFor any point $q \\in {\\ensuremath {\\mathbb {{R}}}}^2$, the vertex $s$ can reach $q$ if and only if \n$q \\in [{\\operatorname{lr}}(C),{\\operatorname{rr}}(C)]$.\n\\end{lemma}\n\n\\begin{proof}\nIf $s$ can reach $q$, then\n$q \\in [{\\operatorname{lr}}(C),{\\operatorname{rr}}(C)]$, by the definition of ${\\operatorname{lr}}(C)$ and ${\\operatorname{rr}}(C)$.\nConversely, let $q \\in [{\\operatorname{lr}}(C),{\\operatorname{rr}}(C)]$, and assume\nw.l.o.g that $q$ lies to the left of $s$. Let $p \\in P$ be the\nvertex that defines the left reachpoint, i.e.,\n${\\operatorname{lr}}(C) = p - r_{p}$.\nBy definition of ${\\operatorname{lr}}(C)$, there is a path $s = p_1 p_2 \\dots p_k =  p$ \nfrom \n$s$ to $p$ in $G$. \nSince $G$ is a transmission graph, we have $|p_i - p_{i+1}| \\leq r_{p_i}$,\nfor $i = 1, \\dots, k-1$, so the disks\n$D(p_i)$ cover the entire interval $[{\\operatorname{lr}}(C),p]$. Thus, there is a $p_i$ \nwith $q$ in $q \\in D(p_i)$. \nBy definition, $G$ contains a \npath from $s$ to $p_i$ and hence $s$ can reach $q$.\n\\end{proof}\n\n\nLemma~\\ref{obs:reachInbetween} suggests the following reachability \noracle with $O(n)$ space\nand $O(1)$ query time:\nfor each SCC $C \\in \\mathcal{C}$, store\nthe reachpoints ${\\operatorname{lr}}(C)$ and ${\\operatorname{rr}}(C)$; and for each vertex \n$p \\in P$, store the SCC of \n$G$ that contains it.\nGiven a query $p,q$, where $p$ is a vertex and $q$ a point in ${\\ensuremath {\\mathbb {{R}}}}^2$, \nwe look up the SCC $C$ \nfor $p$, and we return YES if and only if $q \\in [{\\operatorname{lr}}(C),{\\operatorname{rr}}(C)]$.\n\n\n\\paragraph*{The Structure of the Components.}\nTo compute the reachpoints efficiently,\nwe must investigate the structure of the SCCs in one-dimensional \ntransmission graphs more deeply.\n\n\\begin{lemma}\\label{obs:laminar}\nThe intervals $\\{I_C \\mid C \\in \\mathcal{C}\\}$ for the SCCs \nform a \\emph{laminar set family},\ni.e., for any two SCCs $C, D \\in \\mathcal{C}$,\nwe have either $I_{C} \\cap I_{D} = \\emptyset$,\n$I_{C} \\subseteq I_{D}$, or $I_{D} \\subseteq I_{C}$.\n\\end{lemma}\n\n\\begin{proof}\nFix two distinct SCCs $C, D \\in \\mathcal{C}$,\nand suppose that \n$I_{C} \\cap I_{D} \\neq \\emptyset$, but neither\n$I_{C} \\subseteq I_{D}$ nor $I_{D} \\subseteq I_{C}$ (see \nFigure~\\ref{fig:laminar}).\nThen one endpoint of $I_{C}$ lies in $I_{D}$, and vice versa.\nSince $C$ is strongly connected,\nfor every $x \\in I_{C}$, there is a vertex $p \\in C$ with\n$|p - x| \\leq r_p$. The same holds for $D$.\nThus, since\nthe endpoints of $I_{C}$ and $I_{D}$ lie in $P$, strong connectivity\nimplies that $C$ can reach\n$D$ and that $D$ can reach $C$. However, this means that $C = D$, although\nwe assumed them to be distinct.\n\\end{proof}\n\n\\begin{figure}[htb]\n\\centering\n\\includegraphics[scale=1.3]{1doracle-disjoint-components}\n\\caption{Two SCCs $C$ and $D$ whose intervals overlap. There must be a vertex $p \n\\in C$ whose disk contains $l(D)$ and vice versa, so $C$ and $D$ cannot\nbe distinct. }\n\\label{fig:laminar}\n\\end{figure}\n\n\nBy Lemma~\\ref{obs:laminar}, we can obtain a rooted forest with\nvertex set ${\\mathcal C}$ by making $C \\in {\\mathcal C}$ a child of $D \\in {\\mathcal C}$, if and only\nif $I_C \\subset I_D$.\nIf necessary, we add a common root node to get a rooted tree $T$.\nThe next lemma characterizes the left and the right reachpoints. \n\n\\begin{lemma}\\label{lem:sibling}\nLet $C \\in \\mathcal{C}$ be a SCC. The left reachpoint ${\\operatorname{lr}}(C)$\nof $C$ is either ${\\operatorname{dl}}(C)$ or ${\\operatorname{dl}}(D)$, where $D$\nis a sibling of $C$ in $T$.\nThe situation for the right reachpoints is analogous.\n\\end{lemma}\n\n\\begin{proof}\nLet $\\overline{C}$ be the parent of $C$ in $T$.\nSince $I_{C} \\subseteq I_{\\overline{C}}$, and since the SCCs $C$ and\n$\\overline{C}$\nare distinct, $\\overline{C}$ can reach\n$C$, but $C$ cannot reach $\\overline{C}$.\nFurthermore, since the endpoints of\n$I_{\\overline{C}}$ are vertices of $\\overline{C}$, we cannot\nreach any SCC outside $I_{\\overline{C}}$ from $C$, otherwise\nLemma~\\ref{obs:reachInbetween} would imply that $C$ can reach also \n$\\overline{C}$.\n\nBy the definition of (direct) left reachpoint, there is\nan SCC $D \\in \\mathcal{C}$ with ${\\operatorname{lr}}(C) = {\\operatorname{dl}}(D)$, possibly $D = C$.\nSince $C$ cannot reach outside $I_{\\overline{C}}$, it follows that $I_D \n\\subseteq I_{\\overline{C}}$ and\nthat $D$ is a descendant of $\\overline{C}$.\nAssume that $D \\neq C$ and\nthat $D$ is not a sibling of $C$.\nThen, by Lemma~\\ref{obs:laminar},\nthere is a sibling $D'$ of $C$ with $I_D \\subset I_{D'}$.\nSince ${\\operatorname{lr}}(C) = {\\operatorname{dl}}(D)$, we can go from $C$ to $D$ and,\nby Lemma~\\ref{obs:reachInbetween}, also to $D'$. Hence, ${\\operatorname{lr}}(D')={\\operatorname{lr}}(C)$.\nSince $I_D \\subset I_{D'}$ and $D\\neq D'$, it follows that ${\\operatorname{l}}(D') < \n{\\operatorname{dl}}(D)$. \nHence, we get ${\\operatorname{lr}}(C) = {\\operatorname{lr}}(D') \\leq {\\operatorname{l}}(D') < {\\operatorname{lr}}(C)$, a contradiction.  \n\\end{proof}\n\n\\paragraph*{Reachability Between Siblings.}\nBy Lemma~\\ref{lem:sibling}, for an SCC $C \\in \\mathcal{C}$, \nit suffices to search for ${\\operatorname{lr}}(C)$ and ${\\operatorname{rr}}(C)$ among\nthe siblings of $C$ in $T$. Let $C_1, \\dots, C_k$ be the children of a \nnode in $T$,\nsorted from left to right according to their intervals.\nTo compute the left reachpoints of $C_1,  \\dots, C_k$, we proceed\nas follows: we set ${\\operatorname{lr}}(C_1) = \n{\\operatorname{dl}}(C_1)$, and \nwe push $C_1$ onto an empty stack $S$. Then we\ngo through $C_2, \\dots, C_k$, from left to right.\nFor the current child $C_i$, we initalize the tentative left reachpoint\n${\\operatorname{lr}}(C_i) = {\\operatorname{dl}}(C_i)$.\nWhile the current tentative reachpoint lies to the left of the right \ninterval\nendpoint for the top of the stack, we pop the stack, and we update\nthe tentative reachpoint of $C_i$ to the left reachpoint of the popped \ncomponent, if that reachpoint lies further to the left. Then, \nwe push $C_i$ onto the stack and proceed to\nthe next child;\nsee Algorithm~\\ref{alg:leftreachpoints}.\n\n\\begin{algorithm}[htb]\n${\\operatorname{lr}}(C_1) \\gets {\\operatorname{dr}}(C_1)$\n\npush $C_1$ onto an empty stack $S$\n\n\\For{$i \\gets 2$ \\KwTo $k$}{\n\n  ${\\operatorname{lr}}(C_i) \\gets {\\operatorname{dr}}(C_i)$\n\n  \\While{$S \\neq \\emptyset$ \\textnormal{and} ${\\operatorname{lr}}(C_i) \\leq \n{\\operatorname{r}}({\\operatorname{top}}(S))$} {\n    $D \\gets {\\operatorname{pop}}(S)$ \n\n    ${\\operatorname{lr}}(C_i) \\gets \\min\\{{\\operatorname{lr}}(C_i), {\\operatorname{lr}}(D)\\}$\n\n  }\npush $C_i$ onto $S$\n}\n\\caption{Computing left reachpoints.}\n\\label{alg:leftreachpoints}\n\\end{algorithm}\n\nThe right reachpoints are computed analogously. In the next lemma, we prove \nthat this procedure correctly computes the reachability among nodes \nof $T$ in time $O(n\\log n)$.\n\n\\begin{lemma}\n\\label{lem:reachabilitysibling}\nWe can compute the reachability for all nodes in $T$\nin $O(n\\log n)$ time.\n\\end{lemma}\n\n\\begin{proof}\nWe apply Algorithm~\\ref{alg:leftreachpoints} \nfor each set of siblings.\nThe total time for sorting the intervals is $O(n \\log n)$. The total time\nfor computing the direct left reachpoints is linear, and each\nSCC is pushed and popped at most once, again taking linear time.\n\nIt remains to prove correctness. For this, consider the sorted \nsiblings $C_1, \\dots, C_k$.\nDuring Algorithm~\\ref{alg:leftreachpoints}, we maintain\nthe following invariant: let $C_i$ be the current component. \nThen, all components $C_j$, \n$j = 1, \\dots,  i -1$, have the\ncorrect left reachpoint, and $S$ contains precisely those components \n$C_j$, $j = 1, \\dots, i-1$,\nthat cannot be reached by any component $C_l$ with $j < l < i$.\nThe invariant holds for $C_1$: if\n${\\operatorname{dl}}(C_1)$ were different from ${\\operatorname{lr}}(C_1)$, there would be another \ncomponent $D$\nwith ${\\operatorname{dl}}(D) = {\\operatorname{lr}}(C_1)$. The component $D$ cannot be to the left\nof $C_1$, as $C_1$ is the leftmost sibling, and it cannot be to the\nright of $C_1$, since then $I_{C_1} \\subseteq [{\\operatorname{lr}}(D),{\\operatorname{rr}}(D)]$,\nand $C$ and $D$ would collapse\ninto one SCC, by Lemma~\\ref{obs:reachInbetween}.\nThus ${\\operatorname{dl}}(C_1) =  {\\operatorname{lr}}(C_1)$.\n\nFor $i > 1$, let $p \\in P$ be the vertex with ${\\operatorname{lr}}(C_i) = p - r_p$. \nIf $p \\in C_i$, then ${\\operatorname{lr}}(C_i) = {\\operatorname{dl}}(C_i)$, and we are done.\nOtherwise, let $\\pi$ be a path from $C_i$ to $p$, and\nlet $D$ be the first component that $\\pi$ visits after $C_i$.\nThen, $D$ must be to the left of $C_i$ (otherwise $C_i = D$) and\n${\\operatorname{lr}}(C_i) = {\\operatorname{lr}}(D)$.\nFirst suppose that $D$ is in $S$. Since ${\\operatorname{dl}}(C_i)$ lies to the \nleft of $r(C)$, \nthe\nalgorithm pops the stack until it reaches $D$.\nAfter that, it sets ${\\operatorname{lr}}(C_i)$ to ${\\operatorname{lr}}(D)$ and stops, by the invariant.\nThus, ${\\operatorname{lr}}(C_i)$ is set correctly and the invariant is maintained. \nIf $D$ is not in $S$,\nthe invariant ensures that there is a component $C_l$ on $S$\nthat can reach $D$\nand that lies between $C_i$ and $D$, i.e., ${\\operatorname{lr}}(C_l) = {\\operatorname{lr}}(D)$.\nAs before, we see that the algorithm pops the stack until\nit discovers $C_l$ and then correctly sets the left reachpoint\nof $C_i$ while maintaining the invariant.\n\\end{proof}\n\nTo establish Theorem~\\ref{thm:1doracle}, it remains to describe how to find\nthe SCCs efficiently without constructing the transmission\ngraph explicitly.\n\n\\begin{lemma}\n\\label{lem:findscc}\n The SCCs can be computed in $O(n\\log n)$ time.\n\\end{lemma}\n\\begin{proof}\nRecall the Kosaraju-Sharir algorithm~\\cite{Cormen2001}: first,\nit performs a DFS of $G$ and records the order in which the\nvertices are visited for the last time. Then it performs a second DFS \nin the \\emph{transpose graph} $G'$ in which the directions of all edges \nhave been reversed. \n\nTo implement this algorithm, we need two operations:\ngiven a vertex $p \\in P$, find an unvisited vertex $q$ such that $pq$ is\nan edge of $G$ or an edge of $G'$. For $G$, this can easily be done\nin $O(\\log n)$ time:\nstore the points of $P$ in a balanced search tree. When a point\n$p$ is visited for the first time, remove it from the tree.\nWhen looking for an outgoing edge from a vertex $p$, determine the \npredecessor and the successor of  $p$ in the current set, and check \nthe distances.  For $G'$, we proceed similarly, but we use an \n\\emph{interval tree} to store the $r_p$-balls around the vertices in \n$P$~\\cite{4M}. When a vertex $p$ is visited\nfor the first time, we delete the corresponding $r_p$-ball from\nthe interval tree. When we need to find an outgoing edge from \na vertex $p$, we \nuse the interval tree to find one ball that contains $p$. Again, this \ncan be done in $O(\\log n)$ time.\n\\end{proof}\n\n\n\\section{Reachability Oracles for 2-dimensional Transmission Graphs}\n\\label{sec:2d}\nIn the following sections we present three different geometric reachability \noracles for\ntransmission graphs in ${\\ensuremath {\\mathbb {{R}}}}^2$. By Theorem~\\ref{thm:geometricreachability}, we \ncan focus on the construction of standard reachability oracles since they can \nbe extended easily to geometric ones. This has no effect on the \nspace and query time bounds, expect for the oracle given \nin Section~\\ref{sec:psisqrt3}. This oracle  applies for $\\Psi < \\sqrt{3}$, it needs space $O(n \n\\log n)$ and has query time $O(1)$. Thus, the transformation from standard reachability to \ngeometric reachability increases the query time to $O(\\log n)$.\n\n\\subsection{$\\Psi$ is \nless than $\\sqrt{3}$}\n\\label{sec:psisqrt3}\nSuppose that $\\Psi \\in [1,\\sqrt{3})$. In this case, we show that \nwe can make $G$ planar by\nfirst removing unnecessary edges and then resolving edge crossings\nby adding $O(n)$ additional vertices.\nThis will not change the reachability between\nthe original vertices. The existence of efficient reachability\noracles then follows from known results for directed planar graphs.\nThe main goal is to prove the following lemma.\n\n\\begin{lemma}\\label{lem:planarization}\nLet $G$ be the transmission graph for a planar $n$-point set $P$ \nwith $\\Psi < \\sqrt{3}$.\nIn $O(n \\log n)$ time, we can find a plane\ngraph $H = (V, E)$ such that \n\\begin{enumerate}[(i)]\n\\item $|V| = O(n)$ and $|E| = O(n)$; \n\\item $P \\subseteq V$; and\n\\item for any $p,q \\in P$, $p$ can reach $q$ in $G$ if and only if $p$ can\nreach $q$ in $H$.\n\\end{enumerate}\n\\end{lemma}\nGiven Lemma~\\ref{lem:planarization}, we can obtain our reachability\noracle from known results.\n\n\\begin{theorem}\n\\label{thm:2doraclesmall}\nLet $G$ be the transmission graph for a two-dimensional set $P$ of \n$n$ points, and suppose the radius ratio $\\Psi$ is less than\n$\\sqrt{3}$.\nThen, we can construct in \n$O(n\\log n)$ time a standard reachability oracle for $G$ with $S(n) = O(n)$\nand $Q(n) = O(1)$ or a geometric reachability oracle for $G$ with $S(n) = \nO(n)$ and $Q(n) = O(\\log n)$.\n\\end{theorem}\n\\begin{proof}\nWe apply Lemma~\\ref{lem:planarization} \nand construct the distance oracle of Holm, Rotenberg, and Thorup for\nthe resulting graph~\\cite{Holm2014}.\nThis distance oracle can be constructed in linear time, it needs\nlinear space, and it has constant query time. The result for the geometric \nreachability oracle follows from Theorem~\\ref{thm:geometricreachability}.\n\\end{proof}\n\nWe prove \nLemma~\\ref{lem:planarization} in three steps. First, we show how to\nmake $G$ sparse without changing the\nreachability. Then, we show how to turn $G$ into a planar graph.\nFinally, we argue that we can combine these two operations to \nget the desired result.\n\n\\paragraph*{Obtaining a Sparse Graph.} \nWe construct a subgraph\n$H \\subseteq G$ with the same reachability as $G$ but with\n$O(n)$ edges and $O(n)$ edge crossings.  \nThe bounded number of crossings will allow us to obtain a planar\ngraph later on.\nConsider the grid ${\\operatorname{\\mathcal{Q}}}_{0}$, and  \nlet $\\sigma \\in {\\operatorname{\\mathcal{Q}}}_{0}$ be a grid cell.\nWe say that an edge  of $G$ \\emph{lies in} \n$\\sigma$ if both endpoints are contained in\n$\\sigma$. \nThe \\emph{neighborhood} $N(\\sigma)$ of $\\sigma$ consists of \nthe $7 \\times 7$ block of cells in ${\\operatorname{\\mathcal{Q}}}_0$ with $\\sigma$ at the center. \nTwo grid cells are \\emph{neighboring} if they lie in each\nother's neighborhood.\nSince a cell in ${\\operatorname{\\mathcal{Q}}}_0$ has side length $\\sqrt{2}/2$, \nthe two endpoints of every edge in $G$ must lie in neighboring\ngrid cells.\n\n\\begin{figure}[htb]\n\\centering\n\\includegraphics{2doracle-planarization}\n\\caption{The vertices and edges of two neighboring cells of $G$ (left) and \n of $H$ (right)}\n \n \\label{fig:planarization}\n\\end{figure}\n\nThe subgraph $H$ has vertex set $P$, and we pick the edges as follows (see also \nFigure~\\ref{fig:planarization}):\nfor each non-empty cell $\\sigma \\in {\\operatorname{\\mathcal{Q}}}_{0}$, we \nset $P_\\sigma = P \\cap \\sigma$, and\nwe compute the\nEuclidean minimum spanning tree (EMST) $T_\\sigma$ of $P_\\sigma$.\nFor each edge $pq$ of $T_\\sigma$, we add the directed edges\n$pq$ and $qp$ to $H$.\nThen, for every cell\n$\\tau \\in N(\\sigma)$,\nwe check if there are any edges from $\\sigma$ to $\\tau$ in $G$. If so, we\nadd an arbitrary such edge to $H$. The following lemma states properties of\n$H$. \n\n\\begin{lemma}\n\\label{lem:pruning}\nThe graph $H$ \n\\begin{enumerate}[(i)]\n\\item has the same reachability as $G$;\n\\item has $O(n)$ edges;\n\\item can be constructed in $O(n \\log n)$ time;\nand\n\\item the straight line embedding of $H$ in the plane with vertex set \n$P$ has $O(n)$ edge crossings. \n\\end{enumerate}\n\\end{lemma}\n\n\\begin{proof}\n(i): All edges of $H$ are also edges of $G$:\ninside a non-empty cell $\\sigma$, $P_\\sigma$ induces\na clique in $G$, and the edges of $H$ between cells\nlie in $G$ by construction. \nIt follows that $H$ does not increase the reachability. Now let\n$pq$ be an edge in $G$. We show that there \nis a path from $p$ to $q$ in $H$:\nif $pq$ lies in a cell $\\sigma$ of ${\\operatorname{\\mathcal{Q}}}_0$,\nwe take the path along the EMST $T_\\sigma$. \nIf $pq$ goes from a cell $\\sigma$ to\nanother cell $\\tau$, then\nthere is an edge $uv$ from\n$\\sigma$ to $\\tau$ in $H$, and\nwe take the path in $T_{\\sigma}$ from $p$ to $u$,\nthen the edge $uv$, and finally the path\nin $T_{\\tau}$ from $v$ to $q$.\n\n(ii): For a nonempty cell $\\sigma$, \nwe create $|P_\\sigma|-1$ edges inside $\\sigma$. Furthermore, \nsince $|N(\\sigma)|$ is constant, \nthere are at most $O(1)$ edges between $\\sigma$ and other cells.\nThus, $H$ has $O(n)$ edges.\n\n(iii): Since we assumed that we can find the cell for a vertex\n$p \\in P$ in constant time, we can easily compute the sets\n$P_\\sigma$, $\\sigma \\in {\\operatorname{\\mathcal{Q}}}_0$ nonempty,  in time \n$O(n \\log n)$ \nComputing the EMST $T_\\sigma$ for a cell $\\sigma$ needs time \n$O(|P_\\sigma|\\log |P_\\sigma|)$,\nfor a total of $O(n \\log n)$.\nTo find the edges between neighboring cells, \nwe build a Voronoi diagram together with a point location\nstructure for each set $P_\\sigma$.\nAgain, this takes $O(n\\log n)$ total time.\nLet $\\sigma$ and $\\tau$ be two neighboring cells. \nFor each point in $P_\\sigma$, we locate the nearest neighbor in \n$P_{\\tau}$ using the Voronoi diagram.\nIf there is a point $p \\in P_\\sigma$ whose nearest neighbor\n$q \\in P_{\\tau}$ lies in $D(p)$, we add the edge $pq$ to $H$, and\nwe proceed to the next pair of neighboring cells.\nSince $|N(\\sigma)|$ is constant,\na point participates in $O(1)$ point locations,\nof $O(\\log n)$ time each. The total running\ntime is $O(n \\log n)$.\n\n(iv):\nWe distinguish two kinds of crossings. First, if at least one edge\nof a crossing lies inside a grid cell $\\sigma$, then \nthe other edge must go between different cells of $N(\\sigma)$, \nbecause $T_\\sigma$ is crossing-free.\nThere are $O(1)$ such edges, so there are $O(n)$ crossings \nof the first kind, since $H$ has $O(n)$ edges.\n\nIn the second kind of crossing, both edges go between different grid cells.\nAs $\\Psi$ is constant, each edge of $H$ can participate in at most \n$O(1)$ such crossings.\nSince there are $O(n)$ edges in $H$, the total number of crossings\nis $O(n)$.\n\\end{proof}\n\n\\paragraph*{Making $G$ Planar.}\nWe now describe how to turn $G$ into a planar graph.\nSuppose an edge $pq$ \nand an edge $uv$ of $G$ \ncross at a point $x$. \nTo eliminate the crossing, we add $x$ as a new \nsite to the graph, and we replace \n$pq$ and $uv$ by the four new \nedges $px$, $xq$, $ux$\nand $xv$.\nFurthermore, if $qp$ is an edge of $G$, we replace it by \nthe two edges $qx$, $xp$, \nand if $vu$ is an edge of $G$, we replace it by  \nthe two edges $vx$, $xu$. See Figure~\\ref{fig:resolving}.\nWe say that this \\emph{resolves} the crossing between $p,q,u$ and $v$.\nLet $\\widetilde{G}$ be the graph obtained by iteratively resolving all \ncrossings in $G$. \n\\begin{figure}[htb]\n\\centering\n\\includegraphics[scale=1.3]{2doracle-resolving}\n\\caption{Resolving a crossing. Since the edge $vu$ exists, we also add $vx$ and \n$xu$ as edges.}\n\\label{fig:resolving}\n\\end{figure}\n\nFirst, we want to show that resolving crossings keeps the \\emph{local} \nreachability between the four vertices of the crossing edges.\nIntuitively speaking, the  restriction $\\Psi < 3$\nforces the vertices to be close together. This guarantees the existence of \nadditional edges between $p,q,u,v$ in $G$, and these edges \ncover the new paths introduced by resolving the crossing. \n\nTo formally prove this, we first need a geometric observation.\nFor a point $p \\in P$,\nlet $D(p,r)$ and $C(p, r)$ be the disk and the circle around \n$p$ with radius $r$.\n\n\\begin{lemma}\n\\label{lem:calculus}\nLet $p,q$ be two points in ${\\ensuremath {\\mathbb {{R}}}}^2$ with $|pq| = \\sqrt{3}$.\n\\begin{enumerate}[(i)]\n\\item Let $a \\in C(p,1) \\cap C(q,1)$. \nThen, for any $r \\in [1,\\sqrt{3})$,\nif $b \\in C(p,r) \\cap C(q,r)$ lies on the \nother side of the line through $p$ and $q$\nfrom $a$, then $|ab| \\geq r$. \n\\item Let \n$\\{a,b\\} = C(p,\\sqrt{3}) \\cap C(q,1)$. Then, $|ab| > \\sqrt{3}$.\n\\end{enumerate}\n\\end{lemma}\n\n\\begin{proof}\n(i): Let  $x$ be the intersection point\nof the line segments $\\overline{pq}$ and $\\overline{ab}$. \nThen $|ab| = |ax| + |xb|$.\nUsing that $|pa| = 1$ and $|px| = \\sqrt{3}/2$, the Pythagorean Theorem \ngives $|xa| = 1/2$. Similarly, we can compute $|xb|$ as a function of $r$:\n with $|pb| = r$ we get $|xb| = \\sqrt{r^2 - 3/4}$.\nWe want to show that\n\n", "index": 1, "text": "\\begin{align*}\n r \\leq |ab|  = 1/2 + \\sqrt{r^2 - 3/4}\n \\Leftrightarrow & r^2 \\leq 1/4 + \\sqrt{r^2 - 3/4} + r^2 - 3/4\n \\Leftrightarrow  1 \\leq r^2,\n\\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle r\\leq|ab|=1/2+\\sqrt{r^{2}-3/4}\\Leftrightarrow\" display=\"inline\"><mrow><mrow><mi>r</mi><mo>\u2264</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>a</mi><mo>\u2062</mo><mi>b</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>=</mo><mrow><mrow><mn>1</mn><mo>/</mo><mn>2</mn></mrow><mo>+</mo><msqrt><mrow><msup><mi>r</mi><mn>2</mn></msup><mo>-</mo><mrow><mn>3</mn><mo>/</mo><mn>4</mn></mrow></mrow></msqrt></mrow></mrow><mo>\u21d4</mo><mi/></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle r^{2}\\leq 1/4+\\sqrt{r^{2}-3/4}+r^{2}-3/4\\Leftrightarrow 1\\leq r^%&#10;{2},\" display=\"inline\"><mrow><mrow><mrow><msup><mi>r</mi><mn>2</mn></msup><mo>\u2264</mo><mrow><mrow><mrow><mn>1</mn><mo>/</mo><mn>4</mn></mrow><mo>+</mo><msqrt><mrow><msup><mi>r</mi><mn>2</mn></msup><mo>-</mo><mrow><mn>3</mn><mo>/</mo><mn>4</mn></mrow></mrow></msqrt><mo>+</mo><msup><mi>r</mi><mn>2</mn></msup></mrow><mo>-</mo><mrow><mn>3</mn><mo>/</mo><mn>4</mn></mrow></mrow></mrow><mo>\u21d4</mo><mrow><mn>1</mn><mo>\u2264</mo><msup><mi>r</mi><mn>2</mn></msup></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07797.tex", "nexttext": "\nSince Theorem~\\ref{thm:diskseparator} gives\n$\\mu({\\mathcal A}) + \\mu(B) \\leq \\mu(D)$ and \n$\\max\\{\\mu({\\mathcal A}), \\mu({\\mathcal B})\\} \\leq (1-\\alpha)\\mu({\\mathcal D})$,\n(\\ref{eqn:spacerec}) solves\nto $S(\\mu({\\mathcal D})) = O(\\Psi^2 \\mu({\\mathcal D})^{3/2})$.\nAs $\\mu({\\mathcal D}) = O(n\\Psi^2)$,  the total space is\n$O(\\Psi^5n^{3/2})$.\n\n\\paragraph*{Query Algorithm.}\nLet $p,q \\in P$ be given. We may assume that $p$ and $q$ are\nrepresentatives for their cells.\nIf $p = q$, then we return YES,\nsince all vertices in the same cell constitute a clique.\nIf $p \\neq q$, we let\n$v$ and $w$ be the nodes in $T$ with\n$p \\in R_{v}$ and $q \\in R_{w}$.\nLet $u$ be least common ancestor of $v$ and $w$.\nIt can be found in  $O(\\log n)$ time by walking up the tree.\nLet $L$ be the  path from $u$ to the root\nof $T$. We check for each $r \\in \\bigcup_{x\\in L} R_{x}$\nwhether $p$ can reach $r$ and whether $r$ can reach $q$. If so, \nwe return YES.\nIf there is no such\n$s$, we return NO.\nSince $|R_x|$ increases geometrically along $L$, the running time\nis dominated by the time for processing the root, which is \n$O(\\Psi^2\\mu({\\mathcal D})^{1/2})$.\nBounding $\\mu({\\mathcal D})$ by $O(\\Psi^2n)$, the total query time is\n$O(\\Psi^3\\sqrt{n})$.\n\nIt remains to argue that our query algorithm is correct. \nBy construction, it follows \nthat we return YES only if there is a path from $p$ to $q$.\nNow, suppose there is a path $\\pi$ in $G$ from $p$ to $q$,\nwhere $p$ and $q$ are representatives with $p\\neq q$.\nLet $v, w$ be the nodes in $T$ with\n$p \\in R_{v}$ and $q \\in R_{w}$. Let $u$\nbe their least common ancestor, and $L$ be the path from $u$\nto the root.\nBy construction, $\\bigcup_{x \\in L} {\\mathcal D}_x$ contains a disk\nfor a vertex $r$ in $\\pi$. We pick $r$ such that the corresponding\nnode $x$ is closest to the root.\nLet $r'$ be the representative for the cell $\\sigma$ containing $r$.\nSince the vertices in $\\sigma$ constitute a clique,\n$p$ can reach $r'$ and $r'$ can reach $q$ in the subgraph of $G$\ninduced by $v$.\nThus, when walking along $L$, the algorithm will discover $r'$ and\nthe path from $p$ to $q$.\nTheorem~\\ref{thm:2doraclefixed} now follows.\n\n\n\\subsection{Logarithmic Dependence on $\\Psi$}\n\\label{sec:psipoly}\n\nFinally, we improve the dependence on $\\Psi$ to be logarithmic,\nat the cost of a slight increase of the exponent for $n$.\nWe can show the following theorem by constructing a standard reachability oracle and \nthen using Theorem~\\ref{thm:geometricreachability}.\n\\begin{theorem}\n\\label{thm:2doraclebounded}\nLet $G$ be the transmission graph for a \nset $P$ of $n$ points in the plane.\nWe can construct a geometric reachability oracle for $G$\nwith $S(n) = O(n^{5/3}\\log^{1/3}\\Psi \\log^{2/3} n)$ and \n$Q(n) = O(n^{2/3}\\log^{1/3} \\Psi \\log^{2/3} n)$. All\nqueries are answered correctly with high probability.\nThe preprocessing time is \n$O(n^{5/3}(\\log \\Psi + \\log n)\\log^{1/3} \\Psi \\log^{2/3}n )$. \n\\end{theorem}\n\nWe scale everything such that the smallest radius in\n$P$ is $1$.\nOur approach is as follows: let $p,q \\in P$.\nIf there is a $p$-$q$-path  with  ``many'' vertices, we detect \nthis by taking a large enough\nrandom sample $S \\subseteq P$ and by storing the \nreachability information for every vertex in $S$. \nIf there is a path from $p$ to $q$ with ``few'' vertices, then $p$ \nmust be ``close'' to $q$, where ``closeness'' is defined relative to \nthe largest radius along the path. The radii from $P$ can lie in \n$O(\\log \\Psi)$ different scales, and for each scale we \nstore local information to find such a ``short'' path.\n\n\\paragraph*{Long Paths.}\nLet $0 < \\alpha < 1$ be a parameter to be \ndetermined later.\nFirst, we show that a random sample can be used to detect paths with\nmany vertices. \n\n\\begin{lemma}\\label{lem:sampling}\nWe can sample a set $S \\subset P$ of size $O(n^\\alpha \\log n)$ such that \nthe following holds with high probability\nat least $1-1/n$: for any \n$p,q \\in P$, if there is a path $\\pi$ from $p$ to $q$ in $G$ with \nat least $n^{1-\\alpha}$ vertices, then $\\pi \\cap S \\neq \\emptyset$.\n\\end{lemma}\n\n\\begin{proof}\nLet $m = 4n^\\alpha \\ln n$. \nWe construct $S$ by including each $p \\in P$ independently with \nprobability $m/n$. Using Chernoff bounds, we\nget\n", "itemtype": "equation", "pos": 49184, "prevtext": "\nwhich holds since $r \\in [1,\\sqrt{3})$.\n\n(ii): Use the Pythagorean Theorem\nwith the right angles marked in the Figure~\\ref{fig:calculusa}.\n\\end{proof}\n\n\\begin{figure}[hbt]\n\\centering\n\\begin{subfigure}[b]{0.4\\textwidth}\n\\centering\n  \\includegraphics[scale=0.53]{pictures/circleintersection2}\n  \\caption{}\n\\end{subfigure}\n\\begin{subfigure}[b]{0.45\\textwidth}\n  \\includegraphics[scale=0.5]{pictures/circleintersection1}\n\\caption{}\n\\label{fig:calculusa}\n\\end{subfigure}\n\\caption{The cases (i) and (ii) of Lemma~\\ref{lem:calculus}.}\n\\end{figure}\n\n\n\\begin{lemma}\n\\label{lem:resolving}\nSuppose that $pq$ and $uv$ are \nedges in $G$ that cross.\nLet $G'\\subseteq G$ be the transmission graph induced by \n$p,q,u$ and $v$.  If $\\Psi < \\sqrt{3}$, then $p$ reaches $v$ in \n$G'$ and $u$ reaches $q$ in $G'$.\n\\end{lemma}\n\n\\begin{proof}\nWe may assume that $r_p \\geq r_u$. Furthermore, we set $r_q = r_v = 1$. This \ndoes \nnot add new edges and thus reachability in the new graph \nimplies reachability in $G'$.\nWe show that if either $u$ does not reach $q$ (case 1) \nor $p$ does not reach $v$ (case 2), then $|uv| > r_u$. Hence \n$uv$ cannot be an edge of $G'$ despite our assumption. \n\nCase 1: $u$ does not reach $q$. \nThen we have $p \\notin D(u)$, $q \\notin D(u)$, $p \\notin D(v)$\nand $q \\notin D(v)$. \nEquivalently this gives $u \\notin D(p,r_u) \\cup D(q,r_u)$\nand $ v \\notin D(p,1) \\cup D(q,1)$.  \nThus, the positions of $u$ and $v$ that minimize $|uv|$ \nare the intersections $u \\in C(p,r_u) \\cap C(q,r_u)$ \nand $v \\in C(p,1) \\cap C(q,1)$ on different sides of \nthe line through $p$ and $q$. \nTo further  minimize $|uv|$, observe that $|uv|$ depends on the distance\nof $p$ and $q$ and that $|uv|$ strictly decreases as $|pq|$ grows, i.e., \nas $|pq|$ approaches $\\sqrt{3}$. \nFor the limit case $|pq| = \\sqrt{3}$, we are in the situation \nof Lemma~\\ref{lem:calculus}(i) with $a=u$ and $b=v$ \nand thus we would get $|uv| \\geq r_u$.\nBut since $\\Psi < \\sqrt{3}$, we must have $|pq| < \\sqrt{3}$ and by \nstrict monotonicity, it follows that $|uv| > r_u$,\nas desired. \n\nCase 2: $p$ does not reach $v$. Then we have \n$u \\notin D(p)$, $v \\notin D(p)$, $u \\notin D(q)$ and $v \\notin D(q)$. \nWe scale everything, such that $r_p = \\sqrt{3}$, and we reduce\n$r_v$, $r_q$ once again to $1$. \nNow, the positions of $u$ and $v$ minimizing $|uv|$ are \n$\\{u,v\\} = C(p,\\sqrt{3}) \\cap C(q,1)$. As above, \nfurther minimizing $|uv|$ gives $|pq| = \\sqrt{3}$. \nBy Lemma~\\ref{lem:calculus}(ii), we have $|uv| > \\sqrt{3}$ and \nthus $uv$ cannot be an edge of $G'$ (note that even after scaling we have\n$r_u \\leq \\sqrt{3}$).\n\\end{proof}\n\nWe iteratively resolve crossings in $G$. Call the resulting graph\n$\\widetilde{G}$. Next, we show that for any $p, q \\in P$, if $p$ can\nreach $q$ in $\\widetilde{G}$, then $p$ can also reach $q$ in $G$.\nThis seems to be a bit more difficult than one might expect, because\nwhen resolving the crossings, we introduce new vertices and edges \nto which Lemma~\\ref{lem:resolving} is not directly applicable.\n\n\\begin{lemma}\n\\label{lem:globalreachability}\nFor any two sites $p, q \\in P$,\nif $p$ can reach $q$ in $\\widetilde{G}$ then $p$\ncan reach $q$ in $G$.\n\\end{lemma}\n\n\\begin{proof}\nEach edge $e$ of $\\widetilde{G}$ lies on an edge of $G$ with the\nsame direction. We call it the \\emph{supporting edge} of $e$.\nA pair $p, q \\in P$ such that $p$ can reach \n$q$ in $\\widetilde{G}$, but not in $G$ is called a\n\\emph{bad pair}. Among all bad pairs,\nwe pick $p, q$ such that\nthere is a path $\\pi$ in $\\widetilde{G}$ from $p$ to $q$ with the\nminimum number of \\emph{support switches}, where $\\pi$ changes from\none supporting edge to another.\nLet $p_1q_1,\\dots, p_kq_k$ be the\nsequence of supporting edges as they are visited along \n$\\pi$ ($p_1 = p$, $q_k = q$).\n\n\\begin{figure}[htb]\n\\centering\n\\includegraphics[scale=1.0]{pictures/globalreachability-path}\n\\caption{A path (blue) with $k=7$ supporting edges that is in \n$\\widetilde{G}$ but not in $G$.}\n\\label{fig:globalreachability-path}\n\\end{figure}\n\n\\begin{claim}\nThe following holds in $G$:\n\\textbf{(P1)} $p_1$ reaches $q_2,\\dots,q_{k-1}$;\n\\textbf{(P2)} $p_2,\\dots,p_k$ reach $q_k$;\n\\textbf{(P3)}  $p_1$ does not reach $p_2,\\dots,p_k$; and\n\\textbf{(P4)} there is no edge $q_ip_i$,\nfor $i \\geq 2$.\nFurthermore, for $i = 1,\\dots,k-1$, we have\n\\textbf{(P5)} the line segments \n$\\overline{p_iq_i}$ and\n$\\overline{p_{i+1}q_{i+1}}$ have a common intersection point\n$x_i$ in their interior;\nand \\textbf{(P6)} $x_{i+1}$ lies on the line segment \n$\\overline{x_iq_{i+1}}$. \n\\end{claim}\n\n\\begin{proof}\n\\textbf{P1} and \\textbf{P2} follow from the minimality of $\\pi$,\nand \\textbf{P3} follows from \\textbf{P2}. For \\textbf{P4}, assume \nthat $G$ contains an edge $q_ip_i$, for $i \\geq 2$. \nBy \\textbf{P1}, $p_1$ reaches $q_i$ in $G$ and thus $p_1$ reaches $p_i$,\ndespite \\textbf{P3}.\nFor \\textbf{P5}, since $p_iq_i$ and \n$p_{i+1}q_{i+1}$ are consecutive \nalong $\\pi$, they must intersect in a point $x_i$.\nIf $x_i$ is not in their interior, then\n$x_i = q_i = p_{i+1}$. But then, by \\textbf{P1}, $p_1$ reaches \n$q_i = p_{i+1}$, despite \\textbf{P3}. \n\\textbf{P6} follows because by \\textbf{P4} all supporting\nedges are directed and because the resolution of the crossings preserves\nthe direction of the edges.\n\\end{proof}\n\nBy Lemma~\\ref{lem:resolving}, we have $k \\geq 3$.\nWe now argue that the path $\\pi$ cannot exist.\nSince $p_1q_1$ and $p_2q_2$ cross,\nthe proof of Lemma~\\ref{lem:resolving} shows that $G$ contains one\nof \n$p_1p_2,q_1p_2,p_1q_2$,\nor $q_1q_2$.\nBy \\textbf{P3}, neither \n$p_1p_2$ nor $q_1p_2$\nexist.\nThere are two cases, depending on whether $G$ contains\n$p_1q_2$, or $q_1q_2$ \n(see Fig.~\\ref{fig:globalreachability}).\nEach case will lead to a contradiction with the minimality of $\\pi$.\ns\n\\begin{figure}[htb]\n\\centering\n\\includegraphics[scale=0.7]{pictures/globalreachability}\n\\caption{Either $(p_1q_2)$ or $(p_1q_2)$ locks all edges in \nthe corresponding triangle.}\n\\label{fig:globalreachability}\n\\end{figure}\n\n\\textbf{Case 1.} $G$ contains $p_1q_2$.\nConsider the triangle $\\triangle = p_1x_1q_2$.\nSince $q_2,x_1 \\in D(p_1)$, we have\n$\\triangle \\subset D(p_1)$.\nThus, by \\textbf{P3}, none of $p_2,\\dots,p_k$ \nmay lie inside $\\triangle$.\nBy \\textbf{P6}, $p_3q_3$\nintersects the boundary of $\\triangle$ in the line segment \n$\\overline{x_1q_2}$.\nFirst, suppose that $k = 3$. In this case, we have \n$p_3, q_3 \\not\\in \\triangle$ (otherwise $p_1$ could reach $q_3$).\nThus, $p_3q_3$ intersects the boundary of $\\triangle$\ntwice, so $p_3q_3$ either intersects\n $p_1q_1$ or $p_1q_2$.\nIn both cases, Lemma~\\ref{lem:resolving} shows that $p_1$ reaches\n$q_3$. Thus, we must have $k \\geq 4$.\n\nWe now claim that the intersection $x_3$ of  \n$p_3q_3$ and $p_4q_4$ \nlies in $\\triangle$:\nif $p_3q_3$ intersects $\\triangle$\nonce, then $q_3 \\in \\triangle$, as we already observed that\n$p_3 \\not\\in \\triangle$.\n\\textbf{P6} then gives $x_3 \\in \\triangle$. \nNow suppose $p_3q_3$ intersects\n$\\triangle$ twice, and let $y$ be the second intersection\npoint. We claim that $y$ comes after $x_2$ \nalong $p_3q_3$: otherwise, since $x_3$ comes \nafter $x_2$ on $p_3q_3$ by \\textbf{P6}, \nwe can construct a path with fewer support switches than $\\pi$:\nif $y \\in \\overline{p_1x_1}$, we omit \n$p_2q_2$;\nif $y \\in p_1q_2$, \nwe omit $p_2q_2$\nand substitute $p_1q_1$ with $p_1q_2$.\nBy the same argument, $x_3$ cannot come after $y$ on \n$p_3q_3$.\nThus, $x_3$ lies on \nthe line segment $\\overline{x_2y} \\subset \\triangle$.\nThis establishes $x_3 \\in \\triangle$ for both cases.\nNow, consider the segment $\\overline{p_4x_3}$. Since we observed\n$p_4 \\not\\in\\triangle$, we have that $\\overline{p_4x_3}$\nintersects $\\triangle$, and we can again reroute the $\\pi$ to \nhave fewer support switches.\n\n\\textbf{Case 2.} $G$ contains $q_1q_2$. \nConsider the triangle\n$\\triangle = x_1q_1q_2$. We claim \nthat $\\triangle \\subset D(p_1) \\cup D(q_1)$.\nThen the remaining argument is analogous to \nCase 1. \nLet $D(x_1) \\subseteq D(p_1)$ be the disk with center $x_1$ and $q_1$\non its boundary. Let $C(x_1)$ be the boundary of $D(x_1)$.\nIf $x_1 \\in D(q_1)$, we are done.\nOtherwise, since the two rays from $x_1$ through\n$C(x_1) \\cap C(q_1)$ intersect $D(q_1)$ inside $D(x_1)$,\nall line segments from $x_1$ to a point on $C(q_1)$ lie in\n$D(x_1) \\cup D(q_1)$.\nThe claim follows.\n\\end{proof}\n\n\\paragraph*{Putting it together.}\nTo prove Lemma~\\ref{lem:planarization}, we first construct the sparse\nsubgraph $H$ as in Lemma~\\ref{lem:pruning} in time $O(n \\log n)$.\nThen we iteratively resolve the crossings in $H$ to obtain \n$\\widetilde{H}$.\nSince $H$ has $O(n)$ crossings that can be found in $O(n)$ time, \nthis takes $O(n)$ time.\n\nLet $p, q \\in P$. We must argue that $p$ can reach $q$ in $G$\nif and only if $p$ can reach $q$ in $\\widetilde{H}$.\nLet $\\widetilde{G}$ be the graph obtained by resolving the crossings\nin $G$, as in Lemma~\\ref{lem:globalreachability}.\nWe know that the reachability between $p$ and $q$ is the same in $G$, \n$H$, and $\\widetilde{G}$.\nFurthermore, if $p$ can reach $q$ in $H$, then also \nin $\\widetilde{H}$, and if $p$ can reach $q$ in $\\widetilde{H}$,\nthen also in $\\widetilde{G}$, because (a subdivision of) every edge\nof $\\widetilde{H}$ is present in $\\widetilde{G}$.\nThus, $\\widetilde{H}$ and $G$ have the same reachability\nproperties.\n\n\n\\subsection{Polynomial Dependence on $\\Psi$}\n\\label{sec:psiconst}\nWe now present a standard reachability oracle whose performance parameters \ndepend polynomially on the radius ratio $\\Psi$. \nTogether with Theorem~\\ref{thm:geometricreachability} we will obtain the \nfollowing result:\n\\begin{theorem}\n\\label{thm:2doraclefixed}\nLet $G$ be the transmission graph for a set $P \\subset {\\ensuremath {\\mathbb {{R}}}}^2$\nof $n$ points.\nWe can construct a geometric reachability oracle for $G$\nwith $S(n) = O(\\Psi^5n^{3/2})$ and $Q(n) = O(\\Psi^3\\sqrt{n})$ in\ntime $O(\\Psi^5n^{3/2})$.\n\\end{theorem}\n\nOur approach is based on a geometric separator theorem for\nplanar disks.\nLet ${\\operatorname{\\mathcal{D}}}$ be the disks induced by $P$. We write\n$\\bigcup {\\operatorname{\\mathcal{D}}} := \\bigcup_{D \\in {\\operatorname{\\mathcal{D}}}}D$ and we let\n$\\mu({\\operatorname{\\mathcal{D}}})$ be the area occupied by $\\bigcup {\\operatorname{\\mathcal{D}}}$.\nAlber and Fiala show how to find a separator for ${\\operatorname{\\mathcal{D}}}$\nwith respect to $\\mu(\\cdot)$ \\cite{AlberFiala04}.\n\n\\begin{theorem}[Theorem~4.12 in~\\cite{AlberFiala04}]\n\\label{thm:diskseparator}\nThere exist positive constants $\\alpha < 1$ and $\\beta$ such\nthat the following holds:\nlet ${\\operatorname{\\mathcal{D}}}$ be a set of $n$ disks and $\\Psi$ the ratio of the largest\nand the smallest radius in ${\\operatorname{\\mathcal{D}}}$.\nThen we can find in time $O(\\Psi^2n)$\na partition ${\\mathcal A} \\cup {\\mathcal B} \\cup {\\mathcal S}$ of ${\\operatorname{\\mathcal{D}}}$ satisfying\n(i) $\\bigcup {\\mathcal A} \\cap \\bigcup {\\mathcal B} = \\emptyset$,\n(ii) $\\mu({\\mathcal S}) \\leq \\beta\\Psi^2 \\sqrt{\\mu({\\operatorname{\\mathcal{D}}})}$ and\n(iii) $\\mu({\\mathcal A}),\\mu({\\mathcal B}) \\leq \\alpha \\mu({\\operatorname{\\mathcal{D}}})$.\n\\end{theorem}\nSince any directed path in $G$ lies completely in $\\bigcup {\\mathcal D}$, any path from \na vertex in ${\\mathcal A}$ to a vertex in ${\\mathcal B}$ needs to use at least one vertex of ${\\mathcal S}$, see \nFigure~\\ref{fig:separator}. Since $\\mu({\\mathcal S})$ is small, we can approximate $\\bigcup {\\mathcal S}$ \nwith few grid cells. We choose the diameter of the cells small enough such that \nall vertices in one cell form a clique and are equivalent in terms of reachability. \nWe can thus pick one vertex per cell and store the \nreachability information for it. Applying this idea \nrecursively gives a separator tree\nthat lets us answer reachability queries. Details follow.\n\n\\begin{figure}[htb]\n\\centering\n\\includegraphics[scale=0.9]{2doracle-separator}\n\\caption{Any path from ${\\mathcal A}$ to ${\\mathcal B}$ needs to use at least \none vertex of ${\\mathcal S}$. Since $\\mu({\\mathcal S})$ is small, we can approximate $\\bigcup {\\mathcal S}$ with \nfew grid cells.}\n\\label{fig:separator}\n\\end{figure}\n\n\\paragraph*{Preprocessing Algorithm and Space Requirement.}\nFor the preprocessing phase, consider the grid ${\\operatorname{\\mathcal{Q}}} = {\\operatorname{\\mathcal{Q}}}_0$ whose\ncells have diameter $1$.\nAll vertices in a single cell form a clique in $G$, so it suffices\nto determine the reachability for one such vertex. For each non-empty cell\n$\\sigma \\in {\\operatorname{\\mathcal{Q}}}$, we pick an arbitrary vertex $p_\\sigma \\in P \\cap \\sigma$\nas the \\textit{representative} of $\\sigma$.\nLet $R_{\\mathcal D}$ be the set of all representatives.\nWe recursively create a separator tree $T$\nthat contains all the required reachability information:\nwe compute ${\\mathcal A},{\\mathcal B}$, and ${\\mathcal S}$ according to Theorem~\\ref{thm:diskseparator},\nand we create a node $v$ of the separator tree.\nLet $Q_v$ be all cells in ${\\operatorname{\\mathcal{Q}}}$ that\nintersect $\\bigcup {\\mathcal S}$. Let $R_v$ be their representatives,\nand let ${\\mathcal D}_v$ be all disks with centers in $Q_v$.\nFor each $r \\in R_v$, we store all the representatives of\n$R_{\\mathcal D}$ that $r$ can\nreach and all the representatives that can reach $r$\nin the transmission graph induced by ${\\mathcal D}$ (this graph is a\nsubgraph of $G$).\nWe recursively compute separator trees for  ${\\mathcal A} \\setminus {\\mathcal D}_v$ and\n${\\mathcal B} \\setminus {\\mathcal D}_v$, and\nwe connect them to $v$.\n\nTo obtain the reachability information,\nwe compute a $2$-spanner $H_v$ for the transmission\ngraph induced by $v$, as in Theorem~\\ref{thm:2dspanner}. \nSince we are only\ninterested in the reachability properties of the spanner, \n${\\ensuremath {\\varepsilon}} = 2$ (or any constant) suffices. \nFor each $r \\in R_v$,\nwe compute a BFS tree in $H_v$ with root $r$. Next, we reverse all\nedges in $H_v$, and we again compute BFS-trees for all $r \\in R_v$\nin the transposed graph. This gives the required reachability \ninformation for $v$.\n\nAs $T$ has $O(\\log n)$ levels,\nthe total running time for computing the spanners is\n$O(n\\log n(\\log n + \\log \\Psi))$.\nSince the spanners are sparse, the time for computing the BFS-trees \nis proportional to the total number of representatives for all\nnodes in the tree.\nBelow, we will show that this is at most \n$O(\\Psi^5 n^{3/2})$. The\ntotal preprocessing time is \n$O(n\\log^2 n + n\\log \\Psi + \\Psi^5 n^{3/2}) = \nO(\\Psi^5 n^{3/2})$.\n\nTo bound the space requirement, we show that $|R_{\\mathcal D}| = O(\\mu({\\mathcal D}))$ \nfor any set ${\\mathcal D}$ of disks.\n\n\\begin{lemma}\n\\label{lem:diskunioncover}\nLet ${\\mathcal D}$ be a set of $n$ disks with radius at least $1$. Then\nthe number of cells in ${\\operatorname{\\mathcal{Q}}}_0$ that intersect\n$\\bigcup {\\mathcal D}$ is $O(\\mu({\\mathcal D}))$.\n\\end{lemma}\n\n\\begin{proof}\nSuppose that a cell $\\sigma \\in {\\operatorname{\\mathcal{Q}}}_0$ intersects a\ndisk $D \\in {\\mathcal D}$. Then $D$ contains a disk of radius $1$\nthat intersects the boundary of $\\sigma$.\nThus, the intersection of $\\bigcup {\\mathcal D}$ and the region\nconsisting of $\\sigma$ and its eight surrounding\ncells has area at least $1$. Since there can be only\n$O(\\mu({\\mathcal D}))$ different regions of this kind, the claim follows.\n\\end{proof}\n\nTheorem~\\ref{thm:diskseparator}(ii) and \nLemma~\\ref{lem:diskunioncover} imply that\n$|R_v| = O(\\Psi^2\\sqrt{\\mu({\\mathcal D})})$ and \n$|R_{\\mathcal D}| = O(\\mu({\\mathcal D}))$, so the size of the reachability table at \nnode $v$ is $O(\\Psi^2\\mu({\\mathcal D})^{3/2})$.\nThus, we obtain the following recursion for the \nspace requirement $S(\\mu({\\mathcal D}))$ for a set of\ndisks ${\\mathcal D}$ with respect to\n$\\mu(\\cdot)$:\n\n", "index": 3, "text": "\\begin{equation}\n\\label{eqn:spacerec}\n S(\\mu({\\mathcal D})) = S(\\mu({\\mathcal A} \\setminus {\\mathcal D}_v)) + S(\\mu({\\mathcal B} \\setminus {\\mathcal D}_v)) +\nO(\\Psi^2\\mu({\\mathcal D})^{3/2}).\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m1\" class=\"ltx_Math\" alttext=\"S(\\mu({\\mathcal{D}}))=S(\\mu({\\mathcal{A}}\\setminus{\\mathcal{D}}_{v}))+S(\\mu({%&#10;\\mathcal{B}}\\setminus{\\mathcal{D}}_{v}))+O(\\Psi^{2}\\mu({\\mathcal{D}})^{3/2}).\" display=\"block\"><mrow><mrow><mrow><mi>S</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>\u03bc</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mrow><mi>S</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>\u03bc</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9c</mi><mo>\u2216</mo><msub><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mi>v</mi></msub></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mi>S</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>\u03bc</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi class=\"ltx_font_mathcaligraphic\">\u212c</mi><mo>\u2216</mo><msub><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mi>v</mi></msub></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mi>O</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msup><mi mathvariant=\"normal\">\u03a8</mi><mn>2</mn></msup><mo>\u2062</mo><mi>\u03bc</mi><mo>\u2062</mo><msup><mrow><mo stretchy=\"false\">(</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mn>3</mn><mo>/</mo><mn>2</mn></mrow></msup></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07797.tex", "nexttext": "\nThus, $S$ has size\n$O(n^\\alpha \\log n)$ with probability at least $1-1/2n$ .\nNow fix $p$ and $q$ and let $\\pi$ be a path from $p$ to $q$ with\n$k \\geq n^{1-\\alpha}$ vertices. \nThe probability that $S$ contains no vertex from $\\pi$ is \nat most $(1 - m/n)^k \\leq e^{-mk/n} \\leq 1/n^4$, by our choice of $m$.\nSince there are $n(n-1)$ ordered vertex pairs, the union bound\nshows that the probability that $S$ fails to detect a pair of\nvertices connected by a long path is at most \n$n(n-1)/n^4 \\leq 1/2n$. The lemma follows by a union bound.\n\\end{proof}\n\nWe compute a sample $S$ as in Lemma~\\ref{lem:sampling}, and for\neach $s \\in S$, we store two Boolean arrays that indicate for each\n$p \\in P$ whether $p$ can reach $s$ and whether $s$ can reach \n$p$. This needs space $O(n^{1+\\alpha} \\log n)$.\nIt remains to deal with vertices that are connected by a path with\nless than $n^{1-\\alpha}$ vertices.\n\n\\paragraph{Short Paths.}\nLet $L = \\lceil \\log \\Psi \\rceil$. We consider the $L$ grids\n${\\operatorname{\\mathcal{Q}}}_0,\\dots,{\\operatorname{\\mathcal{Q}}}_L$ (recall that the cells in ${\\operatorname{\\mathcal{Q}}}_i$ have\ndiameter $2^i$). For each cell $\\sigma \\in {\\operatorname{\\mathcal{Q}}}_i$, let \n$R_\\sigma \\subseteq P$ be the vertices $p \\in P \\cap \\sigma$ with $r_p \\in\n[2^i,2^{i+1})$.\nThe set $R_\\sigma$ forms a clique in $G$, and for each\n$p \\in R_\\sigma$, the disk $D(p)$ contains the cell\n$\\sigma$.\nThe \\emph{neighborhood} $N(\\sigma)$ of $\\sigma$ is defined\nas the set of all cells in ${\\operatorname{\\mathcal{Q}}}_i$ that have distance at most\n$2^{i+1}n^{1-\\alpha}$ from $\\sigma$. We have \n$|N(\\sigma)| = O(n^{2-2\\alpha})$.\nLet $P_\\sigma \\subseteq P$ be the vertices \nthat lie in cells of $N(\\sigma)$.\nFor every $i = 0, \\dots, L$ and for every $\\sigma \\in {\\operatorname{\\mathcal{Q}}}_i$\nwith $R_\\sigma \\neq \\emptyset$, \nwe fix an arbitrary  \\emph{representative point}\n$r_\\sigma \\in R_\\sigma$. For every vertex $p \\in P$, we store\nfor every $i \\in \\{0, \\dots, L\\}$ two sorted lists of cells\n$\\sigma \\in {\\operatorname{\\mathcal{Q}}}_i$ with $p \\in P_\\sigma$: the first list\ncontains all all corresponding representatives $r_\\sigma$ \nthat can be reached from $p$; the second list contains all \ncorresponding representatives $r_\\sigma$ that can reach $p$.\nA vertex $p$ appears in at most $O(n^{2-2\\alpha}\\log \\Psi)$\npoint sets $P_\\sigma$, so the total space is\n$O(n^{3-2\\alpha}\\log \\Psi)$.\n\n\\paragraph*{Performing a Query.}\nLet $p, q \\in P$ be given. To decide whether $p$ can reach $q$, \nwe first check the Boolean tables for all $O(n^{\\alpha}\\log n)$ points \nin $S$. If there \nis an $s\\in S$ such that $p$ reaches\n$s$ and $s$ reaches $q$, we return YES. If not, \nfor $i \\in \\{0, \\dots, L\\}$, \nwe consider the list of representatives \nthat are reachable from $p$ in the neighborhood at level $i$ and \nthe list of representatives that can reach $q$ in the\nneighborhood at level $i$. We check \nwhether these lists contain a common element. Since the lists are\nsorted, this can be done in time linear in their size.\nIf we find a common representative at for some $i$, we return YES.\nOtherwise, we return NO.\n\nWe now prove the correctness of the query algorithm. First note that we \nreturn YES, only if there is a path from $p$ to \n$q$.  Now suppose that there is a path $\\pi$ from $p$ to $q$. \nIf $\\pi$ has at least $n^{1-\\alpha}$ vertices,\nthen by Lemma~\\ref{lem:sampling}, the sample $S$ hits $\\pi$ \nwith probability at least $1-1/n$, and the algorithm returns YES.\nIf $\\pi$ has less than $n^{1-\\alpha}$ vertices, let $r$ be the \nvertex of $\\pi$ with the largest radius,\nand let $i$ be such that the radius of $r$ lies in $[2^i, 2^{i+1})$.\nLet $\\sigma$ be the cell of ${\\operatorname{\\mathcal{Q}}}_i$ that contains $r$.\nSince $\\pi$ has at most $n^{1-\\alpha}$ vertices, and since each edge\nof $\\pi$ has length at most $2^{i+1}$, the path $\\pi$ lies\nentirely in the cells of $N(\\sigma)$.\nIn particular, both $p$ and $q$ are contained in cells of \n$N(\\sigma)$. Since $r \\in R_\\sigma$ and since\n$R_\\sigma$ forms a clique in $G$, the representative point\n$r_\\sigma$ of $\\sigma$ can be reached from $p$ and can reach $q$.\nBy the symmetry of the neighborhood definition, $r_\\sigma$ is \ncontained in the list of reachable representatives from $p$ and in the\nlists of representatives that can reach $q$.\nThis is detected when checking the corresponding\nlists for $p$ and $q$ at level $i$.\n\n\\paragraph*{Time and Space Requirements.}\nFor long paths we need $O(n^\\alpha \\log n)$ time: \nfor every $s \\in S$ we test in $O(1)$ time whether\n$p$ can reach $s$ and whether $s$ can reach $q$.\nFor short paths there are $O(\\log \\Psi)$ levels, and at each level \nwe step through two lists of size $O(n^{2-2\\alpha})$. \nThus, the tradeoff-point is achieved for\n", "itemtype": "equation", "pos": 53586, "prevtext": "\nSince Theorem~\\ref{thm:diskseparator} gives\n$\\mu({\\mathcal A}) + \\mu(B) \\leq \\mu(D)$ and \n$\\max\\{\\mu({\\mathcal A}), \\mu({\\mathcal B})\\} \\leq (1-\\alpha)\\mu({\\mathcal D})$,\n(\\ref{eqn:spacerec}) solves\nto $S(\\mu({\\mathcal D})) = O(\\Psi^2 \\mu({\\mathcal D})^{3/2})$.\nAs $\\mu({\\mathcal D}) = O(n\\Psi^2)$,  the total space is\n$O(\\Psi^5n^{3/2})$.\n\n\\paragraph*{Query Algorithm.}\nLet $p,q \\in P$ be given. We may assume that $p$ and $q$ are\nrepresentatives for their cells.\nIf $p = q$, then we return YES,\nsince all vertices in the same cell constitute a clique.\nIf $p \\neq q$, we let\n$v$ and $w$ be the nodes in $T$ with\n$p \\in R_{v}$ and $q \\in R_{w}$.\nLet $u$ be least common ancestor of $v$ and $w$.\nIt can be found in  $O(\\log n)$ time by walking up the tree.\nLet $L$ be the  path from $u$ to the root\nof $T$. We check for each $r \\in \\bigcup_{x\\in L} R_{x}$\nwhether $p$ can reach $r$ and whether $r$ can reach $q$. If so, \nwe return YES.\nIf there is no such\n$s$, we return NO.\nSince $|R_x|$ increases geometrically along $L$, the running time\nis dominated by the time for processing the root, which is \n$O(\\Psi^2\\mu({\\mathcal D})^{1/2})$.\nBounding $\\mu({\\mathcal D})$ by $O(\\Psi^2n)$, the total query time is\n$O(\\Psi^3\\sqrt{n})$.\n\nIt remains to argue that our query algorithm is correct. \nBy construction, it follows \nthat we return YES only if there is a path from $p$ to $q$.\nNow, suppose there is a path $\\pi$ in $G$ from $p$ to $q$,\nwhere $p$ and $q$ are representatives with $p\\neq q$.\nLet $v, w$ be the nodes in $T$ with\n$p \\in R_{v}$ and $q \\in R_{w}$. Let $u$\nbe their least common ancestor, and $L$ be the path from $u$\nto the root.\nBy construction, $\\bigcup_{x \\in L} {\\mathcal D}_x$ contains a disk\nfor a vertex $r$ in $\\pi$. We pick $r$ such that the corresponding\nnode $x$ is closest to the root.\nLet $r'$ be the representative for the cell $\\sigma$ containing $r$.\nSince the vertices in $\\sigma$ constitute a clique,\n$p$ can reach $r'$ and $r'$ can reach $q$ in the subgraph of $G$\ninduced by $v$.\nThus, when walking along $L$, the algorithm will discover $r'$ and\nthe path from $p$ to $q$.\nTheorem~\\ref{thm:2doraclefixed} now follows.\n\n\n\\subsection{Logarithmic Dependence on $\\Psi$}\n\\label{sec:psipoly}\n\nFinally, we improve the dependence on $\\Psi$ to be logarithmic,\nat the cost of a slight increase of the exponent for $n$.\nWe can show the following theorem by constructing a standard reachability oracle and \nthen using Theorem~\\ref{thm:geometricreachability}.\n\\begin{theorem}\n\\label{thm:2doraclebounded}\nLet $G$ be the transmission graph for a \nset $P$ of $n$ points in the plane.\nWe can construct a geometric reachability oracle for $G$\nwith $S(n) = O(n^{5/3}\\log^{1/3}\\Psi \\log^{2/3} n)$ and \n$Q(n) = O(n^{2/3}\\log^{1/3} \\Psi \\log^{2/3} n)$. All\nqueries are answered correctly with high probability.\nThe preprocessing time is \n$O(n^{5/3}(\\log \\Psi + \\log n)\\log^{1/3} \\Psi \\log^{2/3}n )$. \n\\end{theorem}\n\nWe scale everything such that the smallest radius in\n$P$ is $1$.\nOur approach is as follows: let $p,q \\in P$.\nIf there is a $p$-$q$-path  with  ``many'' vertices, we detect \nthis by taking a large enough\nrandom sample $S \\subseteq P$ and by storing the \nreachability information for every vertex in $S$. \nIf there is a path from $p$ to $q$ with ``few'' vertices, then $p$ \nmust be ``close'' to $q$, where ``closeness'' is defined relative to \nthe largest radius along the path. The radii from $P$ can lie in \n$O(\\log \\Psi)$ different scales, and for each scale we \nstore local information to find such a ``short'' path.\n\n\\paragraph*{Long Paths.}\nLet $0 < \\alpha < 1$ be a parameter to be \ndetermined later.\nFirst, we show that a random sample can be used to detect paths with\nmany vertices. \n\n\\begin{lemma}\\label{lem:sampling}\nWe can sample a set $S \\subset P$ of size $O(n^\\alpha \\log n)$ such that \nthe following holds with high probability\nat least $1-1/n$: for any \n$p,q \\in P$, if there is a path $\\pi$ from $p$ to $q$ in $G$ with \nat least $n^{1-\\alpha}$ vertices, then $\\pi \\cap S \\neq \\emptyset$.\n\\end{lemma}\n\n\\begin{proof}\nLet $m = 4n^\\alpha \\ln n$. \nWe construct $S$ by including each $p \\in P$ independently with \nprobability $m/n$. Using Chernoff bounds, we\nget\n", "index": 5, "text": "\n\\[\n  \\Pr[|S| \\geq 8n^{\\alpha}\\ln n] \\leq e^{-n^{\\alpha}\\ln n} \\leq \n     \\frac{1}{2n}.\n\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"\\Pr[|S|\\geq 8n^{\\alpha}\\ln n]\\leq e^{-n^{\\alpha}\\ln n}\\leq\\frac{1}{2n}.\" display=\"block\"><mrow><mrow><mrow><mi>Pr</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mi>S</mi><mo stretchy=\"false\">|</mo></mrow><mo>\u2265</mo><mrow><mn>8</mn><mo>\u2062</mo><msup><mi>n</mi><mi>\u03b1</mi></msup><mo>\u2062</mo><mrow><mi>ln</mi><mo>\u2061</mo><mi>n</mi></mrow></mrow></mrow><mo stretchy=\"false\">]</mo></mrow></mrow><mo>\u2264</mo><msup><mi>e</mi><mrow><mo>-</mo><mrow><msup><mi>n</mi><mi>\u03b1</mi></msup><mo>\u2062</mo><mrow><mi>ln</mi><mo>\u2061</mo><mi>n</mi></mrow></mrow></mrow></msup><mo>\u2264</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mo>\u2062</mo><mi>n</mi></mrow></mfrac></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07797.tex", "nexttext": "\nThis yields $Q(n) = O(n^{2/3}\\log^{1/3} \\Psi \\log^{2/3} n)$.\nThis choice of $\\alpha$ gives a space bound of \n$O(n^{5/3}\\log^{1/3} \\Psi \\log^{2/3} n)$.\n\nFor the preprocessing algorithm, we first compute the reachability arrays \nfor each $s \\in S$. To do so, we build a 2-spanner $H$ for $G$ \nas in Theorem~\\ref{thm:2dspanner} in time $O(n (\\log n + \\log \\Psi))$. \nThen, \nfor each $s \\in S$ we perform a BFS search in $H$ and its transposed graph. \nThis gives all vertices that $s$ can reach and that can be reached by $s$ \nin $O(n^{5/3}\\log^{1/3}\\Psi \\log^{2/3} n )$ total time.\nFor the short paths, the preprocessing algorithm goes as follows: \nFor each $i = 0,\\dots, L$ and \nfor each cell $\\sigma \\in {\\operatorname{\\mathcal{Q}}}_i$ that has a representative $r_\\sigma$,\nwe compute a 2-spanner $H_\\sigma$ as in Theorem~\\ref{thm:2dspanner} for\n$P_\\sigma$. \nFor each representative $r_\\sigma$, we do a BFS search in $H_\\sigma$ and \nthe transposed graph, each starting from $r_\\sigma$. This gives all \n$p \\in P_\\sigma$ that can reach $r_\\sigma$ \nand that are reachable from $r_\\sigma$. \nThe running time is dominated by the time for constructing the \nspanners. Since each point $p \\in P$ is contained in \n$O(n^{2-2\\alpha}\\log \\Psi) = O(n^{2/3} \\log^{1/3}\\Psi \\log^{2/3} n)$ \ndifferent $P_\\sigma$, and \nsince constructing $H_\\sigma$ takes \n$O(|P_\\sigma|(\\log \\Psi + \\log |P_\\sigma|))$\ntime, \nthe preprocessing time follows.  \n\n\\section{Conclusion}\nTransmission graphs constitute a natural class of\ndirected graphs for which non-trivial reachability\noracles can be constructed. As mentioned in the\nintroduction, it seems to be a very challenging\nopen problem to obtain similar results for general directed\ngraphs.  We believe that our results only scratch\nthe surface of the possibilities offered by transmission graphs,\nand several interesting open problems remain.\n\nAll our results depend on the radius ratio $\\Psi$ and the \nmajor question is whether this dependency can be avoided. \nOur most efficient reachability oracle is for $\\Psi < \\sqrt{3}$. In this case  \nthe reachability of a transmission graph with $n$ vertices can be represented \nby a planar graph with $O(n)$ vertices.\nHowever, it is not clear to us that the bound of $\\sqrt{3}$ is\ntight.\nCan we obtain a similar result for, say, $\\Psi = 100$? Or is there \neven a way to represent \\emph{any} transmission graph, regardless of $\\Psi$, \nby a planar graph with $o(n^{2})$ vertices? \nThis would immediately imply a non-trivial reachability oracles for all ranges \nof $\\Psi$. \n\nConversely, it would be interesting to see if we can represent\nthe reachability of arbitrary directed graphs \nusing transmission graphs. If this is possible, the relevant questions \nare how many vertices the transmission must have, what the required \nradius ratio is, and how fast it can be computed. A representation that achieves both few \nvertices and low radius ratio would lead to efficient reachability oracles for \ngeneral directed graphs. \n\n\\paragraph*{Acknowledgements.}\nWe like to thank G\\\"unter Rote for valuable comments.\n\n\\bibliographystyle{abbrv}\n\\bibliography{literature}\n\n", "itemtype": "equation", "pos": 58417, "prevtext": "\nThus, $S$ has size\n$O(n^\\alpha \\log n)$ with probability at least $1-1/2n$ .\nNow fix $p$ and $q$ and let $\\pi$ be a path from $p$ to $q$ with\n$k \\geq n^{1-\\alpha}$ vertices. \nThe probability that $S$ contains no vertex from $\\pi$ is \nat most $(1 - m/n)^k \\leq e^{-mk/n} \\leq 1/n^4$, by our choice of $m$.\nSince there are $n(n-1)$ ordered vertex pairs, the union bound\nshows that the probability that $S$ fails to detect a pair of\nvertices connected by a long path is at most \n$n(n-1)/n^4 \\leq 1/2n$. The lemma follows by a union bound.\n\\end{proof}\n\nWe compute a sample $S$ as in Lemma~\\ref{lem:sampling}, and for\neach $s \\in S$, we store two Boolean arrays that indicate for each\n$p \\in P$ whether $p$ can reach $s$ and whether $s$ can reach \n$p$. This needs space $O(n^{1+\\alpha} \\log n)$.\nIt remains to deal with vertices that are connected by a path with\nless than $n^{1-\\alpha}$ vertices.\n\n\\paragraph{Short Paths.}\nLet $L = \\lceil \\log \\Psi \\rceil$. We consider the $L$ grids\n${\\operatorname{\\mathcal{Q}}}_0,\\dots,{\\operatorname{\\mathcal{Q}}}_L$ (recall that the cells in ${\\operatorname{\\mathcal{Q}}}_i$ have\ndiameter $2^i$). For each cell $\\sigma \\in {\\operatorname{\\mathcal{Q}}}_i$, let \n$R_\\sigma \\subseteq P$ be the vertices $p \\in P \\cap \\sigma$ with $r_p \\in\n[2^i,2^{i+1})$.\nThe set $R_\\sigma$ forms a clique in $G$, and for each\n$p \\in R_\\sigma$, the disk $D(p)$ contains the cell\n$\\sigma$.\nThe \\emph{neighborhood} $N(\\sigma)$ of $\\sigma$ is defined\nas the set of all cells in ${\\operatorname{\\mathcal{Q}}}_i$ that have distance at most\n$2^{i+1}n^{1-\\alpha}$ from $\\sigma$. We have \n$|N(\\sigma)| = O(n^{2-2\\alpha})$.\nLet $P_\\sigma \\subseteq P$ be the vertices \nthat lie in cells of $N(\\sigma)$.\nFor every $i = 0, \\dots, L$ and for every $\\sigma \\in {\\operatorname{\\mathcal{Q}}}_i$\nwith $R_\\sigma \\neq \\emptyset$, \nwe fix an arbitrary  \\emph{representative point}\n$r_\\sigma \\in R_\\sigma$. For every vertex $p \\in P$, we store\nfor every $i \\in \\{0, \\dots, L\\}$ two sorted lists of cells\n$\\sigma \\in {\\operatorname{\\mathcal{Q}}}_i$ with $p \\in P_\\sigma$: the first list\ncontains all all corresponding representatives $r_\\sigma$ \nthat can be reached from $p$; the second list contains all \ncorresponding representatives $r_\\sigma$ that can reach $p$.\nA vertex $p$ appears in at most $O(n^{2-2\\alpha}\\log \\Psi)$\npoint sets $P_\\sigma$, so the total space is\n$O(n^{3-2\\alpha}\\log \\Psi)$.\n\n\\paragraph*{Performing a Query.}\nLet $p, q \\in P$ be given. To decide whether $p$ can reach $q$, \nwe first check the Boolean tables for all $O(n^{\\alpha}\\log n)$ points \nin $S$. If there \nis an $s\\in S$ such that $p$ reaches\n$s$ and $s$ reaches $q$, we return YES. If not, \nfor $i \\in \\{0, \\dots, L\\}$, \nwe consider the list of representatives \nthat are reachable from $p$ in the neighborhood at level $i$ and \nthe list of representatives that can reach $q$ in the\nneighborhood at level $i$. We check \nwhether these lists contain a common element. Since the lists are\nsorted, this can be done in time linear in their size.\nIf we find a common representative at for some $i$, we return YES.\nOtherwise, we return NO.\n\nWe now prove the correctness of the query algorithm. First note that we \nreturn YES, only if there is a path from $p$ to \n$q$.  Now suppose that there is a path $\\pi$ from $p$ to $q$. \nIf $\\pi$ has at least $n^{1-\\alpha}$ vertices,\nthen by Lemma~\\ref{lem:sampling}, the sample $S$ hits $\\pi$ \nwith probability at least $1-1/n$, and the algorithm returns YES.\nIf $\\pi$ has less than $n^{1-\\alpha}$ vertices, let $r$ be the \nvertex of $\\pi$ with the largest radius,\nand let $i$ be such that the radius of $r$ lies in $[2^i, 2^{i+1})$.\nLet $\\sigma$ be the cell of ${\\operatorname{\\mathcal{Q}}}_i$ that contains $r$.\nSince $\\pi$ has at most $n^{1-\\alpha}$ vertices, and since each edge\nof $\\pi$ has length at most $2^{i+1}$, the path $\\pi$ lies\nentirely in the cells of $N(\\sigma)$.\nIn particular, both $p$ and $q$ are contained in cells of \n$N(\\sigma)$. Since $r \\in R_\\sigma$ and since\n$R_\\sigma$ forms a clique in $G$, the representative point\n$r_\\sigma$ of $\\sigma$ can be reached from $p$ and can reach $q$.\nBy the symmetry of the neighborhood definition, $r_\\sigma$ is \ncontained in the list of reachable representatives from $p$ and in the\nlists of representatives that can reach $q$.\nThis is detected when checking the corresponding\nlists for $p$ and $q$ at level $i$.\n\n\\paragraph*{Time and Space Requirements.}\nFor long paths we need $O(n^\\alpha \\log n)$ time: \nfor every $s \\in S$ we test in $O(1)$ time whether\n$p$ can reach $s$ and whether $s$ can reach $q$.\nFor short paths there are $O(\\log \\Psi)$ levels, and at each level \nwe step through two lists of size $O(n^{2-2\\alpha})$. \nThus, the tradeoff-point is achieved for\n", "index": 7, "text": "\n\\[\n  n^{\\alpha} \\log n = n^{2-2\\alpha}\\log\\Psi \\Leftrightarrow\n  n^{\\alpha} = n^{2/3} (\\log \\Psi / \\log n)^{1/3}.\n\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"n^{\\alpha}\\log n=n^{2-2\\alpha}\\log\\Psi\\Leftrightarrow n^{\\alpha}=n^{2/3}(\\log%&#10;\\Psi/\\log n)^{1/3}.\" display=\"block\"><mrow><mrow><mrow><mrow><msup><mi>n</mi><mi>\u03b1</mi></msup><mo>\u2062</mo><mrow><mi>log</mi><mo>\u2061</mo><mi>n</mi></mrow></mrow><mo>=</mo><mrow><msup><mi>n</mi><mrow><mn>2</mn><mo>-</mo><mrow><mn>2</mn><mo>\u2062</mo><mi>\u03b1</mi></mrow></mrow></msup><mo>\u2062</mo><mrow><mi>log</mi><mo>\u2061</mo><mi mathvariant=\"normal\">\u03a8</mi></mrow></mrow></mrow><mo>\u21d4</mo><mrow><msup><mi>n</mi><mi>\u03b1</mi></msup><mo>=</mo><mrow><msup><mi>n</mi><mrow><mn>2</mn><mo>/</mo><mn>3</mn></mrow></msup><mo>\u2062</mo><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>log</mi><mo>\u2061</mo><mrow><mi mathvariant=\"normal\">\u03a8</mi><mo>/</mo><mrow><mi>log</mi><mo>\u2061</mo><mi>n</mi></mrow></mrow></mrow><mo stretchy=\"false\">)</mo></mrow><mrow><mn>1</mn><mo>/</mo><mn>3</mn></mrow></msup></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}]