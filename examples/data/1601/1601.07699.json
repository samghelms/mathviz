[{"file": "1601.07699.tex", "nexttext": " the set of {\\em syntax axioms}. (We will identify the expression $A$ with its statement ${\\langle{\\emptyset,\\emptyset,A}\\rangle}$ when discussing syntax axioms.)\n\\end{definition}\n\nA weakly grammatical formal system yields a context-free grammar, where the terminals are ${\\textit{\\textsf{CN}}}\\setminus{\\textit{\\textsf{VT}}}$, the non-terminals are ${\\textit{\\textsf{VT}}}$, and for each $A\\in{\\textit{\\textsf{SA}}}$ there is a production ${\\rm Type}(A)\\to\\alpha$, where $\\alpha_n=A_{n+1}\\in{\\textit{\\textsf{CN}}}$ if $A_{n+1}\\in{\\textit{\\textsf{CN}}}$ or  $\\alpha_n={\\rm Type}(A_{n+1})\\in{\\textit{\\textsf{VT}}}$ if $A_{n+1}\\in{\\textit{\\textsf{VR}}}$. (This assumes that $A_{n+1}\\in{\\textit{\\textsf{VT}}}$ is always false, but the two sets can be disjointified if this is not the case.)\n\n\\begin{definition}\nA {\\em grammatical formal system} is a weakly grammatical formal system augmented with a function ${\\rm Syn}:{\\textit{\\textsf{TC}}}\\to{\\textit{\\textsf{VT}}}$ such that ${\\rm Syn}(c)=c$ for all $c\\in{\\textit{\\textsf{VT}}}$ and, defining ${\\rm Syn}(e)$ for $e\\in{\\textit{\\textsf{EX}}_C}$ such that ${\\rm Syn}(e)_0={\\rm Syn}(e_0)$ and ${\\rm Syn}(e)_n=e_n$ for $n>0$, ${\\langle{\\emptyset,\\emptyset,{\\rm Syn}(e)}\\rangle}$ is a provable statement for all ${\\langle{D,H,A}\\rangle}\\in\\Gamma$ and $e\\in H\\cup\\{A\\}$.\n\\end{definition}\n\n\\begin{remark}\nOf course, this notion is of interest primarily because it is satisfied by all major Metamath databases; in particular, \\texttt{set.mm} is a grammatical formal system, with ${\\textit{\\textsf{VT}}}={\\rm \\{set,class,wff\\}}$, ${\\textit{\\textsf{TC}}}={\\textit{\\textsf{VT}}}\\cup\\{\\vdash\\}$, and ${\\rm Syn}(\\vdash)={\\rm wff}$.\n\\end{remark}\n\n\\begin{definition}\\label{def:gmodel}\nA model of a grammatical formal system is a model in the sense of \\autoref{def:model} which additionally satisfies ${\\textit{\\textsf{U}}}_c\\subseteq{\\textit{\\textsf{U}}}_{{\\rm Syn}(c)}$, $v{\\mathbin{\\#}} w_c\\leftrightarrow v{\\mathbin{\\#}} w_{{\\rm Syn}(c)}$ when $w\\in{\\textit{\\textsf{U}}}_c$ (and $w_c$, $w_{\\rm Syn}(c)$ are its copies in the disjoint union), and\\\\ $\\eta_\\mu({\\rm Syn}(e))=\\eta_\\mu(e)$ whenever $\\eta_\\mu(e)$ is defined.\n\\end{definition}\n\n\\subsection{Tree representation of formal systems}\\label{sec:trees}\nThe inductive definition of the closure of a set of statements immediately leads to a tree representation of proofs. A proof tree is a tree with nodes labeled by statements and edges labeled by expressions.\n\n\\begin{definition}\nWe inductively define the statement ``$T$ is a proof tree for $A$'' (relative to $D,H$) as follows:\n\\begin{itemize}\n  \\item For each $e\\in H\\cup\\{{\\textit{\\textsf{VH}}}_v\\mid v\\in{\\textit{\\textsf{VR}}}\\}$, the single-node tree labeled by the reduct of ${\\langle{D,H,e}\\rangle}$ is a proof tree for $e$.\n  \\item For every ${\\langle{D',H',A'}\\rangle}\\in\\Gamma$ and every substitution function $\\sigma$ satisfying the conditions for $\\sigma(A')\\in C$ in \\hyperref[def:cls]{\\autoref*{sec:recap}.\\ref*{def:cls}}, the tree labeled by ${\\langle{D',H',A'}\\rangle}$ with edges for each $e\\in H'\\cup{\\cal V}(H\\cup\\{A\\})$ leading to a proof tree for $\\sigma(e)$, is a proof tree for $\\sigma(A')$.\n\\end{itemize}\n\\end{definition}\n\nThe definition of closure ensures that there is a proof tree for $A$ relative to $D,H$ iff ${\\langle{D,H,A}\\rangle}$ is provable pre-statement. (The branches for variables outside ${\\cal V}(H\\cup\\{A\\})$ are discarded because they can always be replaced by the trivial substitution $\\sigma({\\langle{v}\\rangle})={\\langle{v}\\rangle}$ without affecting the closure deduction.) Additionally, we can prove by induction that every proof tree $T$ encodes a unique expression ${\\rm Expr}(T)$.\n\n\\begin{definition}\\label{def:unambig}\nAn {\\em unambiguous formal system} is a grammatical formal system whose associated context-free grammar is unambiguous.\n\\end{definition}\n\n\\begin{remark}\nNote that for this to make sense we need ${\\textit{\\textsf{SA}}}$ to contain only axioms and not theorems, i.e. this property is not preserved by equivalence of formal systems. For such systems every ${\\rm Expr}$ is an injection when restricted to the set ${\\textit{\\textsf{ST}}}$ of {\\em syntax trees}, trees $T$ relative to $\\emptyset,\\emptyset$ such that ${\\rm Type}(T):={\\rm Type}({\\rm Expr}(T))\\in{\\textit{\\textsf{VT}}}$ (or equivalently, ${\\rm Type}(T)={\\rm Type}(A)$ where ${\\langle{D,H,A}\\rangle}$ is the root of $T$). The subtrees of a syntax tree are also syntax trees, and the nodes are syntax axioms, with variables (of the form ${\\textit{\\textsf{VH}}}_v$) at the leaves.\n\\end{remark}\n\nWith this, we can ``rebuild'' the whole theory using trees instead of strings, because the all valid substitutions have unique proof tree representations. The set ${\\textit{\\textsf{CN}}}$ is discarded in favor of ${\\textit{\\textsf{TC}}}'$, but we still have ${\\textit{\\textsf{VR}}}'$ and ${\\rm Type}':{\\textit{\\textsf{VR}}}'\\cup{\\textit{\\textsf{SA}}}'\\to{\\textit{\\textsf{VT}}}'$, as well as ${\\rm Syn}':{\\textit{\\textsf{TC}}}'\\to{\\textit{\\textsf{VT}}}'$. A tree $T\\in{\\textit{\\textsf{ST}}}'$ is either a variable from ${\\textit{\\textsf{VR}}}'$ or a syntax axiom $a\\in{\\textit{\\textsf{SA}}}'$ connecting to more subtrees; each syntax axiom has a set $v^a_i$ of variables labeling the edges, and a type ${\\rm Type}'(a)$; ${\\rm Type}'(T)$ is defined as the type of the root of $T$.\n\nWe replace ${\\textit{\\textsf{EX}}_C}$ in the string representation with ${\\textit{\\textsf{EX}}_T}'$, which is a tuple ${\\langle{c,T}\\rangle}$ where $c\\in{\\textit{\\textsf{TC}}}'$, $T\\in{\\textit{\\textsf{ST}}}'$, and ${\\rm Syn}'(c)={\\rm Type}'(T)$. We extend ${\\rm Type}'$ to ${\\textit{\\textsf{EX}}_T}$ by ${\\rm Type}'({\\langle{c,T}\\rangle})=c$. ${\\cal V}'(T)$ is defined by induction such that ${\\cal V}'(v)=\\{v\\}$ and ${\\cal V}'(T)$ at a syntax axiom is the union of ${\\cal V}'(T_i)$ over the child subtrees $T_i$. A substitution function $\\sigma$ is a function ${\\textit{\\textsf{ST}}}'\\to{\\textit{\\textsf{ST}}}'$ that factors over syntax axioms (with the value at variables left undetermined), extended to ${\\textit{\\textsf{EX}}_T}'\\to{\\textit{\\textsf{EX}}_T}'$ by $\\sigma({\\langle{c,T}\\rangle})={\\langle{c,\\sigma(T)}\\rangle}$.\n\nPre-statements and statements ${\\langle{D,H,A}\\rangle}$ are defined exactly as before, except that $H\\subseteq{\\textit{\\textsf{EX}}_T}'$ and $A\\in{\\textit{\\textsf{EX}}_T}'$. A tree formal system (this time unambiguous by definition) is a tuple ${\\langle{{\\textit{\\textsf{TC}}}',{\\textit{\\textsf{VR}}}',{\\textit{\\textsf{SA}}}',{\\rm Type}',{\\rm Syn}',\\Gamma'}\\rangle}$ where $\\Gamma'$ is a set of statements. The closure of a set $H\\subseteq{\\textit{\\textsf{EX}}_T}'$ relative to $D$ is defined as in the string case, but the base case instead takes $H\\subseteq C$ and ${\\langle{{\\rm Type}'(T),T}\\rangle}\\in C$ for every $T\\in{\\textit{\\textsf{ST}}}'$.\n\nTo map an unambiguous formal system ${\\langle{{\\textit{\\textsf{CN}}},{\\textit{\\textsf{VR}}},{\\rm Type},\\Gamma,{\\rm Syn}}\\rangle}$ to a tree formal system ${\\langle{{\\textit{\\textsf{TC}}}',{\\textit{\\textsf{VR}}}',{\\textit{\\textsf{SA}}}',{\\rm Type}',{\\rm Syn}',\\Gamma'}\\rangle}$, one takes ${\\textit{\\textsf{TC}}}'={\\textit{\\textsf{TC}}}$, ${\\textit{\\textsf{VR}}}'$ to be the set of ${\\textit{\\textsf{VH}}}_v$ singleton trees for $v\\in{\\textit{\\textsf{VR}}}$, ${\\textit{\\textsf{SA}}}'={\\textit{\\textsf{SA}}}$, ${\\rm Type}'(T)={\\rm Type}(T)$, ${\\rm Syn}'={\\rm Syn}$, and $\\Gamma'=\\{{\\langle{D,\\{t(h)\\mid h\\in H\\},t(A)}\\rangle}\\mid{\\langle{D,H,A}\\rangle}\\in\\Gamma\\setminus{\\textit{\\textsf{ST}}}\\}$, where $t(e)=\\{{\\rm Type}(e),{\\rm Expr}^{-1}({\\rm Syn}(e))\\}$.\n\nThese two formal systems are isomorphic, in the sense that expressions and statements can be mapped freely, respecting the definitions of theorems and axioms, variables and typecodes.\n\n\\subsection{Models of tree formal systems}\\label{sec:treemodel}\nGiven the isomorphism of the previous section, the model theory of unambiguous formal systems can be mapped to models of tree formal systems, with ${\\langle{{\\textit{\\textsf{U}}},{\\mathbin{\\#}},\\eta}\\rangle}$ satisfying an exactly equivalent set of properties. But the major advantage of the tree formulation is that the substitution property implies that $\\eta$ is completely determined except at syntax axioms, so for trees we will replace $\\eta$ with a new function $\\pi$.\n\n\\begin{definition}\nGiven a function ${\\textit{\\textsf{U}}}$ from ${\\textit{\\textsf{TC}}}'$ to nonempty sets satisfying ${\\textit{\\textsf{U}}}_c\\subseteq{\\textit{\\textsf{U}}}_{{\\rm Syn}(c)}$, and $\\pi$ a ${\\textit{\\textsf{SA}}}$-indexed family of functions, where $\\pi_a:\\prod_i{\\textit{\\textsf{U}}}_{{\\rm Type}(v^a_i)}\\to{\\textit{\\textsf{U}}}_{{\\rm Type}(a)}$ for each $a\\in{\\textit{\\textsf{SA}}}$, define $\\eta_\\mu$ for $\\mu\\in{\\textit{\\textsf{OM}}}$ recursively such that:\n\\begin{itemize}\n  \\item For all $v\\in{\\textit{\\textsf{VR}}}$, $\\eta_\\mu(v)=\\mu(v)$.\n  \\item For each $T\\in{\\textit{\\textsf{ST}}}$ with $a\\in{\\textit{\\textsf{SA}}}$ at the root, $\\eta_\\mu(T)=\\pi_a(\\{\\eta_\\mu(T_i)\\}_i)$\n  \\item For each ${\\langle{c,T}\\rangle}\\in{\\textit{\\textsf{EX}}_T}'$, $\\eta_\\mu(e)=\\eta_\\mu(T)$ if $\\eta_\\mu(T)\\in{\\textit{\\textsf{U}}}_c$, otherwise undefined.\n\\end{itemize}\n\\end{definition}\n\n\\begin{definition}\nA model of a tree formal system is a tuple ${\\langle{{\\textit{\\textsf{U}}},{\\mathbin{\\#}},\\pi}\\rangle}$ where ${\\textit{\\textsf{U}}}$ is a function from ${\\textit{\\textsf{TC}}}'$ to nonempty sets satisfying ${\\textit{\\textsf{U}}}_c\\subseteq{\\textit{\\textsf{U}}}_{{\\rm Syn}(c)}$, and ${\\mathbin{\\#}}$ is a freshness relation (which is extended from $\\bigsqcup_{v\\in{\\textit{\\textsf{VT}}}}{\\textit{\\textsf{U}}}_c$ to $\\bigsqcup_{v\\in{\\textit{\\textsf{TC}}}}{\\textit{\\textsf{U}}}_c$ by setting $v{\\mathbin{\\#}} w_c$ iff $v{\\mathbin{\\#}} w_{{\\rm Syn}(c)}$ for the copies of $w$ in the disjoint union), and $\\pi$ is a ${\\textit{\\textsf{SA}}}$-indexed family of functions, where $\\pi_a:\\prod_i{\\textit{\\textsf{U}}}_{{\\rm Type}(v^a_i)}\\to{\\textit{\\textsf{U}}}_{{\\rm Type}(a)}$ for each $a\\in{\\textit{\\textsf{SA}}}$, such that for each $\\mu\\in{\\textit{\\textsf{OM}}}$, and defining $\\eta$ as above:\n\n\\begin{itemize}\n  \\item For each ${\\langle{D,H,A}\\rangle}\\in\\Gamma'$, if\n  \\begin{itemize}\n    \\item $\\mu(\\alpha){\\mathbin{\\#}}\\mu(\\beta)$ for all $\\{\\alpha,\\beta\\}\\in D$, and\n    \\item $\\eta_\\mu(h)$ is defined for all $h\\in H$,\n  \\end{itemize}\n  then $\\eta_\\mu(A)$ is defined.\n  \\item For all $v\\in\\bigsqcup{\\textit{\\textsf{U}}}$, $a\\in{\\textit{\\textsf{SA}}}$, and $f\\in\\prod_i{\\textit{\\textsf{U}}}_{{\\rm Type}(v^a_i)}$, if $v{\\mathbin{\\#}} f_i$ for all $i$, then $v{\\mathbin{\\#}}\\pi_a(f)$.\n\\end{itemize}\n\\end{definition}\n\n\\begin{theorem}\\label{thm:factor}\nLet ${\\langle{{\\textit{\\textsf{U}}},{\\mathbin{\\#}},\\pi}\\rangle}$ be a model for the tree formal system. Then the associated ${\\langle{{\\textit{\\textsf{U}}},{\\mathbin{\\#}},\\eta}\\rangle}$ is a model in the sense of \\autoref{def:gmodel}.\n\\end{theorem}\n\\begin{proof}\\leavevmode\n\\begin{itemize}\n  \\item The variable application law is true by definition of $\\eta$, and the axiom application law is true by assumption.\n  \\item For the substitution law, suppose $\\sigma$ and $e\\in{\\textit{\\textsf{EX}}_T}'$ are given. We want to show that $\\eta_\\mu(\\sigma(e))=\\eta_{\\sigma(\\mu)}(e)$, where $\\sigma(\\mu)\\in{\\textit{\\textsf{OM}}}$ is defined by $\\sigma(\\mu)(v)=\\eta_\\mu(\\sigma(v))$.\n\n  We show this for ${\\rm Syn}(e)={\\langle{{\\rm Type}(T),T}\\rangle}$ by induction on $T$. In the base case, $T=v$ for $v\\in{\\textit{\\textsf{VT}}}$, so $\\eta_{\\sigma(\\mu)}(v)=\\sigma(\\mu)(v)=\\eta_\\mu(\\sigma(v))$. Otherwise let $a\\in{\\textit{\\textsf{SA}}}$ be the root of $T$, so\n", "itemtype": "equation", "pos": -1, "prevtext": "\n\n\\mainmatter  \n\n\n\\title{Models for Metamath}\n\n\n\n\n\\author{Mario Carneiro}\n\n\n\n\n\\institute{The Ohio State University, Columbus OH, USA}\n\n\\maketitle\n\n\n\\begin{abstract}\nAlthough some work has been done on the metamathematics of Metamath, there has not been a clear definition of a model for a Metamath formal system.  We define the collection of models of an arbitrary Metamath formal system, both for tree-based and string-based representations.  This definition is demonstrated with examples for propositional calculus, \\textsf{ZFC} set theory with classes, and Hofstadter's MIU system, with applications for proving that statements are not provable, showing consistency of the main Metamath database (assuming \\textsf{ZFC} has a model), developing new independence proofs, and proving a form of G\\\"{o}del's completeness theorem.\n\\keywords{Metamath $\\cdot$ Model theory $\\cdot$ formal proof $\\cdot$ consistency $\\cdot$ ZFC $\\cdot$ Mathematical logic}\n\\end{abstract}\n\n\n\\section{Introduction}\\label{sec:intro}\n\nMetamath is a proof language, developed in 1992, on the principle of minimizing the foundational logic to as little as possible \\cite{metamath}. An expression in Metamath is a string of constants and variables headed by a constant called the expression's ``typecode''. The variables are typed, and can be substituted for expressions with the same typecode.  See \\autoref{sec:recap} for a precise definition of a formal system, which mirrors the specification of the \\texttt{.mm} file format itself.\n\nThe substitution used in Metamath is ``direct'' or ``non-capturing'', which means that no $\\alpha$-renaming occurs during a substitution for a variable. Instead, this is replaced by a ``distinct variable'' condition saying that certain substitutions are not valid if they contain a certain variable (regardless of whether the variable is free or not---Metamath doesn't know what a free variable is either). For instance, the expression $\\forall x\\,{\\varphi}$ contains a variable ${\\varphi}$ inside a binding expression ``$\\forall x\\,\\square$''. (Metamath also does not have a concept of ``binding expression'', but it is safe to say that under a usual interpretation this would be considered a binding expression.) If there is no distinct variable condition $\\{x,{\\varphi}\\}$, then the substitution ${\\varphi}\\mapsto x=y$ is valid, resulting in $\\forall x\\,x=y$, but so is ${\\varphi}\\mapsto \\forall x\\,x=y$, resulting in the valid wff $\\forall x\\,\\forall x\\,x=y$, which is equivalent (after a multi-step proof inside the system) to $\\forall z\\,\\forall x\\,x=y$. Conversely, if the distinct variable condition $\\{x,{\\varphi}\\}$ is present, then neither of the previous example substitutions would be valid, even though $x$ is ``bound'' in the second example.\n\nIn this paper, we will develop a definition for models of Metamath-style formal systems, which will operate by associating a function to each syntactical construct according to its type. For example, the forall symbol is defined by the axiom ``$\\textrm{wff}\\ \\forall x\\,{\\varphi}$'', which is to say it takes as input a set variable and a wff variable, and produces a wff expression. This construct is associated to an interpretation function $\\pi_\\forall:{\\textit{\\textsf{U}}}_\\textrm{set}\\times{\\textit{\\textsf{U}}}_\\textrm{wff}\\to{\\textit{\\textsf{U}}}_\\textrm{wff}$, where ${\\textit{\\textsf{U}}}_\\textrm{set}$ is the universe of set variables and ${\\textit{\\textsf{U}}}_\\textrm{wff}$ is the universe of wff variables, which are each provided as part of the definition of a model.\n\nNote the difference from the usual signature of the forall, $\\pi'_\\forall:(M\\to{\\textsf{Bool}})\\to{\\textsf{Bool}}$, which maps functions from the model universe $M$ to boolean values, to a boolean value. In order to make our definition work, we need the set ${\\textit{\\textsf{U}}}_\\textrm{wff}$ to be more complicated than just ${\\textsf{Bool}}$. Instead, it is effectively $(V\\to M)\\to{\\textsf{Bool}}$, that is, a function from assignments of variables to elements of the model, to a boolean value. In other words, a wff can be thought of as an infinite-place predicate ${\\varphi}(v_0,v_1,v_2,\\dots)$ (although the value can only depend on finitely many of the provided variables).\n\n\\subsection{Grammars and trees}\\label{sec:introgrammar}\nUnfortunately, although it is possible to define what it means to be a model for any Metamath formal system, we can't quite reduce it to a collection of interpretation functions, like it is normally done, without a way to parse the strings which are used in the proof. This leads to the idea of grammatical parsing, which we take up in earnest in \\autoref{sec:grammar}. By separating all axioms into ``syntax axioms'' and ``logical axioms'', we can find an isomorphism to a representation of statements as trees, with syntax axioms forming the nodes of the tree. Most interesting Metamath systems are grammatical, but for example Hofstadter's MIU system \\cite{hofstadter}, formalized in Metamath as \\texttt{miu.mm}, is a valid formal system which is not grammatical (see \\autoref{sec:miu}).\n\nThe main work is presented in \\autoref{sec:fdef}. A short recap of Metamath's formalism as it will be used in this work is in \\autoref{sec:recap}, followed by the definition of a model in \\autoref{sec:model}. Then we define the subset of ``grammatical'' formal systems, which are those for which parsing is possible, in \\autoref{sec:grammar}, and rebuild the theory for a tree representation of formal systems in \\autoref{sec:trees}. The model theory of tree formal systems is developed in \\autoref{sec:treemodel}, and we finish with a selection of examples in \\autoref{sec:ex}, and in particular prove that \\texttt{set.mm} has a model in \\autoref{thm:setmodel}.\n\n\\section{Formal definition}\\label{sec:fdef}\n\\subsection{Metamath recap}\\label{sec:recap}\nWe recall the definitions from Appendix C of the Metamath book \\cite{metamath}, but with a slight modification for a global type function.\n\n\\begin{enumerate}\n  \\item Let ${\\textit{\\textsf{CN}}},{\\textit{\\textsf{VR}}}$ be disjoint sets, called the set of {\\em constants} and {\\em variables} respectively.\n  \\item Let ${\\rm Type}:{\\textit{\\textsf{VR}}}\\to{\\textit{\\textsf{CN}}}$ be a function, understood to map a variable to its typecode constant.\n  \\item Let ${\\textit{\\textsf{VT}}}=\\{{\\rm Type}(v)\\mid v\\in{\\textit{\\textsf{VR}}}\\}$ be the set of typecodes of variables.\n  \\item Define ${\\textit{\\textsf{EX}}}=\\bigcup_{n\\in\\omega}{}^n({\\textit{\\textsf{CN}}}\\cup {\\textit{\\textsf{VR}}})$,\n  \\item ${\\textit{\\textsf{EX}}_C}=\\{e\\in{\\textit{\\textsf{EX}}}\\mid(|e|>0 \\wedge e_0\\in{\\textit{\\textsf{CN}}})\\}$ (the set of expressions), \n  \\item ${\\textit{\\textsf{DV}}}=\\{x\\subseteq{\\textit{\\textsf{VR}}}\\mid|x|=2\\}$ (the set of distinct variable specifications), and\n  \\item ${\\cal V}(e)=\\{e_n\\mid 0\\le n<|e|\\}$ (the set of variables in an expression).\n  \\item We also write ${\\rm Type}(e)=e_0$ for $e\\in{\\textit{\\textsf{EX}}_C}$.\n  \\item\\label{def:subst} A substitution function is a function $\\sigma:{\\textit{\\textsf{EX}}_C}\\to{\\textit{\\textsf{EX}}_C}$ such that $\\sigma({\\langle{c}\\rangle})={\\langle{c}\\rangle}$ for $c\\in{\\textit{\\textsf{CN}}}$ and $\\sigma(g\\sqcup h)=\\sigma(g)\\sqcup \\sigma(h)$. (Such a function is entirely determined by its values on $\\{{\\langle{v}\\rangle}\\mid v\\in{\\textit{\\textsf{VR}}}\\}$.)\n  \\item To this, we add the expressions ${\\textit{\\textsf{VH}}}_v={\\langle{{\\rm Type}(v), v}\\rangle}$, for $v\\in{\\textit{\\textsf{VR}}}$ (a variable hypothesis).\n  \\item A pre-statement is a tuple ${\\langle{D,H,A}\\rangle}$ where $D\\subseteq{\\textit{\\textsf{DV}}}$, $H\\subseteq{\\textit{\\textsf{EX}}_C}$ is finite, and $A\\in{\\textit{\\textsf{EX}}_C}$.\n  \\item The reduct of ${\\langle{D,H,A}\\rangle}$ is ${\\langle{D_M,H,A}\\rangle}$ where $D_M=D\\cap{\\cal P}({\\cal V}(H\\cup\\{A\\}))$, and a statement is defined as the reduct of some pre-statement.\n  \\item A {\\em formal system} is a tuple ${\\langle{{\\textit{\\textsf{CN}}},{\\textit{\\textsf{VR}}},{\\rm Type},\\Gamma}\\rangle}$ where ${\\textit{\\textsf{CN}}},{\\textit{\\textsf{VR}}},{\\rm Type}$ are as above and $\\Gamma$ is a set of statements.\n  \\item\\label{def:cls} The closure of a set $H\\subseteq{\\textit{\\textsf{EX}}_C}$ relative to $D$ is the smallest set $C$ such that:\n  \\begin{itemize}\n    \\item $H\\cup\\{{\\textit{\\textsf{VH}}}_v\\mid v\\in{\\textit{\\textsf{VR}}}\\}\\subseteq C$\n    \\item For every ${\\langle{D',H',A'}\\rangle}\\in\\Gamma$ and every substitution function $\\sigma$, if\n    \\begin{itemize}\n      \\item For all $e\\in H'\\cup\\{{\\textit{\\textsf{VH}}}_v\\mid v\\in{\\textit{\\textsf{VR}}}\\}$, $\\sigma(e)\\in C$, and\n      \\item For all $\\{\\alpha,\\beta\\}\\in D'$, if $\\gamma\\in{\\cal V}(\\sigma({\\langle{\\alpha}\\rangle}))$ and $\\delta\\in{\\cal V}(\\sigma({\\langle{\\beta}\\rangle}))$, then $\\{\\gamma,\\delta\\}\\in D$,\n    \\end{itemize}\n    then $\\sigma(A')\\in C$.\n  \\end{itemize}\n  \\item A pre-statement ${\\langle{D,H,A}\\rangle}$ is {\\em provable} if $A$ is in the closure of $H$ relative to $D$, and a theorem is a statement that is the reduct of a provable pre-statement.\n  \\item Let ${\\textit{\\textsf{TC}}}$ be the set of typecodes of theorems. (Explicitly, this is ${\\textit{\\textsf{TC}}}={\\textit{\\textsf{VT}}}\\cup\\{{\\rm Type}(A)\\mid{\\langle{D,H,A}\\rangle}\\in\\Gamma\\}$.)\n  \\item Two formal systems ${\\langle{{\\textit{\\textsf{CN}}},{\\textit{\\textsf{VR}}},{\\rm Type},\\Gamma}\\rangle}$ and ${\\langle{{\\textit{\\textsf{CN}}},{\\textit{\\textsf{VR}}},{\\rm Type},\\Gamma'}\\rangle}$ are equivalent if they generate the same set of theorems (or equivalently, if every axiom in one is a theorem of the other).\n\\end{enumerate}\n\n\\subsubsection{Why a global type function?}\nA careful comparison with Appendix C of the Metamath book \\cite{metamath} shows that in the original definition a variable only has a type locally (inside a statement), while we require all variables to have a unique and globally defined type, provided by the ${\\rm Type}$ function. In practice, variables are never reintroduced with a different type, so this is not a strong requirement. Additionally, there is some ongoing work to amend the specification to disallow such multi-typed variables.\n\nNevertheless, it is a simple fix to convert a formal system with multi-typed variables to one with a global type function: Take the set of variables to be ${\\textit{\\textsf{VT}}}\\times{\\textit{\\textsf{VR}}}$, and define ${\\rm Type}(c,v)=c$. Then whenever a variable $v$ appears in a statement with type $c$, use the variable ${\\langle{c,v}\\rangle}$ instead. This is equivalent to just prepending the type of the variable to its name, so that uses of the same variable with a different type are distinguished. \n\n\\subsection{Models of formal systems}\\label{sec:model}\nFix a collection of sets ${\\textit{\\textsf{U}}}_c$ for $c\\in{\\textit{\\textsf{TC}}}$, which will represent the ``universe'' of objects of each typecode.\n\\begin{definition}\nAn {\\em object morphism} is a function $\\mu$ on ${\\textit{\\textsf{VR}}}$ such that $\\mu(v)\\in{\\textit{\\textsf{U}}}_{{\\rm Type}(v)}$ for all $v\\in{\\textit{\\textsf{VR}}}$. The set of all object morphisms is denoted by ${\\textit{\\textsf{OM}}}$.\n\\end{definition}\n\\begin{definition}\nA {\\em freshness relation} ${\\mathbin{\\#}}$ is a symmetric relation on the disjoint union $\\bigsqcup{\\textit{\\textsf{U}}}=\\bigsqcup_{c\\in{\\textit{\\textsf{TC}}}}{\\textit{\\textsf{U}}}_c$ such that for any $c\\in{\\textit{\\textsf{TC}}}$ and any finite set $W\\subseteq\\bigsqcup{\\textit{\\textsf{U}}}$, there is a $v\\in{\\textit{\\textsf{U}}}_c$ with $v{\\mathbin{\\#}} w$ for all $w\\in W$.\n\\end{definition}\n\n\\begin{definition}\\label{def:model}\nA {\\em model} of the formal system ${\\langle{{\\textit{\\textsf{CN}}},{\\textit{\\textsf{VR}}},{\\rm Type},\\Gamma}\\rangle}$ is a tuple ${\\langle{{\\textit{\\textsf{U}}},{\\mathbin{\\#}},{\\allowbreak}\\eta}\\rangle}$ where ${\\textit{\\textsf{U}}}$ is a function from ${\\textit{\\textsf{TC}}}$ to nonempty sets and ${\\mathbin{\\#}}$ is a freshness relation, and $\\eta_\\mu$ is an ${\\textit{\\textsf{OM}}}$-indexed family of partial functions on ${\\textit{\\textsf{EX}}_C}$ such that for each $\\mu\\in{\\textit{\\textsf{OM}}}$:\n\\begin{itemize}\n  \\item (Type correctness) For all $e\\in{\\textit{\\textsf{EX}}_C}$, if $\\eta_\\mu(e)$ is defined then $\\eta_\\mu(e)\\in{\\textit{\\textsf{U}}}_{{\\rm Type}(e)}$.\n  \\item (Variable application) For all $v\\in{\\textit{\\textsf{VR}}}$, $\\eta_\\mu({\\textit{\\textsf{VH}}}_v)=\\mu(v)$.\n  \\item (Axiom application) For each ${\\langle{D,H,A}\\rangle}\\in\\Gamma$, if\n  \\begin{itemize}\n    \\item $\\mu(\\alpha){\\mathbin{\\#}}\\mu(\\beta)$ for all $\\{\\alpha,\\beta\\}\\in D$, and\n    \\item $\\eta_\\mu(h)$ is defined for all $h\\in H$,\n  \\end{itemize}\n  then $\\eta_\\mu(A)$ is defined.\n  \\item (Substitution property) For each substitution $\\sigma$ and $e\\in{\\textit{\\textsf{EX}}_C}$, $\\eta_\\mu(\\sigma(e))=\\eta_{\\sigma(\\mu)}(e)$, where $\\sigma(\\mu)\\in{\\textit{\\textsf{OM}}}$ is defined by $\\sigma(\\mu)(v)=\\eta_\\mu(\\sigma({\\textit{\\textsf{VH}}}_v))$.\n  \\item (Dependence on present variables) For all $\\nu\\in{\\textit{\\textsf{OM}}}$, $e\\in{\\textit{\\textsf{EX}}_C}$, If $\\mu(v)=\\nu(v)$ for all $v\\in{\\cal V}(e)$, then $\\eta_\\mu(e)=\\eta_\\nu(e)$.\n  \\item (Freshness substitution) For all $v\\in\\bigsqcup{\\textit{\\textsf{U}}}$,  $e\\in{\\textit{\\textsf{EX}}_C}$, if $\\eta_\\mu(e)$ is defined and $v{\\mathbin{\\#}}\\mu(w)$ for all $w\\in{\\cal V}(e)$, then $v{\\mathbin{\\#}}\\eta_\\mu(e)$.\n\\end{itemize}\n\nHere equality means that one side is defined iff the other is and they have the same value.\n\\end{definition}\n\nThe key property of a model is the fact that the axiom application law applies also to theorems: For any theorem ${\\langle{D,H,A}\\rangle}$, if $\\mu(\\alpha){\\mathbin{\\#}}\\mu(\\beta)$ for all $\\{\\alpha,\\beta\\}\\in D$ and $\\eta_\\mu(h)$ is defined for all $h\\in H$, then $\\eta_\\mu(A)$ is defined. In particular, if ${\\langle{\\emptyset,\\emptyset,A}\\rangle}$ is provable, then $\\eta_\\mu(A)$ is defined for all $\\mu\\in{\\textit{\\textsf{OM}}}$, which makes it a useful technique for showing that certain strings are not provable (see \\autoref{sec:miu}).\n\nFor any formal system, there is a model, where ${\\textit{\\textsf{U}}}_c=\\{\\ast\\}$ for each $c$, $\\ast{\\mathbin{\\#}}\\ast$ is true, and $\\eta_\\mu(e)=\\ast$ for all $\\mu,e$. Thus statements like ``formal system $X$ has a model'' are not as useful here as they are in first-order logic. To marginalize this kind of model, we will call a model where $\\eta$ is a total function {\\em trivial}.\n\nAlthough this defines the property of being a model under the full generality of Metamath formal systems, the process simplifies considerably when expressions can be parsed according to a grammar.\n\n\\subsection{Grammatical parsing}\\label{sec:grammar}\n\\begin{definition}\nA formal system is said to be {\\em weakly grammatical} if for every ${\\langle{D,H,A}\\rangle}\\in\\Gamma$, if ${\\rm Type}(A)\\in{\\textit{\\textsf{VT}}}$, then there is some axiom ${\\langle{\\emptyset,\\emptyset,A'}\\rangle}\\in\\Gamma$ such that $\\sigma(A')=A$ for some substitution $\\sigma$ and no variable occurs more than once in $A'$.\n\nFor these systems we will define\n", "index": 1, "text": "\\[{\\textit{\\textsf{SA}}}=\\{A\\mid {\\langle{\\emptyset,\\emptyset,A}\\rangle}\\in\\Gamma\\land {\\rm Type}(A)\\in{\\textit{\\textsf{VT}}}\\land\\forall mn,(A_m=A_n\\in{\\textit{\\textsf{VR}}}\\to m=n)\\},\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"{\\textit{{SA}}}=\\{A\\mid{\\langle{\\emptyset,\\emptyset,A}\\rangle}\\in\\Gamma\\land{%&#10;\\rm Type}(A)\\in{\\textit{{VT}}}\\land\\forall mn,(A_{m}=A_{n}\\in{\\textit{{VR}}}%&#10;\\to m=n)\\},\" display=\"block\"><mrow><mtext>\ud835\ude1a\ud835\ude08</mtext><mo>=</mo><mrow><mo stretchy=\"false\">{</mo><mi>A</mi><mo>\u2223</mo><mrow><mo stretchy=\"false\">\u27e8</mo><mi mathvariant=\"normal\">\u2205</mi><mo>,</mo><mi mathvariant=\"normal\">\u2205</mi><mo>,</mo><mi>A</mi><mo stretchy=\"false\">\u27e9</mo></mrow><mo>\u2208</mo><mi mathvariant=\"normal\">\u0393</mi><mo>\u2227</mo><mi>Type</mi><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2208</mo><mtext>\ud835\ude1d\ud835\ude1b</mtext><mo>\u2227</mo><mo>\u2200</mo><mi>m</mi><mi>n</mi><mo>,</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>A</mi><mi>m</mi></msub><mo>=</mo><msub><mi>A</mi><mi>n</mi></msub><mo>\u2208</mo><mtext>\ud835\ude1d\ud835\ude19</mtext><mo>\u2192</mo><mi>m</mi><mo>=</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">}</mo></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n\n  Then for $e={\\langle{c,T}\\rangle}$, if $\\eta_{\\sigma(\\mu)}(T)=\\eta_\\mu(\\sigma(T))$ is in ${\\textit{\\textsf{U}}}_c$, then both are defined and equal, otherwise both are undefined.\n\n  \\item Dependence on present variables is also provable by induction; in the base case $\\eta_\\mu(v)=\\mu(v)$ only depends on ${\\cal V}(v)=\\{v\\}$; and for a tree with $a\\in{\\textit{\\textsf{SA}}}$ at the root, $\\eta_\\mu(T)=\\pi_a(\\{\\eta_\\mu(T_i)\\}_i)$ only depends on ${\\cal V}(T)=\\bigcup_i{\\cal V}(T_i)$. For $e={\\langle{c,T}\\rangle}$ this property is maintained since ${\\cal V}(e)={\\cal V}(T)$ and $\\eta_\\mu(e)=\\eta_\\mu(T)$ or undefined.\n\n  \\item For the freshness substitution law, in the base case $v{\\mathbin{\\#}}\\mu(v)=\\eta_\\mu(v)$; and for a tree with $a\\in{\\textit{\\textsf{SA}}}$ at the root, if $v{\\mathbin{\\#}}{\\cal V}(T)$ then $v{\\mathbin{\\#}}{\\cal V}(T_i)$ so $v{\\mathbin{\\#}}\\eta_\\mu(T_i)$ for each $i$, and then by definition $v{\\mathbin{\\#}}\\pi_a(\\{\\eta_\\mu(T_i)\\}_i)=\\eta_\\mu(T)$. For $e={\\langle{c,T}\\rangle}$ this property is maintained since ${\\cal V}(e)={\\cal V}(T)$ and $\\eta_\\mu(e)=\\eta_\\mu(T)$ or undefined.\n\\end{itemize}\n\\qed\\end{proof}\n\nBy the isomorphism this approach also transfers to models of unambiguous formal systems. So we are left with the conclusion that a model can be specified by its functions $\\pi_a$, for each $a\\in{\\textit{\\textsf{SA}}}$; this is known in conventional model theory as the interpretation function.\n\n\\section{Examples of models}\\label{sec:ex}\n\\subsection{Propositional logic}\\label{sec:prop}\nWe start with a model for propositional logic. We define:\n\n", "itemtype": "equation", "pos": 26822, "prevtext": " the set of {\\em syntax axioms}. (We will identify the expression $A$ with its statement ${\\langle{\\emptyset,\\emptyset,A}\\rangle}$ when discussing syntax axioms.)\n\\end{definition}\n\nA weakly grammatical formal system yields a context-free grammar, where the terminals are ${\\textit{\\textsf{CN}}}\\setminus{\\textit{\\textsf{VT}}}$, the non-terminals are ${\\textit{\\textsf{VT}}}$, and for each $A\\in{\\textit{\\textsf{SA}}}$ there is a production ${\\rm Type}(A)\\to\\alpha$, where $\\alpha_n=A_{n+1}\\in{\\textit{\\textsf{CN}}}$ if $A_{n+1}\\in{\\textit{\\textsf{CN}}}$ or  $\\alpha_n={\\rm Type}(A_{n+1})\\in{\\textit{\\textsf{VT}}}$ if $A_{n+1}\\in{\\textit{\\textsf{VR}}}$. (This assumes that $A_{n+1}\\in{\\textit{\\textsf{VT}}}$ is always false, but the two sets can be disjointified if this is not the case.)\n\n\\begin{definition}\nA {\\em grammatical formal system} is a weakly grammatical formal system augmented with a function ${\\rm Syn}:{\\textit{\\textsf{TC}}}\\to{\\textit{\\textsf{VT}}}$ such that ${\\rm Syn}(c)=c$ for all $c\\in{\\textit{\\textsf{VT}}}$ and, defining ${\\rm Syn}(e)$ for $e\\in{\\textit{\\textsf{EX}}_C}$ such that ${\\rm Syn}(e)_0={\\rm Syn}(e_0)$ and ${\\rm Syn}(e)_n=e_n$ for $n>0$, ${\\langle{\\emptyset,\\emptyset,{\\rm Syn}(e)}\\rangle}$ is a provable statement for all ${\\langle{D,H,A}\\rangle}\\in\\Gamma$ and $e\\in H\\cup\\{A\\}$.\n\\end{definition}\n\n\\begin{remark}\nOf course, this notion is of interest primarily because it is satisfied by all major Metamath databases; in particular, \\texttt{set.mm} is a grammatical formal system, with ${\\textit{\\textsf{VT}}}={\\rm \\{set,class,wff\\}}$, ${\\textit{\\textsf{TC}}}={\\textit{\\textsf{VT}}}\\cup\\{\\vdash\\}$, and ${\\rm Syn}(\\vdash)={\\rm wff}$.\n\\end{remark}\n\n\\begin{definition}\\label{def:gmodel}\nA model of a grammatical formal system is a model in the sense of \\autoref{def:model} which additionally satisfies ${\\textit{\\textsf{U}}}_c\\subseteq{\\textit{\\textsf{U}}}_{{\\rm Syn}(c)}$, $v{\\mathbin{\\#}} w_c\\leftrightarrow v{\\mathbin{\\#}} w_{{\\rm Syn}(c)}$ when $w\\in{\\textit{\\textsf{U}}}_c$ (and $w_c$, $w_{\\rm Syn}(c)$ are its copies in the disjoint union), and\\\\ $\\eta_\\mu({\\rm Syn}(e))=\\eta_\\mu(e)$ whenever $\\eta_\\mu(e)$ is defined.\n\\end{definition}\n\n\\subsection{Tree representation of formal systems}\\label{sec:trees}\nThe inductive definition of the closure of a set of statements immediately leads to a tree representation of proofs. A proof tree is a tree with nodes labeled by statements and edges labeled by expressions.\n\n\\begin{definition}\nWe inductively define the statement ``$T$ is a proof tree for $A$'' (relative to $D,H$) as follows:\n\\begin{itemize}\n  \\item For each $e\\in H\\cup\\{{\\textit{\\textsf{VH}}}_v\\mid v\\in{\\textit{\\textsf{VR}}}\\}$, the single-node tree labeled by the reduct of ${\\langle{D,H,e}\\rangle}$ is a proof tree for $e$.\n  \\item For every ${\\langle{D',H',A'}\\rangle}\\in\\Gamma$ and every substitution function $\\sigma$ satisfying the conditions for $\\sigma(A')\\in C$ in \\hyperref[def:cls]{\\autoref*{sec:recap}.\\ref*{def:cls}}, the tree labeled by ${\\langle{D',H',A'}\\rangle}$ with edges for each $e\\in H'\\cup{\\cal V}(H\\cup\\{A\\})$ leading to a proof tree for $\\sigma(e)$, is a proof tree for $\\sigma(A')$.\n\\end{itemize}\n\\end{definition}\n\nThe definition of closure ensures that there is a proof tree for $A$ relative to $D,H$ iff ${\\langle{D,H,A}\\rangle}$ is provable pre-statement. (The branches for variables outside ${\\cal V}(H\\cup\\{A\\})$ are discarded because they can always be replaced by the trivial substitution $\\sigma({\\langle{v}\\rangle})={\\langle{v}\\rangle}$ without affecting the closure deduction.) Additionally, we can prove by induction that every proof tree $T$ encodes a unique expression ${\\rm Expr}(T)$.\n\n\\begin{definition}\\label{def:unambig}\nAn {\\em unambiguous formal system} is a grammatical formal system whose associated context-free grammar is unambiguous.\n\\end{definition}\n\n\\begin{remark}\nNote that for this to make sense we need ${\\textit{\\textsf{SA}}}$ to contain only axioms and not theorems, i.e. this property is not preserved by equivalence of formal systems. For such systems every ${\\rm Expr}$ is an injection when restricted to the set ${\\textit{\\textsf{ST}}}$ of {\\em syntax trees}, trees $T$ relative to $\\emptyset,\\emptyset$ such that ${\\rm Type}(T):={\\rm Type}({\\rm Expr}(T))\\in{\\textit{\\textsf{VT}}}$ (or equivalently, ${\\rm Type}(T)={\\rm Type}(A)$ where ${\\langle{D,H,A}\\rangle}$ is the root of $T$). The subtrees of a syntax tree are also syntax trees, and the nodes are syntax axioms, with variables (of the form ${\\textit{\\textsf{VH}}}_v$) at the leaves.\n\\end{remark}\n\nWith this, we can ``rebuild'' the whole theory using trees instead of strings, because the all valid substitutions have unique proof tree representations. The set ${\\textit{\\textsf{CN}}}$ is discarded in favor of ${\\textit{\\textsf{TC}}}'$, but we still have ${\\textit{\\textsf{VR}}}'$ and ${\\rm Type}':{\\textit{\\textsf{VR}}}'\\cup{\\textit{\\textsf{SA}}}'\\to{\\textit{\\textsf{VT}}}'$, as well as ${\\rm Syn}':{\\textit{\\textsf{TC}}}'\\to{\\textit{\\textsf{VT}}}'$. A tree $T\\in{\\textit{\\textsf{ST}}}'$ is either a variable from ${\\textit{\\textsf{VR}}}'$ or a syntax axiom $a\\in{\\textit{\\textsf{SA}}}'$ connecting to more subtrees; each syntax axiom has a set $v^a_i$ of variables labeling the edges, and a type ${\\rm Type}'(a)$; ${\\rm Type}'(T)$ is defined as the type of the root of $T$.\n\nWe replace ${\\textit{\\textsf{EX}}_C}$ in the string representation with ${\\textit{\\textsf{EX}}_T}'$, which is a tuple ${\\langle{c,T}\\rangle}$ where $c\\in{\\textit{\\textsf{TC}}}'$, $T\\in{\\textit{\\textsf{ST}}}'$, and ${\\rm Syn}'(c)={\\rm Type}'(T)$. We extend ${\\rm Type}'$ to ${\\textit{\\textsf{EX}}_T}$ by ${\\rm Type}'({\\langle{c,T}\\rangle})=c$. ${\\cal V}'(T)$ is defined by induction such that ${\\cal V}'(v)=\\{v\\}$ and ${\\cal V}'(T)$ at a syntax axiom is the union of ${\\cal V}'(T_i)$ over the child subtrees $T_i$. A substitution function $\\sigma$ is a function ${\\textit{\\textsf{ST}}}'\\to{\\textit{\\textsf{ST}}}'$ that factors over syntax axioms (with the value at variables left undetermined), extended to ${\\textit{\\textsf{EX}}_T}'\\to{\\textit{\\textsf{EX}}_T}'$ by $\\sigma({\\langle{c,T}\\rangle})={\\langle{c,\\sigma(T)}\\rangle}$.\n\nPre-statements and statements ${\\langle{D,H,A}\\rangle}$ are defined exactly as before, except that $H\\subseteq{\\textit{\\textsf{EX}}_T}'$ and $A\\in{\\textit{\\textsf{EX}}_T}'$. A tree formal system (this time unambiguous by definition) is a tuple ${\\langle{{\\textit{\\textsf{TC}}}',{\\textit{\\textsf{VR}}}',{\\textit{\\textsf{SA}}}',{\\rm Type}',{\\rm Syn}',\\Gamma'}\\rangle}$ where $\\Gamma'$ is a set of statements. The closure of a set $H\\subseteq{\\textit{\\textsf{EX}}_T}'$ relative to $D$ is defined as in the string case, but the base case instead takes $H\\subseteq C$ and ${\\langle{{\\rm Type}'(T),T}\\rangle}\\in C$ for every $T\\in{\\textit{\\textsf{ST}}}'$.\n\nTo map an unambiguous formal system ${\\langle{{\\textit{\\textsf{CN}}},{\\textit{\\textsf{VR}}},{\\rm Type},\\Gamma,{\\rm Syn}}\\rangle}$ to a tree formal system ${\\langle{{\\textit{\\textsf{TC}}}',{\\textit{\\textsf{VR}}}',{\\textit{\\textsf{SA}}}',{\\rm Type}',{\\rm Syn}',\\Gamma'}\\rangle}$, one takes ${\\textit{\\textsf{TC}}}'={\\textit{\\textsf{TC}}}$, ${\\textit{\\textsf{VR}}}'$ to be the set of ${\\textit{\\textsf{VH}}}_v$ singleton trees for $v\\in{\\textit{\\textsf{VR}}}$, ${\\textit{\\textsf{SA}}}'={\\textit{\\textsf{SA}}}$, ${\\rm Type}'(T)={\\rm Type}(T)$, ${\\rm Syn}'={\\rm Syn}$, and $\\Gamma'=\\{{\\langle{D,\\{t(h)\\mid h\\in H\\},t(A)}\\rangle}\\mid{\\langle{D,H,A}\\rangle}\\in\\Gamma\\setminus{\\textit{\\textsf{ST}}}\\}$, where $t(e)=\\{{\\rm Type}(e),{\\rm Expr}^{-1}({\\rm Syn}(e))\\}$.\n\nThese two formal systems are isomorphic, in the sense that expressions and statements can be mapped freely, respecting the definitions of theorems and axioms, variables and typecodes.\n\n\\subsection{Models of tree formal systems}\\label{sec:treemodel}\nGiven the isomorphism of the previous section, the model theory of unambiguous formal systems can be mapped to models of tree formal systems, with ${\\langle{{\\textit{\\textsf{U}}},{\\mathbin{\\#}},\\eta}\\rangle}$ satisfying an exactly equivalent set of properties. But the major advantage of the tree formulation is that the substitution property implies that $\\eta$ is completely determined except at syntax axioms, so for trees we will replace $\\eta$ with a new function $\\pi$.\n\n\\begin{definition}\nGiven a function ${\\textit{\\textsf{U}}}$ from ${\\textit{\\textsf{TC}}}'$ to nonempty sets satisfying ${\\textit{\\textsf{U}}}_c\\subseteq{\\textit{\\textsf{U}}}_{{\\rm Syn}(c)}$, and $\\pi$ a ${\\textit{\\textsf{SA}}}$-indexed family of functions, where $\\pi_a:\\prod_i{\\textit{\\textsf{U}}}_{{\\rm Type}(v^a_i)}\\to{\\textit{\\textsf{U}}}_{{\\rm Type}(a)}$ for each $a\\in{\\textit{\\textsf{SA}}}$, define $\\eta_\\mu$ for $\\mu\\in{\\textit{\\textsf{OM}}}$ recursively such that:\n\\begin{itemize}\n  \\item For all $v\\in{\\textit{\\textsf{VR}}}$, $\\eta_\\mu(v)=\\mu(v)$.\n  \\item For each $T\\in{\\textit{\\textsf{ST}}}$ with $a\\in{\\textit{\\textsf{SA}}}$ at the root, $\\eta_\\mu(T)=\\pi_a(\\{\\eta_\\mu(T_i)\\}_i)$\n  \\item For each ${\\langle{c,T}\\rangle}\\in{\\textit{\\textsf{EX}}_T}'$, $\\eta_\\mu(e)=\\eta_\\mu(T)$ if $\\eta_\\mu(T)\\in{\\textit{\\textsf{U}}}_c$, otherwise undefined.\n\\end{itemize}\n\\end{definition}\n\n\\begin{definition}\nA model of a tree formal system is a tuple ${\\langle{{\\textit{\\textsf{U}}},{\\mathbin{\\#}},\\pi}\\rangle}$ where ${\\textit{\\textsf{U}}}$ is a function from ${\\textit{\\textsf{TC}}}'$ to nonempty sets satisfying ${\\textit{\\textsf{U}}}_c\\subseteq{\\textit{\\textsf{U}}}_{{\\rm Syn}(c)}$, and ${\\mathbin{\\#}}$ is a freshness relation (which is extended from $\\bigsqcup_{v\\in{\\textit{\\textsf{VT}}}}{\\textit{\\textsf{U}}}_c$ to $\\bigsqcup_{v\\in{\\textit{\\textsf{TC}}}}{\\textit{\\textsf{U}}}_c$ by setting $v{\\mathbin{\\#}} w_c$ iff $v{\\mathbin{\\#}} w_{{\\rm Syn}(c)}$ for the copies of $w$ in the disjoint union), and $\\pi$ is a ${\\textit{\\textsf{SA}}}$-indexed family of functions, where $\\pi_a:\\prod_i{\\textit{\\textsf{U}}}_{{\\rm Type}(v^a_i)}\\to{\\textit{\\textsf{U}}}_{{\\rm Type}(a)}$ for each $a\\in{\\textit{\\textsf{SA}}}$, such that for each $\\mu\\in{\\textit{\\textsf{OM}}}$, and defining $\\eta$ as above:\n\n\\begin{itemize}\n  \\item For each ${\\langle{D,H,A}\\rangle}\\in\\Gamma'$, if\n  \\begin{itemize}\n    \\item $\\mu(\\alpha){\\mathbin{\\#}}\\mu(\\beta)$ for all $\\{\\alpha,\\beta\\}\\in D$, and\n    \\item $\\eta_\\mu(h)$ is defined for all $h\\in H$,\n  \\end{itemize}\n  then $\\eta_\\mu(A)$ is defined.\n  \\item For all $v\\in\\bigsqcup{\\textit{\\textsf{U}}}$, $a\\in{\\textit{\\textsf{SA}}}$, and $f\\in\\prod_i{\\textit{\\textsf{U}}}_{{\\rm Type}(v^a_i)}$, if $v{\\mathbin{\\#}} f_i$ for all $i$, then $v{\\mathbin{\\#}}\\pi_a(f)$.\n\\end{itemize}\n\\end{definition}\n\n\\begin{theorem}\\label{thm:factor}\nLet ${\\langle{{\\textit{\\textsf{U}}},{\\mathbin{\\#}},\\pi}\\rangle}$ be a model for the tree formal system. Then the associated ${\\langle{{\\textit{\\textsf{U}}},{\\mathbin{\\#}},\\eta}\\rangle}$ is a model in the sense of \\autoref{def:gmodel}.\n\\end{theorem}\n\\begin{proof}\\leavevmode\n\\begin{itemize}\n  \\item The variable application law is true by definition of $\\eta$, and the axiom application law is true by assumption.\n  \\item For the substitution law, suppose $\\sigma$ and $e\\in{\\textit{\\textsf{EX}}_T}'$ are given. We want to show that $\\eta_\\mu(\\sigma(e))=\\eta_{\\sigma(\\mu)}(e)$, where $\\sigma(\\mu)\\in{\\textit{\\textsf{OM}}}$ is defined by $\\sigma(\\mu)(v)=\\eta_\\mu(\\sigma(v))$.\n\n  We show this for ${\\rm Syn}(e)={\\langle{{\\rm Type}(T),T}\\rangle}$ by induction on $T$. In the base case, $T=v$ for $v\\in{\\textit{\\textsf{VT}}}$, so $\\eta_{\\sigma(\\mu)}(v)=\\sigma(\\mu)(v)=\\eta_\\mu(\\sigma(v))$. Otherwise let $a\\in{\\textit{\\textsf{SA}}}$ be the root of $T$, so\n", "index": 3, "text": "\\[\\eta_{\\sigma(\\mu)}(T)=\\pi_a(\\{\\eta_{\\sigma(\\mu)}(T_i)\\}_i) = \\pi_a(\\{\\eta_\\mu(\\sigma(T_i))\\}_i)=\\eta_\\mu(\\sigma(T)).\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"\\eta_{\\sigma(\\mu)}(T)=\\pi_{a}(\\{\\eta_{\\sigma(\\mu)}(T_{i})\\}_{i})=\\pi_{a}(\\{%&#10;\\eta_{\\mu}(\\sigma(T_{i}))\\}_{i})=\\eta_{\\mu}(\\sigma(T)).\" display=\"block\"><mrow><mrow><mrow><msub><mi>\u03b7</mi><mrow><mi>\u03c3</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><msub><mi>\u03c0</mi><mi>a</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mrow><mo stretchy=\"false\">{</mo><mrow><msub><mi>\u03b7</mi><mrow><mi>\u03c3</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>T</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">}</mo></mrow><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><msub><mi>\u03c0</mi><mi>a</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mrow><mo stretchy=\"false\">{</mo><mrow><msub><mi>\u03b7</mi><mi>\u03bc</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>\u03c3</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>T</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">}</mo></mrow><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><msub><mi>\u03b7</mi><mi>\u03bc</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>\u03c3</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n", "itemtype": "equation", "pos": 28530, "prevtext": "\n\n  Then for $e={\\langle{c,T}\\rangle}$, if $\\eta_{\\sigma(\\mu)}(T)=\\eta_\\mu(\\sigma(T))$ is in ${\\textit{\\textsf{U}}}_c$, then both are defined and equal, otherwise both are undefined.\n\n  \\item Dependence on present variables is also provable by induction; in the base case $\\eta_\\mu(v)=\\mu(v)$ only depends on ${\\cal V}(v)=\\{v\\}$; and for a tree with $a\\in{\\textit{\\textsf{SA}}}$ at the root, $\\eta_\\mu(T)=\\pi_a(\\{\\eta_\\mu(T_i)\\}_i)$ only depends on ${\\cal V}(T)=\\bigcup_i{\\cal V}(T_i)$. For $e={\\langle{c,T}\\rangle}$ this property is maintained since ${\\cal V}(e)={\\cal V}(T)$ and $\\eta_\\mu(e)=\\eta_\\mu(T)$ or undefined.\n\n  \\item For the freshness substitution law, in the base case $v{\\mathbin{\\#}}\\mu(v)=\\eta_\\mu(v)$; and for a tree with $a\\in{\\textit{\\textsf{SA}}}$ at the root, if $v{\\mathbin{\\#}}{\\cal V}(T)$ then $v{\\mathbin{\\#}}{\\cal V}(T_i)$ so $v{\\mathbin{\\#}}\\eta_\\mu(T_i)$ for each $i$, and then by definition $v{\\mathbin{\\#}}\\pi_a(\\{\\eta_\\mu(T_i)\\}_i)=\\eta_\\mu(T)$. For $e={\\langle{c,T}\\rangle}$ this property is maintained since ${\\cal V}(e)={\\cal V}(T)$ and $\\eta_\\mu(e)=\\eta_\\mu(T)$ or undefined.\n\\end{itemize}\n\\qed\\end{proof}\n\nBy the isomorphism this approach also transfers to models of unambiguous formal systems. So we are left with the conclusion that a model can be specified by its functions $\\pi_a$, for each $a\\in{\\textit{\\textsf{SA}}}$; this is known in conventional model theory as the interpretation function.\n\n\\section{Examples of models}\\label{sec:ex}\n\\subsection{Propositional logic}\\label{sec:prop}\nWe start with a model for propositional logic. We define:\n\n", "index": 5, "text": "\n\\[{\\textit{\\textsf{CN}}}=\\{{(},{)},\\to,\\lnot,\\mathrm{wff},\\vdash\\}\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"{\\textit{{CN}}}=\\{{(},{)},\\to,\\lnot,\\mathrm{wff},\\vdash\\}\" display=\"block\"><mrow><mtext>\ud835\ude0a\ud835\ude15</mtext><mo>=</mo><mrow><mo stretchy=\"false\">{</mo><mrow><mo stretchy=\"false\">(</mo><mo>,</mo><mo stretchy=\"false\">)</mo></mrow><mo>,</mo><mo>\u2192</mo><mo>,</mo><mi mathvariant=\"normal\">\u00ac</mi><mo>,</mo><mi>wff</mi><mo>,</mo><mo>\u22a2</mo><mo stretchy=\"false\">}</mo></mrow></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n", "itemtype": "equation", "pos": 28599, "prevtext": "\n", "index": 7, "text": "\n\\[{\\textit{\\textsf{VR}}}=\\{{\\varphi},\\psi,\\chi,\\dots\\}\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex4.m1\" class=\"ltx_Math\" alttext=\"{\\textit{{VR}}}=\\{{\\varphi},\\psi,\\chi,\\dots\\}\" display=\"block\"><mrow><mtext>\ud835\ude1d\ud835\ude19</mtext><mo>=</mo><mrow><mo stretchy=\"false\">{</mo><mi>\u03c6</mi><mo>,</mo><mi>\u03c8</mi><mo>,</mo><mi>\u03c7</mi><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo stretchy=\"false\">}</mo></mrow></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n\nwhere the axioms are\n\\begin{itemize}\n  \\item \\texttt{wn}: $\\mathrm{wff}\\ \\lnot{\\varphi}$\n  \\item \\texttt{wi}: $\\mathrm{wff}\\ ({\\varphi}\\to\\psi)$\n  \\item \\texttt{ax-1}: $\\vdash({\\varphi}\\to(\\psi\\to{\\varphi}))$\n  \\item \\texttt{ax-2}: $\\vdash(({\\varphi}\\to(\\psi\\to\\chi))\\to(({\\varphi}\\to\\psi)\\to({\\varphi}\\to\\chi)))$\n  \\item \\texttt{ax-3}: $\\vdash((\\lnot{\\varphi}\\to\\lnot\\psi)\\to(\\psi\\to{\\varphi}))$\n  \\item \\texttt{ax-mp}: $\\{\\vdash{\\varphi},\\vdash({\\varphi}\\to\\psi)\\}$ implies $\\vdash\\psi$\n\\end{itemize}\n\nAdditionally, ${\\textit{\\textsf{TC}}}=\\{\\mathrm{wff},\\vdash\\}$ and ${\\textit{\\textsf{VT}}}=\\{\\mathrm{wff}\\}$ are implied by the preceding definition. \n\nAlthough the axiom strings appear structured with infix notation, this is not required; we could just as easily have an axiom with string $\\vdash{)}{\\varphi}{(}\\to$. That this is not the case is what makes this a grammatical formal system, with ${\\rm Syn}(\\mathrm{wff})={\\rm Syn}(\\vdash)=\\mathrm{wff}$. The syntax axioms are ${\\textit{\\textsf{SA}}}=\\{\\texttt{wn}, \\texttt{wi}\\}$. In fact this formal system is unambiguous, but we will not prove this here.\n\nThis formal system has a nontrivial model:\n", "itemtype": "equation", "pos": 28656, "prevtext": "\n", "index": 9, "text": "\n\\[\\Gamma=\\{\\texttt{wn}, \\texttt{wi}, \\texttt{ax-1}, \\texttt{ax-2}, \\texttt{ax-3},\\texttt{ax-mp}\\},\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m1\" class=\"ltx_Math\" alttext=\"\\Gamma=\\{\\texttt{wn},\\texttt{wi},\\texttt{ax-1},\\texttt{ax-2},\\texttt{ax-3},%&#10;\\texttt{ax-mp}\\},\" display=\"block\"><mrow><mrow><mi mathvariant=\"normal\">\u0393</mi><mo>=</mo><mrow><mo stretchy=\"false\">{</mo><mtext>\ud835\udea0\ud835\ude97</mtext><mo>,</mo><mtext>\ud835\udea0\ud835\ude92</mtext><mo>,</mo><mtext mathvariant=\"monospace\">ax-1</mtext><mo>,</mo><mtext mathvariant=\"monospace\">ax-2</mtext><mo>,</mo><mtext mathvariant=\"monospace\">ax-3</mtext><mo>,</mo><mtext mathvariant=\"monospace\">ax-mp</mtext><mo stretchy=\"false\">}</mo></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n", "itemtype": "equation", "pos": 29914, "prevtext": "\n\nwhere the axioms are\n\\begin{itemize}\n  \\item \\texttt{wn}: $\\mathrm{wff}\\ \\lnot{\\varphi}$\n  \\item \\texttt{wi}: $\\mathrm{wff}\\ ({\\varphi}\\to\\psi)$\n  \\item \\texttt{ax-1}: $\\vdash({\\varphi}\\to(\\psi\\to{\\varphi}))$\n  \\item \\texttt{ax-2}: $\\vdash(({\\varphi}\\to(\\psi\\to\\chi))\\to(({\\varphi}\\to\\psi)\\to({\\varphi}\\to\\chi)))$\n  \\item \\texttt{ax-3}: $\\vdash((\\lnot{\\varphi}\\to\\lnot\\psi)\\to(\\psi\\to{\\varphi}))$\n  \\item \\texttt{ax-mp}: $\\{\\vdash{\\varphi},\\vdash({\\varphi}\\to\\psi)\\}$ implies $\\vdash\\psi$\n\\end{itemize}\n\nAdditionally, ${\\textit{\\textsf{TC}}}=\\{\\mathrm{wff},\\vdash\\}$ and ${\\textit{\\textsf{VT}}}=\\{\\mathrm{wff}\\}$ are implied by the preceding definition. \n\nAlthough the axiom strings appear structured with infix notation, this is not required; we could just as easily have an axiom with string $\\vdash{)}{\\varphi}{(}\\to$. That this is not the case is what makes this a grammatical formal system, with ${\\rm Syn}(\\mathrm{wff})={\\rm Syn}(\\vdash)=\\mathrm{wff}$. The syntax axioms are ${\\textit{\\textsf{SA}}}=\\{\\texttt{wn}, \\texttt{wi}\\}$. In fact this formal system is unambiguous, but we will not prove this here.\n\nThis formal system has a nontrivial model:\n", "index": 11, "text": "\n\\[{\\textit{\\textsf{U}}}_{\\mathrm{wff}}={\\textsf{Bool}}:=\\{{\\texttt{T}},{\\texttt{F}}\\}\\quad{\\textit{\\textsf{U}}}_{\\vdash}=\\{{\\texttt{T}}\\}\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m1\" class=\"ltx_Math\" alttext=\"{\\textit{{U}}}_{\\mathrm{wff}}={\\textsf{Bool}}:=\\{{\\texttt{T}},{\\texttt{F}}\\}%&#10;\\quad{\\textit{{U}}}_{\\vdash}=\\{{\\texttt{T}}\\}\" display=\"block\"><mrow><mrow><msub><mtext>\ud835\ude1c</mtext><mi>wff</mi></msub><mo>=</mo><mtext>\ud835\udda1\ud835\uddc8\ud835\uddc8\ud835\uddc5</mtext><mo>:=</mo><mrow><mo stretchy=\"false\">{</mo><mtext>\ud835\ude83</mtext><mo>,</mo><mtext>\ud835\ude75</mtext><mo stretchy=\"false\">}</mo></mrow></mrow><mo mathvariant=\"italic\" separator=\"true\">\u2003</mo><mrow><msub><mtext>\ud835\ude1c</mtext><mo>\u22a2</mo></msub><mo>=</mo><mrow><mo stretchy=\"false\">{</mo><mtext>\ud835\ude83</mtext><mo stretchy=\"false\">}</mo></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n", "itemtype": "equation", "pos": 30054, "prevtext": "\n", "index": 13, "text": "\n\\[x{\\mathbin{\\#}} y\\mbox{ is always true}\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m1\" class=\"ltx_Math\" alttext=\"x{\\mathbin{\\#}}y\\mbox{ is always true}\" display=\"block\"><mrow><mrow><mi mathvariant=\"normal\">#</mi><mo>\u2061</mo><mi>x</mi><mi>y</mi></mrow><mo>\u2062</mo><mtext>\u00a0is always true</mtext></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n", "itemtype": "equation", "pos": 30098, "prevtext": "\n", "index": 15, "text": "\n\\[\\pi_\\lnot({\\texttt{F}})={\\texttt{T}},\\quad \\pi_\\lnot({\\texttt{T}})={\\texttt{F}}\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex8.m1\" class=\"ltx_Math\" alttext=\"\\pi_{\\lnot}({\\texttt{F}})={\\texttt{T}},\\quad\\pi_{\\lnot}({\\texttt{T}})={\\texttt%&#10;{F}}\" display=\"block\"><mrow><mrow><mrow><msub><mi>\u03c0</mi><mi mathvariant=\"normal\">\u00ac</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mtext>\ud835\ude75</mtext><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mtext>\ud835\ude83</mtext></mrow><mo rspace=\"12.5pt\">,</mo><mrow><mrow><msub><mi>\u03c0</mi><mi mathvariant=\"normal\">\u00ac</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mtext>\ud835\ude83</mtext><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mtext>\ud835\ude75</mtext></mrow></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n\nWe will write ``$\\alpha={\\texttt{T}}$'' simply as ``$\\alpha$ is true'' or ``$\\alpha$'', treating the elements of ${\\textsf{Bool}}$ as actual truth values in the metalogic. The $\\pi_a$ functions generate $\\eta$ as previously described, so that, for example, if $\\mu({\\varphi})={\\texttt{T}}$, $\\mu(\\psi)={\\texttt{F}}$, then $\\eta_\\mu(\\mathrm{wff}\\ (\\lnot{\\varphi}\\to({\\varphi}\\to\\psi))) = \\pi_\\to(\\pi_\\lnot({\\texttt{T}}),\\pi_\\to({\\texttt{T}},{\\texttt{F}})) = \\pi_\\to({\\texttt{F}},{\\texttt{F}}) = {\\texttt{T}}$.\n\nIn order to verify that this indeed yields a model, we must check the axiom application law for each non-syntax axiom (usually called ``logical axioms'' in this context). By our definition of $\\eta$ given $\\pi$, $\\eta_\\mu({\\langle{c,T}\\rangle})$ is defined iff $\\eta_\\mu({\\langle{{\\rm Syn}(c),T}\\rangle})\\in{\\textit{\\textsf{U}}}_{{\\rm Syn}(c)}$ (where ${\\rm Syn}(c)={\\rm Type}(T)$); in this case this translates to $\\eta_\\mu(T)={\\texttt{T}}$ since ${\\rm Syn}(c)=\\{\\vdash\\}$.\n\n\\begin{itemize}\n  \\item \\texttt{ax-1}: $\\eta_\\mu(\\vdash({\\varphi}\\to(\\psi\\to{\\varphi}))) = \\pi_\\to(\\mu_{\\varphi},\\pi_\\to(\\mu_\\psi,\\mu_{\\varphi})) = {\\texttt{T}}$\n  \\item \\texttt{ax-2}: $\\pi_\\to(\\pi_\\to(\\mu_{\\varphi},  \\pi_\\to(\\mu_\\psi,\\mu_\\chi)), \\pi_\\to(\\pi_\\to(\\mu_{\\varphi},\\mu_\\psi), \\pi_\\to(\\mu_{\\varphi},\\mu_\\chi))) = {\\texttt{T}}$\n  \\item \\texttt{ax-3}: $\\pi_\\to(\\pi_\\to( \\pi_\\lnot(\\mu_{\\varphi}),\\pi_\\lnot(\\mu_\\psi)), \\pi_\\to(\\mu_\\psi,\\mu_{\\varphi})) = {\\texttt{T}}$\n  \\item \\texttt{ax-mp}: If $\\mu_{\\varphi}$ and $\\pi_\\to(\\mu_{\\varphi},\\mu_\\psi)$ are true, then $\\mu_\\psi = {\\texttt{T}}$.\n\\end{itemize}\n\nIn each case, there are a finite number of variables that range over $\\{{\\texttt{T}},{\\texttt{F}}\\}$ (such as $\\mu_{\\varphi},\\mu_\\psi,\\mu_\\chi$ in the case of \\texttt{ax-3}), so it suffices to verify that they are true under all combinations of assignments to the variables, i.e. truth table verification.\n\n\\subsection{MIU system}\\label{sec:miu}\nLet us solve the \\href{https://en.wikipedia.org/wiki/MU_puzzle}{MU puzzle} by using a model. Hofstadter's MIU system \\cite{hofstadter} is defined in Appendix D of the Metamath book \\cite{metamath}, so we will just define the model itself. We have ${\\textit{\\textsf{TC}}}=\\{\\textrm{wff},\\vdash\\}$ and ${\\textit{\\textsf{VT}}}=\\{\\textrm{wff}\\}$, and let ${\\rm Syn}(\\vdash)=\\textrm{wff}$ with $x,y$ variables of type \\textrm{wff}. The axioms are:\n\n\\begin{itemize}\n  \\item \\texttt{we}: $\\textrm{wff}$\n  \\item \\texttt{wM}: $\\textrm{wff}\\ x{\\texttt{M}}$\n  \\item \\texttt{wI}: $\\textrm{wff}\\ x{\\texttt{I}}$\n  \\item \\texttt{wU}: $\\textrm{wff}\\ x{\\texttt{U}}$\n  \\item \\texttt{ax}: $\\vdash {\\texttt{M}}{\\texttt{I}}$\n  \\item \\texttt{I\\_}: $\\vdash x{\\texttt{I}}$ implies $\\vdash x{\\texttt{I}}{\\texttt{U}}$\n  \\item \\texttt{II}: $\\vdash {\\texttt{M}} x$ implies $\\vdash {\\texttt{M}} xx$\n  \\item \\texttt{III}: $\\vdash x{\\texttt{I}}{\\texttt{I}}{\\texttt{I}} y$ implies $\\vdash x{\\texttt{U}} y$\n  \\item \\texttt{IV}: $\\vdash x{\\texttt{U}}{\\texttt{U}} y$ implies $\\vdash xy$\n\\end{itemize}\n\nThe syntax axioms are $\\{\\texttt{we},\\texttt{wM},\\texttt{wI},\\texttt{wU}\\}$. Note that in \\texttt{we}, there are no symbols after the typecode, so this says that the empty string is a valid wff. This formal system is weakly grammatical, but not grammatical, because wffs are built from the right, while axiom \\texttt{II} contains the string $\\vdash{\\texttt{M}} x$, which cannot be parsed as a wff. If there was a syntax axiom ``$\\textrm{wff}\\ x y$'', then it would be grammatical, but not unambiguous.\n\nIn order to solve the MU puzzle, we build the relevant invariant, which is the number of $\\texttt{I}$'s modulo $3$, into the model. Let ${\\textit{\\textsf{U}}}_\\textrm{wff}=\\{0,1,2\\}$, ${\\textit{\\textsf{U}}}_\\vdash=\\{1,2\\}$, let $x{\\mathbin{\\#}} y$ be always true, and define $\\eta_\\mu(\\textrm{wff}\\ e)$ to be $\\sum_i f(e_i)\\bmod 3$, where $f(v)=\\mu(v)$ if $v$ is a variable, $f({\\texttt{I}})=1$, and $f(c)=0$ for other constants. Let $\\eta_\\mu(\\vdash e)=\\eta_\\mu(\\textrm{wff}\\ e)$ when $\\eta_\\mu(\\textrm{wff}\\ e)\\in\\{1,2\\}$. \n\nVerifying that this yields a model is then equivalent to verifying that the axioms preserve the invariant, and we can deduce that ${\\texttt{M}}{\\texttt{U}}$ is not provable because $\\eta_\\mu(\\vdash{\\texttt{M}}{\\texttt{U}})$ is not defined for any $\\mu$.\n\n\\subsection{Set theory}\\label{sec:setmm}\nOf course, the more interesting case is the verification that the full structure of \\texttt{set.mm} has a nontrivial model. As the background, we need a model of \\textsf{ZFC} set theory; let this be ${\\langle{M,{\\mathbin{\\varepsilon}}}\\rangle}$.\n\nThe typecodes are ${\\textit{\\textsf{TC}}}=\\{\\mathrm{set},\\mathrm{class},\\mathrm{wff},\\vdash\\}$, with the only non-variable typecode being $\\vdash$ and ${\\rm Syn}(\\vdash)=\\mathrm{wff}$. With these definitions \\texttt{set.mm} becomes an unambiguous formal system. (Again, the proof of unambiguity is complex and not undertaken here.) Let $V=:{\\textit{\\textsf{U}}}_\\mathrm{set}$ be any infinite set.  This is the set of variables of the ``object language'' over which Metamath is understood to sit; they are customarily labeled $V=\\{v_0,v_1,v_2,\\dots\\}$. Note that these are {\\em not} actually variables in our sense, they are constants, elements of the set $V$. Set variables such as $\\color{red} x$ in metamath range over elements of $V$.  \n\nWe will need a few preliminary sets before properly defining ${\\textit{\\textsf{U}}}_\\mathrm{wff}$ and ${\\textit{\\textsf{U}}}_\\mathrm{class}$. Take ${\\textit{\\textsf{U}}}'_\\mathrm{wff}=(V\\to M)\\to{\\textsf{Bool}}$, that is, the set of functions from $V\\to M$ to ${\\textsf{Bool}}$. The subset of ${\\textit{\\textsf{U}}}_\\mathrm{wff}$ corresponding to true formulas, ${\\textit{\\textsf{U}}}_\\vdash$, is the singleton $\\{\\lambda f\\,{\\texttt{T}}\\}$ (i.e. the constant function true). Similarly, ${\\textit{\\textsf{U}}}'_\\mathrm{class}=(V\\to M)\\to{\\cal P}(M)$.\n\n\\begin{definition}\nGiven $A:(V\\to M)\\to B$ ($A$ is a wff or class variable) and $W\\subseteq V$, we say {\\em $A$ is constant outside $W$} if for all $f,g:V\\to M$, if $f(v)=g(v)$ for all $v\\in W$, then $A(f)=A(g)$.\n\\end{definition}\n\nWe define a relation ${\\mathbin{\\#}}$ on the disjoint union $V\\sqcup{\\textit{\\textsf{U}}}'_\\mathrm{wff}\\sqcup{\\textit{\\textsf{U}}}'_\\mathrm{class}$:\n\\begin{itemize}\n  \\item If $x,y\\in V$, then define $x{\\mathbin{\\#}} y$ iff $x\\ne y$.\n  \\item If $x\\in V$ and $A\\in{\\textit{\\textsf{U}}}'_\\mathrm{class}\\sqcup{\\textit{\\textsf{U}}}'_\\mathrm{wff}$, then define $x{\\mathbin{\\#}} A$ if $A$ is constant outside $V\\setminus\\{x\\}$.\n  \\item The case $A{\\mathbin{\\#}} x$ when $x\\in V$ and $A\\in{\\textit{\\textsf{U}}}_\\mathrm{class}\\sqcup{\\textit{\\textsf{U}}}_\\mathrm{wff}$ is covered by symmetry; $x{\\mathbin{\\#}} y$ is true for any other combination.\n\\end{itemize}\n\nTo define the real set ${\\textit{\\textsf{U}}}_\\mathrm{wff}$, we take the set of $A\\in{\\textit{\\textsf{U}}}'_\\mathrm{wff}$ such that $A$ is ``effectively finite-dimenional'', that is, $A$ is constant outside some finite $V'\\subseteq V$. Similarly, ${\\textit{\\textsf{U}}}_\\mathrm{class}$ is the set of effectively finite-dimenional $A\\in{\\textit{\\textsf{U}}}'_\\mathrm{class}$. There is a minimal set $V'$ outside which $A$ is constant; this set is called ${\\rm Free}(A)$. It immediately follows from the definition that $A{\\mathbin{\\#}} x$ for $x\\notin{\\rm Free}(A)$. We can extend the definition slightly to set variables by taking ${\\rm Free}(x)=\\{x\\}$ when $x\\in V$.\n\n\\begin{theorem}\\label{thm:fresh}\n${\\mathbin{\\#}}$ as defined above is a freshness relation.\n\\end{theorem}\n\\begin{proof}\nClearly ${\\mathbin{\\#}}$ is a symmetric relation, so we need only verify that for every $c\\in\\{\\mathrm{set},\\mathrm{wff},\\mathrm{class}\\}$ and every finite set $W\\subseteq{\\textit{\\textsf{VR}}}$, there is a $v\\in{\\textit{\\textsf{U}}}_c$ with $v{\\mathbin{\\#}} W$. If $c=\\mathrm{wff}$ then take $v=\\lambda f\\,{\\texttt{T}}$, and if $c=\\mathrm{class}$ then take $v=\\lambda f\\,M$; in each case $v{\\mathbin{\\#}} w$ for any $w\\in\\bigsqcup{\\textit{\\textsf{U}}}$, so the condition is satisfied.\n\nIf $c=\\mathrm{set}$, then for each $w\\in{\\textit{\\textsf{U}}}_c$ the set ${\\rm Free}(w)$ is finite, as is the union $\\bigcup_{w\\in W}{\\rm Free}(w)$. Since $V$ is infinite by assumption, choose some $v\\in\\\\ V\\setminus\\bigcup_{w\\in W}{\\rm Free}(w)$; then for $w\\in W$, $v\\notin{\\rm Free}(w)$ implies $v{\\mathbin{\\#}} w$.\n\\qed\\end{proof}\n\n\\begin{definition}\nFor $f:V\\to M$, $x\\in V$ and $m\\in M$, the function $f[x\\to m]:V\\to M$ is defined by $f[x\\to m](y)=f(y)$ for $y\\ne x$ and $f[x\\to m](x)=m$.\n\\end{definition}\n\nFinally, we define the $\\pi_a$ functions. By definitional elimination, we can ignore definitional syntax axioms without loss of generality.\n\n\\begin{itemize}\n  \\item Take $\\pi_\\lnot(f)=f\\circ\\pi'_\\lnot$, where $\\pi'_\\lnot$ is the function called $\\pi_\\lnot$ in \\autoref{sec:prop}, and similarly for $\\pi_\\to(f)=f\\circ\\pi'_\\to$.\n  \\item $\\pi_\\forall(x,{\\varphi})$ is the wff corresponding to $\\forall x,{\\varphi}$ and is defined so that $\\pi_\\forall(x,{\\varphi})(f)$ iff ${\\varphi}(f[x\\to m])$ for all $m\\in M$. (Since it comes up often, the restricted quantifier $\\forall m\\in M$ will be abbreviated $\\forall_M m$.)\n  \\item The class abstraction, \\texttt{cab}: $\\mathrm{class}\\ \\{x\\mid{\\varphi}\\}$, is defined so that ${\\pi_\\texttt{{cab}}}(x,{\\varphi})(f)=\\{m\\in M\\mid{\\varphi}(f[x\\to m])\\}$.\n  \\item The set-to-class type conversion is a syntax axiom called \\texttt{cv}: $\\mathrm{class}\\ x$. The function for this is defined so that ${\\pi_\\texttt{{cv}}}(x)(f)=\\{m\\in M\\mid m{\\mathbin{\\varepsilon}} f(x)\\}$.\n  \\item Equality of classes is defined by \\texttt{wceq}: $\\mathrm{wff}\\ A=B$, and is defined so that $\\pi_=(A,B)(f)$ is true iff $A(f)=B(f)$.\n  \\item We define $\\pi_\\in(A,B)(f)$ true if $\\exists_M m(A(f)=\\{n \\in M\\mid n{\\mathbin{\\varepsilon}} m\\}\\land m\\in B(f))$.\n\\end{itemize}\n\nFor the common case where one or both of the arguments to $=,\\in$ are sets, we note that $\\pi_\\in({\\pi_\\texttt{{cv}}}(x),A)(f)$ iff $f(x)\\in A(f)$, $\\pi_\\in({\\pi_\\texttt{{cv}}}(x),{\\pi_\\texttt{{cv}}}(y))(f)$ iff $f(x){\\mathbin{\\varepsilon}} f(y)$, and $\\pi_=({\\pi_\\texttt{{cv}}}(x),{\\pi_\\texttt{{cv}}}(y))(f)$ iff $f(x)=f(y)$. We need ${\\langle{M,{\\mathbin{\\varepsilon}}}\\rangle}$ to satisfy the extensionality axiom for this to work.\n\n\\begin{lemma}[The deduction theorem]\\label{thm:ded}\n$\\pi_\\to({\\varphi},\\psi)(f)$ if and only if  ${\\varphi}(f)$ implies $\\psi(f)$.\n\\end{lemma}\n\\begin{proof}\nSuppose not. Then $\\pi_\\to({\\varphi},\\psi)(f)={\\texttt{F}}$, which by definition implies ${\\varphi}(f)={\\texttt{T}}$ and $\\psi(f)={\\texttt{F}}$, a contradiction. The converse is just \\texttt{ax-mp} (verified by truth tables).\n\\qed\\end{proof}\n\n\\begin{lemma}[The non-free predicate]\\label{thm:nf}\n$x{\\mathbin{\\#}}{\\varphi}$ iff $\\pi_\\to({\\varphi},\\pi_\\forall(x,{\\varphi}))(f)$ is true for all $f$ (which is also equivalent to $\\eta_\\mu(\\vdash({\\varphi}'\\to\\forall x'{\\varphi}'))$ being defined, where $\\mu({\\varphi}')={\\varphi}$ and $\\mu(x')=x$).\n\\end{lemma}\n\\begin{proof}\nBy definition, $x{\\mathbin{\\#}}{\\varphi}$ iff for all $f,g:V\\to M$, $f(v)=g(v)$ for all $v\\ne x$ implies ${\\varphi}(f)={\\varphi}(g)$.  In this case, given $f$, and using the deduction theorem, if ${\\varphi}(f)$, then since $f[x\\to m]$ differs from $f$ only at $x$,  ${\\varphi}(f[x\\to m])={\\varphi}(f)$ is true for each $m$, so $\\pi_\\forall(x,{\\varphi})(f)$. Thus $\\pi_\\to({\\varphi},\\pi_\\forall(x,{\\varphi}))(f)$ by \\autoref{thm:ded}. Conversely, if $f,g$ differ only for $v=x$, either ${\\varphi}(f)={\\varphi}(g)={\\texttt{F}}$, or one of them (say ${\\varphi}(f)$) is true. Then by \\texttt{ax-mp}, $\\pi_\\forall(x,{\\varphi})(f)$, so taking $m=g(x)$, ${\\varphi}(f[x\\to g(x)])={\\varphi}(g)$ is true. Hence ${\\varphi}(f)={\\varphi}(g)$, so $x{\\mathbin{\\#}}{\\varphi}$.\n\\qed\\end{proof}\n\n\\begin{theorem}\\label{thm:setmodel}\nThe tuple ${\\langle{{\\textit{\\textsf{U}}},{\\mathbin{\\#}},\\eta}\\rangle}$ defined via the above construction is a model for the \\texttt{set.mm} formal system.\n\\end{theorem}\n\\begin{proof}\nAs in the baby example for propositional calculus, we must verify that $\\eta$ honors all the logical axioms. The tricky ones are the predicate calculus axioms:\n\n\\begin{itemize}\n  \\item \\texttt{ax-1,ax-2,ax-3,ax-mp}: Verification by truth tables, as in the propositional calculus example\n  \n  \\item \\texttt{ax-5}: $\\vdash(\\forall x({\\varphi}\\to\\psi)\\to(\\forall x{\\varphi}\\to\\forall x\\psi))$\\\\\n  Assume $\\pi_\\forall(x,\\pi_\\to({\\varphi},\\psi))(f)$ and $\\pi_\\forall(x,{\\varphi})(f)$; then ${\\varphi}(f[x\\to m])$ and\\\\ $\\pi_\\to({\\varphi},\\psi)(f[x\\to m])$, so by \\texttt{ax-mp}, $\\psi(f[x\\to m])$. Conclude by \\autoref{thm:ded}.\n  \\item \\texttt{ax-6}: $\\vdash(\\lnot\\forall x{\\varphi}\\to\\forall x\\lnot\\forall x{\\varphi})$\\\\\n  By \\autoref{thm:nf}, this is equivalent to $x{\\mathbin{\\#}}\\pi_\\lnot(\\pi_\\forall(x,{\\varphi}))$.\n  If $f,g$ differ only at $x$, then $\\pi_\\forall(x,{\\varphi})(f)$ if ${\\varphi}(f[x\\to m])$ for all $m$; but $f[x\\to m]=g[x\\to m]$, so $\\pi_\\forall(x,{\\varphi})(f)=\\pi_\\forall(x,{\\varphi})(g)$ and $\\pi_\\lnot(\\pi_\\forall(x,{\\varphi})(f)) = \\pi_\\lnot(\\pi_\\forall(x,{\\varphi})(g))$.\n  \\item \\texttt{ax-7}: $\\vdash(\\forall x\\forall y{\\varphi}\\to\\forall y\\forall x{\\varphi})$\\\\\n  By \\autoref{thm:ded}, assume $\\pi_\\forall(x,\\pi_\\forall(y,{\\varphi}))(f)$. If $x=y$ then this is the same as $\\pi_\\forall(y,\\pi_\\forall(x,{\\varphi}))(f)$, otherwise it reduces to ${\\varphi}(f[x\\to m][y\\to n])$ for all $m,n\\in M$, and note that $f[x\\to m][y\\to n]=f[y\\to n][x\\to m]$.\n  \\item \\texttt{ax-gen}: $\\vdash{\\varphi}$ implies $\\vdash\\forall x{\\varphi}$\\\\\n  If ${\\varphi}(f)$ for all $f$, then set $f:=g[x\\to m]$ to deduce ${\\varphi}(g[x\\to m])$ for all $m$, hence $\\pi_\\forall(x,{\\varphi})(g)$.\n  \\item \\texttt{ax-8}: $\\vdash(x=y\\to(x=z\\to y=z))$\\\\\n  By \\autoref{thm:ded}, assume $\\pi_=(x,y)$ and $\\pi_=(y,z)$. Then $f(x)=f(y)=f(z)$, so $\\pi_=(x,z)$.\n  \\item \\texttt{ax-9}: $\\vdash\\lnot\\forall x\\lnot x=y$\\\\\n  This is equivalent to $\\exists m\\in M$, $\\pi_=(x,y)(f[x\\to m])$, or $\\exists m\\in M,\\ m=f[x\\to m](y)$. If $x=y$, then any $m\\in M$ will do ($M$ is assumed nonempty because it is a model of \\textsf{ZFC}), and if $x\\ne y$ then take $m=f(y)$.\n  \\item \\texttt{ax-11}: $\\vdash(x=y\\to(\\forall y{\\varphi}\\to\\forall x(x=y\\to{\\varphi})))$\\\\\n  Assume $f(x)=f(y)$ and $\\forall_M n, {\\varphi}(f[y\\to n])$, take some $m\\in M$, and assume $f[x\\to m](x)=f[x\\to m](y)$. We want to show ${\\varphi}(f[x\\to m])$. If $x=y$, then the second hypothesis implies ${\\varphi}(f[y\\to m])={\\varphi}(f[x\\to m])$. Otherwise, $m=f(y)=f(x)$, so ${\\varphi}(f[x\\to m])={\\varphi}(f)={\\varphi}(f[y\\to m])$.\n  \\item \\texttt{ax-12}: $\\vdash(\\lnot x=y\\to(y=z\\to\\forall x\\,y=z))$\\\\\n  Assume $f(x)\\ne f(y)=f(z)$, and take $m\\in M$. We want to show $f[x\\to m](y)=f[x\\to m](z)$. If $x=y$ or $x=z$ then $f(x)=f(y)$ or $f(x)=f(z)$, a contradiction, so $f[x\\to m](y)=f(y)=f(z)=f[x\\to m](z)$.\n  \\item \\texttt{ax-13}: $\\vdash(x=y\\to(x\\in z\\to y\\in z))$\\\\\n  Assume $f(x)=f(y)$ and $f(x){\\mathbin{\\varepsilon}} f(z)$; then $f(y){\\mathbin{\\varepsilon}} f(z)$.\n  \\item \\texttt{ax-14}: $\\vdash(x=y\\to(z\\in x\\to z\\in y))$\\\\\n  Assume $f(x)=f(y)$ and $f(z){\\mathbin{\\varepsilon}} f(x)$; then $f(z){\\mathbin{\\varepsilon}} f(y)$.\n  \\item \\texttt{ax-17}: $x,{\\varphi}$ distinct implies $\\vdash({\\varphi}\\to\\forall x\\,{\\varphi})$\\\\\n  This is just the forward direction of \\autoref{thm:nf}.\n\\end{itemize}\n\nWe can also verify the class axioms:\n\\begin{itemize}\n  \\item \\texttt{df-clab}: The left hand expression $x\\in\\{y\\mid{\\varphi}\\}$ expands to $f(x)\\in\\{m\\in M\\mid{\\varphi}(f[y\\to m])\\}$, that is, ${\\varphi}(f[y\\to f(x)])$, while the right side says $f(y)=f(x)\\to{\\varphi}(f)$ and $\\exists_M m,(f[y\\to m](x)=m\\land{\\varphi}(f[y\\to m]))$. If $x=y$, the left conjunct becomes ${\\varphi}(f)$ and the right becomes $\\exists_M m,{\\varphi}(f[x\\to m])$, which is provable from the other conjunct by setting $m=f(x)$ so that $f[x\\to m]=f$. At the same time the left expression also reduces to ${\\varphi}(f[x\\to f(x)])={\\varphi}(f)$. If $x\\ne y$, then $f[y\\to m](x)=f(x)$ and the right conjunct becomes ${\\varphi}(f[y\\to f(x)])$, and the left conjunct is provable from this since $f(y)=f(x)$ implies $f[y\\to f(x)]=f[y\\to f(y)]=f$, so both sides are equivalent to ${\\varphi}(f[y\\to f(x)])$.\n  \\item \\texttt{df-clel}:\n  We want to show that $\\pi_\\in(A,B)(f)$ iff there is an $m$ such that $\\{n\\mid n{\\mathbin{\\varepsilon}} m\\}=A(f[x\\to m])$ and $m\\in B(f[x\\to m])$, which matches our definition after replacing $A(f[x\\to m])=A(f)$ and $B(f[x\\to m])=B(f)$, since $x{\\mathbin{\\#}} A$ and $x{\\mathbin{\\#}} B$.\n  \\item \\texttt{df-clel}:\n  We want to show that $\\pi_\\in(A,B)(f)$ iff there is an $m$ such that $\\{n\\mid n{\\mathbin{\\varepsilon}} m\\}=A(f[x\\to m])$ and $m\\in B(f[x\\to m])$, which matches our definition after replacing $A(f[x\\to m])=A(f)$ and $B(f[x\\to m])=B(f)$, since $x{\\mathbin{\\#}} A$ and $x{\\mathbin{\\#}} B$.\n  \\item \\texttt{df-cleq}:\n  (This has an extra hypothesis \\texttt{ax-ext} which is already built into our model.) We want to show that $\\pi_=(A,B)(f)$ iff for all $m$, $m\\in A(f[x\\to m])\\leftrightarrow m\\in B(f[x\\to m])$. We are also assuming $x{\\mathbin{\\#}} A$ and $x{\\mathbin{\\#}} B$ in this axiom, so this reduces to $m\\in A(f)\\leftrightarrow m\\in B(f)$, or (using extensionality in the metalanguage) $A(f)=B(f)$, which is the definition of $\\pi_=(A,B)(f)$.\n\\end{itemize}\n\nThe ``true'' axioms of set theory are all phrased in terms of only $=,\\in$, and so factor straight through to axioms in ${\\langle{M,{\\mathbin{\\varepsilon}}}\\rangle}$:\n\\begin{itemize}\n  \\item \\texttt{ax-ext} (Axiom of Extensionality): The original expression is\n", "itemtype": "equation", "pos": 30182, "prevtext": "\n", "index": 17, "text": "\n\\[\\pi_\\to({\\texttt{F}},{\\texttt{F}})={\\texttt{T}},\\quad \\pi_\\to({\\texttt{F}},{\\texttt{T}})={\\texttt{T}}, \\quad\\pi_\\to({\\texttt{T}},{\\texttt{F}})={\\texttt{F}},\\quad \\pi_\\to({\\texttt{T}},{\\texttt{T}})={\\texttt{T}}\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex9.m1\" class=\"ltx_Math\" alttext=\"\\pi_{\\to}({\\texttt{F}},{\\texttt{F}})={\\texttt{T}},\\quad\\pi_{\\to}({\\texttt{F}},%&#10;{\\texttt{T}})={\\texttt{T}},\\quad\\pi_{\\to}({\\texttt{T}},{\\texttt{F}})={\\texttt{%&#10;F}},\\quad\\pi_{\\to}({\\texttt{T}},{\\texttt{T}})={\\texttt{T}}\" display=\"block\"><mrow><mrow><mrow><msub><mi>\u03c0</mi><mo>\u2192</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mtext>\ud835\ude75</mtext><mo>,</mo><mtext>\ud835\ude75</mtext><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mtext>\ud835\ude83</mtext></mrow><mo rspace=\"12.5pt\">,</mo><mrow><mrow><mrow><msub><mi>\u03c0</mi><mo>\u2192</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mtext>\ud835\ude75</mtext><mo>,</mo><mtext>\ud835\ude83</mtext><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mtext>\ud835\ude83</mtext></mrow><mo rspace=\"12.5pt\">,</mo><mrow><mrow><mrow><msub><mi>\u03c0</mi><mo>\u2192</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mtext>\ud835\ude83</mtext><mo>,</mo><mtext>\ud835\ude75</mtext><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mtext>\ud835\ude75</mtext></mrow><mo rspace=\"12.5pt\">,</mo><mrow><mrow><msub><mi>\u03c0</mi><mo>\u2192</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mtext>\ud835\ude83</mtext><mo>,</mo><mtext>\ud835\ude83</mtext><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mtext>\ud835\ude83</mtext></mrow></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n  which simplifies, according to the definitions, to $\\forall_M m(m{\\mathbin{\\varepsilon}} f(x)\\leftrightarrow m{\\mathbin{\\varepsilon}} f(y))\\to f(x)=f(y)$, for all $f$. With a change of variables this is equivalent to\n", "itemtype": "equation", "pos": 48001, "prevtext": "\n\nWe will write ``$\\alpha={\\texttt{T}}$'' simply as ``$\\alpha$ is true'' or ``$\\alpha$'', treating the elements of ${\\textsf{Bool}}$ as actual truth values in the metalogic. The $\\pi_a$ functions generate $\\eta$ as previously described, so that, for example, if $\\mu({\\varphi})={\\texttt{T}}$, $\\mu(\\psi)={\\texttt{F}}$, then $\\eta_\\mu(\\mathrm{wff}\\ (\\lnot{\\varphi}\\to({\\varphi}\\to\\psi))) = \\pi_\\to(\\pi_\\lnot({\\texttt{T}}),\\pi_\\to({\\texttt{T}},{\\texttt{F}})) = \\pi_\\to({\\texttt{F}},{\\texttt{F}}) = {\\texttt{T}}$.\n\nIn order to verify that this indeed yields a model, we must check the axiom application law for each non-syntax axiom (usually called ``logical axioms'' in this context). By our definition of $\\eta$ given $\\pi$, $\\eta_\\mu({\\langle{c,T}\\rangle})$ is defined iff $\\eta_\\mu({\\langle{{\\rm Syn}(c),T}\\rangle})\\in{\\textit{\\textsf{U}}}_{{\\rm Syn}(c)}$ (where ${\\rm Syn}(c)={\\rm Type}(T)$); in this case this translates to $\\eta_\\mu(T)={\\texttt{T}}$ since ${\\rm Syn}(c)=\\{\\vdash\\}$.\n\n\\begin{itemize}\n  \\item \\texttt{ax-1}: $\\eta_\\mu(\\vdash({\\varphi}\\to(\\psi\\to{\\varphi}))) = \\pi_\\to(\\mu_{\\varphi},\\pi_\\to(\\mu_\\psi,\\mu_{\\varphi})) = {\\texttt{T}}$\n  \\item \\texttt{ax-2}: $\\pi_\\to(\\pi_\\to(\\mu_{\\varphi},  \\pi_\\to(\\mu_\\psi,\\mu_\\chi)), \\pi_\\to(\\pi_\\to(\\mu_{\\varphi},\\mu_\\psi), \\pi_\\to(\\mu_{\\varphi},\\mu_\\chi))) = {\\texttt{T}}$\n  \\item \\texttt{ax-3}: $\\pi_\\to(\\pi_\\to( \\pi_\\lnot(\\mu_{\\varphi}),\\pi_\\lnot(\\mu_\\psi)), \\pi_\\to(\\mu_\\psi,\\mu_{\\varphi})) = {\\texttt{T}}$\n  \\item \\texttt{ax-mp}: If $\\mu_{\\varphi}$ and $\\pi_\\to(\\mu_{\\varphi},\\mu_\\psi)$ are true, then $\\mu_\\psi = {\\texttt{T}}$.\n\\end{itemize}\n\nIn each case, there are a finite number of variables that range over $\\{{\\texttt{T}},{\\texttt{F}}\\}$ (such as $\\mu_{\\varphi},\\mu_\\psi,\\mu_\\chi$ in the case of \\texttt{ax-3}), so it suffices to verify that they are true under all combinations of assignments to the variables, i.e. truth table verification.\n\n\\subsection{MIU system}\\label{sec:miu}\nLet us solve the \\href{https://en.wikipedia.org/wiki/MU_puzzle}{MU puzzle} by using a model. Hofstadter's MIU system \\cite{hofstadter} is defined in Appendix D of the Metamath book \\cite{metamath}, so we will just define the model itself. We have ${\\textit{\\textsf{TC}}}=\\{\\textrm{wff},\\vdash\\}$ and ${\\textit{\\textsf{VT}}}=\\{\\textrm{wff}\\}$, and let ${\\rm Syn}(\\vdash)=\\textrm{wff}$ with $x,y$ variables of type \\textrm{wff}. The axioms are:\n\n\\begin{itemize}\n  \\item \\texttt{we}: $\\textrm{wff}$\n  \\item \\texttt{wM}: $\\textrm{wff}\\ x{\\texttt{M}}$\n  \\item \\texttt{wI}: $\\textrm{wff}\\ x{\\texttt{I}}$\n  \\item \\texttt{wU}: $\\textrm{wff}\\ x{\\texttt{U}}$\n  \\item \\texttt{ax}: $\\vdash {\\texttt{M}}{\\texttt{I}}$\n  \\item \\texttt{I\\_}: $\\vdash x{\\texttt{I}}$ implies $\\vdash x{\\texttt{I}}{\\texttt{U}}$\n  \\item \\texttt{II}: $\\vdash {\\texttt{M}} x$ implies $\\vdash {\\texttt{M}} xx$\n  \\item \\texttt{III}: $\\vdash x{\\texttt{I}}{\\texttt{I}}{\\texttt{I}} y$ implies $\\vdash x{\\texttt{U}} y$\n  \\item \\texttt{IV}: $\\vdash x{\\texttt{U}}{\\texttt{U}} y$ implies $\\vdash xy$\n\\end{itemize}\n\nThe syntax axioms are $\\{\\texttt{we},\\texttt{wM},\\texttt{wI},\\texttt{wU}\\}$. Note that in \\texttt{we}, there are no symbols after the typecode, so this says that the empty string is a valid wff. This formal system is weakly grammatical, but not grammatical, because wffs are built from the right, while axiom \\texttt{II} contains the string $\\vdash{\\texttt{M}} x$, which cannot be parsed as a wff. If there was a syntax axiom ``$\\textrm{wff}\\ x y$'', then it would be grammatical, but not unambiguous.\n\nIn order to solve the MU puzzle, we build the relevant invariant, which is the number of $\\texttt{I}$'s modulo $3$, into the model. Let ${\\textit{\\textsf{U}}}_\\textrm{wff}=\\{0,1,2\\}$, ${\\textit{\\textsf{U}}}_\\vdash=\\{1,2\\}$, let $x{\\mathbin{\\#}} y$ be always true, and define $\\eta_\\mu(\\textrm{wff}\\ e)$ to be $\\sum_i f(e_i)\\bmod 3$, where $f(v)=\\mu(v)$ if $v$ is a variable, $f({\\texttt{I}})=1$, and $f(c)=0$ for other constants. Let $\\eta_\\mu(\\vdash e)=\\eta_\\mu(\\textrm{wff}\\ e)$ when $\\eta_\\mu(\\textrm{wff}\\ e)\\in\\{1,2\\}$. \n\nVerifying that this yields a model is then equivalent to verifying that the axioms preserve the invariant, and we can deduce that ${\\texttt{M}}{\\texttt{U}}$ is not provable because $\\eta_\\mu(\\vdash{\\texttt{M}}{\\texttt{U}})$ is not defined for any $\\mu$.\n\n\\subsection{Set theory}\\label{sec:setmm}\nOf course, the more interesting case is the verification that the full structure of \\texttt{set.mm} has a nontrivial model. As the background, we need a model of \\textsf{ZFC} set theory; let this be ${\\langle{M,{\\mathbin{\\varepsilon}}}\\rangle}$.\n\nThe typecodes are ${\\textit{\\textsf{TC}}}=\\{\\mathrm{set},\\mathrm{class},\\mathrm{wff},\\vdash\\}$, with the only non-variable typecode being $\\vdash$ and ${\\rm Syn}(\\vdash)=\\mathrm{wff}$. With these definitions \\texttt{set.mm} becomes an unambiguous formal system. (Again, the proof of unambiguity is complex and not undertaken here.) Let $V=:{\\textit{\\textsf{U}}}_\\mathrm{set}$ be any infinite set.  This is the set of variables of the ``object language'' over which Metamath is understood to sit; they are customarily labeled $V=\\{v_0,v_1,v_2,\\dots\\}$. Note that these are {\\em not} actually variables in our sense, they are constants, elements of the set $V$. Set variables such as $\\color{red} x$ in metamath range over elements of $V$.  \n\nWe will need a few preliminary sets before properly defining ${\\textit{\\textsf{U}}}_\\mathrm{wff}$ and ${\\textit{\\textsf{U}}}_\\mathrm{class}$. Take ${\\textit{\\textsf{U}}}'_\\mathrm{wff}=(V\\to M)\\to{\\textsf{Bool}}$, that is, the set of functions from $V\\to M$ to ${\\textsf{Bool}}$. The subset of ${\\textit{\\textsf{U}}}_\\mathrm{wff}$ corresponding to true formulas, ${\\textit{\\textsf{U}}}_\\vdash$, is the singleton $\\{\\lambda f\\,{\\texttt{T}}\\}$ (i.e. the constant function true). Similarly, ${\\textit{\\textsf{U}}}'_\\mathrm{class}=(V\\to M)\\to{\\cal P}(M)$.\n\n\\begin{definition}\nGiven $A:(V\\to M)\\to B$ ($A$ is a wff or class variable) and $W\\subseteq V$, we say {\\em $A$ is constant outside $W$} if for all $f,g:V\\to M$, if $f(v)=g(v)$ for all $v\\in W$, then $A(f)=A(g)$.\n\\end{definition}\n\nWe define a relation ${\\mathbin{\\#}}$ on the disjoint union $V\\sqcup{\\textit{\\textsf{U}}}'_\\mathrm{wff}\\sqcup{\\textit{\\textsf{U}}}'_\\mathrm{class}$:\n\\begin{itemize}\n  \\item If $x,y\\in V$, then define $x{\\mathbin{\\#}} y$ iff $x\\ne y$.\n  \\item If $x\\in V$ and $A\\in{\\textit{\\textsf{U}}}'_\\mathrm{class}\\sqcup{\\textit{\\textsf{U}}}'_\\mathrm{wff}$, then define $x{\\mathbin{\\#}} A$ if $A$ is constant outside $V\\setminus\\{x\\}$.\n  \\item The case $A{\\mathbin{\\#}} x$ when $x\\in V$ and $A\\in{\\textit{\\textsf{U}}}_\\mathrm{class}\\sqcup{\\textit{\\textsf{U}}}_\\mathrm{wff}$ is covered by symmetry; $x{\\mathbin{\\#}} y$ is true for any other combination.\n\\end{itemize}\n\nTo define the real set ${\\textit{\\textsf{U}}}_\\mathrm{wff}$, we take the set of $A\\in{\\textit{\\textsf{U}}}'_\\mathrm{wff}$ such that $A$ is ``effectively finite-dimenional'', that is, $A$ is constant outside some finite $V'\\subseteq V$. Similarly, ${\\textit{\\textsf{U}}}_\\mathrm{class}$ is the set of effectively finite-dimenional $A\\in{\\textit{\\textsf{U}}}'_\\mathrm{class}$. There is a minimal set $V'$ outside which $A$ is constant; this set is called ${\\rm Free}(A)$. It immediately follows from the definition that $A{\\mathbin{\\#}} x$ for $x\\notin{\\rm Free}(A)$. We can extend the definition slightly to set variables by taking ${\\rm Free}(x)=\\{x\\}$ when $x\\in V$.\n\n\\begin{theorem}\\label{thm:fresh}\n${\\mathbin{\\#}}$ as defined above is a freshness relation.\n\\end{theorem}\n\\begin{proof}\nClearly ${\\mathbin{\\#}}$ is a symmetric relation, so we need only verify that for every $c\\in\\{\\mathrm{set},\\mathrm{wff},\\mathrm{class}\\}$ and every finite set $W\\subseteq{\\textit{\\textsf{VR}}}$, there is a $v\\in{\\textit{\\textsf{U}}}_c$ with $v{\\mathbin{\\#}} W$. If $c=\\mathrm{wff}$ then take $v=\\lambda f\\,{\\texttt{T}}$, and if $c=\\mathrm{class}$ then take $v=\\lambda f\\,M$; in each case $v{\\mathbin{\\#}} w$ for any $w\\in\\bigsqcup{\\textit{\\textsf{U}}}$, so the condition is satisfied.\n\nIf $c=\\mathrm{set}$, then for each $w\\in{\\textit{\\textsf{U}}}_c$ the set ${\\rm Free}(w)$ is finite, as is the union $\\bigcup_{w\\in W}{\\rm Free}(w)$. Since $V$ is infinite by assumption, choose some $v\\in\\\\ V\\setminus\\bigcup_{w\\in W}{\\rm Free}(w)$; then for $w\\in W$, $v\\notin{\\rm Free}(w)$ implies $v{\\mathbin{\\#}} w$.\n\\qed\\end{proof}\n\n\\begin{definition}\nFor $f:V\\to M$, $x\\in V$ and $m\\in M$, the function $f[x\\to m]:V\\to M$ is defined by $f[x\\to m](y)=f(y)$ for $y\\ne x$ and $f[x\\to m](x)=m$.\n\\end{definition}\n\nFinally, we define the $\\pi_a$ functions. By definitional elimination, we can ignore definitional syntax axioms without loss of generality.\n\n\\begin{itemize}\n  \\item Take $\\pi_\\lnot(f)=f\\circ\\pi'_\\lnot$, where $\\pi'_\\lnot$ is the function called $\\pi_\\lnot$ in \\autoref{sec:prop}, and similarly for $\\pi_\\to(f)=f\\circ\\pi'_\\to$.\n  \\item $\\pi_\\forall(x,{\\varphi})$ is the wff corresponding to $\\forall x,{\\varphi}$ and is defined so that $\\pi_\\forall(x,{\\varphi})(f)$ iff ${\\varphi}(f[x\\to m])$ for all $m\\in M$. (Since it comes up often, the restricted quantifier $\\forall m\\in M$ will be abbreviated $\\forall_M m$.)\n  \\item The class abstraction, \\texttt{cab}: $\\mathrm{class}\\ \\{x\\mid{\\varphi}\\}$, is defined so that ${\\pi_\\texttt{{cab}}}(x,{\\varphi})(f)=\\{m\\in M\\mid{\\varphi}(f[x\\to m])\\}$.\n  \\item The set-to-class type conversion is a syntax axiom called \\texttt{cv}: $\\mathrm{class}\\ x$. The function for this is defined so that ${\\pi_\\texttt{{cv}}}(x)(f)=\\{m\\in M\\mid m{\\mathbin{\\varepsilon}} f(x)\\}$.\n  \\item Equality of classes is defined by \\texttt{wceq}: $\\mathrm{wff}\\ A=B$, and is defined so that $\\pi_=(A,B)(f)$ is true iff $A(f)=B(f)$.\n  \\item We define $\\pi_\\in(A,B)(f)$ true if $\\exists_M m(A(f)=\\{n \\in M\\mid n{\\mathbin{\\varepsilon}} m\\}\\land m\\in B(f))$.\n\\end{itemize}\n\nFor the common case where one or both of the arguments to $=,\\in$ are sets, we note that $\\pi_\\in({\\pi_\\texttt{{cv}}}(x),A)(f)$ iff $f(x)\\in A(f)$, $\\pi_\\in({\\pi_\\texttt{{cv}}}(x),{\\pi_\\texttt{{cv}}}(y))(f)$ iff $f(x){\\mathbin{\\varepsilon}} f(y)$, and $\\pi_=({\\pi_\\texttt{{cv}}}(x),{\\pi_\\texttt{{cv}}}(y))(f)$ iff $f(x)=f(y)$. We need ${\\langle{M,{\\mathbin{\\varepsilon}}}\\rangle}$ to satisfy the extensionality axiom for this to work.\n\n\\begin{lemma}[The deduction theorem]\\label{thm:ded}\n$\\pi_\\to({\\varphi},\\psi)(f)$ if and only if  ${\\varphi}(f)$ implies $\\psi(f)$.\n\\end{lemma}\n\\begin{proof}\nSuppose not. Then $\\pi_\\to({\\varphi},\\psi)(f)={\\texttt{F}}$, which by definition implies ${\\varphi}(f)={\\texttt{T}}$ and $\\psi(f)={\\texttt{F}}$, a contradiction. The converse is just \\texttt{ax-mp} (verified by truth tables).\n\\qed\\end{proof}\n\n\\begin{lemma}[The non-free predicate]\\label{thm:nf}\n$x{\\mathbin{\\#}}{\\varphi}$ iff $\\pi_\\to({\\varphi},\\pi_\\forall(x,{\\varphi}))(f)$ is true for all $f$ (which is also equivalent to $\\eta_\\mu(\\vdash({\\varphi}'\\to\\forall x'{\\varphi}'))$ being defined, where $\\mu({\\varphi}')={\\varphi}$ and $\\mu(x')=x$).\n\\end{lemma}\n\\begin{proof}\nBy definition, $x{\\mathbin{\\#}}{\\varphi}$ iff for all $f,g:V\\to M$, $f(v)=g(v)$ for all $v\\ne x$ implies ${\\varphi}(f)={\\varphi}(g)$.  In this case, given $f$, and using the deduction theorem, if ${\\varphi}(f)$, then since $f[x\\to m]$ differs from $f$ only at $x$,  ${\\varphi}(f[x\\to m])={\\varphi}(f)$ is true for each $m$, so $\\pi_\\forall(x,{\\varphi})(f)$. Thus $\\pi_\\to({\\varphi},\\pi_\\forall(x,{\\varphi}))(f)$ by \\autoref{thm:ded}. Conversely, if $f,g$ differ only for $v=x$, either ${\\varphi}(f)={\\varphi}(g)={\\texttt{F}}$, or one of them (say ${\\varphi}(f)$) is true. Then by \\texttt{ax-mp}, $\\pi_\\forall(x,{\\varphi})(f)$, so taking $m=g(x)$, ${\\varphi}(f[x\\to g(x)])={\\varphi}(g)$ is true. Hence ${\\varphi}(f)={\\varphi}(g)$, so $x{\\mathbin{\\#}}{\\varphi}$.\n\\qed\\end{proof}\n\n\\begin{theorem}\\label{thm:setmodel}\nThe tuple ${\\langle{{\\textit{\\textsf{U}}},{\\mathbin{\\#}},\\eta}\\rangle}$ defined via the above construction is a model for the \\texttt{set.mm} formal system.\n\\end{theorem}\n\\begin{proof}\nAs in the baby example for propositional calculus, we must verify that $\\eta$ honors all the logical axioms. The tricky ones are the predicate calculus axioms:\n\n\\begin{itemize}\n  \\item \\texttt{ax-1,ax-2,ax-3,ax-mp}: Verification by truth tables, as in the propositional calculus example\n  \n  \\item \\texttt{ax-5}: $\\vdash(\\forall x({\\varphi}\\to\\psi)\\to(\\forall x{\\varphi}\\to\\forall x\\psi))$\\\\\n  Assume $\\pi_\\forall(x,\\pi_\\to({\\varphi},\\psi))(f)$ and $\\pi_\\forall(x,{\\varphi})(f)$; then ${\\varphi}(f[x\\to m])$ and\\\\ $\\pi_\\to({\\varphi},\\psi)(f[x\\to m])$, so by \\texttt{ax-mp}, $\\psi(f[x\\to m])$. Conclude by \\autoref{thm:ded}.\n  \\item \\texttt{ax-6}: $\\vdash(\\lnot\\forall x{\\varphi}\\to\\forall x\\lnot\\forall x{\\varphi})$\\\\\n  By \\autoref{thm:nf}, this is equivalent to $x{\\mathbin{\\#}}\\pi_\\lnot(\\pi_\\forall(x,{\\varphi}))$.\n  If $f,g$ differ only at $x$, then $\\pi_\\forall(x,{\\varphi})(f)$ if ${\\varphi}(f[x\\to m])$ for all $m$; but $f[x\\to m]=g[x\\to m]$, so $\\pi_\\forall(x,{\\varphi})(f)=\\pi_\\forall(x,{\\varphi})(g)$ and $\\pi_\\lnot(\\pi_\\forall(x,{\\varphi})(f)) = \\pi_\\lnot(\\pi_\\forall(x,{\\varphi})(g))$.\n  \\item \\texttt{ax-7}: $\\vdash(\\forall x\\forall y{\\varphi}\\to\\forall y\\forall x{\\varphi})$\\\\\n  By \\autoref{thm:ded}, assume $\\pi_\\forall(x,\\pi_\\forall(y,{\\varphi}))(f)$. If $x=y$ then this is the same as $\\pi_\\forall(y,\\pi_\\forall(x,{\\varphi}))(f)$, otherwise it reduces to ${\\varphi}(f[x\\to m][y\\to n])$ for all $m,n\\in M$, and note that $f[x\\to m][y\\to n]=f[y\\to n][x\\to m]$.\n  \\item \\texttt{ax-gen}: $\\vdash{\\varphi}$ implies $\\vdash\\forall x{\\varphi}$\\\\\n  If ${\\varphi}(f)$ for all $f$, then set $f:=g[x\\to m]$ to deduce ${\\varphi}(g[x\\to m])$ for all $m$, hence $\\pi_\\forall(x,{\\varphi})(g)$.\n  \\item \\texttt{ax-8}: $\\vdash(x=y\\to(x=z\\to y=z))$\\\\\n  By \\autoref{thm:ded}, assume $\\pi_=(x,y)$ and $\\pi_=(y,z)$. Then $f(x)=f(y)=f(z)$, so $\\pi_=(x,z)$.\n  \\item \\texttt{ax-9}: $\\vdash\\lnot\\forall x\\lnot x=y$\\\\\n  This is equivalent to $\\exists m\\in M$, $\\pi_=(x,y)(f[x\\to m])$, or $\\exists m\\in M,\\ m=f[x\\to m](y)$. If $x=y$, then any $m\\in M$ will do ($M$ is assumed nonempty because it is a model of \\textsf{ZFC}), and if $x\\ne y$ then take $m=f(y)$.\n  \\item \\texttt{ax-11}: $\\vdash(x=y\\to(\\forall y{\\varphi}\\to\\forall x(x=y\\to{\\varphi})))$\\\\\n  Assume $f(x)=f(y)$ and $\\forall_M n, {\\varphi}(f[y\\to n])$, take some $m\\in M$, and assume $f[x\\to m](x)=f[x\\to m](y)$. We want to show ${\\varphi}(f[x\\to m])$. If $x=y$, then the second hypothesis implies ${\\varphi}(f[y\\to m])={\\varphi}(f[x\\to m])$. Otherwise, $m=f(y)=f(x)$, so ${\\varphi}(f[x\\to m])={\\varphi}(f)={\\varphi}(f[y\\to m])$.\n  \\item \\texttt{ax-12}: $\\vdash(\\lnot x=y\\to(y=z\\to\\forall x\\,y=z))$\\\\\n  Assume $f(x)\\ne f(y)=f(z)$, and take $m\\in M$. We want to show $f[x\\to m](y)=f[x\\to m](z)$. If $x=y$ or $x=z$ then $f(x)=f(y)$ or $f(x)=f(z)$, a contradiction, so $f[x\\to m](y)=f(y)=f(z)=f[x\\to m](z)$.\n  \\item \\texttt{ax-13}: $\\vdash(x=y\\to(x\\in z\\to y\\in z))$\\\\\n  Assume $f(x)=f(y)$ and $f(x){\\mathbin{\\varepsilon}} f(z)$; then $f(y){\\mathbin{\\varepsilon}} f(z)$.\n  \\item \\texttt{ax-14}: $\\vdash(x=y\\to(z\\in x\\to z\\in y))$\\\\\n  Assume $f(x)=f(y)$ and $f(z){\\mathbin{\\varepsilon}} f(x)$; then $f(z){\\mathbin{\\varepsilon}} f(y)$.\n  \\item \\texttt{ax-17}: $x,{\\varphi}$ distinct implies $\\vdash({\\varphi}\\to\\forall x\\,{\\varphi})$\\\\\n  This is just the forward direction of \\autoref{thm:nf}.\n\\end{itemize}\n\nWe can also verify the class axioms:\n\\begin{itemize}\n  \\item \\texttt{df-clab}: The left hand expression $x\\in\\{y\\mid{\\varphi}\\}$ expands to $f(x)\\in\\{m\\in M\\mid{\\varphi}(f[y\\to m])\\}$, that is, ${\\varphi}(f[y\\to f(x)])$, while the right side says $f(y)=f(x)\\to{\\varphi}(f)$ and $\\exists_M m,(f[y\\to m](x)=m\\land{\\varphi}(f[y\\to m]))$. If $x=y$, the left conjunct becomes ${\\varphi}(f)$ and the right becomes $\\exists_M m,{\\varphi}(f[x\\to m])$, which is provable from the other conjunct by setting $m=f(x)$ so that $f[x\\to m]=f$. At the same time the left expression also reduces to ${\\varphi}(f[x\\to f(x)])={\\varphi}(f)$. If $x\\ne y$, then $f[y\\to m](x)=f(x)$ and the right conjunct becomes ${\\varphi}(f[y\\to f(x)])$, and the left conjunct is provable from this since $f(y)=f(x)$ implies $f[y\\to f(x)]=f[y\\to f(y)]=f$, so both sides are equivalent to ${\\varphi}(f[y\\to f(x)])$.\n  \\item \\texttt{df-clel}:\n  We want to show that $\\pi_\\in(A,B)(f)$ iff there is an $m$ such that $\\{n\\mid n{\\mathbin{\\varepsilon}} m\\}=A(f[x\\to m])$ and $m\\in B(f[x\\to m])$, which matches our definition after replacing $A(f[x\\to m])=A(f)$ and $B(f[x\\to m])=B(f)$, since $x{\\mathbin{\\#}} A$ and $x{\\mathbin{\\#}} B$.\n  \\item \\texttt{df-clel}:\n  We want to show that $\\pi_\\in(A,B)(f)$ iff there is an $m$ such that $\\{n\\mid n{\\mathbin{\\varepsilon}} m\\}=A(f[x\\to m])$ and $m\\in B(f[x\\to m])$, which matches our definition after replacing $A(f[x\\to m])=A(f)$ and $B(f[x\\to m])=B(f)$, since $x{\\mathbin{\\#}} A$ and $x{\\mathbin{\\#}} B$.\n  \\item \\texttt{df-cleq}:\n  (This has an extra hypothesis \\texttt{ax-ext} which is already built into our model.) We want to show that $\\pi_=(A,B)(f)$ iff for all $m$, $m\\in A(f[x\\to m])\\leftrightarrow m\\in B(f[x\\to m])$. We are also assuming $x{\\mathbin{\\#}} A$ and $x{\\mathbin{\\#}} B$ in this axiom, so this reduces to $m\\in A(f)\\leftrightarrow m\\in B(f)$, or (using extensionality in the metalanguage) $A(f)=B(f)$, which is the definition of $\\pi_=(A,B)(f)$.\n\\end{itemize}\n\nThe ``true'' axioms of set theory are all phrased in terms of only $=,\\in$, and so factor straight through to axioms in ${\\langle{M,{\\mathbin{\\varepsilon}}}\\rangle}$:\n\\begin{itemize}\n  \\item \\texttt{ax-ext} (Axiom of Extensionality): The original expression is\n", "index": 19, "text": "\\[\\pi_\\to(\\pi_\\forall(z,{\\pi_\\texttt{{wb}}}(\\pi_\\in(z,x),\\pi_\\in(z,y))),\\pi_=(x,y))(f),\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex10.m1\" class=\"ltx_Math\" alttext=\"\\pi_{\\to}(\\pi_{\\forall}(z,{\\pi_{\\texttt{{wb}}}}(\\pi_{\\in}(z,x),\\pi_{\\in}(z,y))%&#10;),\\pi_{=}(x,y))(f),\" display=\"block\"><mrow><mrow><msub><mi>\u03c0</mi><mo>\u2192</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>\u03c0</mi><mo>\u2200</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>z</mi><mo>,</mo><mrow><msub><mi>\u03c0</mi><mtext>\ud835\udea0\ud835\ude8b</mtext></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>\u03c0</mi><mo>\u2208</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>z</mi><mo>,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><msub><mi>\u03c0</mi><mo>\u2208</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>z</mi><mo>,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><msub><mi>\u03c0</mi><mo>=</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": " exactly the same as the original universally quantified Metamath formula, but with ${\\mathbin{\\varepsilon}}$ in place of $\\in$ and $\\forall_M$ instead of $\\forall$. Since the other axiom expressions are long and the process is similar, I will only quote the final equivalent form after reduction.\n  \\item \\texttt{ax-pow} (Axiom of Power sets): Equivalent to:\n \n", "itemtype": "equation", "pos": -1, "prevtext": "\n  which simplifies, according to the definitions, to $\\forall_M m(m{\\mathbin{\\varepsilon}} f(x)\\leftrightarrow m{\\mathbin{\\varepsilon}} f(y))\\to f(x)=f(y)$, for all $f$. With a change of variables this is equivalent to\n", "index": 21, "text": "\\[\\forall_M x\\forall_M y\\forall_M z(z{\\mathbin{\\varepsilon}} x\\leftrightarrow z{\\mathbin{\\varepsilon}} y)\\to x=y,\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex11.m1\" class=\"ltx_Math\" alttext=\"\\forall_{M}x\\forall_{M}y\\forall_{M}z(z{\\mathbin{\\varepsilon}}x\\leftrightarrow z%&#10;{\\mathbin{\\varepsilon}}y)\\to x=y,\" display=\"block\"><mrow><msub><mo>\u2200</mo><mi>M</mi></msub><mi>x</mi><msub><mo>\u2200</mo><mi>M</mi></msub><mi>y</mi><msub><mo>\u2200</mo><mi>M</mi></msub><mi>z</mi><mrow><mo stretchy=\"false\">(</mo><mi>z</mi><mi>\u03b5</mi><mi>x</mi><mo>\u2194</mo><mi>z</mi><mi>\u03b5</mi><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2192</mo><mi>x</mi><mo>=</mo><mi>y</mi><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n  \\item \\texttt{ax-un} (Axiom of Union): Equivalent to:\n \n", "itemtype": "equation", "pos": 48787, "prevtext": " exactly the same as the original universally quantified Metamath formula, but with ${\\mathbin{\\varepsilon}}$ in place of $\\in$ and $\\forall_M$ instead of $\\forall$. Since the other axiom expressions are long and the process is similar, I will only quote the final equivalent form after reduction.\n  \\item \\texttt{ax-pow} (Axiom of Power sets): Equivalent to:\n \n", "index": 23, "text": "\\[\\forall_M x\\exists_M y\\forall_M z(\\forall_M w(w{\\mathbin{\\varepsilon}} z\\to w{\\mathbin{\\varepsilon}} x)\\to z{\\mathbin{\\varepsilon}} y)\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex12.m1\" class=\"ltx_Math\" alttext=\"\\forall_{M}x\\exists_{M}y\\forall_{M}z(\\forall_{M}w(w{\\mathbin{\\varepsilon}}z\\to&#10;w%&#10;{\\mathbin{\\varepsilon}}x)\\to z{\\mathbin{\\varepsilon}}y)\" display=\"block\"><mrow><msub><mo>\u2200</mo><mi>M</mi></msub><mi>x</mi><msub><mo>\u2203</mo><mi>M</mi></msub><mi>y</mi><msub><mo>\u2200</mo><mi>M</mi></msub><mi>z</mi><mrow><mo stretchy=\"false\">(</mo><msub><mo>\u2200</mo><mi>M</mi></msub><mi>w</mi><mrow><mo stretchy=\"false\">(</mo><mi>w</mi><mi>\u03b5</mi><mi>z</mi><mo>\u2192</mo><mi>w</mi><mi>\u03b5</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2192</mo><mi>z</mi><mi>\u03b5</mi><mi>y</mi><mo stretchy=\"false\">)</mo></mrow></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n  \\item \\texttt{ax-reg} (Axiom of Regularity): Equivalent to:\n \n", "itemtype": "equation", "pos": 48984, "prevtext": "\n  \\item \\texttt{ax-un} (Axiom of Union): Equivalent to:\n \n", "index": 25, "text": "\\[\\forall_M x\\exists_M y\\forall_M z(\\exists_M w(z{\\mathbin{\\varepsilon}} w\\land w{\\mathbin{\\varepsilon}} x)\\to z{\\mathbin{\\varepsilon}} y)\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex13.m1\" class=\"ltx_Math\" alttext=\"\\forall_{M}x\\exists_{M}y\\forall_{M}z(\\exists_{M}w(z{\\mathbin{\\varepsilon}}w%&#10;\\land w{\\mathbin{\\varepsilon}}x)\\to z{\\mathbin{\\varepsilon}}y)\" display=\"block\"><mrow><msub><mo>\u2200</mo><mi>M</mi></msub><mi>x</mi><msub><mo>\u2203</mo><mi>M</mi></msub><mi>y</mi><msub><mo>\u2200</mo><mi>M</mi></msub><mi>z</mi><mrow><mo stretchy=\"false\">(</mo><msub><mo>\u2203</mo><mi>M</mi></msub><mi>w</mi><mrow><mo stretchy=\"false\">(</mo><mi>z</mi><mi>\u03b5</mi><mi>w</mi><mo>\u2227</mo><mi>w</mi><mi>\u03b5</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2192</mo><mi>z</mi><mi>\u03b5</mi><mi>y</mi><mo stretchy=\"false\">)</mo></mrow></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n  \\item \\texttt{ax-inf} (Axiom of Infinity): Equivalent to:\n \n", "itemtype": "equation", "pos": 49189, "prevtext": "\n  \\item \\texttt{ax-reg} (Axiom of Regularity): Equivalent to:\n \n", "index": 27, "text": "\\[\\forall_M x(\\exists_M y,y{\\mathbin{\\varepsilon}} x\\to\\exists_M y(y{\\mathbin{\\varepsilon}} x\\land\\forall_M z(z{\\mathbin{\\varepsilon}} y\\to\\lnot z{\\mathbin{\\varepsilon}} x)))\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex14.m1\" class=\"ltx_Math\" alttext=\"\\forall_{M}x(\\exists_{M}y,y{\\mathbin{\\varepsilon}}x\\to\\exists_{M}y(y{\\mathbin{%&#10;\\varepsilon}}x\\land\\forall_{M}z(z{\\mathbin{\\varepsilon}}y\\to\\lnot z{\\mathbin{%&#10;\\varepsilon}}x)))\" display=\"block\"><mrow><msub><mo>\u2200</mo><mi>M</mi></msub><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><msub><mo>\u2203</mo><mi>M</mi></msub><mi>y</mi><mo>,</mo><mi>y</mi><mi>\u03b5</mi><mi>x</mi><mo>\u2192</mo><msub><mo>\u2203</mo><mi>M</mi></msub><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>y</mi><mi>\u03b5</mi><mi>x</mi><mo>\u2227</mo><msub><mo>\u2200</mo><mi>M</mi></msub><mi>z</mi><mrow><mo stretchy=\"false\">(</mo><mi>z</mi><mi>\u03b5</mi><mi>y</mi><mo>\u2192</mo><mi mathvariant=\"normal\">\u00ac</mi><mi>z</mi><mi>\u03b5</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n  \\item \\texttt{ax-ac} (Axiom of Choice): Equivalent to:\n  \n", "itemtype": "equation", "pos": 49428, "prevtext": "\n  \\item \\texttt{ax-inf} (Axiom of Infinity): Equivalent to:\n \n", "index": 29, "text": "\\[\\forall_M x\\exists_M y(x{\\mathbin{\\varepsilon}} y\\land\\forall_M z(z{\\mathbin{\\varepsilon}} y\\to\\exists_M w(z{\\mathbin{\\varepsilon}} w\\land w{\\mathbin{\\varepsilon}} y)))\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex15.m1\" class=\"ltx_Math\" alttext=\"\\forall_{M}x\\exists_{M}y(x{\\mathbin{\\varepsilon}}y\\land\\forall_{M}z(z{\\mathbin%&#10;{\\varepsilon}}y\\to\\exists_{M}w(z{\\mathbin{\\varepsilon}}w\\land w{\\mathbin{%&#10;\\varepsilon}}y)))\" display=\"block\"><mrow><msub><mo>\u2200</mo><mi>M</mi></msub><mi>x</mi><msub><mo>\u2203</mo><mi>M</mi></msub><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mi>\u03b5</mi><mi>y</mi><mo>\u2227</mo><msub><mo>\u2200</mo><mi>M</mi></msub><mi>z</mi><mrow><mo stretchy=\"false\">(</mo><mi>z</mi><mi>\u03b5</mi><mi>y</mi><mo>\u2192</mo><msub><mo>\u2203</mo><mi>M</mi></msub><mi>w</mi><mrow><mo stretchy=\"false\">(</mo><mi>z</mi><mi>\u03b5</mi><mi>w</mi><mo>\u2227</mo><mi>w</mi><mi>\u03b5</mi><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n  \\item \\texttt{ax-rep}:\n  This one is more complicated than the others because it contains a $\\mathrm{wff}$ metavariable. It is equivalent to: for all binary relations ${\\varphi}\\subseteq M^2$:\n \n", "itemtype": "equation", "pos": 49660, "prevtext": "\n  \\item \\texttt{ax-ac} (Axiom of Choice): Equivalent to:\n  \n", "index": 31, "text": "\\begin{multline*}\n  \\forall_M x\\exists_M y\\forall_M z\\forall_M w((z{\\mathbin{\\varepsilon}} w\\land w{\\mathbin{\\varepsilon}} x)\\to\\\\\\exists_M v\\forall_M u(\\exists_M t(u{\\mathbin{\\varepsilon}} w\\land w{\\mathbin{\\varepsilon}} t\\land u{\\mathbin{\\varepsilon}} t\\land t{\\mathbin{\\varepsilon}} y)\\leftrightarrow u=v))\n  \\end{multline*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"p16.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\forall_{M}x\\exists_{M}y\\forall_{M}z\\forall_{M}w((z{\\mathbin{%&#10;\\varepsilon}}w\\land w{\\mathbin{\\varepsilon}}x)\\to\\\\&#10;\\displaystyle\\exists_{M}v\\forall_{M}u(\\exists_{M}t(u{\\mathbin{\\varepsilon}}w%&#10;\\land w{\\mathbin{\\varepsilon}}t\\land u{\\mathbin{\\varepsilon}}t\\land t{\\mathbin%&#10;{\\varepsilon}}y)\\leftrightarrow u=v))\" display=\"block\"><mtable displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><mrow><msub><mo>\u2200</mo><mi>M</mi></msub><mi>x</mi><msub><mo>\u2203</mo><mi>M</mi></msub><mi>y</mi><msub><mo>\u2200</mo><mi>M</mi></msub><mi>z</mi><msub><mo>\u2200</mo><mi>M</mi></msub><mi>w</mi><mrow><mo stretchy=\"false\">(</mo><mrow><mo stretchy=\"false\">(</mo><mi>z</mi><mi>\u03b5</mi><mi>w</mi><mo>\u2227</mo><mi>w</mi><mi>\u03b5</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2192</mo></mrow></mrow></mtd></mtr><mtr><mtd columnalign=\"right\"><mrow><msub><mo>\u2203</mo><mi>M</mi></msub><mi>v</mi><msub><mo>\u2200</mo><mi>M</mi></msub><mi>u</mi><mrow><mo stretchy=\"false\">(</mo><msub><mo>\u2203</mo><mi>M</mi></msub><mi>t</mi><mrow><mo stretchy=\"false\">(</mo><mi>u</mi><mi>\u03b5</mi><mi>w</mi><mo>\u2227</mo><mi>w</mi><mi>\u03b5</mi><mi>t</mi><mo>\u2227</mo><mi>u</mi><mi>\u03b5</mi><mi>t</mi><mo>\u2227</mo><mi>t</mi><mi>\u03b5</mi><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2194</mo><mi>u</mi><mo>=</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">)</mo></mrow></mtd></mtr></mtable></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\n  To show the Metamath form of the axiom from this one, given ${\\varphi}'\\in{\\textit{\\textsf{U}}}_\\mathrm{wff}$ and $f:V\\to M$, define ${\\varphi}(w,z)\\leftrightarrow\\forall_M t,{\\varphi}'(f[w'\\to w][y'\\to t][z'\\to z])$, and apply the stated form of the axiom.\n\\end{itemize}\n\\qed\\end{proof}\n\nThus if \\textsf{ZFC} has a model, so does \\texttt{set.mm}.\n\n\\section{Applications of Metamath models}\\label{sec:application}\n\\subsection{Independence proofs}\\label{sec:independence}\nWe conclude with a few applications of the ``model'' concept. The primary application of a model is for showing that statements are not provable, because any provable statement must be true in the model. (The converse is not usually true.)  This extends to showing that a system is consistent, because any nontrivial model has unprovable statements (and in a logic containing the principle of explosion $\\vdash({\\varphi}\\to(\\lnot{\\varphi}\\to\\psi))$, this implies that there is no provable statement whose negation is also provable). But it can also be applied for independence proofs, by constructing a (necessarily nonstandard) model of all statements except the target statement.\n\nFor an easy example, if we change the definition of our model of propositional calculus so that instead $\\pi_\\lnot({\\texttt{T}})=\\pi_\\lnot({\\texttt{F}})={\\texttt{T}}$, we would have a new model that still satisfies \\texttt{ax-1}, \\texttt{ax-2}, and \\texttt{ax-mp} (because they do not involve $\\lnot$), but violates \\texttt{ax-3}. If we take $\\mu_{\\varphi}={\\texttt{F}}$ and $\\mu_\\psi={\\texttt{T}}$, we get\n\n", "itemtype": "equation", "pos": 50185, "prevtext": "\n  \\item \\texttt{ax-rep}:\n  This one is more complicated than the others because it contains a $\\mathrm{wff}$ metavariable. It is equivalent to: for all binary relations ${\\varphi}\\subseteq M^2$:\n \n", "index": 33, "text": "\\[\\forall_M w\\exists_M y\\forall_M z({\\varphi}(w,z)\\to z=y)\\to\\exists_M y\\forall_M z(z{\\mathbin{\\varepsilon}} y\\leftrightarrow\\exists_M w(w{\\mathbin{\\varepsilon}} x\\land{\\varphi}(w,z))).\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex16.m1\" class=\"ltx_Math\" alttext=\"\\forall_{M}w\\exists_{M}y\\forall_{M}z({\\varphi}(w,z)\\to z=y)\\to\\exists_{M}y%&#10;\\forall_{M}z(z{\\mathbin{\\varepsilon}}y\\leftrightarrow\\exists_{M}w(w{\\mathbin{%&#10;\\varepsilon}}x\\land{\\varphi}(w,z))).\" display=\"block\"><mrow><msub><mo>\u2200</mo><mi>M</mi></msub><mi>w</mi><msub><mo>\u2203</mo><mi>M</mi></msub><mi>y</mi><msub><mo>\u2200</mo><mi>M</mi></msub><mi>z</mi><mrow><mo stretchy=\"false\">(</mo><mi>\u03c6</mi><mrow><mo stretchy=\"false\">(</mo><mi>w</mi><mo>,</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2192</mo><mi>z</mi><mo>=</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2192</mo><msub><mo>\u2203</mo><mi>M</mi></msub><mi>y</mi><msub><mo>\u2200</mo><mi>M</mi></msub><mi>z</mi><mrow><mo stretchy=\"false\">(</mo><mi>z</mi><mi>\u03b5</mi><mi>y</mi><mo>\u2194</mo><msub><mo>\u2203</mo><mi>M</mi></msub><mi>w</mi><mrow><mo stretchy=\"false\">(</mo><mi>w</mi><mi>\u03b5</mi><mi>x</mi><mo>\u2227</mo><mi>\u03c6</mi><mrow><mo stretchy=\"false\">(</mo><mi>w</mi><mo>,</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">)</mo></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07699.tex", "nexttext": "\nso $\\eta_\\mu(\\vdash((\\lnot{\\varphi}\\to\\lnot\\psi)\\to(\\psi\\to\\phi)))$ is not defined. Thus this shows that \\texttt{ax-3} is not provable from \\texttt{ax-1}, \\texttt{ax-2}, \\texttt{ax-mp} and the syntax axioms alone (although this should not come as a surprise since none of the other axioms use the $\\lnot$ symbol).\n\n\\subsection{G\\\"{o}del's completeness theorem}\\label{sec:godel}\nOne important construction that can be done for any arbitrary (string-based) model is to use a formal system as a model of itself. This model will have the property that the theorems (with no hypotheses) are the only statements that are true in the model, leading to a form of G\\\"{o}del's completeness theorem. It is also the ``original'' model of Metamath, from which the terminology ``disjoint variable condition'' and the ``meta'' in Metamath are derived.\n\nGiven a formal system ${\\langle{{\\textit{\\textsf{CN}}},{\\textit{\\textsf{VR}}},{\\rm Type},\\Gamma}\\rangle}$, choose some set ${\\textit{\\textsf{VR}}}'$, with types for each variable, such that $\\{v\\in{\\textit{\\textsf{VR}}}'\\mid{\\rm Type}(v)=c\\}$ is infinite for each $c\\in{\\textit{\\textsf{VT}}}$. (It is possible to use ${\\textit{\\textsf{VR}}}'={\\textit{\\textsf{VR}}}$ here, provided that ${\\textit{\\textsf{VR}}}$ satisfies this condition, but it is also helpful to distinguish the two ``levels'' of variable in the contruction.) Using ${\\textit{\\textsf{CN}}}'={\\textit{\\textsf{CN}}}$, define ${\\textit{\\textsf{EX}}_C}'$ analogously with the new sets. We will call formulas in ${\\textit{\\textsf{EX}}_C}'$ the ``object level'' and those in ${\\textit{\\textsf{EX}}_C}$ the ``meta level''.\n\nWe also define a substitution $\\sigma:{\\textit{\\textsf{EX}}_C}\\to{\\textit{\\textsf{EX}}_C}'$ in the same way as \\hyperref[def:subst]{\\autoref*{sec:recap}.\\ref*{def:subst}}. Here the variables of the meta level are being substituted for expressions in the object level.\n\nWe can build another formal system at the object level, where ${\\langle{D',H',A'}\\rangle}\\in\\Gamma'$ if there is some ${\\langle{D,H,A}\\rangle}\\in\\Gamma$ and a substitution $\\sigma:{\\textit{\\textsf{EX}}_C}\\to{\\textit{\\textsf{EX}}_C}'$ such that $\\forall v\\in{\\textit{\\textsf{VR}}},\\sigma(v)\\in{\\textit{\\textsf{VR}}}'$ ($\\sigma$ substitutes variables for variables) and $\\sigma(v)\\ne\\sigma(w)$ for each $\\{v,w\\}\\in D$, and $D'={\\textit{\\textsf{DV}}}'$ (all variables are distinct), $H'=\\sigma(H)$ and $A'=\\sigma(A)$. This new formal system differs from the original one only in having a different set of variables.\n\n\\begin{theorem}\\label{thm:godmod}\nLet $A\\in{\\textit{\\textsf{U}}}_c$ if there is some theorem ${\\langle{D,\\emptyset,A}\\rangle}$ in the object level formal system with ${\\rm Type}(A)=c$, define $e{\\mathbin{\\#}} e'$ when ${\\cal V}(e)\\cap{\\cal V}(e')=\\emptyset$, and let $\\eta_\\mu$ be the unique substitution function ${\\textit{\\textsf{EX}}_C}\\to{\\textit{\\textsf{EX}}_C}'$ satisfying $\\eta_\\mu({\\textit{\\textsf{VH}}}_v)=\\mu(v)$, restricted to the $e$ such that $\\eta_\\mu(e)\\in{\\textit{\\textsf{U}}}_{{\\rm Type}(e)}$. Then ${\\langle{{\\textit{\\textsf{U}}},{\\mathbin{\\#}},\\eta}\\rangle}$ is a model for the meta level formal system ${\\langle{{\\textit{\\textsf{CN}}},{\\textit{\\textsf{VR}}},{\\rm Type},\\Gamma}\\rangle}$.\n\\end{theorem}\n\\begin{proof}\\leavevmode\n\\begin{itemize}\n  \\item The type correctness and variable application laws are true by definition, and substitution and dependence on present variables are a consequence of properties of substitutions.\n  \\item The relation ${\\mathbin{\\#}}$ is a freshness relation because the finite set $\\bigcup_{e\\in W}{\\cal V}(e)$ misses some variable in each type.\n  \\item The freshness substitution rule says that if ${\\cal V}(w)\\cap{\\cal V}(\\mu(w))=\\emptyset$ for all $w\\in{\\cal V}(e)$, then ${\\cal V}(w)\\cap{\\cal V}(\\eta_\\mu(e))=\\emptyset$, which follows from ${\\cal V}(\\eta_\\mu(e))\\subseteq \\bigcup_{w\\in{\\cal V}(e)}{\\cal V}(\\mu(w))$ which is a basic property of variables in a substitution.\n  \\item The axiom application law translates directly to the induction step of closure in \\hyperref[def:cls]{\\autoref*{sec:recap}.\\ref*{def:cls}} for the object level formal system.\n\\end{itemize}\n\\qed\\end{proof}\n\n\\begin{corollary}[G\\\"{o}del's completeness theorem]\nA statement of a formal system is a theorem iff it is true in every model.\n\\end{corollary}\n\\begin{proof}\nThe forward direction is trivial by the definition of a model. For the converse, a statement true in the model of \\autoref{thm:godmod} is derivable by definition, after a change of variables back to the meta level.\n\\qed\\end{proof}\n\n\\begin{thebibliography}{4}\n\n\\bibitem{metamath} Megill, N.: Metamath: A Computer Language for Pure Mathematics. Lulu Publishing, Morrisville, North Carolina (2007), \\url{http://us.metamath.org/downloads/metamath.pdf}\n\n\\bibitem{hofstadter} Hofstadter, D.: {\\em G\\\"{o}del, Escher, Bach}. Basic Books, Inc., New York (1979) [QA9.H63 1980].\n\\end{thebibliography}\n\n", "itemtype": "equation", "pos": 51936, "prevtext": "\n  To show the Metamath form of the axiom from this one, given ${\\varphi}'\\in{\\textit{\\textsf{U}}}_\\mathrm{wff}$ and $f:V\\to M$, define ${\\varphi}(w,z)\\leftrightarrow\\forall_M t,{\\varphi}'(f[w'\\to w][y'\\to t][z'\\to z])$, and apply the stated form of the axiom.\n\\end{itemize}\n\\qed\\end{proof}\n\nThus if \\textsf{ZFC} has a model, so does \\texttt{set.mm}.\n\n\\section{Applications of Metamath models}\\label{sec:application}\n\\subsection{Independence proofs}\\label{sec:independence}\nWe conclude with a few applications of the ``model'' concept. The primary application of a model is for showing that statements are not provable, because any provable statement must be true in the model. (The converse is not usually true.)  This extends to showing that a system is consistent, because any nontrivial model has unprovable statements (and in a logic containing the principle of explosion $\\vdash({\\varphi}\\to(\\lnot{\\varphi}\\to\\psi))$, this implies that there is no provable statement whose negation is also provable). But it can also be applied for independence proofs, by constructing a (necessarily nonstandard) model of all statements except the target statement.\n\nFor an easy example, if we change the definition of our model of propositional calculus so that instead $\\pi_\\lnot({\\texttt{T}})=\\pi_\\lnot({\\texttt{F}})={\\texttt{T}}$, we would have a new model that still satisfies \\texttt{ax-1}, \\texttt{ax-2}, and \\texttt{ax-mp} (because they do not involve $\\lnot$), but violates \\texttt{ax-3}. If we take $\\mu_{\\varphi}={\\texttt{F}}$ and $\\mu_\\psi={\\texttt{T}}$, we get\n\n", "index": 35, "text": "\\begin{align*}\n\\eta_\\mu(\\textrm{wff}\\ ((\\lnot{\\varphi}\\to\\lnot\\psi)\\to(\\psi\\to\\phi)))\n&=\\pi_\\to(\\pi_\\to( \\pi_\\lnot(\\mu_{\\varphi}),\\pi_\\lnot(\\mu_\\psi)), \\pi_\\to(\\mu_\\psi,\\mu_{\\varphi}))\\\\\n&=\\pi_\\to(\\pi_\\to({\\texttt{T}},{\\texttt{T}}), \\pi_\\to({\\texttt{T}},{\\texttt{F}}))\\\\\n&=\\pi_\\to({\\texttt{T}}, {\\texttt{F}})={\\texttt{F}},\n\\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex17.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\eta_{\\mu}(\\textrm{wff}\\ ((\\lnot{\\varphi}\\to\\lnot\\psi)\\to(\\psi\\to%&#10;\\phi)))\" display=\"inline\"><mrow><msub><mi>\u03b7</mi><mi>\u03bc</mi></msub><mrow><mo stretchy=\"false\">(</mo><mpadded width=\"+5pt\"><mtext>wff</mtext></mpadded><mrow><mo stretchy=\"false\">(</mo><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">\u00ac</mi><mi>\u03c6</mi><mo>\u2192</mo><mi mathvariant=\"normal\">\u00ac</mi><mi>\u03c8</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2192</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03c8</mi><mo>\u2192</mo><mi>\u03d5</mi><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex17.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\pi_{\\to}(\\pi_{\\to}(\\pi_{\\lnot}(\\mu_{\\varphi}),\\pi_{\\lnot}(\\mu_{%&#10;\\psi})),\\pi_{\\to}(\\mu_{\\psi},\\mu_{\\varphi}))\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><msub><mi>\u03c0</mi><mo>\u2192</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>\u03c0</mi><mo>\u2192</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>\u03c0</mi><mi mathvariant=\"normal\">\u00ac</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>\u03bc</mi><mi>\u03c6</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><msub><mi>\u03c0</mi><mi mathvariant=\"normal\">\u00ac</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>\u03bc</mi><mi>\u03c8</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><msub><mi>\u03c0</mi><mo>\u2192</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>\u03bc</mi><mi>\u03c8</mi></msub><mo>,</mo><msub><mi>\u03bc</mi><mi>\u03c6</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex18.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\pi_{\\to}(\\pi_{\\to}({\\texttt{T}},{\\texttt{T}}),\\pi_{\\to}({%&#10;\\texttt{T}},{\\texttt{F}}))\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><msub><mi>\u03c0</mi><mo>\u2192</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>\u03c0</mi><mo>\u2192</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mtext>\ud835\ude83</mtext><mo>,</mo><mtext>\ud835\ude83</mtext><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><msub><mi>\u03c0</mi><mo>\u2192</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mtext>\ud835\ude83</mtext><mo>,</mo><mtext>\ud835\ude75</mtext><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex19.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\pi_{\\to}({\\texttt{T}},{\\texttt{F}})={\\texttt{F}},\" display=\"inline\"><mrow><mrow><mi/><mo>=</mo><mrow><msub><mi>\u03c0</mi><mo>\u2192</mo></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mtext>\ud835\ude83</mtext><mo>,</mo><mtext>\ud835\ude75</mtext><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mtext>\ud835\ude75</mtext></mrow><mo>,</mo></mrow></math>", "type": "latex"}]