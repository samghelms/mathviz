[{"file": "1601.07283.tex", "nexttext": "\n\nThe polynomial nature of Reed--Solomon codes allows us to precisely characterize codewords with a prescribed set of coordinates required to be equal to 0. Formally, suppose we would like to find a vector $\\mathbf{c} \\in {\\mathsf{RS}}[n,k]$ for which ${c_{j_1} = \\cdots= c_{j_l} = 0}$. We let $t(x) = {\\prod_{j = 1}^{l}(x - \\alpha^{i_j})} = {\\sum_{i = 0}^{l} t_ix^i}$, and form the vector of coefficients of $t(x)$ as $\\mathbf{t} = (t_0, t_1, \\ldots, t_{l})$. The codeword resulting from encoding of $\\mathbf{t}$ using ${\\mathbf{G}}_\\text{RS}$ is a codeword $\\mathbf{c}$ with zeros in the desired coordinates. Indeed, $\\mathbf{t} {\\mathbf{G}}_\\text{RS}$ is the evaluation of the polynomial $t(x)$ at $\\{1, \\alpha, \\ldots, \\alpha^{n-1}\\}$. Since $t(x)$ has $\\{\\alpha^{j_1}, \\ldots, \\alpha^{j_l}\\}$ as roots, it follows that ${[\\mathbf{t} {\\mathbf{G}}_\\text{RS}]_{j_1} = \\cdots = [\\mathbf{t} {\\mathbf{G}}_\\text{RS}]_{j_l} = 0}$.\n \nWe present now the BCH bound, a fact that usually accompanies this interpretation of Reed--Solomon codes and which we'll rely on heavily in the construction presented in this paper. The BCH bound gives a lower bound on the number of nonzero coefficients of a polynomial whose roots are of a particular form.\n\n\\begin{fact}[BCH Bound]\nLet $p(x)$ be a non-zero polynomial (not divisible by $x^{q-1} - 1$) with coefficients in ${\\mathbb{F}}_q$. Suppose $p(x)$ has $t$ (cyclically) consecutive roots, i.e. $p(\\alpha^{j+1}) = \\cdots = p(\\alpha^{j+t})=0$, where $\\alpha$ is primitive in ${\\mathbb{F}}_q$. Then at least $t+1$ coefficients of $p(x)$ are non-zero.\n\\end{fact}\n\nFor a proof of the BCH bound, see e.g.,~\\cite[p.238]{McEliece}. We will use the BCH bound to show that for a polynomial $p(x)$ whose roots are $k-1$ consecutive powers of $\\alpha$, its $k$  scaled versions $\\left\\lbrace p(\\alpha^{j_l}x)\\right\\rbrace_{l = 1}^k$ are linearly independent. \n\n\\begin{lem}\n\\label{lem:BCH}\nLet $\\alpha \\in {\\mathbb{F}}_q$ be a primitive element. Let $p(x) = \\prod_{i = 0}^{k-2}(x - \\alpha^i)$ and define the scaled polynomial $p^{(j_l)}(x) = p(\\alpha^{j_l}x)$, and $k < q$. Then, the polynomials $\\left\\lbrace p^{(j_l)}(x)\\right\\rbrace_{l = 1}^{k}$ are linearly independent whenever the $j_l\\textrm{'s}$ are distinct modulo ${q-1}$.\n\\end{lem}\n\n\\begin{proof}\nLet $p(x) = \\sum_{i = 0}^{k-1}p_i x^i$. Then, we have $p^{(j_l)}(x)  =\\sum_{i = 0}^{k-1}p_i \\alpha^{j_li}x^i$.   Form a matrix $\\mathbf{P}$ where the $l^\\textrm{th}$ row is ${\\mathbf{p}_{j_l} = \\left(p_0, p_1\\alpha^{j_l}, \\ldots, p_{k-1}\\alpha^{j_l(k-1)}\\right)}$, i.e.,\n\n", "itemtype": "equation", "pos": 10451, "prevtext": "\n\\title{Balanced Reed--Solomon Codes}\n\\author{\nWael Halbawi\\thanks{Department of Electrical Engineering - California Institute of Technology - Email: \\texttt{\\{whalbawi, hassibi\\}@caltech.edu}} , \nZihan Liu\\thanks{Department of Information Engineering - The Chinese University of Hong Kong - Email: \\texttt{1155029096@link.cuhk.edu.hk}} ,\nBabak Hassibi\\footnotemark[1]}\n\\maketitle\n\n\\begin{abstract}\nWe consider the problem of constructing linear Maximum Distance Separable (MDS) error-correcting codes with generator matrices that are sparsest and balanced. In this context, sparsest means that every row has the least possible number of non-zero entries, and balanced means that every column contains the same number of non-zero entries. Codes with this structure minimize the maximal computation time of computing any code symbol, a property that is appealing to systems where computational load-balancing is critical. The problem was studied before by Dau et al. where it was shown that there always exists an MDS code over a sufficiently large field such that its generator matrix is both sparsest and balanced. However, the construction is not explicit and more importantly, the resulting MDS codes do not lend themselves to efficient error correction. With an eye towards explicit constructions with efficient decoding, we show in this paper that the generator matrix of a cyclic Reed--Solomon code of length $n$ and dimension $k$ can always be transformed to one that is both sparsest and balanced, for all parameters $n$ and $k$ where $\\frac{k}{n}(n - k + 1)$ is an integer.\n\\end{abstract}\n\n\\section{Introduction}\nWe study the problem of constructing a linear error-correcting code in which each code symbol is a function of exactly the same number of message symbols and each message symbol is encoded by the least number of code symbols, subject to the constraint that the code is Maximum Distance Separable (MDS). Furthermore, we require the code to be decodable in polynomial time. This setup is natural for applications such as distributed storage networks and wireless sensor networks. As an example, consider a distributed storage network of $n$ nodes deployed to robustly store a data file of size $k$ symbols in a way such that it can be recovered from any $k$ nodes. It is desirable to build a system in which updating a particular message symbol results in updating the data stored on a minimal number of nodes. In addition, if every storage node encodes the same number of symbols, then the maximum time required to compute the symbol stored at any node is minimized. Thus, the computation load is  balanced across the network in the sense that there are no nodes that behave as bottlenecks. Another example is that of a wireless sensor network as presented in~\\cite{Dau2013}. A network of $n$ sensors is jointly measuring $k$ parameters, where each sensor measures the same number of parameters and no parameter is measured more than required. The measurements are transmitted to a fusion center for processing, with the requirement being maximal protection against errors.\n\nOne would like to give a deterministic construction of an error-correcting code over a small field that behaves in the aforementioned way, and can be decoded efficiently. In this paper, we show how to construct cyclic Reed--Solomon codes in which each code symbol is a function of $\\frac{k}{n}(n - k + 1)$ message symbols (balanced), and each message symbol is encoded by $n - k + 1$ code symbols (sparsest). Being Reed--Solomon codes, they can be decoded efficiently and the required field size of the construction scales linearly in the blocklength.\n\n\\subsection{Prior Work}\nThe problem described earlier was first studied by Dau et al. in~\\cite{Dau2013}. In that paper, the authors introduced the concept of balanced and sparsest generator matrices for MDS error-correcting codes. A generator matrix of a length $n$ and dimension $k$ MDS code is called \\textit{sparsest} if each row contains exactly $n - k + 1$ nonzero entries. In addition, a generator matrix is called balanced if each column contains $\\left\\lceil \\frac{k}{n}(n - k + 1) \\right\\rceil$ or $\\left\\lfloor \\frac{k}{n} (n - k + 1) \\right\\rfloor$ nonzero entries. In the same paper, the authors propose an algorithm that produces a sparsest and balanced matrix ${\\mathbf{A}} \\in  \\left\\lbrace0,1\\right\\rbrace^{k \\times n}$. Using a probabilistic argument, they show (non-constructively) that there exists a choice of coefficients from a finite field that can replace the non-zero entries of ${\\mathbf{A}}$ to produce a generator matrix of a code that is MDS. The field size $q$ should satisfy $q > \\binom{n-1}{k-1}$. While such codes can be decoded in polynomial time when considered as erasure codes, very little can be said about the complexity needed to decode them from errors.\n\nThe problem of decentralized erasure codes was considered in~\\cite{Dimakis2006}. In that paper, the authors propose a randomized scheme to construct a linear MDS code that possesses an optimally sparse generator matrix ${\\mathbf{G}}$. In particular, they show that $O(\\log k)$ randomly chosen non-zero entries per row of ${\\mathbf{G}}$ is necessary and sufficient to probabilistically guarantee that the code is MDS. The analysis presented shows that this probability increases polynomially in $q$.\n\nA related problem studied in~\\cite{Blaum1999,Louidor2006,Blaum1995} is that of finding lowest-density codes that are MDS over ${\\mathbb{F}}_q^b$, an extension of ${\\mathbb{F}}_q$, but are linear over ${\\mathbb{F}}_q$. Motivated by disk arrays, the codes are systematic over ${\\mathbb{F}}_q^b$ and have sparse generator and parity check matrices over ${\\mathbb{F}}_q$. In particular, the authors of ~\\cite{Blaum1999} show that for a code of length $n$ over ${\\mathbb{F}}_q^b$, and dimension $kb$ over ${\\mathbb{F}}_q$, at least $k+1$ and $(n - k + 1)$ non-zero entries in its parity-check matrix and generator matrix (both over ${\\mathbb{F}}_q$), respectively are necessary. Furthermore, they present constructions that attain these bounds for a wide range of $n$ and $k$.\n\nLastly, the problem of constructing error-correcting codes with general support constraints on their generator matrices was studied in~\\cite{Dau2014ISIT, Dau2015JSAC} and~\\cite{Halbawi2014DRS, Halbawi2014DGC, Halbawi2015ISIT}. This line of work addresses the problem of finding codes of maximum distance possible that adhere to prescribed encoding constraints defined on a bipartite graph. In particular, a minimum distance bound was derived in~\\cite{Halbawi2015ISIT} for any systematic code adhering to the given constraints and was shown to be achievable using Reed--Solomon codes.\n\n\\section{Problem Setup}\nFormally speaking, we would like to construct a linear MDS error-correcting code of length $n$ and dimension $k$ with generator matrix $\\mathbf{G} \\in {\\mathbb{F}}_q^{k \\times n}$ that satisfies the following properties:\n\\begin{enumerate}[(P1)]\n\\item Each column of ${\\mathbf{G}}$ has exactly $\\frac{k}{n} (n - k + 1)$ non-zero entries. \\label{item:balanced}\n\\item Each row of ${\\mathbf{G}}$ has exactly $n - k  + 1$ non-zero entries. \\label{item:sparsest}\n\\item The code can be decoded in polynomial time and is constructed over ${\\mathbb{F}}_q$, where $q$ scales linearly in $n$.\n\\end{enumerate}\n\nSticking to the terminology of \\cite{Dau2013}, we call a code \\textit{balanced} if it has a generator matrix that  satisfies (P1) and \\textit{sparsest} if it satisfies (P2). A natural question to ask is whether previously known MDS codes possess generator matrices that satify properties (P\\ref{item:balanced}) and (P\\ref{item:sparsest}). In particular, Reed--Solomon codes are an appealing candidate as they are well studied and can be decoded efficiently using a plethora of decoding algorithms~\\cite{welch1986, Massey1969, Guruswami1999}.\n\nWe will show that for every $n = q - 1$, where $q$ is a prime power, and $k$ is such that $\\frac{k}{n} (n-k+1)$ is an integer, the Reed--Solomon code with defining set $\\left\\lbrace1, \\alpha, \\ldots, \\alpha^{n-1}\\right\\rbrace$ has a generator matrix that satisfies (P\\ref{item:balanced}) and (P\\ref{item:sparsest}). When in this form, we will call the code a balanced\\footnote{When the code of interest is required to be MDS, a balanced generator matrix as defined by Property (P\\ref{item:balanced}) will necessarily be sparsest, eliminating the need to explicitly mention that it possesses this characteristic.} Reed-Solomon code. We begin by formally defining Reed--Solomon codes and then present a few technical results that culminate in the main theorem of this paper.\n\n\n\n\n\n\n\n\n\n\\section{Preliminaries}\n\n\\subsection{Reed--Solomon Codes}\n\\label{sec:RS}\nThroughout this paper, we will refer to a Reed--Solomon code of length $n$ and dimension $k$ over ${\\mathbb{F}}_q$ as ${\\mathsf{RS}}[n,k]_q$. When $n = q - 1$, we simply drop the subscript $q$ and refer to the code as ${\\mathsf{RS}}[n,k]$. We will use the definition of Reed--Solomon codes as in~\\cite{Reed1960}. More precisely, ${\\mathsf{RS}}[n,k]_q$ is the the $k$-dimensional subspace of $\\mathbb{F}_q^n$ given by ${\\mathcal{C}}_\\text{RS} =\\left\\lbrace (m(\\alpha_1), \\ldots, m(\\alpha_n)):\\mathsf{deg}\\left({m(x)}\\right) < k \\right\\rbrace$, where the $m(x)$ are polynomials over ${\\mathbb{F}}_q$ of degree $\\mathsf{deg}\\left({m(x)}\\right)$, and the $\\alpha_i \\in {\\mathbb{F}}_q$ are distinct (fixed) field elements. Each message vector $\\mathbf{m} = (m_0, \\ldots, m_{k-1})$ is mapped to a message polynomial $m(x)=\\sum_{i=0}^{k-1} m_i x^i$, which is then evaluated at the $n$ elements $\\left\\lbrace \\alpha_1,\\alpha_2,\\ldots,\\alpha_n \\right\\rbrace$ of $\\mathbb{F}_q$, known as the defining set of the code. The codeword associated with $m(x)$ is $\\mathbf{c} = (m(\\alpha_1), \\ldots, m(\\alpha_n))$,  which we also call the evaluation of $m(x)$ at $\\left\\lbrace \\alpha_1,\\alpha_2,\\ldots,\\alpha_n \\right\\rbrace$. Reed--Solomon codes are MDS codes; their minimum distance attains the Singleton bound, i.e., ${d({\\mathsf{RS}}[n,k]_q) = n - k + 1}$. For brevity, we set $d = n - k + 1$.\n\nThroughout this paper, the defining set of ${\\mathsf{RS}}[n,k]$ will be chosen to be the set of consecutive powers of a primitive element $\\alpha\\in {\\mathbb{F}}_q$, i.e., $\\left\\lbrace1,\\alpha,\\ldots, \\alpha^{n-1}\\right\\rbrace$. This choice of evaluation points gives rise to a cyclic Reed--Solomon code. The generator matrix of such a code is\n\n", "index": 1, "text": "\\begin{equation}\n\\label{eqn:generator}\n{\\mathbf{G}}_{\\text{RS}} = \n\\begin{bmatrix}\n1 & 1  & \\cdots & 1\\\\\n1 & \\alpha  & \\cdots & \\alpha^{n-1}\\\\\n\\vdots & \\vdots  & \\ddots & \\vdots\\\\\n1 & \\alpha^{(k-1)}   & \\cdots & \\alpha^{(n-1)(k-1)}\n\\end{bmatrix}.\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m1\" class=\"ltx_Math\" alttext=\"{\\mathbf{G}}_{\\text{RS}}=\\begin{bmatrix}1&amp;1&amp;\\cdots&amp;1\\\\&#10;1&amp;\\alpha&amp;\\cdots&amp;\\alpha^{n-1}\\\\&#10;\\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots\\\\&#10;1&amp;\\alpha^{(k-1)}&amp;\\cdots&amp;\\alpha^{(n-1)(k-1)}\\end{bmatrix}.\" display=\"block\"><mrow><mrow><msub><mi>\ud835\udc06</mi><mtext>RS</mtext></msub><mo>=</mo><mrow><mo>[</mo><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ef</mi></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mi>\u03b1</mi></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ef</mi></mtd><mtd columnalign=\"center\"><msup><mi>\u03b1</mi><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></msup></mtd></mtr><mtr><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ee</mi></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ee</mi></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22f1</mi></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ee</mi></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><msup><mi>\u03b1</mi><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></msup></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ef</mi></mtd><mtd columnalign=\"center\"><msup><mi>\u03b1</mi><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></msup></mtd></mtr></mtable><mo>]</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07283.tex", "nexttext": "\n\nWe can write the determinant of $\\mathbf{P}$ as \n\n", "itemtype": "equation", "pos": 13265, "prevtext": "\n\nThe polynomial nature of Reed--Solomon codes allows us to precisely characterize codewords with a prescribed set of coordinates required to be equal to 0. Formally, suppose we would like to find a vector $\\mathbf{c} \\in {\\mathsf{RS}}[n,k]$ for which ${c_{j_1} = \\cdots= c_{j_l} = 0}$. We let $t(x) = {\\prod_{j = 1}^{l}(x - \\alpha^{i_j})} = {\\sum_{i = 0}^{l} t_ix^i}$, and form the vector of coefficients of $t(x)$ as $\\mathbf{t} = (t_0, t_1, \\ldots, t_{l})$. The codeword resulting from encoding of $\\mathbf{t}$ using ${\\mathbf{G}}_\\text{RS}$ is a codeword $\\mathbf{c}$ with zeros in the desired coordinates. Indeed, $\\mathbf{t} {\\mathbf{G}}_\\text{RS}$ is the evaluation of the polynomial $t(x)$ at $\\{1, \\alpha, \\ldots, \\alpha^{n-1}\\}$. Since $t(x)$ has $\\{\\alpha^{j_1}, \\ldots, \\alpha^{j_l}\\}$ as roots, it follows that ${[\\mathbf{t} {\\mathbf{G}}_\\text{RS}]_{j_1} = \\cdots = [\\mathbf{t} {\\mathbf{G}}_\\text{RS}]_{j_l} = 0}$.\n \nWe present now the BCH bound, a fact that usually accompanies this interpretation of Reed--Solomon codes and which we'll rely on heavily in the construction presented in this paper. The BCH bound gives a lower bound on the number of nonzero coefficients of a polynomial whose roots are of a particular form.\n\n\\begin{fact}[BCH Bound]\nLet $p(x)$ be a non-zero polynomial (not divisible by $x^{q-1} - 1$) with coefficients in ${\\mathbb{F}}_q$. Suppose $p(x)$ has $t$ (cyclically) consecutive roots, i.e. $p(\\alpha^{j+1}) = \\cdots = p(\\alpha^{j+t})=0$, where $\\alpha$ is primitive in ${\\mathbb{F}}_q$. Then at least $t+1$ coefficients of $p(x)$ are non-zero.\n\\end{fact}\n\nFor a proof of the BCH bound, see e.g.,~\\cite[p.238]{McEliece}. We will use the BCH bound to show that for a polynomial $p(x)$ whose roots are $k-1$ consecutive powers of $\\alpha$, its $k$  scaled versions $\\left\\lbrace p(\\alpha^{j_l}x)\\right\\rbrace_{l = 1}^k$ are linearly independent. \n\n\\begin{lem}\n\\label{lem:BCH}\nLet $\\alpha \\in {\\mathbb{F}}_q$ be a primitive element. Let $p(x) = \\prod_{i = 0}^{k-2}(x - \\alpha^i)$ and define the scaled polynomial $p^{(j_l)}(x) = p(\\alpha^{j_l}x)$, and $k < q$. Then, the polynomials $\\left\\lbrace p^{(j_l)}(x)\\right\\rbrace_{l = 1}^{k}$ are linearly independent whenever the $j_l\\textrm{'s}$ are distinct modulo ${q-1}$.\n\\end{lem}\n\n\\begin{proof}\nLet $p(x) = \\sum_{i = 0}^{k-1}p_i x^i$. Then, we have $p^{(j_l)}(x)  =\\sum_{i = 0}^{k-1}p_i \\alpha^{j_li}x^i$.   Form a matrix $\\mathbf{P}$ where the $l^\\textrm{th}$ row is ${\\mathbf{p}_{j_l} = \\left(p_0, p_1\\alpha^{j_l}, \\ldots, p_{k-1}\\alpha^{j_l(k-1)}\\right)}$, i.e.,\n\n", "index": 3, "text": "\\begin{equation*}\n\\mathbf{P} = \\begin{bmatrix}\np_0 & p_1\\alpha^{j_1} & \\cdots & p_{k-1}\\alpha^{j_1(k-1)}\\\\\n\\vdots & \\vdots & \\ddots & \\vdots\\\\\np_0 & p_1\\alpha^{j_k} & \\cdots & p_{k-1}\\alpha^{j_k(k-1)}\\\\\n\\end{bmatrix}.\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"\\mathbf{P}=\\begin{bmatrix}p_{0}&amp;p_{1}\\alpha^{j_{1}}&amp;\\cdots&amp;p_{k-1}\\alpha^{j_{1%&#10;}(k-1)}\\\\&#10;\\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots\\\\&#10;p_{0}&amp;p_{1}\\alpha^{j_{k}}&amp;\\cdots&amp;p_{k-1}\\alpha^{j_{k}(k-1)}\\\\&#10;\\end{bmatrix}.\" display=\"block\"><mrow><mrow><mi>\ud835\udc0f</mi><mo>=</mo><mrow><mo>[</mo><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"center\"><msub><mi>p</mi><mn>0</mn></msub></mtd><mtd columnalign=\"center\"><mrow><msub><mi>p</mi><mn>1</mn></msub><mo>\u2062</mo><msup><mi>\u03b1</mi><msub><mi>j</mi><mn>1</mn></msub></msup></mrow></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ef</mi></mtd><mtd columnalign=\"center\"><mrow><msub><mi>p</mi><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow></msub><mo>\u2062</mo><msup><mi>\u03b1</mi><mrow><msub><mi>j</mi><mn>1</mn></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></msup></mrow></mtd></mtr><mtr><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ee</mi></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ee</mi></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22f1</mi></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ee</mi></mtd></mtr><mtr><mtd columnalign=\"center\"><msub><mi>p</mi><mn>0</mn></msub></mtd><mtd columnalign=\"center\"><mrow><msub><mi>p</mi><mn>1</mn></msub><mo>\u2062</mo><msup><mi>\u03b1</mi><msub><mi>j</mi><mi>k</mi></msub></msup></mrow></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ef</mi></mtd><mtd columnalign=\"center\"><mrow><msub><mi>p</mi><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow></msub><mo>\u2062</mo><msup><mi>\u03b1</mi><mrow><msub><mi>j</mi><mi>k</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></msup></mrow></mtd></mtr></mtable><mo>]</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07283.tex", "nexttext": "\n\nThe matrix in the expression is a Vandermonde matrix and has a nonzero determinant if and only if $\\left\\lbrace \\alpha^{j_1}, \\ldots, \\alpha^{j_k}\\right\\rbrace$ are distinct in ${\\mathbb{F}}_q$. Indeed, this is the case when $\\alpha$ is a primitive root in ${\\mathbb{F}}_q$ and the exponents are distint modulo $q-1$. Furthermore, the BCH bound in Fact 1 guarantees that the $p_i\\text{'s}$ are all nonzero. Therefore, $\\mathbf{P}$ is a full rank matrix and the polynomials $\\left\\lbrace p^{(j_l)}(x)\\right\\rbrace_{l = 1}^{k}$ are linearly independent over ${\\mathbb{F}}_q$.\n\\end{proof}\n\nEquipped with this Lemma \\ref{lem:BCH}, we deduce that the set of codewords in ${\\mathsf{RS}}[n,k]$ that correspond to message polynomials $\\left\\lbrace p^{(j_l)}(x)\\right\\rbrace_{l = 1}^{k}$ are linearly independent. The following corollary is immediate.\n\n\\begin{clry}\n\\label{clry:BCH}\nLet $\\alpha \\in {\\mathbb{F}}_q$ be a primitive element. Let $p(x)$ and $\\left\\lbrace p^{(j_l)}(x)\\right\\rbrace_{l = 1}^{k}$ be as in Lemma \\ref{lem:BCH}, with $k < q$ and $n = q - 1$. Let $\\mathbf{c}_l$ be the evaluation of $p^{(j_l)}(x)$ at $\\left\\lbrace1, \\alpha, \\ldots, \\alpha^{n-1}\\right\\rbrace$. Then, the set of codewords $\\left\\lbrace\\mathbf{c}_l\\right\\rbrace_{l=1}^k$ spans ${\\mathsf{RS}}[n,k]$.\n\\end{clry}\n\n\n\\section{Construction}\nWe are now ready to present the main result of the paper. We will constructively prove the following theorem.\n\n\\begin{thm}\n\\label{thm:main}\nLet $n = q - 1$ where $q$ is a prime power, and $k$ is such that $\\frac{k}{n}(n-k+1)$ is an integer. Then, there exists a Reed--Solomon code ${\\mathsf{RS}}[n,k]_q$ with a generator matrix ${\\mathbf{G}}$ in which every row is has weight $n- k + 1$ and every column has weight $\\frac{k}{n}(n-k+1)$.\n\\end{thm}\n\nWe will demonstrate the proof of this theorem after presenting a lemma that is key to the construction. The underlying idea of the construction is to select a set of $k$ vectors from $\\{0,1\\}^n$, which we call codeword \\textit{masks} $\\{\\mathbf{a}_{j_1}, \\ldots, \\mathbf{a}_{j_k}\\}$, such that when stacked as rows of a matrix ${\\mathbf{A}}_{n,k}$, properties (P\\ref{item:balanced}) and (P\\ref{item:sparsest}) are satisfied. For each mask $\\mathbf{a}_{j_l}$, we select a codeword from ${\\mathsf{RS}}[n,k]$ with zeros in locations as prescribed by the support of $\\mathbf{a}_{j_l}$. As mentioned earlier, the polynomial nature of Reed--Solomon codes allows us to accomplish this easily. Once the codewords are fixed, one has to ensure that they span ${\\mathsf{RS}}[n,k]$, resulting in a generator matrix for ${\\mathsf{RS}}[n,k]$ which is both balanced and sparsest.\n\nWe start by describing the set of masks that will be used in our construction. Property (P\\ref{item:sparsest}) requires that each mask $\\mathbf{a}_i$ has $k-1$ zeros. For the case when $\\frac{k}{n}(n-k+1)$ is an integer, it turns out that restricting the codeword \\textit{masks} to those with $k-1$ cyclically consecutive zeros suffices to construct a balanced matrix ${\\mathbf{A}}_{n,k}$. Henceforth, let $\\mathbf{a}$ be a vector of length $n$ with $k-1$ (cyclically) consecutive zeros and $d = n-k+1$ (cyclically) consecutive ones. Let ${{\\mathbf{A}} \\in \\left\\lbrace0,1\\right\\rbrace^{n \\times n}}$ be the circulant matrix, denoted by $\\mathsf{circ}(\\mathbf{a})$, whose rows $\\left\\lbrace\\mathbf{a}_i\\right\\rbrace_{i = 0}^{n-1}$ are left circular shifts of $\\mathbf{a}$. In particular $\\mathbf{a}_i$ is the vector $\\mathbf{a}$ shifted $i$ times to the left. Indexing the columns of ${\\mathbf{A}}$ from $0$ to $n-1$, we choose $\\mathbf{a}$ in a way so that the $i\\text{'th}$ row $\\mathbf{a}_i$ has zeros in locations ${\\{d - i,\\ldots, d - i + k - 2\\}}$ modulo $n$.  For example, let $n = 6$ and $k = 3$, then we obtain\n\n", "itemtype": "equation", "pos": 13549, "prevtext": "\n\nWe can write the determinant of $\\mathbf{P}$ as \n\n", "index": 5, "text": "\\begin{equation*}\n\\mathsf{det}(\\mathbf{P}) = \\begin{vmatrix}\n1& \\alpha^{j_1} & \\cdots & \\alpha^{j_1(k-1)}\\\\\n\\vdots & \\vdots & \\ddots & \\vdots\\\\\n1& \\alpha^{j_k} & \\cdots & \\alpha^{j_k(k-1)}\\\\\n\\end{vmatrix}\n\\prod_{i=0}^{k-1}p_i.\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"\\mathsf{det}(\\mathbf{P})=\\begin{vmatrix}1&amp;\\alpha^{j_{1}}&amp;\\cdots&amp;\\alpha^{j_{1}(%&#10;k-1)}\\\\&#10;\\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots\\\\&#10;1&amp;\\alpha^{j_{k}}&amp;\\cdots&amp;\\alpha^{j_{k}(k-1)}\\\\&#10;\\end{vmatrix}\\prod_{i=0}^{k-1}p_{i}.\" display=\"block\"><mrow><mrow><mrow><mi>\ud835\uddbd\ud835\uddbe\ud835\uddcd</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc0f</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mrow><mo>|</mo><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><msup><mi>\u03b1</mi><msub><mi>j</mi><mn>1</mn></msub></msup></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ef</mi></mtd><mtd columnalign=\"center\"><msup><mi>\u03b1</mi><mrow><msub><mi>j</mi><mn>1</mn></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></msup></mtd></mtr><mtr><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ee</mi></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ee</mi></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22f1</mi></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ee</mi></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><msup><mi>\u03b1</mi><msub><mi>j</mi><mi>k</mi></msub></msup></mtd><mtd columnalign=\"center\"><mi mathvariant=\"normal\">\u22ef</mi></mtd><mtd columnalign=\"center\"><msup><mi>\u03b1</mi><mrow><msub><mi>j</mi><mi>k</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></msup></mtd></mtr></mtable><mo>|</mo></mrow><mo>\u2062</mo><mrow><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u220f</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow></munderover><msub><mi>p</mi><mi>i</mi></msub></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07283.tex", "nexttext": "\n\nEach row of ${\\mathbf{A}}$ corresponds to the mask of a potential codeword of the code's generator matrix as desired. However, we need to jointly select a set of $k$-subset of $\\left\\lbrace\\mathbf{a}_i\\right\\rbrace_{i = 1}^n$ so that each column of ${\\mathbf{G}}$ has weight $\\frac{k}{n}(n-k+1)$. We will now pose a linear system whose solution provides a recipe for choosing the rows of ${\\mathbf{G}}$. Let $b = \\frac{k}{n}(n- k + 1)$ and let $\\mathbf{b}$ be the all $b$ vector of length $n$. We aim to find a row vector $\\mathbf{v} \\in \\left\\lbrace0,1\\right\\rbrace^n$ of weight exactly $k$ such that the following holds,\n\n", "itemtype": "equation", "pos": 17542, "prevtext": "\n\nThe matrix in the expression is a Vandermonde matrix and has a nonzero determinant if and only if $\\left\\lbrace \\alpha^{j_1}, \\ldots, \\alpha^{j_k}\\right\\rbrace$ are distinct in ${\\mathbb{F}}_q$. Indeed, this is the case when $\\alpha$ is a primitive root in ${\\mathbb{F}}_q$ and the exponents are distint modulo $q-1$. Furthermore, the BCH bound in Fact 1 guarantees that the $p_i\\text{'s}$ are all nonzero. Therefore, $\\mathbf{P}$ is a full rank matrix and the polynomials $\\left\\lbrace p^{(j_l)}(x)\\right\\rbrace_{l = 1}^{k}$ are linearly independent over ${\\mathbb{F}}_q$.\n\\end{proof}\n\nEquipped with this Lemma \\ref{lem:BCH}, we deduce that the set of codewords in ${\\mathsf{RS}}[n,k]$ that correspond to message polynomials $\\left\\lbrace p^{(j_l)}(x)\\right\\rbrace_{l = 1}^{k}$ are linearly independent. The following corollary is immediate.\n\n\\begin{clry}\n\\label{clry:BCH}\nLet $\\alpha \\in {\\mathbb{F}}_q$ be a primitive element. Let $p(x)$ and $\\left\\lbrace p^{(j_l)}(x)\\right\\rbrace_{l = 1}^{k}$ be as in Lemma \\ref{lem:BCH}, with $k < q$ and $n = q - 1$. Let $\\mathbf{c}_l$ be the evaluation of $p^{(j_l)}(x)$ at $\\left\\lbrace1, \\alpha, \\ldots, \\alpha^{n-1}\\right\\rbrace$. Then, the set of codewords $\\left\\lbrace\\mathbf{c}_l\\right\\rbrace_{l=1}^k$ spans ${\\mathsf{RS}}[n,k]$.\n\\end{clry}\n\n\n\\section{Construction}\nWe are now ready to present the main result of the paper. We will constructively prove the following theorem.\n\n\\begin{thm}\n\\label{thm:main}\nLet $n = q - 1$ where $q$ is a prime power, and $k$ is such that $\\frac{k}{n}(n-k+1)$ is an integer. Then, there exists a Reed--Solomon code ${\\mathsf{RS}}[n,k]_q$ with a generator matrix ${\\mathbf{G}}$ in which every row is has weight $n- k + 1$ and every column has weight $\\frac{k}{n}(n-k+1)$.\n\\end{thm}\n\nWe will demonstrate the proof of this theorem after presenting a lemma that is key to the construction. The underlying idea of the construction is to select a set of $k$ vectors from $\\{0,1\\}^n$, which we call codeword \\textit{masks} $\\{\\mathbf{a}_{j_1}, \\ldots, \\mathbf{a}_{j_k}\\}$, such that when stacked as rows of a matrix ${\\mathbf{A}}_{n,k}$, properties (P\\ref{item:balanced}) and (P\\ref{item:sparsest}) are satisfied. For each mask $\\mathbf{a}_{j_l}$, we select a codeword from ${\\mathsf{RS}}[n,k]$ with zeros in locations as prescribed by the support of $\\mathbf{a}_{j_l}$. As mentioned earlier, the polynomial nature of Reed--Solomon codes allows us to accomplish this easily. Once the codewords are fixed, one has to ensure that they span ${\\mathsf{RS}}[n,k]$, resulting in a generator matrix for ${\\mathsf{RS}}[n,k]$ which is both balanced and sparsest.\n\nWe start by describing the set of masks that will be used in our construction. Property (P\\ref{item:sparsest}) requires that each mask $\\mathbf{a}_i$ has $k-1$ zeros. For the case when $\\frac{k}{n}(n-k+1)$ is an integer, it turns out that restricting the codeword \\textit{masks} to those with $k-1$ cyclically consecutive zeros suffices to construct a balanced matrix ${\\mathbf{A}}_{n,k}$. Henceforth, let $\\mathbf{a}$ be a vector of length $n$ with $k-1$ (cyclically) consecutive zeros and $d = n-k+1$ (cyclically) consecutive ones. Let ${{\\mathbf{A}} \\in \\left\\lbrace0,1\\right\\rbrace^{n \\times n}}$ be the circulant matrix, denoted by $\\mathsf{circ}(\\mathbf{a})$, whose rows $\\left\\lbrace\\mathbf{a}_i\\right\\rbrace_{i = 0}^{n-1}$ are left circular shifts of $\\mathbf{a}$. In particular $\\mathbf{a}_i$ is the vector $\\mathbf{a}$ shifted $i$ times to the left. Indexing the columns of ${\\mathbf{A}}$ from $0$ to $n-1$, we choose $\\mathbf{a}$ in a way so that the $i\\text{'th}$ row $\\mathbf{a}_i$ has zeros in locations ${\\{d - i,\\ldots, d - i + k - 2\\}}$ modulo $n$.  For example, let $n = 6$ and $k = 3$, then we obtain\n\n", "index": 7, "text": "\\begin{equation*}\n{\\mathbf{A}} = \n\\begin{bmatrix}\n1 & 1 & 1 & 1 & 0 & 0\\\\\n1 & 1 & 1 & 0 & 0 & 1\\\\\n1 & 1 & 0 & 0 & 1 & 1\\\\\n1 & 0 & 0 & 1 & 1 & 1\\\\\n0 & 0 & 1 & 1 & 1 & 1\\\\\n0 & 1 & 1 & 1 & 1 & 0\n\\end{bmatrix}.\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"{\\mathbf{A}}=\\begin{bmatrix}1&amp;1&amp;1&amp;1&amp;0&amp;0\\\\&#10;1&amp;1&amp;1&amp;0&amp;0&amp;1\\\\&#10;1&amp;1&amp;0&amp;0&amp;1&amp;1\\\\&#10;1&amp;0&amp;0&amp;1&amp;1&amp;1\\\\&#10;0&amp;0&amp;1&amp;1&amp;1&amp;1\\\\&#10;0&amp;1&amp;1&amp;1&amp;1&amp;0\\end{bmatrix}.\" display=\"block\"><mrow><mrow><mi>\ud835\udc00</mi><mo>=</mo><mrow><mo>[</mo><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr></mtable><mo>]</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07283.tex", "nexttext": "\n\nA solution $\\mathbf{v}$ dictates which codewords of $\\textsf{RS}[n,k]$ will form ${\\mathbf{G}}$. If $v_i$ is non-zero, then a codeword with mask $\\mathbf{a}_i$ is chosen as a row of ${\\mathbf{G}}$. Since $\\mathbf{v}$ is $k$-sparse, a set of exactly $k$ codewords is chosen. In our example, $\\mathbf{v} = (1,0,1,0,1,0)$ is one such vector, which selects the rows $\\left\\lbrace\\mathbf{a}_0,\\mathbf{a}_2,\\mathbf{a}_4\\right\\rbrace$. The corresponding matrix is,\n\n", "itemtype": "equation", "pos": 18389, "prevtext": "\n\nEach row of ${\\mathbf{A}}$ corresponds to the mask of a potential codeword of the code's generator matrix as desired. However, we need to jointly select a set of $k$-subset of $\\left\\lbrace\\mathbf{a}_i\\right\\rbrace_{i = 1}^n$ so that each column of ${\\mathbf{G}}$ has weight $\\frac{k}{n}(n-k+1)$. We will now pose a linear system whose solution provides a recipe for choosing the rows of ${\\mathbf{G}}$. Let $b = \\frac{k}{n}(n- k + 1)$ and let $\\mathbf{b}$ be the all $b$ vector of length $n$. We aim to find a row vector $\\mathbf{v} \\in \\left\\lbrace0,1\\right\\rbrace^n$ of weight exactly $k$ such that the following holds,\n\n", "index": 9, "text": "\\begin{equation*}\n\\mathbf{v}{\\mathbf{A}} = \\mathbf{b}.\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex4.m1\" class=\"ltx_Math\" alttext=\"\\mathbf{v}{\\mathbf{A}}=\\mathbf{b}.\" display=\"block\"><mrow><mrow><mi>\ud835\udc2f\ud835\udc00</mi><mo>=</mo><mi>\ud835\udc1b</mi></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07283.tex", "nexttext": "\n\nThis particular choice of $\\mathbf{v}$ generalizes to arbitrary $n$ and $k$ when $\\frac{k}{n}(n - k +1)$ is an integer. We present this fact formally in the following lemma.\n\n\\begin{lem}\n\\label{lem:balanced}\nLet $n,k$ be such that $b = \\frac{k}{n}(n - k + 1) \\in \\mathbb{Z}$, with $\\mathbf{b}$ being the all $b$ vector. Let $\\mathbf{a} = (1,\\ldots,1,0,\\ldots,0)$ be $d$-sparse and $\\mathbf{{\\mathbf{A}}} = \\mathsf{circ}(\\mathbf{a})$. Then a solution to $\\mathbf{v}{\\mathbf{A}} = \\mathbf{b}$ exists with $\\mathbf{v} \\in \\left\\lbrace0,1\\right\\rbrace^n$ being $k$-sparse. Furthermore, one such solution is $\\mathbf{v} = (\\mathbf{1},\\mathbf{0},\\mathbf{1},\\mathbf{0},\\ldots,\\mathbf{1},\\mathbf{0})$ where $\\mathbf{1}$ is the all-one vector of length $\\frac{k}{g}$ and $\\mathbf{0}$ is the all-zero vector of length $\\frac{d-1}{g}$, and $g = \\mathsf{gcd}(k,n)$.\n\\end{lem}\n\n\\begin{proof}\nLet $k = \\beta_k g$, $d - 1 = \\beta_d g$, and $\\beta_n = \\beta_k + \\beta_d$. Since $b = \\frac{k}{n}d =  \\frac{\\beta_k}{\\beta_d + \\beta_k}d \\in \\mathbb{Z}$ and ${\\beta_d + \\beta_k} \\nmid {\\beta_k}$, we have that $\\beta_n \\mid d$, and so $d = \\beta_n m$ for some $m$. Since ${\\mathbf{A}}$ is a circulant matrix, we have that ${\\mathbf{A}}^\\mathsf{t} = {\\mathbf{A}}$ and so the first column of ${\\mathbf{A}}$ is precisely $\\mathbf{a}^\\mathsf{t}$. Fix $\\mathbf{v}$ as in the statement of the lemma and consider the product between $\\mathbf{v}$ and $\\mathbf{a}^\\mathsf{t}$,\n\n", "itemtype": "equation", "pos": 18919, "prevtext": "\n\nA solution $\\mathbf{v}$ dictates which codewords of $\\textsf{RS}[n,k]$ will form ${\\mathbf{G}}$. If $v_i$ is non-zero, then a codeword with mask $\\mathbf{a}_i$ is chosen as a row of ${\\mathbf{G}}$. Since $\\mathbf{v}$ is $k$-sparse, a set of exactly $k$ codewords is chosen. In our example, $\\mathbf{v} = (1,0,1,0,1,0)$ is one such vector, which selects the rows $\\left\\lbrace\\mathbf{a}_0,\\mathbf{a}_2,\\mathbf{a}_4\\right\\rbrace$. The corresponding matrix is,\n\n", "index": 11, "text": "\\begin{equation*}\n\\mathbf{A}_{6,3} = \n\\begin{bmatrix}\n1 & 1 & 1 & 1 & 0 & 0\\\\\n1 & 1 & 0 & 0 & 1 & 1\\\\\n0 & 0 & 1 & 1 & 1 & 1\n\\end{bmatrix}.\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m1\" class=\"ltx_Math\" alttext=\"\\mathbf{A}_{6,3}=\\begin{bmatrix}1&amp;1&amp;1&amp;1&amp;0&amp;0\\\\&#10;1&amp;1&amp;0&amp;0&amp;1&amp;1\\\\&#10;0&amp;0&amp;1&amp;1&amp;1&amp;1\\end{bmatrix}.\" display=\"block\"><mrow><mrow><msub><mi>\ud835\udc00</mi><mrow><mn>6</mn><mo>,</mo><mn>3</mn></mrow></msub><mo>=</mo><mrow><mo>[</mo><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr></mtable><mo>]</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07283.tex", "nexttext": "\n\nwhere \\eqref{eqn:d-sparse} follows from the fact that only the first $d$ entries of  $\\mathbf{a}^\\mathsf{t}$  are non-zero. We have that $\\mathbf{v}$ is composed of an alternating sequence of $\\mathbf{1}\\text{'s}$ and $\\mathbf{0}\\text{'s}$ with lengths $\\beta_k$ and $\\beta_d$, respectively. Since $\\beta_n | d$, we deduce that the first $d$ entries of $\\mathbf{v}$ are precisely $m$ copies of $(\\mathbf{1},\\mathbf{0})$. As a result, we obtain equation \\eqref{eqn:countability}. Thus, we have that the first entry of the $\\mathbf{v}{\\mathbf{A}}$ is indeed equal to $b$.\n\nNow fix an arbitrary column $\\tilde{\\mathbf{a}}^\\mathsf{t}$ of the matrix ${\\mathbf{A}}$ where the sequence of ones starts at position $l$ and ends at $((l + d - 1))_n$, and $((\\cdot))_n$ refers to reducing the argument modulo $n$. The product between $\\mathbf{v}$ and $\\hat{\\mathbf{a}}^\\mathsf{t}$ results in\\footnote{We did not reduce the indices of the sum in \\eqref{lem:eqn:mod n} modulo $n$ to provide a more concise proof. For any index $i \\geq n$, define $v_i = v_{((i))_n}$.},\n\n", "itemtype": "equation", "pos": 20523, "prevtext": "\n\nThis particular choice of $\\mathbf{v}$ generalizes to arbitrary $n$ and $k$ when $\\frac{k}{n}(n - k +1)$ is an integer. We present this fact formally in the following lemma.\n\n\\begin{lem}\n\\label{lem:balanced}\nLet $n,k$ be such that $b = \\frac{k}{n}(n - k + 1) \\in \\mathbb{Z}$, with $\\mathbf{b}$ being the all $b$ vector. Let $\\mathbf{a} = (1,\\ldots,1,0,\\ldots,0)$ be $d$-sparse and $\\mathbf{{\\mathbf{A}}} = \\mathsf{circ}(\\mathbf{a})$. Then a solution to $\\mathbf{v}{\\mathbf{A}} = \\mathbf{b}$ exists with $\\mathbf{v} \\in \\left\\lbrace0,1\\right\\rbrace^n$ being $k$-sparse. Furthermore, one such solution is $\\mathbf{v} = (\\mathbf{1},\\mathbf{0},\\mathbf{1},\\mathbf{0},\\ldots,\\mathbf{1},\\mathbf{0})$ where $\\mathbf{1}$ is the all-one vector of length $\\frac{k}{g}$ and $\\mathbf{0}$ is the all-zero vector of length $\\frac{d-1}{g}$, and $g = \\mathsf{gcd}(k,n)$.\n\\end{lem}\n\n\\begin{proof}\nLet $k = \\beta_k g$, $d - 1 = \\beta_d g$, and $\\beta_n = \\beta_k + \\beta_d$. Since $b = \\frac{k}{n}d =  \\frac{\\beta_k}{\\beta_d + \\beta_k}d \\in \\mathbb{Z}$ and ${\\beta_d + \\beta_k} \\nmid {\\beta_k}$, we have that $\\beta_n \\mid d$, and so $d = \\beta_n m$ for some $m$. Since ${\\mathbf{A}}$ is a circulant matrix, we have that ${\\mathbf{A}}^\\mathsf{t} = {\\mathbf{A}}$ and so the first column of ${\\mathbf{A}}$ is precisely $\\mathbf{a}^\\mathsf{t}$. Fix $\\mathbf{v}$ as in the statement of the lemma and consider the product between $\\mathbf{v}$ and $\\mathbf{a}^\\mathsf{t}$,\n\n", "index": 13, "text": "\\begin{align}\n\\mathbf{v} \\cdot \\mathbf{a}^\\mathsf{t} &= \\sum_{i = 0}^{n - 1}v_ia_i \\nonumber\\\\ \n &= \\sum_{i = 0}^{d - 1} v_i \\label{eqn:d-sparse} \\\\ \n &= \\sum_{j = 1}^m \\sum_{i = 1}^{\\beta_k}1  \\label{eqn:countability} \\\\\n &= \\beta_k m  \\nonumber  \\\\\n &= \\beta_k\\frac{d}{\\beta_n} = b. \\nonumber \n\\end{align}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\mathbf{v}\\cdot\\mathbf{a}^{\\mathsf{t}}\" display=\"inline\"><mrow><mi>\ud835\udc2f</mi><mo>\u22c5</mo><msup><mi>\ud835\udc1a</mi><mi>\ud835\uddcd</mi></msup></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\sum_{i=0}^{n-1}v_{i}a_{i}\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mstyle displaystyle=\"true\"><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></munderover></mstyle><mrow><msub><mi>v</mi><mi>i</mi></msub><mo>\u2062</mo><msub><mi>a</mi><mi>i</mi></msub></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E2.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\sum_{i=0}^{d-1}v_{i}\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mstyle displaystyle=\"true\"><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow></munderover></mstyle><msub><mi>v</mi><mi>i</mi></msub></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E3.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\sum_{j=1}^{m}\\sum_{i=1}^{\\beta_{k}}1\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mstyle displaystyle=\"true\"><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover></mstyle><mrow><mstyle displaystyle=\"true\"><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><msub><mi>\u03b2</mi><mi>k</mi></msub></munderover></mstyle><mn>1</mn></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\beta_{k}m\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><msub><mi>\u03b2</mi><mi>k</mi></msub><mo>\u2062</mo><mi>m</mi></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex8.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\beta_{k}\\frac{d}{\\beta_{n}}=b.\" display=\"inline\"><mrow><mrow><mi/><mo>=</mo><mrow><msub><mi>\u03b2</mi><mi>k</mi></msub><mo>\u2062</mo><mstyle displaystyle=\"true\"><mfrac><mi>d</mi><msub><mi>\u03b2</mi><mi>n</mi></msub></mfrac></mstyle></mrow><mo>=</mo><mi>b</mi></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07283.tex", "nexttext": "\n\nSince $\\mathbf{v}$ is periodic with period $\\beta_n$, and as $\\beta_n \\mid d$, it is also periodic with period $d$. Therefore, $v_{i} = v_{((i))_d}$ for ${i \\in \\{l, \\ldots, l + d - 1\\}}$ which justifies \\eqref{lem:eqn:mod d}.  Lastly, since $\\left\\lbrace l,\\ldots, l + d - 1\\right\\rbrace$ are distinct modulo $d$, i.e. is a complete residue system modulo $d$, we can reindex the sum to run over $\\{0,\\ldots, d-1\\}$, and we know that it is equal to $b$. Since $\\tilde{\\mathbf{a}}^\\mathsf{t}$ was an arbitrary column of ${\\mathbf{A}}$, we have established that $\\mathbf{v}{\\mathbf{A}} = \\mathbf{b}$.\n\\end{proof}\n\nWe are now ready to prove the main theorem of the paper.\n\n\\begin{proof}[Proof of Theorem 1]\nFix $k$ and $n = q - 1$ such that ${b = \\frac{k}{n}(n - k + 1)}$ is an integer. Construct the matrix ${\\mathbf{A}}$ as in Lemma \\ref{lem:balanced}, which guarantees the existence of a $k$-sparse solution in $\\{0,1\\}^n$ to $\\mathbf{v}{\\mathbf{A}} = \\mathbf{b}$. As mentioned earlier, the solution $\\mathbf{v}$ is used to construct a balanced matrix ${\\mathbf{A}}_{n,k}$, and indicates which codewords from ${\\mathsf{RS}}[n,k]$ are to be selected to form the generator matrix ${\\mathbf{G}}$ which satisfies (P\\ref{item:balanced}) and (P\\ref{item:sparsest}). Let the support of $\\mathbf{v}$ be $\\{j_1,\\ldots,j_k\\}$, which implies that codewords with masks ${\\{\\mathbf{a}_{j_1},\\ldots,\\mathbf{a}_{j_k}\\}}$ are to be chosen. By construction $\\mathbf{a}_{j_l}$ has zeros in locations ${\\{d - j_l, \\ldots, d - j_l + k - 2\\}_n}$. Let ${p(x) = \\prod_{i = 0}^{k-2}(x - \\alpha^i)}$. For each mask $\\mathbf{a}_{j_l}$, form the polynomial $p^{(j_l)}(x) = p\\left(\\alpha^{-(d - j_l)}x\\right)$. We then have,\n\n", "itemtype": "equation", "pos": 21888, "prevtext": "\n\nwhere \\eqref{eqn:d-sparse} follows from the fact that only the first $d$ entries of  $\\mathbf{a}^\\mathsf{t}$  are non-zero. We have that $\\mathbf{v}$ is composed of an alternating sequence of $\\mathbf{1}\\text{'s}$ and $\\mathbf{0}\\text{'s}$ with lengths $\\beta_k$ and $\\beta_d$, respectively. Since $\\beta_n | d$, we deduce that the first $d$ entries of $\\mathbf{v}$ are precisely $m$ copies of $(\\mathbf{1},\\mathbf{0})$. As a result, we obtain equation \\eqref{eqn:countability}. Thus, we have that the first entry of the $\\mathbf{v}{\\mathbf{A}}$ is indeed equal to $b$.\n\nNow fix an arbitrary column $\\tilde{\\mathbf{a}}^\\mathsf{t}$ of the matrix ${\\mathbf{A}}$ where the sequence of ones starts at position $l$ and ends at $((l + d - 1))_n$, and $((\\cdot))_n$ refers to reducing the argument modulo $n$. The product between $\\mathbf{v}$ and $\\hat{\\mathbf{a}}^\\mathsf{t}$ results in\\footnote{We did not reduce the indices of the sum in \\eqref{lem:eqn:mod n} modulo $n$ to provide a more concise proof. For any index $i \\geq n$, define $v_i = v_{((i))_n}$.},\n\n", "index": 15, "text": "\\begin{align}\n\\mathbf{v} \\cdot \\tilde{\\mathbf{a}}^\\mathsf{t} &= \\sum_{i = l}^{l + d - 1} v_i   \\label{lem:eqn:mod n} \\\\\n&= \\sum_{i \\in \\{l, \\ldots, l + d - 1\\}_d} v_i  \\label{lem:eqn:mod d}\\\\\n&= \\sum_{i =0}^{d-1} v_i = b.  \\nonumber \n\\end{align}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E4.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\mathbf{v}\\cdot\\tilde{\\mathbf{a}}^{\\mathsf{t}}\" display=\"inline\"><mrow><mi>\ud835\udc2f</mi><mo>\u22c5</mo><msup><mover accent=\"true\"><mi>\ud835\udc1a</mi><mo stretchy=\"false\">~</mo></mover><mi>\ud835\uddcd</mi></msup></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E4.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\sum_{i=l}^{l+d-1}v_{i}\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mstyle displaystyle=\"true\"><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mrow><mrow><mi>l</mi><mo>+</mo><mi>d</mi></mrow><mo>-</mo><mn>1</mn></mrow></munderover></mstyle><msub><mi>v</mi><mi>i</mi></msub></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E5.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\sum_{i\\in\\{l,\\ldots,l+d-1\\}_{d}}v_{i}\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mstyle displaystyle=\"true\"><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>\u2208</mo><msub><mrow><mo stretchy=\"false\">{</mo><mi>l</mi><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><mrow><mrow><mi>l</mi><mo>+</mo><mi>d</mi></mrow><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">}</mo></mrow><mi>d</mi></msub></mrow></munder></mstyle><msub><mi>v</mi><mi>i</mi></msub></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex9.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\sum_{i=0}^{d-1}v_{i}=b.\" display=\"inline\"><mrow><mrow><mi/><mo>=</mo><mrow><mstyle displaystyle=\"true\"><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow></munderover></mstyle><msub><mi>v</mi><mi>i</mi></msub></mrow><mo>=</mo><mi>b</mi></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07283.tex", "nexttext": "\n\nwhere $C_{j_l}$ is a non-zero constant. Indeed, we have that $p^{(j_l)}(x)$ vanishes at $\\left\\lbrace\\alpha^{d - j_l},\\ldots,\\alpha^{d - j_l +k - 2}\\right\\rbrace$, as is evident from \\eqref{eqn:scaled_roots}. Now let ${\\mathbf{p}_{l} = (p_{l,0},\\ldots,p_{l,{k-1}})}$ be the $l^{\\text{th}}$ row of the matrix $\\mathbf{P}$. We let the generator matrix $\\mathbf{G}$ be $\\mathbf{P}\\mathbf{G}_\\text{RS}$, where $\\mathbf{G}_\\text{RS}$ is defined as in \\eqref{eqn:generator}. As described earlier, we have that the $(l,j)^\\text{th}$ entry of $\\mathbf{G}$ is equal to 0 if and only if $p^{(j_l)}(x)$ vanishes at $\\alpha^{j}$. It now follows that $\\mathbf{G}$ is sparsest and balanced as desired since it has the mask of ${\\mathbf{A}}_{n,k}$. Indeed, the matrix  $\\mathbf{P}$ is invertible by Lemma \\ref{lem:BCH} and so ${\\mathbf{G}}$ is full rank by Corollary \\ref{clry:BCH}. As a result, the dimension of the code generated by ${\\mathbf{G}}$ is $k$ and so it spans ${\\mathsf{RS}}[n,k]$.\n\\end{proof}\n\n\\section{Example}\nIn this section, we will construct a balanced and sparsest generator matrix for ${\\mathsf{RS}}[6,3]$. For these parameters, we have ${b = \\frac{k}{n}(n - k + 1) = 2}$. The matrix of potential codeword masks is\n\n", "itemtype": "equation", "pos": 23832, "prevtext": "\n\nSince $\\mathbf{v}$ is periodic with period $\\beta_n$, and as $\\beta_n \\mid d$, it is also periodic with period $d$. Therefore, $v_{i} = v_{((i))_d}$ for ${i \\in \\{l, \\ldots, l + d - 1\\}}$ which justifies \\eqref{lem:eqn:mod d}.  Lastly, since $\\left\\lbrace l,\\ldots, l + d - 1\\right\\rbrace$ are distinct modulo $d$, i.e. is a complete residue system modulo $d$, we can reindex the sum to run over $\\{0,\\ldots, d-1\\}$, and we know that it is equal to $b$. Since $\\tilde{\\mathbf{a}}^\\mathsf{t}$ was an arbitrary column of ${\\mathbf{A}}$, we have established that $\\mathbf{v}{\\mathbf{A}} = \\mathbf{b}$.\n\\end{proof}\n\nWe are now ready to prove the main theorem of the paper.\n\n\\begin{proof}[Proof of Theorem 1]\nFix $k$ and $n = q - 1$ such that ${b = \\frac{k}{n}(n - k + 1)}$ is an integer. Construct the matrix ${\\mathbf{A}}$ as in Lemma \\ref{lem:balanced}, which guarantees the existence of a $k$-sparse solution in $\\{0,1\\}^n$ to $\\mathbf{v}{\\mathbf{A}} = \\mathbf{b}$. As mentioned earlier, the solution $\\mathbf{v}$ is used to construct a balanced matrix ${\\mathbf{A}}_{n,k}$, and indicates which codewords from ${\\mathsf{RS}}[n,k]$ are to be selected to form the generator matrix ${\\mathbf{G}}$ which satisfies (P\\ref{item:balanced}) and (P\\ref{item:sparsest}). Let the support of $\\mathbf{v}$ be $\\{j_1,\\ldots,j_k\\}$, which implies that codewords with masks ${\\{\\mathbf{a}_{j_1},\\ldots,\\mathbf{a}_{j_k}\\}}$ are to be chosen. By construction $\\mathbf{a}_{j_l}$ has zeros in locations ${\\{d - j_l, \\ldots, d - j_l + k - 2\\}_n}$. Let ${p(x) = \\prod_{i = 0}^{k-2}(x - \\alpha^i)}$. For each mask $\\mathbf{a}_{j_l}$, form the polynomial $p^{(j_l)}(x) = p\\left(\\alpha^{-(d - j_l)}x\\right)$. We then have,\n\n", "index": 17, "text": "\\begin{align}\np^{(j_l)}(x) &= p\\left(\\alpha^{-(d - j_l )}x \\right) \\nonumber \\\\\n&= \\prod_{i = 0}^{k - 2} \\left(\\alpha^{-(d - j_l)}x - \\alpha^i \\right) \\nonumber \\\\\n&= C_{j_l} \\prod_{i = 0}^{k - 2} \\left(x - \\alpha^{(d - j_l + i)} \\right) \\nonumber \\\\\n&= C_{j_l} \\prod_{i = d - j_l }^{d - j_l + k - 2} \\left(x - \\alpha^{i} \\right) \\label{eqn:scaled_roots}\\\\\n&= \\sum_{i = 0}^{k-1} p_{l,i} x^i.\n\\end{align}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex10.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle p^{(j_{l})}(x)\" display=\"inline\"><mrow><msup><mi>p</mi><mrow><mo stretchy=\"false\">(</mo><msub><mi>j</mi><mi>l</mi></msub><mo stretchy=\"false\">)</mo></mrow></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex10.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=p\\left(\\alpha^{-(d-j_{l})}x\\right)\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mi>p</mi><mo>\u2062</mo><mrow><mo>(</mo><mrow><msup><mi>\u03b1</mi><mrow><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><msub><mi>j</mi><mi>l</mi></msub></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></msup><mo>\u2062</mo><mi>x</mi></mrow><mo>)</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex11.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\prod_{i=0}^{k-2}\\left(\\alpha^{-(d-j_{l})}x-\\alpha^{i}\\right)\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mstyle displaystyle=\"true\"><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u220f</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow></munderover></mstyle><mrow><mo>(</mo><mrow><mrow><msup><mi>\u03b1</mi><mrow><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><msub><mi>j</mi><mi>l</mi></msub></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></msup><mo>\u2062</mo><mi>x</mi></mrow><mo>-</mo><msup><mi>\u03b1</mi><mi>i</mi></msup></mrow><mo>)</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex12.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=C_{j_{l}}\\prod_{i=0}^{k-2}\\left(x-\\alpha^{(d-j_{l}+i)}\\right)\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><msub><mi>C</mi><msub><mi>j</mi><mi>l</mi></msub></msub><mo>\u2062</mo><mrow><mstyle displaystyle=\"true\"><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u220f</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow></munderover></mstyle><mrow><mo>(</mo><mrow><mi>x</mi><mo>-</mo><msup><mi>\u03b1</mi><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>d</mi><mo>-</mo><msub><mi>j</mi><mi>l</mi></msub></mrow><mo>+</mo><mi>i</mi></mrow><mo stretchy=\"false\">)</mo></mrow></msup></mrow><mo>)</mo></mrow></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E6.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=C_{j_{l}}\\prod_{i=d-j_{l}}^{d-j_{l}+k-2}\\left(x-\\alpha^{i}\\right)\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><msub><mi>C</mi><msub><mi>j</mi><mi>l</mi></msub></msub><mo>\u2062</mo><mrow><mstyle displaystyle=\"true\"><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u220f</mo><mrow><mi>i</mi><mo>=</mo><mrow><mi>d</mi><mo>-</mo><msub><mi>j</mi><mi>l</mi></msub></mrow></mrow><mrow><mrow><mrow><mi>d</mi><mo>-</mo><msub><mi>j</mi><mi>l</mi></msub></mrow><mo>+</mo><mi>k</mi></mrow><mo>-</mo><mn>2</mn></mrow></munderover></mstyle><mrow><mo>(</mo><mrow><mi>x</mi><mo>-</mo><msup><mi>\u03b1</mi><mi>i</mi></msup></mrow><mo>)</mo></mrow></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E7.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\sum_{i=0}^{k-1}p_{l,i}x^{i}.\" display=\"inline\"><mrow><mrow><mi/><mo>=</mo><mrow><mstyle displaystyle=\"true\"><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow></munderover></mstyle><mrow><msub><mi>p</mi><mrow><mi>l</mi><mo>,</mo><mi>i</mi></mrow></msub><mo>\u2062</mo><msup><mi>x</mi><mi>i</mi></msup></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07283.tex", "nexttext": "\n\nSince $d = 3$, $g = 3$, and $\\beta_k = \\beta_d = 1$, a $4-$sparse  solution in $\\{0,1\\}^6$ to ${\\mathbf{v}{\\mathbf{A}} =\\mathbf{b}}$ is ${\\mathbf{v} = (1,1,0,1,1,0)}$. The resulting set of masks is ${\\{\\mathbf{a}_0, \\mathbf{a}_1, \\mathbf{a}_3, \\mathbf{a}_4\\}}$ which in matrix form is given by\n\n", "itemtype": "equation", "pos": 25458, "prevtext": "\n\nwhere $C_{j_l}$ is a non-zero constant. Indeed, we have that $p^{(j_l)}(x)$ vanishes at $\\left\\lbrace\\alpha^{d - j_l},\\ldots,\\alpha^{d - j_l +k - 2}\\right\\rbrace$, as is evident from \\eqref{eqn:scaled_roots}. Now let ${\\mathbf{p}_{l} = (p_{l,0},\\ldots,p_{l,{k-1}})}$ be the $l^{\\text{th}}$ row of the matrix $\\mathbf{P}$. We let the generator matrix $\\mathbf{G}$ be $\\mathbf{P}\\mathbf{G}_\\text{RS}$, where $\\mathbf{G}_\\text{RS}$ is defined as in \\eqref{eqn:generator}. As described earlier, we have that the $(l,j)^\\text{th}$ entry of $\\mathbf{G}$ is equal to 0 if and only if $p^{(j_l)}(x)$ vanishes at $\\alpha^{j}$. It now follows that $\\mathbf{G}$ is sparsest and balanced as desired since it has the mask of ${\\mathbf{A}}_{n,k}$. Indeed, the matrix  $\\mathbf{P}$ is invertible by Lemma \\ref{lem:BCH} and so ${\\mathbf{G}}$ is full rank by Corollary \\ref{clry:BCH}. As a result, the dimension of the code generated by ${\\mathbf{G}}$ is $k$ and so it spans ${\\mathsf{RS}}[n,k]$.\n\\end{proof}\n\n\\section{Example}\nIn this section, we will construct a balanced and sparsest generator matrix for ${\\mathsf{RS}}[6,3]$. For these parameters, we have ${b = \\frac{k}{n}(n - k + 1) = 2}$. The matrix of potential codeword masks is\n\n", "index": 19, "text": "\\begin{equation*}\n{\\mathbf{A}} = \n\\begin{bmatrix}\n1 & 1 & 1 & 0 & 0 & 0\\\\\n1 & 1 & 0 & 0 & 0 & 1\\\\\n1 & 0 & 0 & 0 & 1 & 1\\\\\n0 & 0 & 0 & 1 & 1 & 1\\\\\n0 & 0 & 1 & 1 & 1 & 0\\\\\n0 & 1 & 1 & 1 & 0 & 0\n\\end{bmatrix}.\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex13.m1\" class=\"ltx_Math\" alttext=\"{\\mathbf{A}}=\\begin{bmatrix}1&amp;1&amp;1&amp;0&amp;0&amp;0\\\\&#10;1&amp;1&amp;0&amp;0&amp;0&amp;1\\\\&#10;1&amp;0&amp;0&amp;0&amp;1&amp;1\\\\&#10;0&amp;0&amp;0&amp;1&amp;1&amp;1\\\\&#10;0&amp;0&amp;1&amp;1&amp;1&amp;0\\\\&#10;0&amp;1&amp;1&amp;1&amp;0&amp;0\\end{bmatrix}.\" display=\"block\"><mrow><mrow><mi>\ud835\udc00</mi><mo>=</mo><mrow><mo>[</mo><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr></mtable><mo>]</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07283.tex", "nexttext": "\n\nNow fix $\\alpha \\in {\\mathbb{F}}_7$ to be a primitive element. For example, ${\\alpha = 3}$. The codewords to be chosen are associated with the polynomials \n\n", "itemtype": "equation", "pos": 25976, "prevtext": "\n\nSince $d = 3$, $g = 3$, and $\\beta_k = \\beta_d = 1$, a $4-$sparse  solution in $\\{0,1\\}^6$ to ${\\mathbf{v}{\\mathbf{A}} =\\mathbf{b}}$ is ${\\mathbf{v} = (1,1,0,1,1,0)}$. The resulting set of masks is ${\\{\\mathbf{a}_0, \\mathbf{a}_1, \\mathbf{a}_3, \\mathbf{a}_4\\}}$ which in matrix form is given by\n\n", "index": 21, "text": "\\begin{equation}\n{\\mathbf{A}}_{6,4} = \n\\begin{bmatrix}\n1 & 1 & 1 & 0 & 0 & 0\\\\\n1 & 1 & 0 & 0 & 0 & 1\\\\\n0 & 0 & 0 & 1 & 1 & 1\\\\\n0 & 0 & 1 & 1 & 1 & 0\\\\\n\\end{bmatrix}.\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E8.m1\" class=\"ltx_Math\" alttext=\"{\\mathbf{A}}_{6,4}=\\begin{bmatrix}1&amp;1&amp;1&amp;0&amp;0&amp;0\\\\&#10;1&amp;1&amp;0&amp;0&amp;0&amp;1\\\\&#10;0&amp;0&amp;0&amp;1&amp;1&amp;1\\\\&#10;0&amp;0&amp;1&amp;1&amp;1&amp;0\\\\&#10;\\end{bmatrix}.\" display=\"block\"><mrow><mrow><msub><mi>\ud835\udc00</mi><mrow><mn>6</mn><mo>,</mo><mn>4</mn></mrow></msub><mo>=</mo><mrow><mo>[</mo><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr></mtable><mo>]</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07283.tex", "nexttext": "\n\nThe transformation matrix $\\mathbf{P}$ resulting from this set of polynomials is given by \n\n", "itemtype": "equation", "pos": 26314, "prevtext": "\n\nNow fix $\\alpha \\in {\\mathbb{F}}_7$ to be a primitive element. For example, ${\\alpha = 3}$. The codewords to be chosen are associated with the polynomials \n\n", "index": 23, "text": "\\begin{align*}\np^{(0)}(x) &= 6(x - 6)(x - 4)(x - 5),\\\\\np^{(1)}(x) &= (x - 2)(x - 6)(x - 4),\\\\\np^{(3)}(x) &= (x - 1)(x - 3)(x - 2),\\\\\np^{(4)}(x) &= 6(x - 5)(x - 1)(x - 3).\n\\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex14.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle p^{(0)}(x)\" display=\"inline\"><mrow><msup><mi>p</mi><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex14.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=6(x-6)(x-4)(x-5),\" display=\"inline\"><mrow><mrow><mi/><mo>=</mo><mrow><mn>6</mn><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>-</mo><mn>6</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>-</mo><mn>4</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>-</mo><mn>5</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex15.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle p^{(1)}(x)\" display=\"inline\"><mrow><msup><mi>p</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex15.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=(x-2)(x-6)(x-4),\" display=\"inline\"><mrow><mrow><mi/><mo>=</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>-</mo><mn>6</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>-</mo><mn>4</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex16.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle p^{(3)}(x)\" display=\"inline\"><mrow><msup><mi>p</mi><mrow><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex16.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=(x-1)(x-3)(x-2),\" display=\"inline\"><mrow><mrow><mi/><mo>=</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>-</mo><mn>3</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex17.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle p^{(4)}(x)\" display=\"inline\"><mrow><msup><mi>p</mi><mrow><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex17.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=6(x-5)(x-1)(x-3).\" display=\"inline\"><mrow><mrow><mi/><mo>=</mo><mrow><mn>6</mn><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>-</mo><mn>5</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>-</mo><mn>3</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07283.tex", "nexttext": "\n\nFinally, the balanced and sparsest generator matrix obtained using $\\mathbf{P}$ is\n\n", "itemtype": "equation", "pos": 26590, "prevtext": "\n\nThe transformation matrix $\\mathbf{P}$ resulting from this set of polynomials is given by \n\n", "index": 25, "text": "\\begin{equation*}\n\\mathbf{P} = \n\\begin{bmatrix}\n1 & 3 & 1 & 6 \\\\\n1 & 2 & 2 & 1 \\\\\n1 & 4 & 1 & 1 \\\\\n1 & 5 & 2 & 6\n\\end{bmatrix}.\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex18.m1\" class=\"ltx_Math\" alttext=\"\\mathbf{P}=\\begin{bmatrix}1&amp;3&amp;1&amp;6\\\\&#10;1&amp;2&amp;2&amp;1\\\\&#10;1&amp;4&amp;1&amp;1\\\\&#10;1&amp;5&amp;2&amp;6\\end{bmatrix}.\" display=\"block\"><mrow><mrow><mi>\ud835\udc0f</mi><mo>=</mo><mrow><mo>[</mo><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>3</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>6</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>2</mn></mtd><mtd columnalign=\"center\"><mn>2</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>4</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mn>5</mn></mtd><mtd columnalign=\"center\"><mn>2</mn></mtd><mtd columnalign=\"center\"><mn>6</mn></mtd></mtr></mtable><mo>]</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07283.tex", "nexttext": "\n\n\\section{Discussion}\nAs mentioned, the construction presented assumes that $\\frac{k}{n}(n - k + 1)$ is an integer, which can be restrictive in certain practical scenarios. Nonetheless, one can think of a greedy algorithm based on heuristics that produces a balanced and sparsest generator matrix for any cyclic Reed--Solomon code. We are currently investigating the correctness of one particular algorithm and the results will be reported in a subsequent paper. In addition, it is desirable to relax the cyclic condition on the underlying ${\\mathsf{RS}}[n,k]_q$ to provide felixibility in choosing its defining set. Note that the technique presented in Lemma~\\ref{lem:balanced} does not assume any constraint on $n$. As a result, it can be used to find a balanced matrix ${\\mathbf{A}}_{n,k}$ for any $n$ and $k$ as long as $\\frac{k}{n}(n - k + 1)$ is an integer. The difficulty becomes evident when trying to derive an analogue of Lemma~\\ref{lem:BCH} for a polynomial with an arbitrary set of roots. While Lemma~\\ref{lem:balanced} does provide a way to construct a balanced Reed--Solomon code with required minimum distance, it does not provide any guarantee on its dimension. Furthermore, it is of particular interest to see whether the techniques presented in this paper extend too other families of known MDS codes. The construction presented here can be generalized to handle Gabidulin codes~\\cite{gabidulin1985theory}, leveraging the techniques of~\\cite{Halbawi2014DGC}. This family of codes is pertinent to error correction in network coding settings~\\cite{Silva2008} in which a balanced code construction can prove useful.\n\\section{Conclusion}\nWe have studied the problem of constructing linear MDS error-correcting codes of length $n = q - 1$ and dimension $k$ over small fields that have the sparsest possible generator matrices, and each column has exactly the same number of non-zero entries, when permitted by $k$ and $n$. In particular, we have shown that a Reed--Solomon code of the same parameters always possesses a generator matrix that is both sparsest and balanced. As a result, we do not incur any extra cost in the required field size, and the codes can be decoded using any Reed--Solomon decoder. It remains to show whether the assumption $n = q - 1$ can be lifted to determine whether non-cyclic Reed--Solomon codes, or other known MDS codes, also possess a balanced and sparsest generator matrix.\n\\bibliographystyle{IEEEtran}\n\\bibliography{IEEEabrv,library}\n\n", "itemtype": "equation", "pos": 26818, "prevtext": "\n\nFinally, the balanced and sparsest generator matrix obtained using $\\mathbf{P}$ is\n\n", "index": 27, "text": "\\begin{equation*}\n\\mathbf{G} = \n\\begin{bmatrix}\n4 & 6 & 3 & 0 & 0 & 0 \\\\\n6 & 3 & 0 & 0 & 0 & 4 \\\\\n0 & 0 & 0 & 4 & 6 & 3 \\\\\n0 & 0 & 4 & 6 & 3 & 0\n\\end{bmatrix}.\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex19.m1\" class=\"ltx_Math\" alttext=\"\\mathbf{G}=\\begin{bmatrix}4&amp;6&amp;3&amp;0&amp;0&amp;0\\\\&#10;6&amp;3&amp;0&amp;0&amp;0&amp;4\\\\&#10;0&amp;0&amp;0&amp;4&amp;6&amp;3\\\\&#10;0&amp;0&amp;4&amp;6&amp;3&amp;0\\end{bmatrix}.\" display=\"block\"><mrow><mrow><mi>\ud835\udc06</mi><mo>=</mo><mrow><mo>[</mo><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"center\"><mn>4</mn></mtd><mtd columnalign=\"center\"><mn>6</mn></mtd><mtd columnalign=\"center\"><mn>3</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>6</mn></mtd><mtd columnalign=\"center\"><mn>3</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>4</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>4</mn></mtd><mtd columnalign=\"center\"><mn>6</mn></mtd><mtd columnalign=\"center\"><mn>3</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>4</mn></mtd><mtd columnalign=\"center\"><mn>6</mn></mtd><mtd columnalign=\"center\"><mn>3</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr></mtable><mo>]</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}]