[{"file": "1601.00501.tex", "nexttext": "\nwhere $X$ and $Y$ are disjoint sets of variables nicely structured by an underlying \n\\emph{variable tree}, \n\nand the subcircuits $P_1,\\ldots,P_m$, called \\emph{primes},\\footnote{The $S_i$'s are called \\emph{subs}.} implement an exhaustive case distinction \ninto exclusive and consistent cases.\\footnote{Formally, \nthe models of $P_1,\\ldots,P_m$ partition the set of assignments of $X$ to $\\{0,1\\}$ into $m$ nonempty blocks; see Section~\\ref{sect:back}.} \n\nBinary (or Shannon) decisions in OBDDs boil down to very special sentential decisions having the form\n\n", "itemtype": "equation", "pos": 2797, "prevtext": "\n\n\\title{SDDs are Exponentially More Succinct than OBDDs}\n\n\\author{Simone Bova\\\\Technische Universit{\\\"a}t Wien\\\\ \\texttt{simone.bova@tuwien.ac.at}}\n\n\\date{}\n\n\\maketitle\n\n\\begin{abstract}\nIntroduced by Darwiche \\cite{Darwiche11}, sentential decision diagrams (SDDs) \nare essentially as tractable as ordered binary decision diagrams (OBDDs), \nbut tend to be more succinct \\emph{in practice}.  This makes SDDs a prominent representation language, \nwith many applications in artificial intelligence and knowledge compilation.\n\nWe prove that SDDs are more succinct than OBDDs  \nalso \\emph{in theory}, \nby constructing a family of boolean functions \nwhere each member has polynomial SDD size \nbut exponential OBDD size.  This \nexponential separation \nimproves a quasipolynomial separation recently established by Razgon \\cite{Razgon13}, \nand settles an open problem in knowledge compilation \\cite{Darwiche11}.\n\\end{abstract}\n\n\\section{Introduction}\n\nThe idea of \\emph{knowledge compilation}  \nis to deal with the intractability \nof certain computational tasks \non a knowledge base by compiling it \ninto a different data structure  \nwhere the tasks are feasible.  \nThe choice of the target data structure  \ninvolves an unavoidable trade-off between succinctness and tractability.\n\nDarwiche and Marquis \\cite{DarwicheM02} systematically investigated \nthis trade-off in the fundamental case where the knowledge bases are boolean functions \nand the data structures are classes of boolean circuits (\\emph{representation languages}).  \n\nIn their setting, \\emph{decomposable negation normal forms (DNNFs)} \nand \\emph{ordered binary decision diagrams (OBDDs)} \narise as benchmark  \nlanguages for succinctness and tractability respectively \\cite{Darwiche01,DarwicheM02}. \nOn the one hand, DNNFs are exponentially more succinct than OBDDs; \nmoreover, in contrast to OBDDs, they implement efficiently conjunctive normal forms \nof small treewidth \\cite{Darwiche01,RazgonP13,OztokD14,Razgon14}.  On the other hand, \nthe vast applicability of OBDDs in verification and synthesis \nrelies on the tractability of equivalence testing (speeded up by canonicity) \nand boolean combinations, which DNNFs lack \\cite{DarwicheM02}.\n\nThis gap between DNNFs (succinct but hard) and OBDDs (verbose but tractable) \nled to the quest for intermediate languages \nexponentially more succinct than, \nbut essentially as tractable as, OBDDs.  \n\nIntroduced by Darwiche \\cite{Darwiche11}, \n\\emph{sentential decision diagrams (SDDs)} \nare a most prominent candidate \nto narrow the gap between DNNFs and OBDDs.  They are designed \nby strengthening the decomposability property \\cite{PipatsrisawatD08}\nand further imposing a very strong form of determinism \\cite{PipatsrisawatD10}.  The resulting language \ncan implement decisions of the form\n\n", "index": 1, "text": "\\begin{equation}\\label{eq:sent-dec-intro}\n\\bigvee_{i=1}^m P_i(X) \\wedge S_i(Y)\\text{,} \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m1\" class=\"ltx_Math\" alttext=\"\\bigvee_{i=1}^{m}P_{i}(X)\\wedge S_{i}(Y)\\text{,}\" display=\"block\"><mrow><mrow><munderover><mo largeop=\"true\" mathsize=\"160%\" movablelimits=\"false\" stretchy=\"false\" symmetric=\"true\">\u22c1</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><msub><mi>P</mi><mi>i</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>\u2227</mo><mrow><msub><mi>S</mi><mi>i</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mtext>,</mtext></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": "\nwhere the variable $x$ is not in the variable set $Y$. \n\n\nIndeed, SDDs properly contain OBDDs, \nand hence are at least as succinct as OBDDs, \nwhile preserving tractability of all key tasks that are tractable on OBDDs.  \nFor this reason, they have been used in a variety \nof applications in artificial intelligence and probabilistic reasoning, \nas reported, for instance, by \\cite{BroeckDarwiche15,OztokDarwiche15}.\n\nNot only SDDs are as tractable as OBDDs, \nbut they also tend to be more succinct than OBDDs in practice; \nin fact, knowledge compilers often produce much smaller SDDs than OBDDs by heuristically \nleveraging the additional flexibility of variable trees in SDDs \nwith respect to variable orderings in OBDDs \\cite{ChoiD13,OztokDarwiche15}. \n\nNonetheless,  \nthe basic theoretical question about the relative succinctness of OBDDs and SDDs \nhas been open since Darwiche introduced SDDs \\cite{Darwiche11,Razgon13}:\n\\begin{quote}\n\\textit{Are SDDs exponentially more succinct than OBDDs?} \n\\end{quote}\nThe results in the literature did not even exclude the possibility for OBDDs to polynomially simulate SDDs \\cite{XueCD12}, \nuntil recently Razgon proved a quasipolynomial separation \\cite{Razgon13}.  The above question stands, \nthough, as for instance OBDDs could still quasipolynomially simulate SDDs.\n\n\\paragraph{Contribution.}   We prove in this article that \nSDDs are exponentially more succinct than OBDDs.  Thus, in particular, \nOBDDs cannot quasipolynomially simulate SDDs.  \n\nMore precisely, \n\\emph{we construct an infinite family of boolean functions such that \nevery member of the family \nhas polynomial compressed SDD size but exponential OBDD size} (Theorem~\\ref{th:exp-sep}).\n\n\\emph{Compressed} SDDs contain OBDDs,\\footnote{More precisely, compressed SDDs contain reduced OBDDs; \nsee \\cite[Definition~1.3.2]{Wegener00}.} and are regarded as a natural SDD class because of their \\emph{canonicity}: two compressed SDDs computing the same function \nare syntactically equal up to syntactic manipulations preserving polynomial size \\cite{Darwiche11}.  \nThe restriction to compressed SDDs makes our result stronger, \nbecause general SDDs are believed (despite not known) to be exponentially more succinct than compressed SDDs \\cite{BroeckDarwiche15}.\n\nWe separate compressed SDDs and OBDDs by a function, \nwhich we call the \\emph{generalized hidden weighted bit} function because, \nindeed, it contains the \\emph{hidden weighted bit} function (HWB) as a subfunction.  \nHWB is perhaps the simplest function known to be hard on OBDDs \\cite{Bryant86}:\nit computes the subsets of $\\{1,\\ldots,n\\}$ \nhaving size $i$ and containing the number $i$, \nfor $i=1,\\ldots,n$.\n\nIt turns out that HWB itself has small (uncompressed) SDDs (Theorem~\\ref{th:sdd-size}), \nwhich immediately separates SDDs and OBDDs.  The construction, \na slight variation of which gives the compressed case (Lemma~\\ref{lemma:sdd-size} and Lemma~\\ref{lemma:obdd-size}), \nis based on the following two observations.  \n\nThe first observation is that HWB \ncan be expressed \nas a sentential decision of the form (\\ref{eq:sent-dec-intro}) by distinguishing the following primes:\n\\begin{itemize}\n\\item for $i=1,\\ldots,n$, the subsets of size $i$ containing the number $i$ \n(each of these $n$ primes is taken by HWB, so their subs will be equivalent to $\\top$);\n\\item the empty subset, \nand the subsets of size $i$ not containing the number $i$ for $i=1,\\ldots,n-1$ (none of these $n$ primes is taken by HWB, \nso their subs will be equivalent to $\\bot$).\n\\end{itemize}\nThe second observation is that each of the above primes has small OBDD size under any variable ordering (Proposition~\\ref{prop:obdd-pi}).  With these two observations \nit is fairly straightforward to implement the hidden weighted bit function \nby a small (uncompressed) SDD (Theorem~\\ref{th:sdd-size}).  \n\nA direct inspection of our construction allows to straightforwardly derive \nsome facts about compression previously observed in the literature \\cite{BroeckDarwiche15}, \nnamely that the SDD size may increase exponentially either by compressing SDDs over fixed variable trees, \nor by conditioning (unboundedly many variables) over fixed variable trees (see Section~\\ref{sect:disc}).  \n\n\n\\paragraph{Organization.} The article is organized as follows.  In Section~\\ref{sect:back} \nwe present the technical background, \nculminating in the quasipolynomial separation of SDDs and OBDDs proved by Razgon \n(Theorem~\\ref{th:raz}). In Section~\\ref{sect:main}, \nwe separate (uncompressed) SDDs and OBDDs by the hidden weighted bit function (Theorem~\\ref{th:sdd-size}) \nand then modify the construction to separate compressed SDDs and OBDDs (Theorem~\\ref{th:exp-sep}).  \nWe discuss our results in Section~\\ref{sect:disc}. \n\n\\section{Background}\\label{sect:back}\n\nWe collect background notions and facts from the literature \\cite{DarwicheM02,PipatsrisawatD08,Darwiche11,Razgon13}.\n\n\\paragraph{Structured Deterministic NNFs.} \nLet $X$ be a finite set of variables.  \nLet $C$ be a boolean circuit on input variables $X$, \nbuilt using fanin $0$ constant gates (labelled by $\\bot$ or $\\top$), \nfanin $1$ negation gates (labelled by $\\neg$), \nand unbounded fanin disjunction and conjunction gates (labelled by $\\vee$ and $\\wedge$).  \nThe unique sink node (outdegree $0$) \nin the underlying directed acyclic graph (DAG) of $C$ \nis called the output gate of $C$; \nsource nodes (indegree $0$) are called input gates, \nand are labelled by constants or variables in $X$; in particular, \n$C$ is allowed to not read some of the variables in $X$, see Figure~\\ref{fig:struct} (left).\n\nA boolean circuit $C$ on variables $X$ is in \\emph{negation normal form}, in short an \\emph{NNF}, \nif the gates labelled by $\\neg$ have wires only from input gates.  Without loss of generality \nwe assume that NNFs have input gates labelled by constants or literals on variables in $X$ \n(and no internal gates labelled by $\\neg$).\n\nAs usual, an NNF $C$ on input variables $X$ computes a boolean function $f \\colon \\{0,1\\}^X \\to \\{0,1\\}$; \nin this case we also write $C \\equiv f$.  Two NNFs $C$ and $C'$ on the same input variables are equivalent \nif they compute the same boolean function; again we write $C \\equiv C'$.  \n\nThe \\emph{size} of an NNF $C$, in symbols $\\mathrm{size}(C)$, \nis the number of arcs in its underlying DAG.  \nLet $f$ be a boolean function \nand let $\\mathcal{L}$ be a class of NNFs.  \nThe \\emph{size of $f$ relative to $\\mathcal{L}$} \n(or, in short, the \\emph{$\\mathcal{L}$ size of $f$}), \ndenoted by $\\mathcal{L}(f)$, \nis equal to the minimum over the sizes of all circuits in $\\mathcal{L}$ computing $f$:\n\n", "itemtype": "equation", "pos": 3458, "prevtext": "\nwhere $X$ and $Y$ are disjoint sets of variables nicely structured by an underlying \n\\emph{variable tree}, \n\nand the subcircuits $P_1,\\ldots,P_m$, called \\emph{primes},\\footnote{The $S_i$'s are called \\emph{subs}.} implement an exhaustive case distinction \ninto exclusive and consistent cases.\\footnote{Formally, \nthe models of $P_1,\\ldots,P_m$ partition the set of assignments of $X$ to $\\{0,1\\}$ into $m$ nonempty blocks; see Section~\\ref{sect:back}.} \n\nBinary (or Shannon) decisions in OBDDs boil down to very special sentential decisions having the form\n\n", "index": 3, "text": "$$(\\neg x \\wedge S_1(Y)) \\vee (x \\wedge S_2(Y))\\text{,}$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"(\\neg x\\wedge S_{1}(Y))\\vee(x\\wedge S_{2}(Y))\\text{,}\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi mathvariant=\"normal\">\u00ac</mi><mo>\u2062</mo><mi>x</mi></mrow><mo>\u2227</mo><mrow><msub><mi>S</mi><mn>1</mn></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2228</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>\u2227</mo><mrow><msub><mi>S</mi><mn>2</mn></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mtext>,</mtext></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": "\n\n\nLet $C$ be an NNF on input variables $X$, \nand let $g$ be a gate of $C$.  \nWe denote by $C_{g}$ the subcircuit of $C$ having $g$ as its output gate, \nthat is, the circuit whose underlying DAG is \nthe subgraph of the underlying DAG of $C$ \ninduced by the nodes having a directed path to $g$ (labelled as in $C$).\n\n\\smallskip \n\nAn NNF $C$ on input variables $X$ is \\emph{deterministic} \nif, for every $\\vee$-gate $g$ in $C$, say of the form $\\bigvee_{i=1}^m g_i$, \nit holds that \n", "itemtype": "equation", "pos": 10148, "prevtext": "\nwhere the variable $x$ is not in the variable set $Y$. \n\n\nIndeed, SDDs properly contain OBDDs, \nand hence are at least as succinct as OBDDs, \nwhile preserving tractability of all key tasks that are tractable on OBDDs.  \nFor this reason, they have been used in a variety \nof applications in artificial intelligence and probabilistic reasoning, \nas reported, for instance, by \\cite{BroeckDarwiche15,OztokDarwiche15}.\n\nNot only SDDs are as tractable as OBDDs, \nbut they also tend to be more succinct than OBDDs in practice; \nin fact, knowledge compilers often produce much smaller SDDs than OBDDs by heuristically \nleveraging the additional flexibility of variable trees in SDDs \nwith respect to variable orderings in OBDDs \\cite{ChoiD13,OztokDarwiche15}. \n\nNonetheless,  \nthe basic theoretical question about the relative succinctness of OBDDs and SDDs \nhas been open since Darwiche introduced SDDs \\cite{Darwiche11,Razgon13}:\n\\begin{quote}\n\\textit{Are SDDs exponentially more succinct than OBDDs?} \n\\end{quote}\nThe results in the literature did not even exclude the possibility for OBDDs to polynomially simulate SDDs \\cite{XueCD12}, \nuntil recently Razgon proved a quasipolynomial separation \\cite{Razgon13}.  The above question stands, \nthough, as for instance OBDDs could still quasipolynomially simulate SDDs.\n\n\\paragraph{Contribution.}   We prove in this article that \nSDDs are exponentially more succinct than OBDDs.  Thus, in particular, \nOBDDs cannot quasipolynomially simulate SDDs.  \n\nMore precisely, \n\\emph{we construct an infinite family of boolean functions such that \nevery member of the family \nhas polynomial compressed SDD size but exponential OBDD size} (Theorem~\\ref{th:exp-sep}).\n\n\\emph{Compressed} SDDs contain OBDDs,\\footnote{More precisely, compressed SDDs contain reduced OBDDs; \nsee \\cite[Definition~1.3.2]{Wegener00}.} and are regarded as a natural SDD class because of their \\emph{canonicity}: two compressed SDDs computing the same function \nare syntactically equal up to syntactic manipulations preserving polynomial size \\cite{Darwiche11}.  \nThe restriction to compressed SDDs makes our result stronger, \nbecause general SDDs are believed (despite not known) to be exponentially more succinct than compressed SDDs \\cite{BroeckDarwiche15}.\n\nWe separate compressed SDDs and OBDDs by a function, \nwhich we call the \\emph{generalized hidden weighted bit} function because, \nindeed, it contains the \\emph{hidden weighted bit} function (HWB) as a subfunction.  \nHWB is perhaps the simplest function known to be hard on OBDDs \\cite{Bryant86}:\nit computes the subsets of $\\{1,\\ldots,n\\}$ \nhaving size $i$ and containing the number $i$, \nfor $i=1,\\ldots,n$.\n\nIt turns out that HWB itself has small (uncompressed) SDDs (Theorem~\\ref{th:sdd-size}), \nwhich immediately separates SDDs and OBDDs.  The construction, \na slight variation of which gives the compressed case (Lemma~\\ref{lemma:sdd-size} and Lemma~\\ref{lemma:obdd-size}), \nis based on the following two observations.  \n\nThe first observation is that HWB \ncan be expressed \nas a sentential decision of the form (\\ref{eq:sent-dec-intro}) by distinguishing the following primes:\n\\begin{itemize}\n\\item for $i=1,\\ldots,n$, the subsets of size $i$ containing the number $i$ \n(each of these $n$ primes is taken by HWB, so their subs will be equivalent to $\\top$);\n\\item the empty subset, \nand the subsets of size $i$ not containing the number $i$ for $i=1,\\ldots,n-1$ (none of these $n$ primes is taken by HWB, \nso their subs will be equivalent to $\\bot$).\n\\end{itemize}\nThe second observation is that each of the above primes has small OBDD size under any variable ordering (Proposition~\\ref{prop:obdd-pi}).  With these two observations \nit is fairly straightforward to implement the hidden weighted bit function \nby a small (uncompressed) SDD (Theorem~\\ref{th:sdd-size}).  \n\nA direct inspection of our construction allows to straightforwardly derive \nsome facts about compression previously observed in the literature \\cite{BroeckDarwiche15}, \nnamely that the SDD size may increase exponentially either by compressing SDDs over fixed variable trees, \nor by conditioning (unboundedly many variables) over fixed variable trees (see Section~\\ref{sect:disc}).  \n\n\n\\paragraph{Organization.} The article is organized as follows.  In Section~\\ref{sect:back} \nwe present the technical background, \nculminating in the quasipolynomial separation of SDDs and OBDDs proved by Razgon \n(Theorem~\\ref{th:raz}). In Section~\\ref{sect:main}, \nwe separate (uncompressed) SDDs and OBDDs by the hidden weighted bit function (Theorem~\\ref{th:sdd-size}) \nand then modify the construction to separate compressed SDDs and OBDDs (Theorem~\\ref{th:exp-sep}).  \nWe discuss our results in Section~\\ref{sect:disc}. \n\n\\section{Background}\\label{sect:back}\n\nWe collect background notions and facts from the literature \\cite{DarwicheM02,PipatsrisawatD08,Darwiche11,Razgon13}.\n\n\\paragraph{Structured Deterministic NNFs.} \nLet $X$ be a finite set of variables.  \nLet $C$ be a boolean circuit on input variables $X$, \nbuilt using fanin $0$ constant gates (labelled by $\\bot$ or $\\top$), \nfanin $1$ negation gates (labelled by $\\neg$), \nand unbounded fanin disjunction and conjunction gates (labelled by $\\vee$ and $\\wedge$).  \nThe unique sink node (outdegree $0$) \nin the underlying directed acyclic graph (DAG) of $C$ \nis called the output gate of $C$; \nsource nodes (indegree $0$) are called input gates, \nand are labelled by constants or variables in $X$; in particular, \n$C$ is allowed to not read some of the variables in $X$, see Figure~\\ref{fig:struct} (left).\n\nA boolean circuit $C$ on variables $X$ is in \\emph{negation normal form}, in short an \\emph{NNF}, \nif the gates labelled by $\\neg$ have wires only from input gates.  Without loss of generality \nwe assume that NNFs have input gates labelled by constants or literals on variables in $X$ \n(and no internal gates labelled by $\\neg$).\n\nAs usual, an NNF $C$ on input variables $X$ computes a boolean function $f \\colon \\{0,1\\}^X \\to \\{0,1\\}$; \nin this case we also write $C \\equiv f$.  Two NNFs $C$ and $C'$ on the same input variables are equivalent \nif they compute the same boolean function; again we write $C \\equiv C'$.  \n\nThe \\emph{size} of an NNF $C$, in symbols $\\mathrm{size}(C)$, \nis the number of arcs in its underlying DAG.  \nLet $f$ be a boolean function \nand let $\\mathcal{L}$ be a class of NNFs.  \nThe \\emph{size of $f$ relative to $\\mathcal{L}$} \n(or, in short, the \\emph{$\\mathcal{L}$ size of $f$}), \ndenoted by $\\mathcal{L}(f)$, \nis equal to the minimum over the sizes of all circuits in $\\mathcal{L}$ computing $f$:\n\n", "index": 5, "text": "$$\\mathcal{L}(f)=\\mathrm{min}\\{ \\mathrm{size}(C) \\colon C \\in \\mathcal{L}, C \\equiv f\\}\\text{.}$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"\\mathcal{L}(f)=\\mathrm{min}\\{\\mathrm{size}(C)\\colon C\\in\\mathcal{L},C\\equiv f%&#10;\\}\\text{.}\" display=\"block\"><mrow><mrow><mi class=\"ltx_font_mathcaligraphic\">\u2112</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mi>min</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">{</mo><mrow><mi>size</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>:</mo><mrow><mrow><mi>C</mi><mo>\u2208</mo><mi class=\"ltx_font_mathcaligraphic\">\u2112</mi></mrow><mo>,</mo><mrow><mi>C</mi><mo>\u2261</mo><mi>f</mi></mrow></mrow><mo stretchy=\"false\">}</mo></mrow><mo>\u2062</mo><mtext>.</mtext></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": " for all $1 \\leq i < j \\leq m$, \nwhere we formally regard $C_{g_i}$, $C_{g_j}$, and $\\bot$ as NNFs on input variables $X$.\nWe denote by $\\mathcal{NNF}_d$ the class of all deterministic NNFs.  \n\n\n\\smallskip \n\nLet $Y$ be a finite nonempty set of variables.  \nA \\emph{variable tree} (in short, a \\emph{vtree}) for the variable set $Y$ is a \nrooted, full, ordered, binary tree $T$ \nwhose leaves correspond bijectively to $Y$; indeed, \nwe identify each leaf in $T$ with the variable in $Y$ it corresponds to.  \n\nLet $v$ be an internal node of the vtree $T$.  We let\n$v_l$ and $v_r$ denote respectively the left and right child of $v$, \nand $T_{v}$ denote the subtree of $T$ rooted at $v$.  \nWe also let $Y_v \\subseteq Y$ denote (the variables corresponding to) the leaves \nof $T_v$; clearly $T_v$ is a vtree for the variable set $Y_v$.\n\n\\smallskip   \n\nLet $C$ be an NNF on input variables $X$, \nand let $T$ be a vtree for the variable set $Y$.  \n\nWe say that $C$ \\emph{respects $T$} if the following holds.  \nFirst, every $\\wedge$-gate $g$ in $C$ has fanin exactly $2$.  \nSecond, let $g$ be an $\\wedge$-gate in $C$ having wires from gates $h_1$ and $h_2$. \nThen there exists an internal node $v$ in $T$ such that \nthe input gates of the subcircuit $C_{h_1}$ \nmention only variables in $T_{v_l}$ \nand the input gates of the subcircuit $C_{h_2}$ \nmention only variables in $T_{v_r}$.  In this case, we also say that $g$ respects $v$.\n\nNote that, in particular, \nthe sets of variables mentioned by $C_{h_1}$ \nand $C_{h_2}$ are disjoint; it follows that $C$ is decomposable \\cite{Darwiche01}.  \nAlso note that, by definition, if an NNF reading all the variables in a set $X$\nis structured by a vtree for the variable set $Y$, \nthen $X \\subseteq Y$ and the inclusion can be strict; \nsee Figure~\\ref{fig:struct}.  This feature is crucial in our construction \n(see, for instance, the proof of Theorem~\\ref{th:sdd-size}).\n\nA \\emph{structured NNF} is an NNF respecting some vtree.  See Figure~\\ref{fig:struct}.  \nWe denote by $\\mathcal{NNF}_s$ the class of all structured NNFs.  \n\n\\begin{figure}[t!]\n\\centering\n\n\\includegraphics{example1_pspdftex}\n\\end{picture}\n\\setlength{\\unitlength}{2901sp}\n\n\\begingroup\\makeatletter\\ifx\\SetFigFont\\undefined\n\\gdef\\SetFigFont#1#2#3#4#5{\n  \\reset@font\\fontsize{#1}{#2pt}\n  \\fontfamily{#3}\\fontseries{#4}\\fontshape{#5}\n  \\selectfont}\n\\fi\\endgroup\n\\begin{picture}(4111,2018)(8858,-429)\n\\put(9805,344){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(12323,1019){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$y$}\n}}}}\n\\put(11830,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(9384,793){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\wedge$}\n}}}}\n\\put(8922,333){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(10930,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_1$}\n}}}}\n\\put(11380,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(12730,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\end{picture}\n\\caption{A circuit on input variables $\\{x_2,x_4\\}$ on the left (in the underlying DAG, \nthe edges are oriented upwards), respecting the vtree for the variable set $\\{x_1,x_2,x_3,x_4,y\\}$ on the right.  \nThe left subtree is a vtree for the variable set $\\{x_1,x_2,x_3,x_4\\}$, \nand the right subtree is a vtree for the variable set $\\{y\\}$.  \nThe $\\wedge$-gate in the circuit respects the root of the vtree.}\n\\label{fig:struct}\n\\end{figure}\n\n\n\\paragraph{SDDs and OBDDs.}  \nA \\emph{sentential decision diagram (SDD) $C$ respecting a vtree $T$}   \nis defined inductively as follows.\n\\begin{itemize}\n\\item $C$ is a single gate labelled by a literal on a variable $x$, \nand $x$ is in the variable set of $T$.\n\\item $C$ is a single gate labelled by a constant, and $T$ is any vtree.\n\\item $C$ is formed by an output gate $g$ labelled by $\\vee$, \nwith $m \\geq 2$ wires from gates $g_1,\\ldots,g_m$ labelled by $\\wedge$, \nwhere each $g_i$ has wires from two gates $p_i$ and $s_i$, that is,\n\n", "itemtype": "equation", "pos": -1, "prevtext": "\n\n\nLet $C$ be an NNF on input variables $X$, \nand let $g$ be a gate of $C$.  \nWe denote by $C_{g}$ the subcircuit of $C$ having $g$ as its output gate, \nthat is, the circuit whose underlying DAG is \nthe subgraph of the underlying DAG of $C$ \ninduced by the nodes having a directed path to $g$ (labelled as in $C$).\n\n\\smallskip \n\nAn NNF $C$ on input variables $X$ is \\emph{deterministic} \nif, for every $\\vee$-gate $g$ in $C$, say of the form $\\bigvee_{i=1}^m g_i$, \nit holds that \n", "index": 7, "text": "$$C_{g_i} \\wedge C_{g_j} \\equiv \\bot$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"C_{g_{i}}\\wedge C_{g_{j}}\\equiv\\bot\" display=\"block\"><mrow><mrow><msub><mi>C</mi><msub><mi>g</mi><mi>i</mi></msub></msub><mo>\u2227</mo><msub><mi>C</mi><msub><mi>g</mi><mi>j</mi></msub></msub></mrow><mo>\u2261</mo><mo>\u22a5</mo></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": "\nsuch that for some internal node $v$ of $T$ the following holds ($i=1,\\ldots,m$):\n\\begin{description}\n\\item[{\\bf(S1)}] $C_{p_i}$ is an SDD respecting a subtree of $T_{v_l}$.\n\\item[{\\bf(S2)}]  $C_{s_i}$ is an SDD respecting a subtree of $T_{v_r}$.\n\\item[{\\bf(S3)}] $C_{p_i} \\not\\equiv \\bot$.\n\\item[{\\bf(S4)}] $C_{p_i} \\wedge C_{p_j} \\equiv \\bot$ ($1 \\leq i<j \\leq m$).\n\\item[{\\bf(S5)}] $\\bigvee_{i=1}^m C_{p_i} \\equiv \\top$. \n\\end{description}\n\\end{itemize}\nIn the equivalences in (S3)-(S5), we formally regard the $C_{p_i}$'s, $\\bot$ and $\\top$ \nas NNFs on variables $Y_{v_l}$.  In words, conditions (S3)-(S5) say that \nthe $C_{p_i}$'s define a partition of $\\{0,1\\}^{Y_{v_l}}$ \ninto $m$ nonempty blocks, where the $i$th block contains exactly \nthe models of $C_{p_i}$ ($i=1,\\ldots,m$).\n\nAn SDD is an SDD respecting some vtree.  We let $\\mathcal{SDD}$ \ndenote the class of all SDDs.\n\nAn SDD $C$ is called \\emph{compressed} if the following holds.  \nLet $h$ be an $\\vee$-gate of $C$, \nso that $h=\\bigvee_{i=1}^{m'} C_{p'_i} \\wedge C_{s'_i}$ specified as in \n(\\ref{eq:or-node}) relative to some node $v'$ in $T$. Then\n\\begin{description}\n\\item[{\\bf(C)}] $C_{s'_i} \\not\\equiv C_{s'_j}$ ($1 \\leq i<j \\leq m'$),\n\\end{description}\nwhere we formally regard $C_{s'_i}$ as an NNF on variables $Y_{v'_r}$ for $i=1,\\ldots,m'$.  \nWe let $\\mathcal{SDD}_c$ denote the class of all compressed SDDs.\n\n\n\\smallskip\nAn \\emph{ordered binary decision diagram (OBDD)} is a compressed SDD \nrespecting a \\emph{right-linear} vtree $T$ (that is, \nwhere each left child is a leaf); see Figure~\\ref{fig:right-linear-tree}.  \nWe let $\\mathcal{OBDD}$ denote the class of all OBDDs.\\footnote{Reduced OBDDs as usually defined in the literature \\cite[Definition~1.3.2]{Wegener00} \nare indeed compressed SDD respecting right-linear vtrees \\cite[Section~6]{Darwiche11}.}\n\n\\begin{figure}[t!]\n\\centering\n\n\\includegraphics{example2_pspdftex}\n\\end{picture}\n\\setlength{\\unitlength}{2901sp}\n\n\\begingroup\\makeatletter\\ifx\\SetFigFont\\undefined\n\\gdef\\SetFigFont#1#2#3#4#5{\n  \\reset@font\\fontsize{#1}{#2pt}\n  \\fontfamily{#3}\\fontseries{#4}\\fontshape{#5}\n  \\selectfont}\n\\fi\\endgroup\n\\begin{picture}(2086,1568)(10883,-429)\n\\put(11830,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(10930,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_1$}\n}}}}\n\\put(11380,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(12730,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\end{picture}\n\n\\caption{A right-linear vtree; its left first traversal induces the variable ordering $x_1<x_2<x_3<x_4$.}\n\\label{fig:right-linear-tree}\n\\end{figure}\n\n\nLet $C$ be an OBDD respecting a vtree $T$, \nand let $\\sigma=x_1<\\cdots<x_n$ be the variable ordering \ninduced by a left first traversal of $T$; in this case, \nwe also say that $C$ respects $\\sigma$.  \nFor an ordering $\\sigma$ of a set of variables, \nwe let $\\mathcal{OBDD}_\\sigma$ denote the class of all OBDDs respecting $\\sigma$.\n\n \n\\paragraph{Quasipolynomial Separation.} It follows from the definitions that \n\n", "itemtype": "equation", "pos": 15189, "prevtext": " for all $1 \\leq i < j \\leq m$, \nwhere we formally regard $C_{g_i}$, $C_{g_j}$, and $\\bot$ as NNFs on input variables $X$.\nWe denote by $\\mathcal{NNF}_d$ the class of all deterministic NNFs.  \n\n\n\\smallskip \n\nLet $Y$ be a finite nonempty set of variables.  \nA \\emph{variable tree} (in short, a \\emph{vtree}) for the variable set $Y$ is a \nrooted, full, ordered, binary tree $T$ \nwhose leaves correspond bijectively to $Y$; indeed, \nwe identify each leaf in $T$ with the variable in $Y$ it corresponds to.  \n\nLet $v$ be an internal node of the vtree $T$.  We let\n$v_l$ and $v_r$ denote respectively the left and right child of $v$, \nand $T_{v}$ denote the subtree of $T$ rooted at $v$.  \nWe also let $Y_v \\subseteq Y$ denote (the variables corresponding to) the leaves \nof $T_v$; clearly $T_v$ is a vtree for the variable set $Y_v$.\n\n\\smallskip   \n\nLet $C$ be an NNF on input variables $X$, \nand let $T$ be a vtree for the variable set $Y$.  \n\nWe say that $C$ \\emph{respects $T$} if the following holds.  \nFirst, every $\\wedge$-gate $g$ in $C$ has fanin exactly $2$.  \nSecond, let $g$ be an $\\wedge$-gate in $C$ having wires from gates $h_1$ and $h_2$. \nThen there exists an internal node $v$ in $T$ such that \nthe input gates of the subcircuit $C_{h_1}$ \nmention only variables in $T_{v_l}$ \nand the input gates of the subcircuit $C_{h_2}$ \nmention only variables in $T_{v_r}$.  In this case, we also say that $g$ respects $v$.\n\nNote that, in particular, \nthe sets of variables mentioned by $C_{h_1}$ \nand $C_{h_2}$ are disjoint; it follows that $C$ is decomposable \\cite{Darwiche01}.  \nAlso note that, by definition, if an NNF reading all the variables in a set $X$\nis structured by a vtree for the variable set $Y$, \nthen $X \\subseteq Y$ and the inclusion can be strict; \nsee Figure~\\ref{fig:struct}.  This feature is crucial in our construction \n(see, for instance, the proof of Theorem~\\ref{th:sdd-size}).\n\nA \\emph{structured NNF} is an NNF respecting some vtree.  See Figure~\\ref{fig:struct}.  \nWe denote by $\\mathcal{NNF}_s$ the class of all structured NNFs.  \n\n\\begin{figure}[t!]\n\\centering\n\n\\includegraphics{example1_pspdftex}\n\\end{picture}\n\\setlength{\\unitlength}{2901sp}\n\n\\begingroup\\makeatletter\\ifx\\SetFigFont\\undefined\n\\gdef\\SetFigFont#1#2#3#4#5{\n  \\reset@font\\fontsize{#1}{#2pt}\n  \\fontfamily{#3}\\fontseries{#4}\\fontshape{#5}\n  \\selectfont}\n\\fi\\endgroup\n\\begin{picture}(4111,2018)(8858,-429)\n\\put(9805,344){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(12323,1019){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$y$}\n}}}}\n\\put(11830,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(9384,793){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\wedge$}\n}}}}\n\\put(8922,333){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(10930,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_1$}\n}}}}\n\\put(11380,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(12730,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\end{picture}\n\\caption{A circuit on input variables $\\{x_2,x_4\\}$ on the left (in the underlying DAG, \nthe edges are oriented upwards), respecting the vtree for the variable set $\\{x_1,x_2,x_3,x_4,y\\}$ on the right.  \nThe left subtree is a vtree for the variable set $\\{x_1,x_2,x_3,x_4\\}$, \nand the right subtree is a vtree for the variable set $\\{y\\}$.  \nThe $\\wedge$-gate in the circuit respects the root of the vtree.}\n\\label{fig:struct}\n\\end{figure}\n\n\n\\paragraph{SDDs and OBDDs.}  \nA \\emph{sentential decision diagram (SDD) $C$ respecting a vtree $T$}   \nis defined inductively as follows.\n\\begin{itemize}\n\\item $C$ is a single gate labelled by a literal on a variable $x$, \nand $x$ is in the variable set of $T$.\n\\item $C$ is a single gate labelled by a constant, and $T$ is any vtree.\n\\item $C$ is formed by an output gate $g$ labelled by $\\vee$, \nwith $m \\geq 2$ wires from gates $g_1,\\ldots,g_m$ labelled by $\\wedge$, \nwhere each $g_i$ has wires from two gates $p_i$ and $s_i$, that is,\n\n", "index": 9, "text": "\\begin{equation}\\label{eq:or-node}\nC=\\bigvee_{i=1}^m C_{p_i} \\wedge C_{s_i}\\text{,} \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E2.m1\" class=\"ltx_Math\" alttext=\"C=\\bigvee_{i=1}^{m}C_{p_{i}}\\wedge C_{s_{i}}\\text{,}\" display=\"block\"><mrow><mi>C</mi><mo>=</mo><mrow><mrow><munderover><mo largeop=\"true\" mathsize=\"160%\" movablelimits=\"false\" stretchy=\"false\" symmetric=\"true\">\u22c1</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msub><mi>C</mi><msub><mi>p</mi><mi>i</mi></msub></msub></mrow><mo>\u2227</mo><mrow><msub><mi>C</mi><msub><mi>s</mi><mi>i</mi></msub></msub><mo>\u2062</mo><mtext>,</mtext></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": "\nwhich raises the natural question how OBDDs and SDDs \nare related in succinctness; indeed, the quest for the relative succinctness of \nOBDDs and SDDs has been an open problem in knowledge compilation since \nDarwiche introduced SDDs \\cite{Darwiche11}.  \n\nRecently, Razgon \\cite[Corollary~3]{Razgon13} has  \nestablished a \\emph{quasipolynomial separation} of OBDDs from compressed SDDs.\n\n\\begin{theorem}[Razgon]\\label{th:raz}\nThere exists an unbounded arity class of boolean functions $\\mathcal{F}$ \nsuch that every arity $n$ function $f \\in \\mathcal{F}$ has $\\mathcal{SDD}_c$ size in $O(n^3)$ \nand $\\mathcal{OBDD}$ size in $n^{\\Omega(\\log n)}$.\n\\end{theorem}\n\nWe remark that the restriction to compressed SDDs in the above statement is nontrivial; \nto the best of our knowledge, compressed SDDs \nmight be exponentially more succinct than uncompressed SDDs \\cite{BroeckDarwiche15}; \nsee also the discussion in Section~\\ref{sect:disc}.\n\n\n\\section{Exponential Separation}\\label{sect:main}\n\nThe quasipolynomial separation stated in Theorem~\\ref{th:raz}  \nimplies that OBDDs do not simulate SDDs in polynomial size, \nbut leaves open the possibility for OBDDs to simulate SDDs in quasipolynomial size.  \nIn this section  \nwe exclude this possibility by establishing \nan \\emph{exponential separation}\nof OBDDs from compressed SDDs.\n\n\\paragraph{Hidden Weighted Bit.} The separation is obtained by (a variant of) the \\emph{hidden weighted bit} function \n\n", "itemtype": "equation", "pos": 18558, "prevtext": "\nsuch that for some internal node $v$ of $T$ the following holds ($i=1,\\ldots,m$):\n\\begin{description}\n\\item[{\\bf(S1)}] $C_{p_i}$ is an SDD respecting a subtree of $T_{v_l}$.\n\\item[{\\bf(S2)}]  $C_{s_i}$ is an SDD respecting a subtree of $T_{v_r}$.\n\\item[{\\bf(S3)}] $C_{p_i} \\not\\equiv \\bot$.\n\\item[{\\bf(S4)}] $C_{p_i} \\wedge C_{p_j} \\equiv \\bot$ ($1 \\leq i<j \\leq m$).\n\\item[{\\bf(S5)}] $\\bigvee_{i=1}^m C_{p_i} \\equiv \\top$. \n\\end{description}\n\\end{itemize}\nIn the equivalences in (S3)-(S5), we formally regard the $C_{p_i}$'s, $\\bot$ and $\\top$ \nas NNFs on variables $Y_{v_l}$.  In words, conditions (S3)-(S5) say that \nthe $C_{p_i}$'s define a partition of $\\{0,1\\}^{Y_{v_l}}$ \ninto $m$ nonempty blocks, where the $i$th block contains exactly \nthe models of $C_{p_i}$ ($i=1,\\ldots,m$).\n\nAn SDD is an SDD respecting some vtree.  We let $\\mathcal{SDD}$ \ndenote the class of all SDDs.\n\nAn SDD $C$ is called \\emph{compressed} if the following holds.  \nLet $h$ be an $\\vee$-gate of $C$, \nso that $h=\\bigvee_{i=1}^{m'} C_{p'_i} \\wedge C_{s'_i}$ specified as in \n(\\ref{eq:or-node}) relative to some node $v'$ in $T$. Then\n\\begin{description}\n\\item[{\\bf(C)}] $C_{s'_i} \\not\\equiv C_{s'_j}$ ($1 \\leq i<j \\leq m'$),\n\\end{description}\nwhere we formally regard $C_{s'_i}$ as an NNF on variables $Y_{v'_r}$ for $i=1,\\ldots,m'$.  \nWe let $\\mathcal{SDD}_c$ denote the class of all compressed SDDs.\n\n\n\\smallskip\nAn \\emph{ordered binary decision diagram (OBDD)} is a compressed SDD \nrespecting a \\emph{right-linear} vtree $T$ (that is, \nwhere each left child is a leaf); see Figure~\\ref{fig:right-linear-tree}.  \nWe let $\\mathcal{OBDD}$ denote the class of all OBDDs.\\footnote{Reduced OBDDs as usually defined in the literature \\cite[Definition~1.3.2]{Wegener00} \nare indeed compressed SDD respecting right-linear vtrees \\cite[Section~6]{Darwiche11}.}\n\n\\begin{figure}[t!]\n\\centering\n\n\\includegraphics{example2_pspdftex}\n\\end{picture}\n\\setlength{\\unitlength}{2901sp}\n\n\\begingroup\\makeatletter\\ifx\\SetFigFont\\undefined\n\\gdef\\SetFigFont#1#2#3#4#5{\n  \\reset@font\\fontsize{#1}{#2pt}\n  \\fontfamily{#3}\\fontseries{#4}\\fontshape{#5}\n  \\selectfont}\n\\fi\\endgroup\n\\begin{picture}(2086,1568)(10883,-429)\n\\put(11830,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(10930,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_1$}\n}}}}\n\\put(11380,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(12730,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\end{picture}\n\n\\caption{A right-linear vtree; its left first traversal induces the variable ordering $x_1<x_2<x_3<x_4$.}\n\\label{fig:right-linear-tree}\n\\end{figure}\n\n\nLet $C$ be an OBDD respecting a vtree $T$, \nand let $\\sigma=x_1<\\cdots<x_n$ be the variable ordering \ninduced by a left first traversal of $T$; in this case, \nwe also say that $C$ respects $\\sigma$.  \nFor an ordering $\\sigma$ of a set of variables, \nwe let $\\mathcal{OBDD}_\\sigma$ denote the class of all OBDDs respecting $\\sigma$.\n\n \n\\paragraph{Quasipolynomial Separation.} It follows from the definitions that \n\n", "index": 11, "text": "\\begin{equation}\\label{eq:inclusions}\n\\mathcal{OBDD} \\subseteq \\mathcal{SDD}_c \\subseteq \\mathcal{SDD} \\subseteq \\mathcal{NNF}_{s} \\cap \\mathcal{NNF}_{d}\\text{} \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E3.m1\" class=\"ltx_Math\" alttext=\"\\mathcal{OBDD}\\subseteq\\mathcal{SDD}_{c}\\subseteq\\mathcal{SDD}\\subseteq%&#10;\\mathcal{NNF}_{s}\\cap\\mathcal{NNF}_{d}\\text{}\" display=\"block\"><mrow><mrow><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcaa</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\u212c</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi></mrow><mo>\u2286</mo><mrow><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcae</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mo>\u2062</mo><msub><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mi>c</mi></msub></mrow><mo>\u2286</mo><mrow><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcae</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi></mrow><mo>\u2286</mo><mrow><mrow><mi class=\"ltx_font_mathcaligraphic\">\ud835\udca9</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udca9</mi><mo>\u2062</mo><msub><mi class=\"ltx_font_mathcaligraphic\">\u2131</mi><mi>s</mi></msub></mrow><mo>\u2229</mo><mrow><mi class=\"ltx_font_mathcaligraphic\">\ud835\udca9</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udca9</mi><mo>\u2062</mo><msub><mi class=\"ltx_font_mathcaligraphic\">\u2131</mi><mi>d</mi></msub><mo>\u2062</mo><mrow/></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": " \nthat is the boolean function on $n$ inputs $x_1,\\ldots,x_n$ such that,  \nfor all assignments $f \\colon \\{x_1,\\ldots,x_n\\} \\to \\{0,1\\}$, \nit holds that $f$ is a model of $\\mathrm{HWB}_n$ if and only if $f(x_1)+\\cdots+f(x_n)=i$ \nand $f(x_i)=1$ ($i \\geq 1$).  \n\nIt is well known that the hidden weighted bit function has exponential OBDD size \\cite{Bryant86}.  \n\n\\begin{theorem}[Bryant]\\label{th:bryant}\nThe $\\mathcal{OBDD}$ size of $\\mathrm{HWB}_n$ is $2^{\\Omega(n)}$. \n\\end{theorem}\n\nIntuitively, a model of $\\mathrm{HWB}_n$ is a subsets of $\\{1,\\ldots,n\\}$ \nof size $i$ containing the number $i$, for $i=1,\\ldots,n$.  For instance, \n$\\mathrm{HWB}_2(1,0)=1$, because the set $\\{1\\}$ has size $1$ and contains the number $1$, \nand $\\mathrm{HWB}_2(0,1)=0$, because the set $\\{2\\}$ has size $1$ but does not contain the number $1$.\n\nThe simple but crucial observation underlying our construction is \nthat the models of $\\mathrm{HWB}_n$ can be decided arguing by cases, as follows:  \nIf $S$ is a subset of $\\{1,\\ldots,n\\}$ of size $i$, \nthen $S$ is a model of $\\mathrm{HWB}_n$ if and only if $i \\in S$ ($i=1,\\ldots,n$).  \nWith this insight it is not hard to setup an exhaustive and exclusive \ncase distinction equivalent to $\\mathrm{HWB}_n$; \nthe key observation is that each individual case in the distinction \nis computable by a small OBDD with respect to any variable ordering.\n\nWe formalize the above intuition.  For $i \\in \\{0,1,\\ldots,n\\}$, \nlet \n", "itemtype": "equation", "pos": -1, "prevtext": "\nwhich raises the natural question how OBDDs and SDDs \nare related in succinctness; indeed, the quest for the relative succinctness of \nOBDDs and SDDs has been an open problem in knowledge compilation since \nDarwiche introduced SDDs \\cite{Darwiche11}.  \n\nRecently, Razgon \\cite[Corollary~3]{Razgon13} has  \nestablished a \\emph{quasipolynomial separation} of OBDDs from compressed SDDs.\n\n\\begin{theorem}[Razgon]\\label{th:raz}\nThere exists an unbounded arity class of boolean functions $\\mathcal{F}$ \nsuch that every arity $n$ function $f \\in \\mathcal{F}$ has $\\mathcal{SDD}_c$ size in $O(n^3)$ \nand $\\mathcal{OBDD}$ size in $n^{\\Omega(\\log n)}$.\n\\end{theorem}\n\nWe remark that the restriction to compressed SDDs in the above statement is nontrivial; \nto the best of our knowledge, compressed SDDs \nmight be exponentially more succinct than uncompressed SDDs \\cite{BroeckDarwiche15}; \nsee also the discussion in Section~\\ref{sect:disc}.\n\n\n\\section{Exponential Separation}\\label{sect:main}\n\nThe quasipolynomial separation stated in Theorem~\\ref{th:raz}  \nimplies that OBDDs do not simulate SDDs in polynomial size, \nbut leaves open the possibility for OBDDs to simulate SDDs in quasipolynomial size.  \nIn this section  \nwe exclude this possibility by establishing \nan \\emph{exponential separation}\nof OBDDs from compressed SDDs.\n\n\\paragraph{Hidden Weighted Bit.} The separation is obtained by (a variant of) the \\emph{hidden weighted bit} function \n\n", "index": 13, "text": "$$\\mathrm{HWB}_n(x_1,\\ldots,x_n)\\text{,}$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex4.m1\" class=\"ltx_Math\" alttext=\"\\mathrm{HWB}_{n}(x_{1},\\ldots,x_{n})\\text{,}\" display=\"block\"><mrow><msub><mi>HWB</mi><mi>n</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mtext>,</mtext></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": " be the boolean function \non $n$ inputs $x_1,\\ldots,x_n$ such that,  \nfor all assignments $f \\colon \\{x_1,\\ldots,x_n\\} \\to \\{0,1\\}$, \nit holds that $f$ is a model of $E^i_n$ if and only if $f(x_1)+\\cdots+f(x_n)=i$. Hence \n$E^i_n$ computes the subsets of $\\{1,\\ldots,n\\}$ \nof size $i$ ($i \\geq 0$).  Let now \n\n", "itemtype": "equation", "pos": -1, "prevtext": " \nthat is the boolean function on $n$ inputs $x_1,\\ldots,x_n$ such that,  \nfor all assignments $f \\colon \\{x_1,\\ldots,x_n\\} \\to \\{0,1\\}$, \nit holds that $f$ is a model of $\\mathrm{HWB}_n$ if and only if $f(x_1)+\\cdots+f(x_n)=i$ \nand $f(x_i)=1$ ($i \\geq 1$).  \n\nIt is well known that the hidden weighted bit function has exponential OBDD size \\cite{Bryant86}.  \n\n\\begin{theorem}[Bryant]\\label{th:bryant}\nThe $\\mathcal{OBDD}$ size of $\\mathrm{HWB}_n$ is $2^{\\Omega(n)}$. \n\\end{theorem}\n\nIntuitively, a model of $\\mathrm{HWB}_n$ is a subsets of $\\{1,\\ldots,n\\}$ \nof size $i$ containing the number $i$, for $i=1,\\ldots,n$.  For instance, \n$\\mathrm{HWB}_2(1,0)=1$, because the set $\\{1\\}$ has size $1$ and contains the number $1$, \nand $\\mathrm{HWB}_2(0,1)=0$, because the set $\\{2\\}$ has size $1$ but does not contain the number $1$.\n\nThe simple but crucial observation underlying our construction is \nthat the models of $\\mathrm{HWB}_n$ can be decided arguing by cases, as follows:  \nIf $S$ is a subset of $\\{1,\\ldots,n\\}$ of size $i$, \nthen $S$ is a model of $\\mathrm{HWB}_n$ if and only if $i \\in S$ ($i=1,\\ldots,n$).  \nWith this insight it is not hard to setup an exhaustive and exclusive \ncase distinction equivalent to $\\mathrm{HWB}_n$; \nthe key observation is that each individual case in the distinction \nis computable by a small OBDD with respect to any variable ordering.\n\nWe formalize the above intuition.  For $i \\in \\{0,1,\\ldots,n\\}$, \nlet \n", "index": 15, "text": "$$E^i_n(x_1,\\ldots,x_n)$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m1\" class=\"ltx_Math\" alttext=\"E^{i}_{n}(x_{1},\\ldots,x_{n})\" display=\"block\"><mrow><msubsup><mi>E</mi><mi>n</mi><mi>i</mi></msubsup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": "\nbe the family of $2n$ boolean functions, each over the variables $\\{x_1,\\ldots,x_n\\}$, \ndefined as follows:\n\\begin{itemize}\n\\item $P_{0} \\equiv E^0_n$\n\\item $P_{n} \\equiv E^n_n$\n\\end{itemize} \nand for $i=1,\\ldots,n-1$ let \n\\begin{itemize}\n\\item $P_{i,0} \\equiv E^i_n \\wedge \\neg x_i$ \n\\item $P_{i,1} \\equiv E^i_n \\wedge x_i$ \n\\end{itemize}\nSee Figure~\\ref{fig:ein-proj} for an illustration. \n\nEach function in $\\mathcal{P}_n$ computes a family of subsets of $\\{1,\\ldots,n\\}$.  \nNamely, $P_0$ computes the empty subset, \n$P_n$ computes $\\{1,\\ldots,n\\}$, \n$P_{i,0}$ computes the subsets of $\\{1,\\ldots,n\\}$ of size $i$ not containing the number $i$, \nand $P_{i,1}$ computes the subsets of $\\{1,\\ldots,n\\}$ of size $i$ containing the number $i$ ($i=1,\\ldots,n-1$).  \n\nIt is readily observed that the members of \n$\\mathcal{P}_n$ partition the powerset of $\\{1,\\ldots,n\\}$ in nonempty blocks. \nFormally,\n\n\\begin{fact}\\label{fact:part}\nLet $\\mathcal{P}_n$ be as in (\\ref{eq:family-P}), \nand let $P,P' \\in \\mathcal{P}_n$ with $P \\neq P'$.\n\\begin{itemize}\n\\item $P \\not\\equiv \\bot$.\n\\item $P \\wedge P' \\equiv \\bot$.\n\\item $\\bigvee_{P \\in \\mathcal{P}_n}P \\equiv \\top$.\n\\end{itemize}\n\\end{fact}   \n\nWe now establish the key property, \nthat each member of $\\mathcal{P}_n$ is computable by a small OBDD \nwith respect to any variable ordering.  \n\nFirst consider the functions $E^i_n$.  An OBDD computing $E^i_n$ with respect to the variable ordering $\\sigma=x_1<\\cdots<x_n$ \nis displayed in Figure~\\ref{fig:ein-obdd} for the case $n=4$ and $i=2$.  Generalizing the construction, \nwe have that an OBDD $C$ computing $E^i_n$ and respecting $\\sigma$ \nhas at most $1+2+\\cdots+n=n(n+1)/2$ decision nodes, \neach contributing $6$ wires in the circuit; hence $C$ has size $O(n^2)$.  \n\nSince $E^i_n$ is symmetric \\cite[Definition~2.3.2 and Lemma~4.7.1]{Wegener00}, the following holds.\n\n\\begin{proposition}\\label{prop:obdd-ein}\nLet $\\sigma$ be an ordering of $x_1,\\ldots,x_n$.  \nThe $\\mathcal{OBDD}_\\sigma$ size of $E^i_n$ is $O(n^2)$. \n\\end{proposition}\n\n\\begin{figure}[t!]\n\\centering\n\n\\includegraphics{ein-obdd_pspdftex}\n\\end{picture}\n\\setlength{\\unitlength}{2901sp}\n\n\\begingroup\\makeatletter\\ifx\\SetFigFont\\undefined\n\\gdef\\SetFigFont#1#2#3#4#5{\n  \\reset@font\\fontsize{#1}{#2pt}\n  \\fontfamily{#3}\\fontseries{#4}\\fontshape{#5}\n  \\selectfont}\n\\fi\\endgroup\n\\begin{picture}(3886,2086)(9533,-879)\n\\put(11380,1019){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_1$}\n}}}}\n\\put(10930,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(11830,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(11380,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(10480,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(12280,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(12730,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(10030,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(9600,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(12300,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(13200,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(10930,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(11830,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(10500,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(11400,-800){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\top$}\n}}}}\n\\put(10750,-288){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$v$}\n}}}}\n\\end{picture}\n\n\\caption{An OBDD for the boolean function $E^2_4$ respecting the variable ordering $x_1<x_2<x_3<x_4$, \ndrawn (in an unreduced form) using the graphical conventions for decision diagrams \\cite{Wegener00}.  Each decision node generates $6$ wires in the circuit; \nfor instance, the decision node $v$ generates a $6$-wire subcircuit isomorphic to $(\\neg x_4 \\wedge \\bot) \\vee (x_4 \\wedge \\top)$.}\n\\label{fig:ein-obdd}\n\\end{figure}\n\nIt follows that every $P \\in \\mathcal{P}_n$ has a small OBDD \nwith respect to every variable ordering.  \n\n\\begin{proposition}\\label{prop:obdd-pi}\nLet $\\sigma$ be an ordering of $x_1,\\ldots,x_n$ and let $P \\in \\mathcal{P}_n$, where $\\mathcal{P}_n$ is as in (\\ref{eq:family-P}).  \nThe $\\mathcal{OBDD}_\\sigma$ size of $P$ is $O(n^2)$. \n\\end{proposition}\n\\begin{proof}\nFor $P_0$ and $P_n$ the statement follows directly from Proposition~\\ref{prop:obdd-ein}.  \nFor $i=1,\\ldots,n-1$ we have that $P_{i,0} \\equiv E^i_n \\wedge \\neg x_i$ \nand $P_{i,1} \\equiv E^i_n \\wedge x_i$.  \n\nRecall that if $f$ and $f'$ are boolean functions on $X$, \nand $\\rho$ is any ordering of $X$, then \\cite[Theorem~3.3.6]{Wegener00}:\n\n", "itemtype": "equation", "pos": 22003, "prevtext": " be the boolean function \non $n$ inputs $x_1,\\ldots,x_n$ such that,  \nfor all assignments $f \\colon \\{x_1,\\ldots,x_n\\} \\to \\{0,1\\}$, \nit holds that $f$ is a model of $E^i_n$ if and only if $f(x_1)+\\cdots+f(x_n)=i$. Hence \n$E^i_n$ computes the subsets of $\\{1,\\ldots,n\\}$ \nof size $i$ ($i \\geq 0$).  Let now \n\n", "index": 17, "text": "\\begin{equation}\\label{eq:family-P}\n\\mathcal{P}_n=\\{P_0,P_n\\} \\cup \\{P_{i,0},P_{i,1} \\colon i=1,\\ldots,n-1\\} \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E4.m1\" class=\"ltx_Math\" alttext=\"\\mathcal{P}_{n}=\\{P_{0},P_{n}\\}\\cup\\{P_{i,0},P_{i,1}\\colon i=1,\\ldots,n-1\\}\" display=\"block\"><mrow><msub><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcab</mi><mi>n</mi></msub><mo>=</mo><mrow><mrow><mo stretchy=\"false\">{</mo><msub><mi>P</mi><mn>0</mn></msub><mo>,</mo><msub><mi>P</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow><mo>\u222a</mo><mrow><mo stretchy=\"false\">{</mo><mrow><msub><mi>P</mi><mrow><mi>i</mi><mo>,</mo><mn>0</mn></mrow></msub><mo>,</mo><msub><mi>P</mi><mrow><mi>i</mi><mo>,</mo><mn>1</mn></mrow></msub></mrow><mo>:</mo><mrow><mi>i</mi><mo>=</mo><mrow><mn>1</mn><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></mrow></mrow><mo stretchy=\"false\">}</mo></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": "\n\nRegarding the literals $\\neg x_i$ \nand $x_i$ as boolean functions on $\\{x_1,\\ldots,x_n\\}$ whose $\\mathcal{OBDD}_\\sigma$ size \n\nis constant ($6$ wires), \nthe statement follows from (\\ref{eq:conj-quadr}) and Proposition~\\ref{prop:obdd-ein}.\n\\end{proof}\n\n\\begin{figure}[t!]\n\\centering\n\n\\includegraphics{ein-proj_pspdftex}\n\\end{picture}\n\\setlength{\\unitlength}{2901sp}\n\n\\begingroup\\makeatletter\\ifx\\SetFigFont\\undefined\n\\gdef\\SetFigFont#1#2#3#4#5{\n  \\reset@font\\fontsize{#1}{#2pt}\n  \\fontfamily{#3}\\fontseries{#4}\\fontshape{#5}\n  \\selectfont}\n\\fi\\endgroup\n\\begin{picture}(2986,2086)(9533,-879)\n\\put(11380,1019){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_1$}\n}}}}\n\\put(10930,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(11830,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(11380,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(10480,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(10030,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(9600,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(12300,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(12300,111){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(10930,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(11830,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(10500,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(11400,-800){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\top$}\n}}}}\n\\end{picture}\n\n\\caption{An OBDD for the boolean function $E^2_4 \\wedge \\neg x_2$ respecting the variable ordering $x_1<x_2<x_3<x_4$.}\n\\label{fig:ein-proj}\n\\end{figure}\n\n\\paragraph{SDDs vs OBDDs.}  We now prove that the hidden weighted bit function \nhas small (uncompressed) SDD size; \na slight modification of the construction, described later,   \ngives the compressed case.\n\nThe key observation is that, by the definition of $\\mathcal{P}_n$, \nthe hidden weighted bit function $\\mathrm{HWB}_n$ \nis equivalent to \n\n", "itemtype": "equation", "pos": 27708, "prevtext": "\nbe the family of $2n$ boolean functions, each over the variables $\\{x_1,\\ldots,x_n\\}$, \ndefined as follows:\n\\begin{itemize}\n\\item $P_{0} \\equiv E^0_n$\n\\item $P_{n} \\equiv E^n_n$\n\\end{itemize} \nand for $i=1,\\ldots,n-1$ let \n\\begin{itemize}\n\\item $P_{i,0} \\equiv E^i_n \\wedge \\neg x_i$ \n\\item $P_{i,1} \\equiv E^i_n \\wedge x_i$ \n\\end{itemize}\nSee Figure~\\ref{fig:ein-proj} for an illustration. \n\nEach function in $\\mathcal{P}_n$ computes a family of subsets of $\\{1,\\ldots,n\\}$.  \nNamely, $P_0$ computes the empty subset, \n$P_n$ computes $\\{1,\\ldots,n\\}$, \n$P_{i,0}$ computes the subsets of $\\{1,\\ldots,n\\}$ of size $i$ not containing the number $i$, \nand $P_{i,1}$ computes the subsets of $\\{1,\\ldots,n\\}$ of size $i$ containing the number $i$ ($i=1,\\ldots,n-1$).  \n\nIt is readily observed that the members of \n$\\mathcal{P}_n$ partition the powerset of $\\{1,\\ldots,n\\}$ in nonempty blocks. \nFormally,\n\n\\begin{fact}\\label{fact:part}\nLet $\\mathcal{P}_n$ be as in (\\ref{eq:family-P}), \nand let $P,P' \\in \\mathcal{P}_n$ with $P \\neq P'$.\n\\begin{itemize}\n\\item $P \\not\\equiv \\bot$.\n\\item $P \\wedge P' \\equiv \\bot$.\n\\item $\\bigvee_{P \\in \\mathcal{P}_n}P \\equiv \\top$.\n\\end{itemize}\n\\end{fact}   \n\nWe now establish the key property, \nthat each member of $\\mathcal{P}_n$ is computable by a small OBDD \nwith respect to any variable ordering.  \n\nFirst consider the functions $E^i_n$.  An OBDD computing $E^i_n$ with respect to the variable ordering $\\sigma=x_1<\\cdots<x_n$ \nis displayed in Figure~\\ref{fig:ein-obdd} for the case $n=4$ and $i=2$.  Generalizing the construction, \nwe have that an OBDD $C$ computing $E^i_n$ and respecting $\\sigma$ \nhas at most $1+2+\\cdots+n=n(n+1)/2$ decision nodes, \neach contributing $6$ wires in the circuit; hence $C$ has size $O(n^2)$.  \n\nSince $E^i_n$ is symmetric \\cite[Definition~2.3.2 and Lemma~4.7.1]{Wegener00}, the following holds.\n\n\\begin{proposition}\\label{prop:obdd-ein}\nLet $\\sigma$ be an ordering of $x_1,\\ldots,x_n$.  \nThe $\\mathcal{OBDD}_\\sigma$ size of $E^i_n$ is $O(n^2)$. \n\\end{proposition}\n\n\\begin{figure}[t!]\n\\centering\n\n\\includegraphics{ein-obdd_pspdftex}\n\\end{picture}\n\\setlength{\\unitlength}{2901sp}\n\n\\begingroup\\makeatletter\\ifx\\SetFigFont\\undefined\n\\gdef\\SetFigFont#1#2#3#4#5{\n  \\reset@font\\fontsize{#1}{#2pt}\n  \\fontfamily{#3}\\fontseries{#4}\\fontshape{#5}\n  \\selectfont}\n\\fi\\endgroup\n\\begin{picture}(3886,2086)(9533,-879)\n\\put(11380,1019){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_1$}\n}}}}\n\\put(10930,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(11830,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(11380,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(10480,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(12280,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(12730,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(10030,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(9600,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(12300,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(13200,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(10930,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(11830,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(10500,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(11400,-800){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\top$}\n}}}}\n\\put(10750,-288){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$v$}\n}}}}\n\\end{picture}\n\n\\caption{An OBDD for the boolean function $E^2_4$ respecting the variable ordering $x_1<x_2<x_3<x_4$, \ndrawn (in an unreduced form) using the graphical conventions for decision diagrams \\cite{Wegener00}.  Each decision node generates $6$ wires in the circuit; \nfor instance, the decision node $v$ generates a $6$-wire subcircuit isomorphic to $(\\neg x_4 \\wedge \\bot) \\vee (x_4 \\wedge \\top)$.}\n\\label{fig:ein-obdd}\n\\end{figure}\n\nIt follows that every $P \\in \\mathcal{P}_n$ has a small OBDD \nwith respect to every variable ordering.  \n\n\\begin{proposition}\\label{prop:obdd-pi}\nLet $\\sigma$ be an ordering of $x_1,\\ldots,x_n$ and let $P \\in \\mathcal{P}_n$, where $\\mathcal{P}_n$ is as in (\\ref{eq:family-P}).  \nThe $\\mathcal{OBDD}_\\sigma$ size of $P$ is $O(n^2)$. \n\\end{proposition}\n\\begin{proof}\nFor $P_0$ and $P_n$ the statement follows directly from Proposition~\\ref{prop:obdd-ein}.  \nFor $i=1,\\ldots,n-1$ we have that $P_{i,0} \\equiv E^i_n \\wedge \\neg x_i$ \nand $P_{i,1} \\equiv E^i_n \\wedge x_i$.  \n\nRecall that if $f$ and $f'$ are boolean functions on $X$, \nand $\\rho$ is any ordering of $X$, then \\cite[Theorem~3.3.6]{Wegener00}:\n\n", "index": 19, "text": "\\begin{equation}\\label{eq:conj-quadr}\n\\mathcal{OBDD}_{\\rho}(f \\wedge f') \\leq \\mathcal{OBDD}_{\\rho}(f) \\cdot \\mathcal{OBDD}_{\\rho}(f')\\text{.}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E5.m1\" class=\"ltx_Math\" alttext=\"\\mathcal{OBDD}_{\\rho}(f\\wedge f^{\\prime})\\leq\\mathcal{OBDD}_{\\rho}(f)\\cdot%&#10;\\mathcal{OBDD}_{\\rho}(f^{\\prime})\\text{.}\" display=\"block\"><mrow><mrow><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcaa</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\u212c</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mo>\u2062</mo><msub><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mi>\u03c1</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>f</mi><mo>\u2227</mo><msup><mi>f</mi><mo>\u2032</mo></msup></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mrow><mrow><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcaa</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\u212c</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mo>\u2062</mo><msub><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mi>\u03c1</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcaa</mi></mrow><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\u212c</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mo>\u2062</mo><msub><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mi>\u03c1</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msup><mi>f</mi><mo>\u2032</mo></msup><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mtext>.</mtext></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": "\nbecause the latter is equivalent to \n\n", "itemtype": "equation", "pos": 30646, "prevtext": "\n\nRegarding the literals $\\neg x_i$ \nand $x_i$ as boolean functions on $\\{x_1,\\ldots,x_n\\}$ whose $\\mathcal{OBDD}_\\sigma$ size \n\nis constant ($6$ wires), \nthe statement follows from (\\ref{eq:conj-quadr}) and Proposition~\\ref{prop:obdd-ein}.\n\\end{proof}\n\n\\begin{figure}[t!]\n\\centering\n\n\\includegraphics{ein-proj_pspdftex}\n\\end{picture}\n\\setlength{\\unitlength}{2901sp}\n\n\\begingroup\\makeatletter\\ifx\\SetFigFont\\undefined\n\\gdef\\SetFigFont#1#2#3#4#5{\n  \\reset@font\\fontsize{#1}{#2pt}\n  \\fontfamily{#3}\\fontseries{#4}\\fontshape{#5}\n  \\selectfont}\n\\fi\\endgroup\n\\begin{picture}(2986,2086)(9533,-879)\n\\put(11380,1019){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_1$}\n}}}}\n\\put(10930,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(11830,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(11380,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(10480,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(10030,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(9600,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(12300,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(12300,111){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(10930,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(11830,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(10500,-789){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\bot$}\n}}}}\n\\put(11400,-800){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$\\top$}\n}}}}\n\\end{picture}\n\n\\caption{An OBDD for the boolean function $E^2_4 \\wedge \\neg x_2$ respecting the variable ordering $x_1<x_2<x_3<x_4$.}\n\\label{fig:ein-proj}\n\\end{figure}\n\n\\paragraph{SDDs vs OBDDs.}  We now prove that the hidden weighted bit function \nhas small (uncompressed) SDD size; \na slight modification of the construction, described later,   \ngives the compressed case.\n\nThe key observation is that, by the definition of $\\mathcal{P}_n$, \nthe hidden weighted bit function $\\mathrm{HWB}_n$ \nis equivalent to \n\n", "index": 21, "text": "\\begin{equation}\\label{eq:sdd-hwb-form}\n(P_0 \\wedge \\bot) \\vee (P_n \\wedge \\top) \\vee \\bigvee_{i=1}^{n-1} ((P_{i,0} \\wedge \\bot) \\vee (P_{i,1} \\wedge \\top))\\text{} \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E6.m1\" class=\"ltx_Math\" alttext=\"(P_{0}\\wedge\\bot)\\vee(P_{n}\\wedge\\top)\\vee\\bigvee_{i=1}^{n-1}((P_{i,0}\\wedge%&#10;\\bot)\\vee(P_{i,1}\\wedge\\top))\\text{}\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><msub><mi>P</mi><mn>0</mn></msub><mo>\u2227</mo><mo>\u22a5</mo><mo stretchy=\"false\">)</mo></mrow><mo>\u2228</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>P</mi><mi>n</mi></msub><mo>\u2227</mo><mo>\u22a4</mo><mo stretchy=\"false\">)</mo></mrow><mo>\u2228</mo><munderover><mo largeop=\"true\" mathsize=\"160%\" movablelimits=\"false\" stretchy=\"false\" symmetric=\"true\">\u22c1</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></munderover><mrow><mo stretchy=\"false\">(</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>P</mi><mrow><mi>i</mi><mo>,</mo><mn>0</mn></mrow></msub><mo>\u2227</mo><mo>\u22a5</mo><mo stretchy=\"false\">)</mo></mrow><mo>\u2228</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>P</mi><mrow><mi>i</mi><mo>,</mo><mn>1</mn></mrow></msub><mo>\u2227</mo><mo>\u22a4</mo><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">)</mo></mrow><mrow/></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": "\nwhich is in turn equivalent to $\\mathrm{HWB}_n$.  \nUsing the form (\\ref{eq:sdd-hwb-form}), it is easy to build an SDD  \ncomputing $\\mathrm{HWB}_n$ and respecting a vtree for $\\{x_1,\\ldots,x_n,y\\}$ \nlike the one on the right in Figure~\\ref{fig:struct};  \nupon implementing the $P_i$'s and $P_{i,j}$'s by OBDDs, \nthe construction has polynomial size by Proposition~\\ref{prop:obdd-pi}.  Note that the SDD is not compressed \nbecause $\\bot$ and $\\top$ are reused $n$ times. The details follow.\n\n\n\\begin{theorem}\\label{th:sdd-size}\nThe $\\mathcal{SDD}$ size of $\\mathrm{HWB}_n$ is $O(n^3)$.\n\\end{theorem}\n\\begin{proof}\nWe first define an NNF $C$ on input variables $X=\\{x_1,\\ldots,x_n\\}$ computing (\\ref{eq:sdd-hwb-form}) \nas follows.  The output gate of $C$ is a fanin $2n$ $\\vee$-gate, \nwith wires from $2n$ fanin $2$ $\\wedge$-gates $g_0$, $g_n$, and $g_{i,j}$ for $i=1,\\ldots,n-1$ and $j=0,1$.  \n\nLet $p_0$ and $s_0$ be the two gates wiring $g_0$, \nlet $p_n$ and $s_n$ be the two gates wiring $g_n$, \nand for $i=1,\\ldots,n-1$ and $j=0,1$ let $p_{i,j}$ and $s_{i,j}$ be the two gates wiring $g_{i,j}$.  \n\nLet $\\sigma$ be any ordering of $x_1,\\ldots,x_n$.  All the subcircuits of $C$ \nrooted at $p_0$, $s_0$, $p_n$, $s_n$, $p_{i,j}$, and $s_{i,j}$ \n($i=1,\\ldots,n-1$, $j=0,1$) are OBDDs respecting the ordering $\\sigma$.  Moreover:\n\\begin{itemize}\n\\item $C_{p_i}$ computes $P_i$ for $i \\in \\{1,n\\}$;\n\\item $C_{p_{i,j}}$ computes $P_{i,j}$ for $i=1,\\ldots,n-1$, $j=0,1$;\n\\item $C_{s_0}$ and $C_{s_{i,0}}$ compute $\\bot$ for $i=1,\\ldots,n-1$;\n\\item $C_{s_n}$ and $C_{s_{i,1}}$ compute $\\top$ for $i=1,\\ldots,n-1$. \n\\end{itemize}\n\nWe prove that $C$ is an SDD respecting a suitable vtree $T$ \nfor the variable set $X \\cup \\{y\\}$.  Roughly, $T$ is \na right-linear vtree with the exception of the variable $y$; \nsee the diagram on the right in Figure~\\ref{fig:struct} for the case $n=4$ \nand $\\sigma=x_1<x_2<x_3<x_4$.  Formally, $T$ is defined as follows. \nLet $v$ be the root of $T$.  \nThe left subtree $T_l=T_{v_l}$ of $T$ \nis a right-linear vtree for $\\{x_1,\\ldots,x_n\\}$ such that \nthe variable ordering induced by its left first traversal \nis $\\sigma$.  Similarly, \nthe right subtree $T_r=T_{v_r}$ of $T$ \nis a vtree for $\\{y\\}$.  \n\nWe check that $C$ is an SDD respecting $T$.\n\\begin{itemize}\n\\item The subcircuits $C_{p_0}$, $C_{p_n}$, and $C_{p_{i,j}}$ are OBDDs respecting $\\sigma$, \nand hence SDDs respecting $T_l$ ($i=1,\\ldots,n-1$, $j=0,1$).  This settles (S1).\n\\item The subcircuits $C_{s_0}$, $C_{s_n}$, and $C_{s_{i,j}}$ are \ninput gates labelled by a constant, \nand hence SDDs respecting $T_r$ ($i=1,\\ldots,n-1$, $j=0,1$).  This settles (S2).\n\\end{itemize}\nNote how the construction crucially exploits the special position of $y$ in the vtree $T$, \nwhile the circuit $C$ does not even read $y$. \n\nThe partitioning properties (S3)-(S5) follow by construction and Fact~\\ref{fact:part}. \nTherefore, $C$ is an SDD respecting $T$.  It remains to check that \n$C$ has size cubic in $n$.  \n\nBy construction, $C$ contains the $2n$ subcircuits $C_{p_0}$, \n$C_{p_n}$, and $C_{p_{i,j}}$ for $i=1,\\ldots,n-1$ and $j=0,1$; \neach has size $O(n^2)$ by Proposition~\\ref{prop:obdd-pi} \nhence, altogether, they contribute $O(n^3)$ wires in $C$.  \nThere remain $O(n)$ wires entering the output gate \nand the gates $g_0,g_1,\\ldots,g_m$.  \n\\end{proof}\n\nCombining Theorem~\\ref{th:bryant} and Theorem~\\ref{th:sdd-size}, \nwe conclude that OBDDs and SDDs are exponentially separated \nby the hidden weighted bit function.\n\n\\paragraph{Compressed SDDs vs OBDDs.} A slight variant \nof the previous construction gives an exponential separation \nof OBDDs and compressed SDDs.  \n\nLet $y_0,y_1,\\ldots,y_n$ be fresh variables.  The boolean function \n$F_n$ of the variables $x_1,\\ldots,x_n,y_0,y_1,\\ldots,y_n$, \ncalled \\emph{generalized hidden weighted bit} function, is defined by\n\n", "itemtype": "equation", "pos": 30863, "prevtext": "\nbecause the latter is equivalent to \n\n", "index": 23, "text": "$$(E^1_n \\wedge x_1) \\vee \\cdots \\vee (E^n_n \\wedge x_n)$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m1\" class=\"ltx_Math\" alttext=\"(E^{1}_{n}\\wedge x_{1})\\vee\\cdots\\vee(E^{n}_{n}\\wedge x_{n})\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><msubsup><mi>E</mi><mi>n</mi><mn>1</mn></msubsup><mo>\u2227</mo><msub><mi>x</mi><mn>1</mn></msub></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2228</mo><mi mathvariant=\"normal\">\u22ef</mi><mo>\u2228</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msubsup><mi>E</mi><mi>n</mi><mi>n</mi></msubsup><mo>\u2227</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": "\n\nNotice that the form (\\ref{eq:Fn}) is exactly as the form (\\ref{eq:sdd-hwb-form}), \nexcept that the $n$ copies of $\\bot$ and the $n$ copies of $\\top$ \nare replaced by the $2n$ pairwise nonequivalent formulas $\\neg y_0$, \n$y_n$, $y_i$, and $\\neg y_i$ ($i=1,\\ldots,n-1$), \nso that (\\ref{eq:Fn}) has indeed a compressed SDD implementation.   The details follow.\n\n\\begin{lemma}\\label{lemma:sdd-size}\nThe $\\mathcal{SDD}_c$ size of $F_n$ is $O(n^3)$.\n\\end{lemma}\n\\begin{proof}\nWe construct an NNF $C$ on input variables $X=\\{x_1,\\ldots,x_n,y_0,y_1,\\ldots,y_n\\}$ \ncomputing (\\ref{eq:Fn}) along the lines of Theorem~\\ref{th:sdd-size}.  The only modification \nis that $C_{s_0}$ is an input gate labelled $\\neg y_0$, \n$C_{s_n}$ is an input gate labelled $y_n$, \n$C_{s_{i,0}}$ is an input gate labelled $\\neg y_i$, \nand $C_{s_{i,1}}$ is an input gate labelled $y_i$ ($i=1,\\ldots,n-1$).\n\nWe claim that $C$ is a compressed SDD respecting \na vtree $T$ for the variable set $X$ built exactly as in Theorem~\\ref{th:sdd-size} \nexcept that the right subtree $T_r=T_{v_r}$ of $T$ \nis a right-linear vtree for $\\{y_0,y_1,\\ldots,y_n\\}$ such that \nthe variable ordering induced by its left first traversal is $\\rho$.  \nSee Figure~\\ref{fig:vt-sdd} for the case $n=4$, \n$\\sigma=x_1<\\cdots<x_4$, and $\\rho=y_0<y_1<\\cdots<y_4$.  \n\nTo check that $C$ is a compressed SDD respecting $T$, \nnotice that the subcircuits $C_{p_0}$ and $C_{p_{i,j}}$ are OBDDs respecting $\\sigma$, \nand hence compressed SDDs respecting $T_l$ ($i=1,\\ldots,n$, $j=0,1$), \nand the subcircuits $C_{s_0}$ and $C_{s_{i,j}}$ are OBDDs respecting $\\rho$, \nand hence compressed SDDs respecting $T_r$ ($i=1,\\ldots,n$, $j=0,1$).  \nMoreover, it is easily verified that the output gate of $C$ is compressed as by condition (C).  \nHence $C$ is compressed.  The rest of the proof is identical to that of Theorem~\\ref{th:sdd-size}.\n\\end{proof}\n\n\n\\begin{figure}[t!]\n\\centering\n\n\\includegraphics{vt-sdd_pspdftex}\n\\end{picture}\n\\setlength{\\unitlength}{2901sp}\n\n\\begingroup\\makeatletter\\ifx\\SetFigFont\\undefined\n\\gdef\\SetFigFont#1#2#3#4#5{\n  \\reset@font\\fontsize{#1}{#2pt}\n  \\fontfamily{#3}\\fontseries{#4}\\fontshape{#5}\n  \\selectfont}\n\\fi\\endgroup\n\\begin{picture}(3886,2468)(10883,-429)\n\\put(11830,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(10930,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_1$}\n}}}}\n\\put(11380,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(12730,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(12747,580){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$y_1$}\n}}}}\n\\put(13197,130){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$y_2$}\n}}}}\n\\put(13647,-320){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$y_3$}\n}}}}\n\\put(14547,-320){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$y_4$}\n}}}}\n\\put(12297,1030){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$y_0$}\n}}}}\n\\end{picture}\n\n\\caption{The vtree for $F_4$ in the proof of Lemma~\\ref{lemma:sdd-size}.}\n\\label{fig:vt-sdd}\n\\end{figure}\n\nWe now prove that the generalized hidden weighted bit function $F_n$ needs large OBDDs.\n\n\\begin{lemma}\\label{lemma:obdd-size}\nThe $\\mathcal{OBDD}$ size of $F_n$ is $2^{\\Omega(n)}$.\n\\end{lemma}\n\\begin{proof}\nLet $N$ be the size of a smallest $\\mathcal{OBDD}$ on variables \n$X=\\{x_1,\\ldots,x_n,y_0,y_1,\\ldots,y_n\\}$ computing $F_n$, \nand let $\\rho$ be any ordering of $X$ \nsuch that $\\mathcal{OBDD}_\\rho(F_n)=N$.  \n\nLet $G_n(x_1,\\ldots,x_n)$ be the subfunction of $F_n$ where \n$y_0,y_1,\\ldots,y_n$ are replaced by $1$, in symbols:\n\n", "itemtype": "equation", "pos": 34771, "prevtext": "\nwhich is in turn equivalent to $\\mathrm{HWB}_n$.  \nUsing the form (\\ref{eq:sdd-hwb-form}), it is easy to build an SDD  \ncomputing $\\mathrm{HWB}_n$ and respecting a vtree for $\\{x_1,\\ldots,x_n,y\\}$ \nlike the one on the right in Figure~\\ref{fig:struct};  \nupon implementing the $P_i$'s and $P_{i,j}$'s by OBDDs, \nthe construction has polynomial size by Proposition~\\ref{prop:obdd-pi}.  Note that the SDD is not compressed \nbecause $\\bot$ and $\\top$ are reused $n$ times. The details follow.\n\n\n\\begin{theorem}\\label{th:sdd-size}\nThe $\\mathcal{SDD}$ size of $\\mathrm{HWB}_n$ is $O(n^3)$.\n\\end{theorem}\n\\begin{proof}\nWe first define an NNF $C$ on input variables $X=\\{x_1,\\ldots,x_n\\}$ computing (\\ref{eq:sdd-hwb-form}) \nas follows.  The output gate of $C$ is a fanin $2n$ $\\vee$-gate, \nwith wires from $2n$ fanin $2$ $\\wedge$-gates $g_0$, $g_n$, and $g_{i,j}$ for $i=1,\\ldots,n-1$ and $j=0,1$.  \n\nLet $p_0$ and $s_0$ be the two gates wiring $g_0$, \nlet $p_n$ and $s_n$ be the two gates wiring $g_n$, \nand for $i=1,\\ldots,n-1$ and $j=0,1$ let $p_{i,j}$ and $s_{i,j}$ be the two gates wiring $g_{i,j}$.  \n\nLet $\\sigma$ be any ordering of $x_1,\\ldots,x_n$.  All the subcircuits of $C$ \nrooted at $p_0$, $s_0$, $p_n$, $s_n$, $p_{i,j}$, and $s_{i,j}$ \n($i=1,\\ldots,n-1$, $j=0,1$) are OBDDs respecting the ordering $\\sigma$.  Moreover:\n\\begin{itemize}\n\\item $C_{p_i}$ computes $P_i$ for $i \\in \\{1,n\\}$;\n\\item $C_{p_{i,j}}$ computes $P_{i,j}$ for $i=1,\\ldots,n-1$, $j=0,1$;\n\\item $C_{s_0}$ and $C_{s_{i,0}}$ compute $\\bot$ for $i=1,\\ldots,n-1$;\n\\item $C_{s_n}$ and $C_{s_{i,1}}$ compute $\\top$ for $i=1,\\ldots,n-1$. \n\\end{itemize}\n\nWe prove that $C$ is an SDD respecting a suitable vtree $T$ \nfor the variable set $X \\cup \\{y\\}$.  Roughly, $T$ is \na right-linear vtree with the exception of the variable $y$; \nsee the diagram on the right in Figure~\\ref{fig:struct} for the case $n=4$ \nand $\\sigma=x_1<x_2<x_3<x_4$.  Formally, $T$ is defined as follows. \nLet $v$ be the root of $T$.  \nThe left subtree $T_l=T_{v_l}$ of $T$ \nis a right-linear vtree for $\\{x_1,\\ldots,x_n\\}$ such that \nthe variable ordering induced by its left first traversal \nis $\\sigma$.  Similarly, \nthe right subtree $T_r=T_{v_r}$ of $T$ \nis a vtree for $\\{y\\}$.  \n\nWe check that $C$ is an SDD respecting $T$.\n\\begin{itemize}\n\\item The subcircuits $C_{p_0}$, $C_{p_n}$, and $C_{p_{i,j}}$ are OBDDs respecting $\\sigma$, \nand hence SDDs respecting $T_l$ ($i=1,\\ldots,n-1$, $j=0,1$).  This settles (S1).\n\\item The subcircuits $C_{s_0}$, $C_{s_n}$, and $C_{s_{i,j}}$ are \ninput gates labelled by a constant, \nand hence SDDs respecting $T_r$ ($i=1,\\ldots,n-1$, $j=0,1$).  This settles (S2).\n\\end{itemize}\nNote how the construction crucially exploits the special position of $y$ in the vtree $T$, \nwhile the circuit $C$ does not even read $y$. \n\nThe partitioning properties (S3)-(S5) follow by construction and Fact~\\ref{fact:part}. \nTherefore, $C$ is an SDD respecting $T$.  It remains to check that \n$C$ has size cubic in $n$.  \n\nBy construction, $C$ contains the $2n$ subcircuits $C_{p_0}$, \n$C_{p_n}$, and $C_{p_{i,j}}$ for $i=1,\\ldots,n-1$ and $j=0,1$; \neach has size $O(n^2)$ by Proposition~\\ref{prop:obdd-pi} \nhence, altogether, they contribute $O(n^3)$ wires in $C$.  \nThere remain $O(n)$ wires entering the output gate \nand the gates $g_0,g_1,\\ldots,g_m$.  \n\\end{proof}\n\nCombining Theorem~\\ref{th:bryant} and Theorem~\\ref{th:sdd-size}, \nwe conclude that OBDDs and SDDs are exponentially separated \nby the hidden weighted bit function.\n\n\\paragraph{Compressed SDDs vs OBDDs.} A slight variant \nof the previous construction gives an exponential separation \nof OBDDs and compressed SDDs.  \n\nLet $y_0,y_1,\\ldots,y_n$ be fresh variables.  The boolean function \n$F_n$ of the variables $x_1,\\ldots,x_n,y_0,y_1,\\ldots,y_n$, \ncalled \\emph{generalized hidden weighted bit} function, is defined by\n\n", "index": 25, "text": "\\begin{equation}\\label{eq:Fn}\n(P_0 \\wedge \\neg y_0) \\vee (P_n \\wedge y_n) \\vee \\bigvee_{i=1}^{n-1} ((P_{i,0} \\wedge \\neg y_i) \\vee (P_{i,1} \\wedge y_i))\\text{.} \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E7.m1\" class=\"ltx_Math\" alttext=\"(P_{0}\\wedge\\neg y_{0})\\vee(P_{n}\\wedge y_{n})\\vee\\bigvee_{i=1}^{n-1}((P_{i,0}%&#10;\\wedge\\neg y_{i})\\vee(P_{i,1}\\wedge y_{i}))\\text{.}\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>P</mi><mn>0</mn></msub><mo>\u2227</mo><mrow><mi mathvariant=\"normal\">\u00ac</mi><mo>\u2062</mo><msub><mi>y</mi><mn>0</mn></msub></mrow></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2228</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>P</mi><mi>n</mi></msub><mo>\u2227</mo><msub><mi>y</mi><mi>n</mi></msub></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2228</mo><mrow><munderover><mo largeop=\"true\" mathsize=\"160%\" movablelimits=\"false\" stretchy=\"false\" symmetric=\"true\">\u22c1</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></munderover><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>P</mi><mrow><mi>i</mi><mo>,</mo><mn>0</mn></mrow></msub><mo>\u2227</mo><mrow><mi mathvariant=\"normal\">\u00ac</mi><mo>\u2062</mo><msub><mi>y</mi><mi>i</mi></msub></mrow></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2228</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>P</mi><mrow><mi>i</mi><mo>,</mo><mn>1</mn></mrow></msub><mo>\u2227</mo><msub><mi>y</mi><mi>i</mi></msub></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mtext>.</mtext></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": "\n\nSince conditioning (unboundedly many variables of) an OBDD \ndoes not increase its size \\cite[Theorem~2.4.1]{Wegener00}, we have that \n\n", "itemtype": "equation", "pos": 38973, "prevtext": "\n\nNotice that the form (\\ref{eq:Fn}) is exactly as the form (\\ref{eq:sdd-hwb-form}), \nexcept that the $n$ copies of $\\bot$ and the $n$ copies of $\\top$ \nare replaced by the $2n$ pairwise nonequivalent formulas $\\neg y_0$, \n$y_n$, $y_i$, and $\\neg y_i$ ($i=1,\\ldots,n-1$), \nso that (\\ref{eq:Fn}) has indeed a compressed SDD implementation.   The details follow.\n\n\\begin{lemma}\\label{lemma:sdd-size}\nThe $\\mathcal{SDD}_c$ size of $F_n$ is $O(n^3)$.\n\\end{lemma}\n\\begin{proof}\nWe construct an NNF $C$ on input variables $X=\\{x_1,\\ldots,x_n,y_0,y_1,\\ldots,y_n\\}$ \ncomputing (\\ref{eq:Fn}) along the lines of Theorem~\\ref{th:sdd-size}.  The only modification \nis that $C_{s_0}$ is an input gate labelled $\\neg y_0$, \n$C_{s_n}$ is an input gate labelled $y_n$, \n$C_{s_{i,0}}$ is an input gate labelled $\\neg y_i$, \nand $C_{s_{i,1}}$ is an input gate labelled $y_i$ ($i=1,\\ldots,n-1$).\n\nWe claim that $C$ is a compressed SDD respecting \na vtree $T$ for the variable set $X$ built exactly as in Theorem~\\ref{th:sdd-size} \nexcept that the right subtree $T_r=T_{v_r}$ of $T$ \nis a right-linear vtree for $\\{y_0,y_1,\\ldots,y_n\\}$ such that \nthe variable ordering induced by its left first traversal is $\\rho$.  \nSee Figure~\\ref{fig:vt-sdd} for the case $n=4$, \n$\\sigma=x_1<\\cdots<x_4$, and $\\rho=y_0<y_1<\\cdots<y_4$.  \n\nTo check that $C$ is a compressed SDD respecting $T$, \nnotice that the subcircuits $C_{p_0}$ and $C_{p_{i,j}}$ are OBDDs respecting $\\sigma$, \nand hence compressed SDDs respecting $T_l$ ($i=1,\\ldots,n$, $j=0,1$), \nand the subcircuits $C_{s_0}$ and $C_{s_{i,j}}$ are OBDDs respecting $\\rho$, \nand hence compressed SDDs respecting $T_r$ ($i=1,\\ldots,n$, $j=0,1$).  \nMoreover, it is easily verified that the output gate of $C$ is compressed as by condition (C).  \nHence $C$ is compressed.  The rest of the proof is identical to that of Theorem~\\ref{th:sdd-size}.\n\\end{proof}\n\n\n\\begin{figure}[t!]\n\\centering\n\n\\includegraphics{vt-sdd_pspdftex}\n\\end{picture}\n\\setlength{\\unitlength}{2901sp}\n\n\\begingroup\\makeatletter\\ifx\\SetFigFont\\undefined\n\\gdef\\SetFigFont#1#2#3#4#5{\n  \\reset@font\\fontsize{#1}{#2pt}\n  \\fontfamily{#3}\\fontseries{#4}\\fontshape{#5}\n  \\selectfont}\n\\fi\\endgroup\n\\begin{picture}(3886,2468)(10883,-429)\n\\put(11830,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_3$}\n}}}}\n\\put(10930,569){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_1$}\n}}}}\n\\put(11380,119){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_2$}\n}}}}\n\\put(12730,-331){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$x_4$}\n}}}}\n\\put(12747,580){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$y_1$}\n}}}}\n\\put(13197,130){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$y_2$}\n}}}}\n\\put(13647,-320){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$y_3$}\n}}}}\n\\put(14547,-320){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$y_4$}\n}}}}\n\\put(12297,1030){\\makebox(0,0)[lb]{\\smash{{\\SetFigFont{8}{9.6}{\\rmdefault}{\\mddefault}{\\updefault}{\\color[rgb]{0,0,0}$y_0$}\n}}}}\n\\end{picture}\n\n\\caption{The vtree for $F_4$ in the proof of Lemma~\\ref{lemma:sdd-size}.}\n\\label{fig:vt-sdd}\n\\end{figure}\n\nWe now prove that the generalized hidden weighted bit function $F_n$ needs large OBDDs.\n\n\\begin{lemma}\\label{lemma:obdd-size}\nThe $\\mathcal{OBDD}$ size of $F_n$ is $2^{\\Omega(n)}$.\n\\end{lemma}\n\\begin{proof}\nLet $N$ be the size of a smallest $\\mathcal{OBDD}$ on variables \n$X=\\{x_1,\\ldots,x_n,y_0,y_1,\\ldots,y_n\\}$ computing $F_n$, \nand let $\\rho$ be any ordering of $X$ \nsuch that $\\mathcal{OBDD}_\\rho(F_n)=N$.  \n\nLet $G_n(x_1,\\ldots,x_n)$ be the subfunction of $F_n$ where \n$y_0,y_1,\\ldots,y_n$ are replaced by $1$, in symbols:\n\n", "index": 27, "text": "\\begin{equation}\\label{eq:Gn}\nG_n \\equiv {F_n}(x_1,\\ldots,x_n,1,1,\\ldots,1)\\text{.} \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E8.m1\" class=\"ltx_Math\" alttext=\"G_{n}\\equiv{F_{n}}(x_{1},\\ldots,x_{n},1,1,\\ldots,1)\\text{.}\" display=\"block\"><mrow><msub><mi>G</mi><mi>n</mi></msub><mo>\u2261</mo><mrow><msub><mi>F</mi><mi>n</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>x</mi><mi>n</mi></msub><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mtext>.</mtext></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": "\n\nWe now claim that $G_n$ is the hidden weighted bit function on $n$ variables. \nIndeed, by construction, \n\n", "itemtype": "equation", "pos": 39208, "prevtext": "\n\nSince conditioning (unboundedly many variables of) an OBDD \ndoes not increase its size \\cite[Theorem~2.4.1]{Wegener00}, we have that \n\n", "index": 29, "text": "\\begin{equation}\\label{eq:step-1}\n\\mathcal{OBDD}_{\\rho}(G_n) \\leq \\mathcal{OBDD}_{\\rho}(F_n)\\text{.}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E9.m1\" class=\"ltx_Math\" alttext=\"\\mathcal{OBDD}_{\\rho}(G_{n})\\leq\\mathcal{OBDD}_{\\rho}(F_{n})\\text{.}\" display=\"block\"><mrow><mrow><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcaa</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\u212c</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mo>\u2062</mo><msub><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mi>\u03c1</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>G</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcaa</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\u212c</mi><mo>\u2062</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mo>\u2062</mo><msub><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9f</mi><mi>\u03c1</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>F</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mtext>.</mtext></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": "\nwhich we already observed being equivalent to $\\mathrm{HWB}_n$.  Therefore $\\mathcal{OBDD}(G_n)=2^{\\Omega(n)}$ by Theorem~\\ref{th:bryant}, \nand in particular $\\mathcal{OBDD}_\\rho(G_n) \\geq 2^{\\Omega(n)}$.  By (\\ref{eq:step-1}), \nwe are done.\n\\end{proof}\n\nAn exponential separation of OBDDs and compressed SDDs follows.\n\n\\begin{theorem}\\label{th:exp-sep}\nThere exists an unbounded arity class of boolean functions $\\mathcal{F}$ \nsuch that every arity $n$ function $f \\in \\mathcal{F}$ has $\\mathcal{SDD}_c$ size in $O(n^3)$ \nand $\\mathcal{OBDD}$ size in $2^{\\Omega(n)}$.\n\\end{theorem}\n\\begin{proof}\nTake $\\mathcal{F}=\\{ F_m \\colon m \\in \\mathbb{N} \\}$, \nwhere $F_m$ is as in (\\ref{eq:Fn}).  Then $F_m$ has \ncompressed $\\mathcal{SDD}$ size $O(m^3)$ by Lemma~\\ref{lemma:sdd-size} \nand $\\mathcal{OBDD}$ size $2^{\\Omega(m)}$ by Lemma~\\ref{lemma:obdd-size}.  \nSince $F_m$ has $n=2m+1$ \nvariables, it follows that $F_m$ has $\\mathcal{SDD}_c$ size in $O(n^3)$ \nand $\\mathcal{OBDD}$ size in $2^{\\Omega(n)}$.\n\\end{proof}\n\nNotably, the function class giving the exponential separation \nis as hard on compressed SDDs as the function class giving the quasipolynomial separation \n(cubic in both cases, see Theorem~\\ref{th:raz}).\n\n\n\\section{Discussion}\\label{sect:disc}\n\nWe have shown that OBDDs and SDDs \nare exponentially separated by \nthe hidden weighted bit function, \nwhile OBDDs and compressed SDDs \nare exponentially separated by the generalized hidden weighted bit function, \n$F_n$ in (\\ref{eq:Fn}), that contains the hidden weighted bit function as a subfunction:\n\n", "itemtype": "equation", "pos": 39430, "prevtext": "\n\nWe now claim that $G_n$ is the hidden weighted bit function on $n$ variables. \nIndeed, by construction, \n\n", "index": 31, "text": "\\begin{align*}\nG_n &\\equiv  F_n(x_1,\\ldots,x_n,1,1,\\ldots,1) \\\\\n\n & \\equiv P_n \\vee \\bigvee_{i=1}^{n-1} P_{i,1}\n\n\n\\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle G_{n}\" display=\"inline\"><msub><mi>G</mi><mi>n</mi></msub></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle\\equiv F_{n}(x_{1},\\ldots,x_{n},1,1,\\ldots,1)\" display=\"inline\"><mrow><mi/><mo>\u2261</mo><mrow><msub><mi>F</mi><mi>n</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>x</mi><mi>n</mi></msub><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex8.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle\\equiv P_{n}\\vee\\bigvee_{i=1}^{n-1}P_{i,1}\\par&#10;\\par&#10;\" display=\"inline\"><mrow><mi/><mo>\u2261</mo><mrow><msub><mi>P</mi><mi>n</mi></msub><mo>\u2228</mo><mrow><mstyle displaystyle=\"true\"><munderover><mo largeop=\"true\" mathsize=\"160%\" movablelimits=\"false\" stretchy=\"false\" symmetric=\"true\">\u22c1</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></munderover></mstyle><msub><mi>P</mi><mrow><mi>i</mi><mo>,</mo><mn>1</mn></mrow></msub></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00501.tex", "nexttext": "\nSeparating OBDDs and SDDs by the hid\\-den weight\\-ed bit function, instead of by a function designed adhoc,  \nfurther corroborates the theoretical quality of SDDs.  As articulated by Bollig et al.\\ \\cite{BolligLSW99}, \nany useful extension of OBDDs is expected to implement the hidden weighted bit function efficiently.  \n\nThe SDD $C$ described in the proof of Theorem~\\ref{th:sdd-size} is not compressed, \nbecause $\\bot$ and $\\top$ are reused $n$ times.  \nIn view of the canonical construction of an SDD over a vtree \\cite[Theorem~3]{Darwiche11}, it is readily observed that \ncompressing $C$ with respect to the vtree $T$ in the proof of Theorem~\\ref{th:sdd-size} implies finding \na small SDD for $\\mathrm{HWB}_n$ with respect to the left subtree of $T$, \nthat is, a small OBDD for $\\mathrm{HWB}_n$; but this is impossible by Theorem~\\ref{th:bryant}.  The fact \nthat compressing an SDD over its vtree \nmay increase the size exponentially has been observed already \\cite[Theorem~1]{BroeckDarwiche15}.  \nWe reiterate the observation here only because our argument is significantly shorter.\n\nWe conclude mentioning a nonobvious, and perhaps even unexpected, \naspect of our separation result.  An inspection of our construction \nshows that SDDs are already exponentially more succinct than \\emph{general OBDDs} \neven allowing only \\emph{one sentential decision} (and possibly many Shannon decisions); recall (\\ref{eq:sdd-hwb-form}) and (\\ref{eq:Fn}).  \nThe construction by Xue et al.\\ \\cite{XueCD12} already uses \\emph{nested sentential decisions} \neven to separate \\emph{OBDDs over a fixed variable ordering} from SDDs!\n\n\\paragraph{Questions.} We do not know whether the hidden weighted bit function has superpolynomial compressed \nSDD size for all vtrees; a positive answer would separate compressed and uncompressed SDDs  \nin succinctness and, in view of Lemma~\\ref{lemma:sdd-size} and (\\ref{eq:Fn-proj}), would prove that \ncompressed SDDs do not support conditioning (of unboundedly many variables) in polynomial size.\n\nIn view of Theorem~\\ref{th:raz}, it is natural to ask which SDDs are quasipolynomially simulated by OBDDs.  \nOur separating family shows that SDDs with unbounded fanin disjunctions cannot be quasipolynomially simulated by OBDDs.  \nOn the other hand, recent work by Darwiche and Oztok essentially shows that \nSDDs over binary disjunctions (fanin $2$) admit a quasipolynomial simulation by OBDDs \\cite[Theorem~1]{OztokDarwiche15}.  \nIn this light, it is tempting to conjecture that the above criterion is exact, that is, every SDD class over bounded fanin disjunctions \ndoes indeed admit a quasipolynomial simulation by OBDDs.\n\nFinally, a natural question arising in the context of the present work \nis about the relative succinctness of SDDs and structured deterministic NNFs (see (\\ref{eq:inclusions})); \nto the best of our knowledge, the question is open. By Theorem~\\ref{th:sdd-size}, \nat least we now know that the hidden weighted bit function is not a candidate to separate the two classes.\n\n\\section*{Acknowledgments}\n\nThe author thanks Igor Razgon for generously introducing \nhim to the problem addressed in this article, and an \nanonymous reviewer for suggesting the comparison \nwith \\cite{XueCD12} discussed in the conclusion.  This research was supported by the FWF Austrian Science Fund \n(Parameterized Compilation, P26200).\n\n\\DeclareRobustCommand{\\DE}[3]{#3}\n\n\\begin{thebibliography}{10}\n\n\\bibitem{BolligLSW99}\nBeate Bollig, Martin L{\\\"{o}}bbing, Martin Sauerhoff, and Ingo Wegener.\n\\newblock {On the Complexity of the Hidden Weighted Bit Function for Various\n  {BDD} Models}.\n\\newblock {\\em {Theoretical Informatics and Applications}} 33(2):103--116, 1999.\n\n\\bibitem{BroeckDarwiche15}\nGuy {\\DE{Broek}{Van den}{van den}}~Broek and Adnan Darwiche.\n\\newblock {On the Role of Canonicity in Knowledge Compilation}.\n\\newblock In Bonet, B., and Koenig, S., eds., {\\em Proceedings of the\n  Twenty-Ninth {AAAI} Conference on Artificial Intelligence, January 25-30,\n  2015, Austin, Texas, {USA.}},  1641--1648. {AAAI} Press, 2015.\n\n\\bibitem{Bryant86}\nRandal~E. Bryant.\n\\newblock {Graph-Based Algorithms for Boolean Function Manipulation}.\n\\newblock {\\em {IEEE} Transactions on Computers} 35(8):677--691, 1986.\n\n\\bibitem{ChoiD13}\nArthur Choi and Adnan Darwiche.\n\\newblock {Dynamic Minimization of Sentential Decision Diagrams}.\n\\newblock In desJardins, M., and Littman, M.~L., eds., {\\em Proceedings of the\n  Twenty-Seventh {AAAI} Conference on Artificial Intelligence, July 14-18,\n  2013, Bellevue, Washington, {USA.}}, 187--194.  {AAAI} Press, 2013.\n\n\\bibitem{DarwicheM02}\nAdnan Darwiche and Pierre Marquis.\n\\newblock {A Knowledge Compilation Map}.\n\\newblock {\\em {Journal of Artificial Intelligence Research}} 17:229--264, 2002.\n  \n\\bibitem{Darwiche01}\nAdnan Darwiche.\n\\newblock {Decomposable Negation Normal Form}.\n\\newblock {\\em {Journal of the ACM}} 48(4):608--647, 2001.\n\n\\bibitem{Darwiche11}\nAdnan Darwiche.\n\\newblock {SDD: A New Canonical Representation of Propositional Knowledge\n  Bases}.\n\\newblock In Walsh, T., ed., {\\em {IJCAI} 2011, Proceedings of the\n  Twenty-Second International Joint Conference on Artificial Intelligence,\n  Barcelona, Catalonia, Spain, July 16-22, 2011},  819--826. {IJCAI/AAAI}, 2011.\n\n\\bibitem{OztokD14}\nUmut Oztok and Adnan Darwiche.\n\\newblock {CV-Width: A New Complexity Parameter for CNFs}.\n\\newblock In Schaub, T.; Friedrich, G.; and O'Sullivan, B., eds., {\\em {ECAI}\n  2014, Proceedings of the Twenty-First European Conference on Artificial\n  Intelligence, 18-22 August 2014, Prague, Czech Republic, August 18-22, 2014},\n  volume 263 of {\\em Frontiers in Artificial Intelligence and Applications},\n  675--680. {IOS} Press, 2014.\n\n\\bibitem{OztokDarwiche15}\nUmut Oztok and Adnan Darwiche.\n\\newblock {A Top-Down Compiler for Sentential Decision Diagrams}.\n\\newblock In Yang, Q., and Wooldridge, M., eds., {\\em Proceedings of the\n  Twenty-Fourth International Joint Conference on Artificial Intelligence,\n  {IJCAI} 2015, Buenos Aires, Argentina, July 25-31, 2015},  3141--3148.\n  {AAAI} Press, 2015.\n\n\\bibitem{PipatsrisawatD08}\nKnot Pipatsrisawat and Adnan Darwiche.\n\\newblock {New Compilation Languages Based on Structured Decomposability}.\n\\newblock In Fox, D., and Gomes, C.~P., eds., {\\em Proceedings of the\n  Twenty-Third {AAAI} Conference on Artificial Intelligence, {AAAI} 2008,\n  Chicago, Illinois, USA, July 13-17, 2008},  517--522. {AAAI} Press,\n  2008.\n\n\\bibitem{PipatsrisawatD10}\nThammanit Pipatsrisawat and Adnan Darwiche.\n\\newblock {A Lower Bound on the Size of Decomposable Negation Normal Form}.\n\\newblock In Fox, M., and Poole, D., eds., {\\em Proceedings of the\n  Twenty-Fourth {AAAI} Conference on Artificial Intelligence, {AAAI} 2010,\n  Atlanta, Georgia, USA, July 11-15, 2010}. {AAAI} Press, 2010.\n\n\\bibitem{RazgonP13}\nIgor Razgon and Justyna Petke.\n\\newblock {Cliquewidth and Knowledge Compilation}.\n\\newblock In J{\\\"{a}}rvisalo, M., and Gelder, A.~V., eds., {\\em SAT 2015,\n  Proceedings of the Sixteenth International Conference on Theory and\n  Applications of Satisfiability Testing, Helsinki, Finland, July 8-12, 2013},\n  volume 7962 of {\\em Lecture Notes in Computer Science},  335--350. Springer, 2013.  \n  \n\\bibitem{Razgon13}\nIgor Razgon.\n\\newblock {On {OBDDs} for {CNFs} of Bounded Treewidth}.\n\\newblock {\\em CoRR} abs/1308.3829v3, 2014.\n\n\\bibitem{Razgon14}\nIgor Razgon.\n\\newblock {On {OBDDs} for {CNFs} of Bounded Treewidth}.\n\\newblock In Baral, C.; Giacomo, G.~D.; and Eiter, T., eds., {\\em KR 2014,\n  Proceedings of the Fourteenth International Conference on Principles of\n  Knowledge Representation and Reasoning, Vienna, Austria, July 20-24, 2014}. {AAAI} Press, 2014.\n\n\n\\bibitem{Wegener00}\nIngo Wegener.\n\\newblock {\\em {Branching Programs and Binary Decision Diagrams}}.\n\\newblock {SIAM}, 2000.\n\n\\bibitem{XueCD12}\nYexiang Xue, Arthur Choi, and Adnan Darwiche.\n\\newblock In Hoffmann, J., and Selman, B., eds., {\\em Proceedings of the\n  Twenty-Sixth {AAAI} Conference on Artificial Intelligence, July 22-26, 2012,\n  Toronto, Ontario, Canada.} {AAAI} Press, 2012.\n\n\\end{thebibliography}\n\n\n", "itemtype": "equation", "pos": 41114, "prevtext": "\nwhich we already observed being equivalent to $\\mathrm{HWB}_n$.  Therefore $\\mathcal{OBDD}(G_n)=2^{\\Omega(n)}$ by Theorem~\\ref{th:bryant}, \nand in particular $\\mathcal{OBDD}_\\rho(G_n) \\geq 2^{\\Omega(n)}$.  By (\\ref{eq:step-1}), \nwe are done.\n\\end{proof}\n\nAn exponential separation of OBDDs and compressed SDDs follows.\n\n\\begin{theorem}\\label{th:exp-sep}\nThere exists an unbounded arity class of boolean functions $\\mathcal{F}$ \nsuch that every arity $n$ function $f \\in \\mathcal{F}$ has $\\mathcal{SDD}_c$ size in $O(n^3)$ \nand $\\mathcal{OBDD}$ size in $2^{\\Omega(n)}$.\n\\end{theorem}\n\\begin{proof}\nTake $\\mathcal{F}=\\{ F_m \\colon m \\in \\mathbb{N} \\}$, \nwhere $F_m$ is as in (\\ref{eq:Fn}).  Then $F_m$ has \ncompressed $\\mathcal{SDD}$ size $O(m^3)$ by Lemma~\\ref{lemma:sdd-size} \nand $\\mathcal{OBDD}$ size $2^{\\Omega(m)}$ by Lemma~\\ref{lemma:obdd-size}.  \nSince $F_m$ has $n=2m+1$ \nvariables, it follows that $F_m$ has $\\mathcal{SDD}_c$ size in $O(n^3)$ \nand $\\mathcal{OBDD}$ size in $2^{\\Omega(n)}$.\n\\end{proof}\n\nNotably, the function class giving the exponential separation \nis as hard on compressed SDDs as the function class giving the quasipolynomial separation \n(cubic in both cases, see Theorem~\\ref{th:raz}).\n\n\n\\section{Discussion}\\label{sect:disc}\n\nWe have shown that OBDDs and SDDs \nare exponentially separated by \nthe hidden weighted bit function, \nwhile OBDDs and compressed SDDs \nare exponentially separated by the generalized hidden weighted bit function, \n$F_n$ in (\\ref{eq:Fn}), that contains the hidden weighted bit function as a subfunction:\n\n", "index": 33, "text": "\\begin{equation}\\label{eq:Fn-proj}\nF_n(x_1,\\ldots,x_n,1,1,\\ldots,1)=\\mathrm{HWB}_n(x_1,\\ldots,x_n)\\text{.}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E10.m1\" class=\"ltx_Math\" alttext=\"F_{n}(x_{1},\\ldots,x_{n},1,1,\\ldots,1)=\\mathrm{HWB}_{n}(x_{1},\\ldots,x_{n})%&#10;\\text{.}\" display=\"block\"><mrow><mrow><msub><mi>F</mi><mi>n</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>x</mi><mi>n</mi></msub><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><msub><mi>HWB</mi><mi>n</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mtext>.</mtext></mrow></mrow></math>", "type": "latex"}]