[{"file": "1601.01546.tex", "nexttext": "\nThe \\emph{input stream} \\delete{{\\underline{\\sf todo}: {\\color{red}{{It may not be a stream, but a finite sequence; we may want to adapt terminology.}}}}} associated with the computation in \\eqref{eq:itmcomputation} is obtained from $i_0,i_1,\\dots$ by omitting all occurrences of $\\lambda$, and the \\emph{output stream} associated with the computation in \\eqref{eq:itmcomputation} is obtained from $o_0,o_1,\\dots$ by omitting all occurrences of $\\lambda$. A pair $(\\vec{x},\\vec{y})\\in\\Sigma^{\\omega}\\times\\Sigma^{\\omega}$ is an \\emph{interaction pair} associated with ${\\mathcal{I}}$ if there exists a computation of ${\\mathcal{I}}$ with $\\vec{x}$ as input stream and $\\vec{y}$ as output stream. The set of all interaction pairs associated with an ITM ${\\mathcal{I}}$ is called its \\emph{interactive behaviour}. (In Section~\\ref{sec:itm} we shall present a more refined view on its behaviour when we associate with every ITM a transition system.) The computation in \\eqref{eq:itmcomputation} is \\emph{interactive} if, for all $k\\in\\mathbb{N}$, if $i_k\\neq\\lambda$, then there exists $\\ell\\geq k$ such that $o_{\\ell}\\neq\\lambda$. The computation in \\eqref{eq:itmcomputation} is \\emph{input-active} if $i_k\\neq\\lambda$ for all $k\\in\\mathbb{N}$.\n\nAn ITM satisfies the \\emph{interactiveness} condition if all its computations are interactive. Clearly, if a deterministic ITM ${\\mathcal{I}}$ satisfies the interactiveness condition, then its interactive behaviour is total, in the sense that for every $\\vec{x}\\in\\Sigma^{\\omega}$ there is at least one $\\vec{y}\\in\\Sigma^{\\omega}$ such that $(\\vec{x},\\vec{y})$ is an interaction pair of ${\\mathcal{I}}$. By confining our attention to the input-active computations---which, in the terminology of \\cite{vLW2006}, corresponds to adopting the full environmental activity postulate---, we may then associate with every such ITM an $\\omega$-translation: we say that ITM ${\\mathcal{I}}$ produces $\\vec{y}$ on input $\\vec{x}$ if $(\\vec{x},\\vec{y})$ is the interaction pair associated with an input-active computation of ${\\mathcal{I}}$.\n\n\\begin{definition}\n  An $\\omega$-translation $\\phi:\\Sigma^{\\omega}\\rightarrow\\Sigma^{\\omega}$ is \\emph{interactively computable} if there exists a deterministic ITM that satisfying the interactiveness condition that produces $\\phi(\\vec{x})$ on input $\\vec{x}$ for all $\\vec{x}\\in\\Sigma^{\\omega}$.\n\\end{definition}\n\n\n{{ Van Leeuwen and Wiedermann present in~\\cite{vLW2006} a characterisation of the interactively computable $\\omega$-translations by showing that they can be approximated by classically computable partial functions on finite sequences over $\\Sigma$. For finite and infinite sequences $\\vec{x}$ and $\\vec{y}$, we write $\\vec{x}\\prec\\vec{y}$ if $\\vec{x}$ is a finite and strict prefix of $\\vec{y}$, and $\\vec{x}\\preceq\\vec{y}$ if $\\vec{x}\\prec\\vec{y}$ or $\\vec{x}=\\vec{y}$. We use the following definition of monotonic functions and limit-continuous functions. \\begin{definition}\\label{def:mono-limit-cont} \\begin{enumerate} \\item A partial function $f:\\Sigma^{*}\\rightharpoonup\\Sigma^{*}$ is \\emph{monotonic} if for all $\\vec{x},\\vec{y}\\in\\Sigma^{*}$ such that $\\vec{x}\\prec\\vec{y}$ and $f(\\vec{y})$ is defined, it holds that $f(\\vec{x})$ is defined as well and $f(\\vec{x})\\preceq f(\\vec{y})$. \\item A partial function $\\phi: \\Sigma^{\\omega}\\rightarrow\\Sigma^{\\omega}$ is called \\emph{limit-continuous} if there exists a classically computable monotonic partial function $f:\\Sigma^{*}\\rightarrow\\Sigma^{*}$ such that   $\\phi(\\lim_{k\\rightarrow\\infty}\\vec{x}_k)=\\lim_{k\\rightarrow\\infty}f(\\vec{x}_k)$ for all strictly increasing chains $\\vec{x}_1\\prec \\vec{x}_2\\prec\\cdots\\prec \\vec{x}_k\\prec\\cdots$ with $\\vec{x}_k\\in\\Sigma^{*}$. \\end{enumerate} \\end{definition}}}\n\nIn~\\cite{vLW2006} a criterion of the interactively computable $\\omega$-translations is presented by using limit-continuous functions\\notinfull{ (a formal definition is included in the Appendix)}.\n\n\\begin{theorem}\\label{thm:int-trans}\n  A total $\\omega$-translation is interactively computable iff it is limit-continuous.\n\\end{theorem}\n\n\n\\subsection{The Theory of Executability}\n\\fullversion{\n{\\underline{\\sf todo}: {\\color{red}{{Reorganise this section (possibly reusing some text to found elsewhere in the paper). Its main purpose is to briefly recap the theory of executability introduced in \\cite{BLT2013} (as far as we need it in this paper). I propose the following structure for this section: \\begin{enumerate}   \\item A brief account of the motivation for the theory of executability: it tries to combine computation and concurrency-style interaction in such a way that both are treated on equal footing; thus, an integration of computability and concurrency theory is realised.   \\item Introduce transition systems as the mathematical representation of behaviour.   \\item Introduce reactive Turing machines in order to define the notion of executable transition system. Note that some of the notions (e.g., how to deal with the tape, what is a configuration, etc.) have already been introduced and explained in the preceding subsection, so we need not elaborate to much about these issues and can refer back to some extent.   \\item Explain that transition systems are generally considered up to some behavioural equivalence relation, and introduce divergence preserving branching bisimilarity as the finest useful notion.   \\item As an illustration (and to have it available for the remainder of the paper), establish the result that reactive Turing machines with 'stay-transitions' (no movement of the tape head) are not more powerful than reactive Turing machines without, up to divergence-preserving branching bisimilarity. \\end{enumerate}}}}}\n}\nThe theory of executability combines computation and concurrency-style interaction in such a way that both are treated on equal footing; thus, an integration of computability and concurrency theory is realised.\n\nThe transition system is the central notion in the mathematical theory of discrete-event behaviour. It is parameterised by a set ${\\mathcal{A}}$ of \\emph{action symbols}, denoting the observable events of a system. \\delete{We shall later impose extra restrictions on ${\\mathcal{A}}$, e.g., requiring that it be finite or has a particular structure, but for now we let ${\\mathcal{A}}$ be just an arbitrary abstract set.} We extend ${\\mathcal{A}}$ with a special symbol $\\tau$, which intuitively denotes unobservable internal activity\\delete{ of the system}. We shall abbreviate ${\\mathcal{A}} \\cup\\{\\tau\\}$ by ${\\mathcal{A}_{\\tau}}$.\n\n\\begin{definition}\\label{def:lts}\nAn \\emph{${\\mathcal{A}_{\\tau}}$-labelled transition system} ${\\mathcal{T}}$ is a triple $({\\mathcal{S}},\\step{},\\uparrow)$, where,\n\\begin{enumerate}\n    \\item ${\\mathcal{S}}$ is a set of \\emph{states},\n    \\item ${\\step{}}\\subseteq{\\mathcal{S}}\\times{\\mathcal{A}_{\\tau}}\\times{\\mathcal{S}}$ is an ${\\mathcal{A}_{\\tau}}$-labelled \\emph{transition relation},\n    \\item ${\\uparrow}\\in{\\mathcal{S}}$ is the initial state.\n\\end{enumerate}\n\\fullversion{If $(s,a,t)\\in{\\step{}}$, then we write $s\\step{a} t$.}\n\\end{definition}\n\n\n\n\n\n\n\n\nTransition systems can be used to give semantics to programming languages and process calculi. The standard method is to first associate with every program or process expression a transition system (its operational semantics), and then consider programs and process expressions modulo one of the many behavioural equivalences on transition systems that have been studied in the literature. In this paper, we shall use the notion of (divergence-preserving) branching bisimilarity \\cite{Glabbeek1996,Glabbeek2009}, which is the finest behavioural equivalence in van Glabbeek's linear time - branching time spectrum~\\cite{Glabbeek1993} that abstracts from internal computation steps (represented in the transition system by transitions labelled with $\\tau$).\\notinfull{ We adopt the notation ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$ for divergence-preserving branching bisimilarity, and $\\bbisim$ for the divergence-insensitive version (see the Appendix for a formal definition)}.\n{{  In the definition of (divergence-preserving) branching bisimilarity we need the following notation: let $\\step{}$ be an ${\\mathcal{A}_{\\tau}}$-labelled transition relation on a set ${\\mathcal{S}}$, and let $a\\in{\\mathcal{A}_{\\tau}}$; we write $s\\step{(a)}t$ for ``$s\\step{a}t$'' or ``$a=\\tau$ and $s=t$''. Furthermore, we denote the transitive closure of $\\step{\\tau}$ by $\\step{}^{+}$ and the reflexive-transitive closure of $\\step{\\tau}$ by $\\step{}^{*}$.  \\begin{definition}[Branching Bisimilarity]\\label{def:bbisim} Let $T_1=({\\mathcal{S}}_1,\\step{}_1,\\uparrow_1)$ and $T_2=({\\mathcal{S}}_2,\\step{}_2,\\uparrow_2)$ be transition systems. A \\emph{branching bisimulation} from $T_1$ to $T_2$ is a binary relation ${\\mathcal{\\mathop{R}}}\\subseteq{\\mathcal{S}}_1\\times{\\mathcal{S}}_2$ such that for all states $s_1$ and $s_2$, $s_1{\\mathcal{\\mathop{R}}} s_2$ implies \\begin{enumerate}     \\item if $s_1\\step{a}_1s_1'$, then there exist $s_2',s_2''\\in{\\mathcal{S}}_2$, s.t. $s_2\\step{}_2^{*}s_2''\\step{(a)}s_2'$, $s_1{\\mathcal{\\mathop{R}}} s_2''$ and $s_1'{\\mathcal{\\mathop{R}}} s_2'$;     \\item if $s_2\\step{a}_2s_2'$, then there exist $s_1',s_1''\\in{\\mathcal{S}}_1$, s.t. $s_1\\step{}_1^{*}s_1''\\step{(a)}s_1'$, $s_1''{\\mathcal{\\mathop{R}}} s_2$ and $s_1'{\\mathcal{\\mathop{R}}} s_2'$. \\end{enumerate} The transition systems $T_1$ and $T_2$ are \\emph{branching bisimilar} (notation: $T_1\\bbisim T_2$) if there exists a branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ s.t. $\\uparrow_1{\\mathcal{\\mathop{R}}}\\uparrow_2$.  A branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ is \\emph{divergence-preserving} if, for all states $s_1$ and $s_2$, $s_1{\\mathcal{\\mathop{R}}} s_2$ implies \\begin{enumerate} \\setcounter{enumi}{2}     \\item if there exists an infinite sequence $(s_{1,i})_{i\\in\\mathbb{N}}$ s.t. $s_1=s_{1,0},\\,s_{1,i}\\step{\\tau}s_{1,i+1}$ and $s_{1,i}{\\mathcal{\\mathop{R}}} s_2$ for all $i\\in\\mathbb{N}$, then there exists a state $s_2'$ s.t. $s_2\\step{}^{+}s_2'$ and $s_{1,i}{\\mathcal{\\mathop{R}}} s_2'$ for some $i\\in\\mathbb{N}$; and     \\item if there exists an infinite sequence $(s_{2,i})_{i\\in\\mathbb{N}}$ s.t. $s_2=s_{2,0},\\,s_{2,i}\\step{\\tau}s_{2,i+1}$ and $s_1{\\mathcal{\\mathop{R}}} s_{2,i}$ for all $i\\in\\mathbb{N}$, then there exists a state $s_1'$ s.t. $s_1\\step{}^{+}s_1'$ and $s_1'{\\mathcal{\\mathop{R}}} s_{2,i}$ for some $i\\in\\mathbb{N}$. \\end{enumerate} The transition systems $T_1$ and $T_2$ are \\emph{divergence-preserving branching bisimilar} (notation: $T_1\\bbisim^{\\Delta}T_2$) if there exists a divergence-preserving branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ s.t. $\\uparrow_1{\\mathcal{\\mathop{R}}}\\uparrow_2$. \\end{definition}}}\n\n\\delete{{\\underline{\\sf todo}: {\\color{red}{{Omit the notion of weak trace equivalence presented below. Instead, we should define (later, when we are going to discuss which RTMs are suitable for stream translation) what are the computations associated with a transition system and define the stream translation associated with a transition system similarly as above.}}}}\n\nWe also define the weak infinite trace equivalence between transition systems. This relation is useful for classifying the $\\omega$-translation realized by transition systems. For any LTS $({\\mathcal{S}},\\step{},\\uparrow)$, a state $s\\in{\\mathcal{S}}$, and an infinite action sequence $\\sigma\\in{\\mathcal{A}}^{\\omega}$, with $\\sigma=a_0,a_1,\\ldots$, we denote by $s\\step{\\sigma}$ the fact that there exist $s_0,s_0'\\ldots\\in{\\mathcal{S}}$ such that $s=s_0$, and $s_i\\step{}^{*}s_i'\\step{a_i}s_{i+1}$ for all $i\\geq 0$.\n\n\\begin{definition}[Weak Infinite Trace Equivalence]\\label{def:wtequ}\nFor any LTS $T=({\\mathcal{S}},\\step{},\\uparrow)$ and state $s\\in{\\mathcal{S}}$, we define ${\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s)$ to be the set of weak infinite traces possible from $s$\n\n", "itemtype": "equation", "pos": 14007, "prevtext": "\n\\maketitle\n\\begin{abstract}\nThe model of \\emph{interactive Turing machines} (ITMs) has been proposed to\ncharacterise which stream translations are \\emph{interactively computable}; the model of  \\emph{reactive Turing machines}\n(RTMs) has been proposed to characterise which behaviours are \\emph{reactively\n  executable}. In this article we provide a comparison of\nthe two models. We show, on the one hand, that the behaviour\nexhibited by ITMs is reactively executable, and, on the other hand,\nthat the stream translations naturally associated with RTMs are\ninteractively computable. We conclude from these results that the\ntheory of reactive executability subsumes the theory of interactive\ncomputability. Inspired by the existing model of ITMs with advice, which\nprovides a model of evolving computation, we also consider RTMs with\nadvice and we establish that a facility of advice considerably upgrades the\nbehavioural expressiveness of RTMs: every countable transition system\ncan be simulated by some RTM with advice up to a fine notion of\nbehavioural equivalence.\n\n\n\n\n\n\n\n\n\n\n\n\\end{abstract}\n\n\n\\delete{{\\underline{\\sf todo}: {\\color{red}{{BL: Improve storyline.  In my view, the main goal of the research presented in the paper is to show that van Leeuwen and Wiedermann's theory of \\emph{interactive   computation} is subsumed by our theory of \\emph{executability}. The design of our paper should clearly reflect this goal:  \\begin{enumerate} \\item We should start by briefly explaining the theory of   executability (introducing the formal notions of transition system, RTM, and   executable transition system, and perhaps also branching bisimilarity), and by   explaining the theory of interactive computability (introducing the   formal notions of $\\omega$-translation, ITM, interactively   computable $\\omega$-translation). \\item To be able to compare the two notions, it is important to have a   common semantics; the framework of transition systems is the more   refined of the two. We may observe that with some transition systems   one can naturally associate an $\\omega$-translation, but with other   one cannot. The first step, therefore, is to define a class of   transition systems with which one can associate an   $\\omega$-translation. We use this class to define the notion of   executable $\\omega$-translation. \\item Once the semantic domains are unified, the first research   question is: ``Are all interactively computable $\\omega$-translations   executable?'' We answer this question positively in two steps: First,   we associate with every ITM an appropriate transition system   (appropriate means: correct in the sense the $\\omega$-translation   associated directly with the ITM is the same as the   $\\omega$-translation associated with the transition system   associated with the ITM). Then, we show that the transition systems   associated with ITMs are executable (up to divergence-preserving   branching bisimilarity). \\item The other natural question is: ``Are all executable   $\\omega$-translations interactively computable?'' We answer this   question by first showing that executable $\\omega$-translations are   limit-continuous; the positive answer to the question is then an   immediate consequence of van Leeuwen and Wiedermanns   characterisation of interactively computable $\\omega$-translations. \\item Perhaps we should also study relaxations of the   \\emph{interactiveness requirement} of van Leeuwen and Wiedermann, as   we do now to some extent at the end of Section 4. \\item Van Leeuwen and Wiedermann also consider a notion of advice, to   study evolving computation. We show that advice can be naturally   incorporated in the theory of executability. We establish a general   result about the expressiveness of executability with advice, and we   show that interactive computability with advice is subsumed by   executability with advice. \\end{enumerate}  Comments: \\begin{enumerate} \\item There are several possibilities for combining the first two   items above in a single preliminaries section. For instance, we   could start with interactive computability, then discuss   executability, then discuss how to retrieve $\\omega$-translations   from transition systems. Or we could start with executability, then   discuss interactive computability, and finally explain how   $\\omega$-translations can be associated with transition systems. I   think I have no preference for now. \\item We should state explicitly in the introduction that we do not   claim RTMs to be more suitable for the analysis of interactive   computation. Rather, we believe that they provide a more general and   more flexible model to explain contemporary computing because it treats   interaction in the style of concurrency theory. It is then important to   confirm, as we do, that indeed it is in a way more general than ITMs. \\end{enumerate} }}}}}\n\\section{Introduction}\\label{sec:intro}\n\nAccording to the Church-Turing thesis, the classical Turing machine model adequately formalises which functions from natural numbers to natural numbers are effectively computable. There is, however, a considerable semantic gap between computing the result of a function applied to a natural number and the way computing systems operate nowadays. Modern computing systems are reactive, they are in continuous interaction with their environment, and their operation is not supposed to terminate. Quite a number of extended models of computation have been proposed in recent decades to study the combination of computation and interaction (see, e.g., the collection in \\cite{GSW2006}). In this paper we compare \\emph{interactive Turing machines} and \\emph{reactive Turing machines}.\n\nVan Leeuwen and Wiedermann have developed a theory of interactive computation from the stance that an interactive computation can be viewed as a never-ending exchange of symbols between a component and its unpredictable interactive environment \\cite{vLW2000}. Semantically, this amounts to studying the recognition, generation and translation of infinite streams of symbols. In \\cite{vLW2001}, the notion of interactive Turing machine (ITM) is put forward as a tool to formally characterise which stream translations are interactively computable. The notion is subsequently extended with an (non-computable) advice mechanism in order to obtain a non-uniform machine model. Van Leeuwen and Wiedermann argue that the resulting model of \\emph{interactive Turing machines with advice} is as powerful as their model of evolving finite automata, and they conclude from this, on intuitive grounds, that ITMs with advice are adequate to model evolving system such as the Internet \\cite{vLW2008}.\n\nThe model of interactive Turing machines focusses on capturing the computational content of sequential interactive behaviour. The included mechanism of interaction is therefore limited to achieving this goal, and does not easily generalise to more than one distributed component, nor does it allow for more fine-grained considerations of the behaviour of reactive systems. The behavioural theory of reactive systems, on the other hand, has focussed on aspects of modelling, specification and verification (see, e.g., \\cite{AILS2007}).\n\nTo integrate computability theory and the behavioural theory of reactive systems, the notion of reactive Turing machine (RTM) has been proposed in \\cite{BCLT2009,BLT2013}. It extends Turing machines with concurrency-style interaction. Semantically, the operational behaviour of an RTM is given by a transition system. From this transition system one may extract a set of computations, or stream translations,  but a more refined analysis is also possible. In fact, to study the effect of interaction of multiple components many refined notions of behavioural equivalence have been developed in the concurrency theory literature \\cite{Glabbeek1993}. The notion of RTM gives rise to a general theory of \\emph{executability}: a transition system is executable (usually up to some preferred notion of behavioural equivalence) if there exists an RTM that has the transition system as its semantics. (We refer to \\cite{BLT2013} for more a elaborate motivation of the notion of RTM.)\n\nThe aim of this paper is to make a connection between the theory of interactive computabililty and the theory of reactive systems, providing a comparison of the models of ITMs and RTMs in both their semantic domains. We shall first, in Section~\\ref{sec:pre}, recapitulate both models. Then, in Section~\\ref{sec:itm} we present a transition-system semantics for ITMs; the transition system associated with an ITM is executable up to a fine notion of behavioural equivalence. In Section~\\ref{sec:exeomega} we shall identify a subclass of RTMs that can be considered suitable for stream translation, and prove that the stream translation associated with an RTM in this subclass is interactively computable. In Section~\\ref{sec:advice} we consider an extension of RTMs with an advice mechanism adapted from the advice mechanism considered for ITMs. RTMs with advice can execute every countable transition system, at the cost of introducing divergence in the computation. The paper ends with a conclusion in Section~\\ref{sec:conclusion}.\n\n\\notinfull{\nFor the reviewers' convenience, proofs of the results and some standard formal definitions (also to be found in the cited literature) are included in an appendix. A full version of this submission with proofs of all results is available as~\\cite{LY16}.} \n\\section{Preliminaries}\\label{sec:pre}\n\\delete{\nIn this section, we briefly introduce the theories of interactive computability and executability, and define a subclass of transition systems with which $\\omega$-translations can be associated.\n}\n\\subsection{The Theory of Interactive Computation}\n\nIn~\\cite{vLW2006}, van Leeuwen and Wiedermann present an analysis of interactive computation on the basis of a \\emph{component} $C$ (thought to behave according to a deterministic program) interacting with an unpredictable \\emph{environment} $E$. They discuss the consequences of a few general postulates pertaining to the behaviour and interaction of $C$ and $E$ for interactive recognition, interactive generation and interactive translation. In their analysis, the component $C$ acts as a stream transducer, transforming an infinite input stream of data symbols from  $\\Sigma=\\{0,1\\}$ presented by $E$ at its input port into an infinite output stream of symbols from $\\Sigma$ produced at its output port. Henceforth, by an \\emph{$\\omega$-translation} we mean a mapping $\\phi: \\Sigma^{\\omega}\\rightarrow\\Sigma^{\\omega}$ (with $\\Sigma^{\\omega}$ denoting the set of streams, i.e., infinite sequences, over $\\Sigma$).\n\nInteractive computation is a step-wise process. It is not required that the environment offers a symbol in every step, nor that the component produces a symbol in every step. For the purpose of modelling components, however, it is convenient to record that nothing is offered or produced. The symbol $\\lambda$ is used to indicate the situation that no symbol is offered at the input port or produced at the output port, and we let $\\Sigma_\\lambda=\\Sigma\\cup\\{\\lambda\\}$. It is assumed that when $E$ offers a non-$\\lambda$ symbol in some step, then the component $C$ produces a non-$\\lambda$ symbol at its output port within finitely many steps, and vice versa; this assumption is referred to as the \\emph{interactiveness} (or \\emph{finite delay}) condition in the work of van Leeuwen and Wiedermann.\n\n\n\n\nIn order to formally define which $\\omega$-translations are interactively computable by a computational device, van Leeuwen and Wiedermann proposed the notion of \\emph{interactive Turing machine} \\cite{vLW2001,vLW2001a}. It extends the classical notion of Turing machine with an input port and an output port, through which it exchanges an infinite, never ending stream of data symbols with its environment. Interactive Turing machines use a two-way infinite tape as memory on which they can write symbols from some presupposed set ${\\mathcal{D}_{\\Box}}$ of \\emph{tape symbols}, not necessarily disjoint from $\\Sigma$ and including the special $\\Box$ symbol to denote an empty tape cell. Our formal definition below is adapted from~\\cite{Verbaan2006} (but we leave out the distinction between internal and external states).\n\n\n\\begin{definition}\\label{def:itm}\nA \\emph{(deterministic) interactive Turing machine} (ITM) with a single work tape is a triple ${\\mathcal{I}}=(Q,\\step{}_{{\\mathcal{I}}},{q_{\\mathalpha{in}}})$, where\n\\begin{enumerate}\n    \\item $Q$ is its set of \\emph{states};\n    \n    \\item $\\step{}_{{\\mathcal{I}}}:Q\\times{\\mathcal{D}_{\\Box}}\\times\\Sigma_\\lambda\\rightarrow Q\\times{\\mathcal{D}_{\\Box}}\\times\\{L,R\\}\\times\\Sigma_\\lambda$ is a transition function; and\n    \\item ${q_{\\mathalpha{in}}}\\in Q$ is its \\emph{initial state}.\n\\end{enumerate}\n\\end{definition}\n\nThe contents of the tape of an ITM may be represented by an element of $({\\mathcal{D}_{\\Box}})^{*}$\\fullversion{ (the set of finite sequences of symbols in ${\\mathcal{D}_{\\Box}}$)}. We denote by $\\check{{\\mathcal{D}_{\\Box}}}=\\{\\check{d}\\mid d\\in{\\mathcal{D}_{\\Box}}\\}$ the set of \\emph{marked} symbols; a \\emph{tape instance} is a sequence $\\delta\\in({\\mathcal{D}_{\\Box}}\\cup\\check{{\\mathcal{D}_{\\Box}}})^{*}$ such that $\\delta$ contains exactly one element of $\\check{{\\mathcal{D}_{\\Box}}}$. The marker indicates the position of the tape head.\n\\fullversion{\nIntuitively the transition $(q,\\delta)\\step{i/o}_{{\\mathcal{I}}}(q',\\delta')$ means that whenever the ITM is in state $q$, its tape head reads the symbol $d$, and input symbol $i$ is offered at its input port, then it replaces the symbol $d$ by the symbol $e$ on its tape, moves the tape head one position in the direction of $M$, produces the output symbol $o$ at its output port and then continues in state $q'$.}\n\nA \\emph{computation} of an ITM ${\\mathcal{I}}=(Q,\\step{}_{{\\mathcal{I}}},{q_{\\mathalpha{in}}})$ is an infinite sequence of transitions\n\n", "index": 1, "text": "\\begin{equation} \\label{eq:itmcomputation}\n  ({q_{\\mathalpha{in}}},\\check{\\Box})=(q_0,\\delta_0)\\step{i_0/o_0}_{{\\mathcal{I}}}(q_1,\\delta_1)\\step{i_1/o_1}_{{\\mathcal{I}}}\\cdots (q_k,\\delta_k)\\step{i_k/o_k}_{{\\mathcal{I}}}\\cdots\n\\enskip.\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m1\" class=\"ltx_Math\" alttext=\"({q_{{in}}},\\check{\\Box})=(q_{0},\\delta_{0})\\step{i_{0}/o_{0}}_{{\\mathcal{I}}}%&#10;(q_{1},\\delta_{1})\\step{i_{1}/o_{1}}_{{\\mathcal{I}}}\\cdots(q_{k},\\delta_{k})%&#10;\\step{i_{k}/o_{k}}_{{\\mathcal{I}}}\\cdots\\enskip.\" display=\"block\"><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mrow><mi>i</mi><mo>\u2062</mo><mi>n</mi></mrow></msub><mo>,</mo><mover accent=\"true\"><mi mathvariant=\"normal\">\u25a1</mi><mo stretchy=\"false\">\u02c7</mo></mover><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mrow><mrow><mrow><mrow><mrow><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo>,</mo><msub><mi>\u03b4</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mo>\u2062</mo><msub><mi>i</mi><mn>0</mn></msub></mrow><mo>/</mo><mmultiscripts><mi>o</mi><mn>0</mn><none/><mi class=\"ltx_font_mathcaligraphic\">\u2110</mi><none/></mmultiscripts></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>1</mn></msub><mo>,</mo><msub><mi>\u03b4</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mo>\u2062</mo><msub><mi>i</mi><mn>1</mn></msub></mrow><mo>/</mo><mmultiscripts><mi>o</mi><mn>1</mn><none/><mi class=\"ltx_font_mathcaligraphic\">\u2110</mi><none/></mmultiscripts></mrow><mo>\u2062</mo><mi mathvariant=\"normal\">\u22ef</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mi>k</mi></msub><mo>,</mo><msub><mi>\u03b4</mi><mi>k</mi></msub><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mo>\u2062</mo><msub><mi>i</mi><mi>k</mi></msub></mrow><mo>/</mo><mmultiscripts><mi>o</mi><mi>k</mi><none/><mi class=\"ltx_font_mathcaligraphic\">\u2110</mi><none/></mmultiscripts></mrow><mo>\u2062</mo><mpadded width=\"+5pt\"><mi mathvariant=\"normal\">\u22ef</mi></mpadded></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "\n\nLet $T_1=({\\mathcal{S}}_1,\\step{}_1,\\uparrow_1)$ and $T_2=({\\mathcal{S}}_2,\\step{}_2,\\uparrow_2)$ be transition systems. We say that $T_1$ and $T_2$ are weak trace equivalent iff ${\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(\\uparrow_1)={\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(\\uparrow_2)$, denoted by $T_1{\\ensuremath{\\mathrel{=_{\\text{wt}}^{\\infty}}}} T_2$.\n\\end{definition}}\n\n\\delete{\\subsection{Reactive Turing Machine and Executability}\n\n{\\underline{\\sf todo}: {\\color{red}{{Integrate the material in this subsection in the previous subsection.}}}}}\n\nThe notion of reactive Turing machine (RTM) was put forward in \\cite{BLT2013} to mathematically characterise which behaviour is executable by a conventional computing system. We recall the definition of RTMs and the ensued notion of executable transition system. \\delete{The definition of RTMs is parameterised with the set ${\\mathcal{A}_{\\tau}}$, which we  now assume to be a finite set. Furthermore, the definition is parameterised with another finite set ${\\mathcal{D}}$ of \\emph{data symbols}. We extend ${\\mathcal{D}}$ with a special symbol $\\Box\\notin{\\mathcal{D}}$ to denote a blank tape cell, and denote the set ${\\mathcal{D}}\\cup\\{\\Box\\}$ of \\emph{tape symbols} by ${\\mathcal{D}_{\\Box}}$.}\n\\begin{definition}\\label{def:rtm}\nA \\emph{reactive Turing machine} (RTM) ${\\mathcal{M}}$ is a triple $({\\mathcal{S}},\\step{},\\uparrow)$, where\n\\begin{enumerate}\n    \\item ${\\mathcal{S}}$ is a finite set of \\emph{states},\n    \\item ${\\step{}}\\subseteq {\\mathcal{S}}\\times{\\mathcal{D}_{\\Box}}\\times{\\mathcal{A}_{\\tau}}\\times{\\mathcal{D}_{\\Box}}\\times\\{L,R\\}\\times{\\mathcal{S}}$ is a $({\\mathcal{D}_{\\Box}}\\times{\\mathcal{A}_{\\tau}}\\times{\\mathcal{D}_{\\Box}}\\times\\{L,R\\})$-labelled \\emph{transition relation} (we write $s\\step{a[d/e]M}t$ for $(s,d,a,e,M,t)\\in{\\step{}}$),\n    \\item ${\\uparrow}\\in{\\mathcal{S}}$ is a distinguished \\emph{initial state}.\n\\end{enumerate}\n\\end{definition}\n\n\nIntuitively, the meaning of  a transition $s\\step{a[d/e]M}t$ is that whenever ${\\mathcal{M}}$ is in state $s$, and $d$ is the symbol currently read by the tape head, then it may execute the action $a$, write symbol $e$ on the tape (replacing $d$), move the read/write head one position to the left or the right on the tape, and then end up in state $t$.\n\nTo formalise the intuitive understanding of the operational behaviour of RTMs, we associate with every RTM ${\\mathcal{M}}$ an ${\\mathcal{A}_{\\tau}}$-labelled transition system  ${\\mathcal{T}}({\\mathcal{M}})$. The states of ${\\mathcal{T}}({\\mathcal{M}})$ are the configurations of ${\\mathcal{M}}$, pairs consisting of a state and a tape instance.\n\\fullversion{We adopt a convention to concisely denote new placement of the tape head marker. Let $\\delta$ be an element of ${\\mathcal{D}_{\\Box}}^{*}$. Then by ${{\\delta} \\!}^{\\scriptscriptstyle <}$ we denote the element of $({\\mathcal{D}_{\\Box}}\\cup\\check{{\\mathcal{D}_{\\Box}}})^{*}$ obtained by placing the tape head marker on the right-most symbol of $\\delta$ (if it exists), and $\\check{\\Box}$ otherwise.\nSimilarly ${\\prescript{\\scriptscriptstyle >}{}{\\! {\\delta}}}$ is obtained by placing the tape head marker on the left-most symbol of $\\delta$ (if it exists), and $\\check{\\Box}$ otherwise.  A configuration of an ITM consists of pair $(q,\\delta)$ of a state and a tape instance. We write $(q,\\delta)\\step{i/o}_{{\\mathcal{I}}}(q',\\delta')$ if ${\\step{}_{{\\mathcal{I}}}}(q,d,i)=(q',e,M,o)$, there is an occurrence of the marked version $\\check{d}$ of $d$ in $\\delta$, $\\delta'$ is obtained from $\\delta$ by replacing $\\check{d}$ by $e$ and replacing the symbol left or right of $\\check{d}$ (depending on whether $M=L$ or $M=R$) by its marked version.}\n\n\\begin{definition}\\label{def:lts-tm}\nLet ${\\mathcal{M}}=({\\mathcal{S}},\\step{},\\uparrow)$ be an RTM. The transition system ${\\mathcal{T}}({\\mathcal{M}})$ \\emph{associated with} ${\\mathcal{M}}$ is defined as follows:\n\\begin{enumerate}\n    \\item its set of states ${\\mathcal{S}}$ consists of the set of all configurations of ${\\mathcal{M}}$;\n    \\item its transition relation $\\step{}$ is the least relation satisfying, for all $a\\in{\\mathcal{A}_{\\tau}},\\,d,e\\in{\\mathcal{D}_{\\Box}}$ and $\\delta_L,\\delta_R\\in{\\mathcal{D}_{\\Box}}^{*}$:\n    \\begin{itemize}\n        \\item $(s,\\delta_L\\check{d}\\delta_R)\\step{a}(t,{{\\delta_L} \\!}^{\\scriptscriptstyle <}e\\delta_R)$ iff $s\\step{a[d/e]L}t$, and\n        \\item $(s,\\delta_L\\check{d}\\delta_R)\\step{a}(t,\\delta_L e{\\prescript{\\scriptscriptstyle >}{}{\\! {\\delta_R}}})$ iff $s\\step{a[d/e]R}t$\n    \\end{itemize}\n    (${{\\delta_L} \\!}^{\\scriptscriptstyle <}$ is obtained from $\\delta_L$ by placing the tape head marker on the right-most symbol in $\\delta_L$, and ${\\prescript{\\scriptscriptstyle >}{}{\\! {\\delta_R}}}$ is obtained analogously from $\\delta_R$);\n    \\item its initial state is the configuration $(\\uparrow,\\check{\\Box})$.\n\\end{enumerate}\n\\end{definition}\n\nTuring introduced his machines to define the notion of \\emph{effectively computable function} in~\\cite{Turing1936}. By analogy, we have a notion of \\emph{effectively executable behaviour}~\\cite{BLT2013}.\n\n\\begin{definition}\\label{def:exe}\nA transition system is \\emph{executable} if it is the transition system associated with some RTM.\n\\end{definition}\n\\fullversion{\nFor the convenience of proofs, we also introduce the RTMs with rules of the form $s\\step{a[d/e]N}t$, where $N$ means no movement of the tape head. We denote such machines as RTM$^{N}$. An observation is that one can simulate the transition system of an RTM$^{N}$ by an RTM up to divergence-preserving branching bisimilarity.\n\n\\begin{lemma}~\\label{lemma:RTMN}\nThe transition system associated with an RTM$^{N}$ is executable modulo divergence-preserving branching bisimilarity.\n\\end{lemma}}\n\n\\section{Executability of Interactive Turing Machines}~\\label{sec:itm}\n\n\nIn this section we associate a transition system with every ITM, and\nthen prove that it is executable modulo divergence-preserving\nbranching bisimilarity. It is convenient to consider input and output\nas separate actions in the transition system associated with an\nITM. We denote by $?i$ the action of inputting the\nsymbol $i\\in\\Sigma$, and by $!o$ the action of outputting the symbol $o\\in\\Sigma$.\n\n\n\\begin{definition}\\label{def:lts-itm}\nLet ${\\mathcal{I}}=(Q,\\step{}_{{\\mathcal{I}}},{q_{\\mathalpha{in}}})$ be an ITM.\nThe transition system ${\\mathcal{T}}({\\mathcal{I}})$ associated with ${\\mathcal{I}}$ is defined as follows:\n\\begin{enumerate}\n\\item its set of states is the set\n   $\\{(s,\\delta)\\mid s\\in Q\\cup\\{s_o\\mid o\\in\\Sigma_{\\lambda}, s\\in Q\\},\\,\\delta\\mbox{ is a tape instance}\\}$;\n\\item its transition relation $\\step{}$ is the least relation\n  satisfying, for all $i,o\\in\\Sigma_{\\lambda}$, $d,e\\in{\\mathcal{D}_{\\Box}}$, and\n  $\\delta_L,\\delta_R\\in{\\mathcal{D}_{\\Box}}^{*}$:\n  \\begin{itemize}\n  \\item\n    $(s,\\delta_L\\check{d}\\delta_R)\\step{?i}(t_o,{{\\delta_L} \\!}^{\\scriptscriptstyle <}e\\delta_R)$\n      iff $(s,d,i)\\step{}_{{\\mathcal{I}}}(t,e,L,o)$ and $i\\in\\Sigma$,\n  \\item\n    $(s,\\delta_L\\check{d}\\delta_R)\\step{?i}(t_o,\\delta_L\n    e{\\prescript{\\scriptscriptstyle >}{}{\\! {\\delta_R}}})$ iff $(s,d,i)\\step{}_{{\\mathcal{I}}}(t,e,R,o)$ and $i\\in\\Sigma$,\n \\item\n    $(s,\\delta_L\\check{d}\\delta_R)\\step{\\tau}(t_o,{{\\delta_L} \\!}^{\\scriptscriptstyle <}e\\delta_R)$\n      iff $(s,d,i)\\step{}_{{\\mathcal{I}}}(t,e,L,o)$ and $i=\\lambda$,\n  \\item\n    $(s,\\delta_L\\check{d}\\delta_R)\\step{\\tau}(t_o,\\delta_L\n    e{\\prescript{\\scriptscriptstyle >}{}{\\! {\\delta_R}}})$ iff $(s,d,i)\\step{}_{{\\mathcal{I}}}(t,e,R,o)$ and $i=\\lambda$,\n   \\item\n    $(s_o,\\delta)\\step{!o}(s,\\delta)$ iff $o\\in\\Sigma$, and\n    $(s_o,\\delta)\\step{\\tau}(s,\\delta)$ iff $o=\\lambda$.\n  \\end{itemize}\n\\item its initial state is the configuration $({q_{\\mathalpha{in}}},\\check{\\Box})$.\n\\end{enumerate}\n\\end{definition}\n\nThe following theorem shows that every transition systems associated\nwith an ITM can be simulated by an RTM.\\notinfull{ (A proof of the\n  theorem is included in the Appendix.)}\n{{ In the proof it is convenient to allow RTMs to have transitions of the form $s\\step{a[d/e]S}t$, where $S$ is a stay transition with no movement of the tape head. We refer to such machines as RTMs with stay transitions. The operational semantics of RTMs can be extended to an operational semantics for RTMs with stay transitions by adding the clause: $(s,\\delta_L\\check{d}\\delta_R)\\step{a}(t,\\delta_L \\check{e}\\delta_R)$ iff $s\\step{a[d/e]S}t$. The transition system of an RTM with stay transitions can be simulated by an RTM up to divergence-preserving branching bisimilarity.  \\begin{lemma}~\\label{lemma:RTMN} The transition system associated with an RTM with stay transitions is executable up to divergence-preserving branching bisimilarity. \\end{lemma}  \\begin{proof} We suppose that ${\\mathcal{M}}=({\\mathcal{S}},\\step{},\\uparrow)$ is an RTM with stay transitions, and its transition system is ${\\mathcal{T}}({\\mathcal{M}})$. We define a normal RTM ${\\mathcal{M}}'=({\\mathcal{S}}_1,\\step{}_1,\\uparrow_1)$ that simulates ${\\mathcal{T}}({\\mathcal{M}})$ as follows:  \\begin{enumerate} \\item ${\\mathcal{S}}_1={\\mathcal{S}}\\cup\\{s_t\\mid s,t\\in{\\mathcal{S}}\\}$; \\item $s\\step{a[d/e]L}_1 t$ iff $s\\step{a[d/e]L}t$; \\item $s\\step{a[d/e]R}_1 t$ iff $s\\step{a[d/e]R}t$; \\item $s\\step{a[d/e]L}_1 s_t$ and $s_t\\step{\\tau[d/d]R}_1t$ iff $s\\step{a[d/e]S}t$; and \\item $\\uparrow_1=\\uparrow$. \\end{enumerate}  Then it is straight forward to ${\\mathcal{T}}({\\mathcal{M}}'){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}{\\mathcal{T}}({\\mathcal{M}})$. \\end{proof} }}\n\n\\begin{theorem}\\label{thm:itm-lts-iso}\nFor every ITM ${\\mathcal{I}}$ there exists an RTM ${\\mathcal{M}}$, such that ${\\mathcal{T}}({\\mathcal{I}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}} {\\mathcal{T}}({\\mathcal{M}})$.\n\\end{theorem}\n{{     We let ${\\mathcal{I}}=(Q,\\step{}_{{\\mathcal{I}}},{q_{\\mathalpha{in}}})$ be an ITM. By Lemma~\\ref{lemma:RTMN}, it is enough to show that there exists an RTM with stay transitions ${\\mathcal{M}}$ satisfying ${\\mathcal{T}}({\\mathcal{M}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}{\\mathcal{T}}({\\mathcal{I}})$.     We construct ${\\mathcal{M}}=({\\mathcal{S}},\\step{},\\uparrow)$ as follows:     \\begin{enumerate}         \\item ${\\mathcal{S}}={\\mathit{I}}\\cup{\\mathit{O}}$, where ${\\mathit{I}}=Q$ and ${\\mathit{O}}=\\{s_o\\mid o\\in\\Sigma_{\\lambda}, s\\in Q\\}$;         \\item the transition relation $\\step{}$ is defined by:         $s\\step{\\mathit{in}(i)[d/e]M}t_o$ if $(s,d,i)\\step{}_{{\\mathcal{I}}}(t,e,M,o)$, and $s_o\\step{\\mathit{out}(o)[e/e]S}s$ for all $s\\in{\\mathcal{S}}$, $o\\in\\Sigma_{\\lambda}$; and         \\item $\\uparrow={q_{\\mathalpha{in}}}$.     \\end{enumerate}     Then according to Definitions~\\ref{def:lts-tm} and~\\ref{def:lts-itm}, we get a transition system ${\\mathcal{T}}({\\mathcal{M}})={\\mathcal{T}}({\\mathcal{I}})$, where `=' is the pointwise equality, which also implies ${\\mathcal{T}}({\\mathcal{M}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}} {\\mathcal{T}}({\\mathcal{I}})$. }}\nAs a consequence we have the following corollary.\n\n\\begin{corollary}\\label{cor:itm-lts-exe}\nThe transition system associated with an ITM is executable modulo divergence-preserving branching bisimilarity.\n\\end{corollary}\n\n\n\\section{Executable $\\omega$-Translations}\\label{sec:exeomega}\n\\delete{\n{\\underline{\\sf todo}: {\\color{red}{{The goal of this section is to prove that a stream translation is executable if, and only if, it is interactively computable. To realise this goal, we have two subsections, one for the implication from left to right; the other for the implication from right to left.  The first subsection establishes the implication from left to right. It proceeds according to the following program: \\begin{enumerate}   \\item Explain how RTMs can be thought of as stream translators. We do not want to modify or extend the definition; we only want to put restrictions. One such restriction is that it has a limited interface, with one input channel and one output channel over which symbols from $\\Sigma$ can be communicated with the environment. More restrictions may be derived from the assumptions of van Leeuwen and Wiedermann (interactiveness, full environmental activity, etc.). And perhaps we want the RTMs to implement a strictly alternating regime of input and output: its states are strictly partitioned into input and output states (but we do allow $\\tau$-transitions). Furthermore, its output states should be unambiguous. (This amounts to formulating Definition~{def:i-o-lts} for RTMs rather than for transition systems. But I think we should not, from the start, impose the `Reactive in response' condition, because it is undecidable. Rather we should, as van Leeuwen and Wiedermann do, explain that if the interactiveness condition is satisfied, then it is possible to associate a stream translation with an RTM.)   \\item An RTM with such a restricted interface gives rise to a transition system that can be thought of as the mathematical representation of a set of computations. We should first formally what is a computation in a transition system (see the definition for ITMs for inspiration!). Then we can say what is the input stream and what is the output stream associated with a computation. This gives a definition of interaction pairs (as for ITMs).   \\item Argue that an RTM suitable for stream translation, and satisfying the interactiveness condition, defines a stream translation (via the computations of the transition system). We can then define an executable stream translation as a stream translation associated with an RTM.   \\item Then, establish that executable stream translations are interactively computable by proving that they are limit continuous and using Theorem~\\ref{thm:int-trans}. \\end{enumerate}  The second subsection establishes the implication from right to left. It proceeds according to the following program: \\begin{enumerate}   \\item Associate with ITMs a transition system semantics.   \\item Argue that the stream translation associated with the ITM directly is the same as the stream translation derived from the transition system.   \\item Prove that the transition system associated with an ITM is executable (up to divergence-preserving branching bisimilarity).   \\item Explain that divergence-preserving branching bisimilarity preserves computations (perhaps state this result as a lemma) and then conclude that the interactive stream translations are executable. \\end{enumerate} }}}}\n}\n\\delete{\\subsection{RTMs for $\\omega$-Translations}~\\label{subsec:RTM-omega}}\n\\delete{\n The interactive computability of ITMs are defined as interactively computable $\\omega$-translations, then a nature question is that, does RTMs also give rise to the same class of $\\omega$-translations?}\n Recall that an $\\omega$-translation is defined to be interactively computable if, and only if, it can be realised by an ITM. RTMs are designed for exhibiting the expressive power of executable transition systems, rather than $\\omega$-translations, and not every RTM naturally has an $\\omega$-translation associated with it. Imposing some restrictions on the formalism of RTMs, however, we shall define a subclass of RTMs with which an $\\omega$-translation is naturally associated. The $\\omega$-translation realised by such an RTM is then called \\emph{executable}, and we shall establish that an $\\omega$-translation is interactively computable if, and only if, it is executable.\n\nBy analogy to the systems described in the theory of interactive computation, we let the RTMs for $\\omega$-translations execute in steps, in such a way that with every step a pair of input and output actions can be associated. With every infinite computation of the RTM we can then associate a interaction pair, and the RTM will thus give rise to an $\\omega$-translation.\n\n \\begin{definition}~\\label{def:rtm-omega}\n Let ${\\mathcal{A}_{\\tau}}=\\{?i,!o\\mid i,o\\in\\{0,1\\}\\}\\cup\\{\\tau\\}$, and let ${\\mathcal{M}}=({\\mathcal{S}},\\step{},\\uparrow)$ be an RTM with ${\\mathcal{A}_{\\tau}}$ as its set of labels. Then ${\\mathcal{M}}$ is an \\emph{RTM for $\\omega$-translation} if it satisfies the following properties:\n \\begin{enumerate}\n \\item the set of states ${\\mathcal{S}}$ is partitioned into disjoint sets $\\in$ of input states and ${\\mathit{E}}$ of execution states, i.e., ${\\mathcal{S}}={\\mathit{I}}\\cup{\\mathit{E}}$ and ${\\mathit{I}}\\cap{\\mathit{E}}=\\emptyset$;\n \\item the initial state ${\\uparrow}$ is an input state, i.e., ${\\uparrow}\\in{\\mathit{I}}$;\n \\item for a transition $s\\step{a[d/e]M}t$, if $s\\in{\\mathit{I}}$, then $a\\in \\{?0,?1\\}$ and $t\\in{\\mathit{E}}$; if $s\\in{\\mathit{E}}$, then $a\\in\\{!0,!1,\\tau\\}$ and $t\\in {\\mathit{I}}$; and\n \\item for all $(s,d)\\in{\\mathit{E}}\\times{\\mathcal{D}_{\\Box}}$, there is at most one transition of the form $s\\step{a[d/e]M}t$; and\n \\item for all $(s,d)\\in{\\mathit{I}}\\times{\\mathcal{D}_{\\Box}}$, there are exactly two transitions of the form $s\\step{a[d/e]M}t$, one with $a=?0$ and one with $a=?1$.\n \\end{enumerate}\n \\end{definition}\n \\delete{\n Note that we do not allow $\\tau$ actions in an input state, so that this restriction corresponds to full-active.} \\delete{We also make a discussion about the machines that incorporate with free environment, where $\\tau$ actions are enabled in an input state in the Appendix.}\n\\delete{\n \\textbf{Interface}\n One of such restrictions is that it has a limited interface, with one input channel and one output channel over which symbols from $\\Sigma$ can be communicated with the environment. Hence, we take ${\\mathcal{A}_{\\tau}}=\\{?i,!o\\mid i,o\\in\\Sigma\\}\\cup\\{\\tau\\}$ as the set of action labels.\n\n \\textbf{Execution}\n\n  The machine realises an $\\omega$-translation with a stepwise procedure. Each step is divided into an input transition and an execution transition. Therefore, we divide the set of control states ${\\mathcal{S}}$ into disjoint sets of input states and execution states, that is, ${\\mathcal{S}}={\\mathit{I}}\\cup{\\mathit{E}}$ and ${\\mathit{I}}\\cap{\\mathit{E}}=\\emptyset$.\n\n\n  For a control state $s\\in{\\mathit{I}}$, the machine can only receive an input symbol from the environment. So it only has the transition rules of the form $s\\step{i[d/e]M}t$, where $i\\in \\{?0,?1\\}$ and $t\\in{\\mathit{E}}$. We do not allow $\\tau$ actions in an input state, so that this restriction corresponds to full-active. We also make a discussion about the machines that incorporate with free environment, where $\\tau$ actions are enabled in an input state in Appendix~\\ref{appendix}.\n\n  For a control state $s\\in{\\mathit{E}}$, the machine either sends an output symbol to the environment, or makes a a step of internal computation. So it only has the transition rules of the form $s\\step{o[d/e]M}t$, where $o\\in\\{!0,!1,\\tau\\}$ and $t\\in {\\mathit{I}}$. Moreover, to obtain a function over streams, the execution of the machine should be deterministic with respect to certain input. Therefore, we require that for all $(s,d)$ where $s\\in{\\mathit{E}}$ and $d\\in{\\mathcal{D}_{\\Box}}$, there is at most one transition $s\\step{o[d/e]M}t$.\n\n  Then an execution sequence of such an RTM ${\\mathcal{M}}$ is $(s_0,\\delta_0)\\step{i_0}(s_0',\\delta_0')\\step{o_0}\\ldots (s_n,\\delta_n)\\step{i_n}(s_n',\\delta_n)\\step{o_n}\\ldots$, where $s_0,s_1,\\ldots\\in{\\mathit{I}}$ and $s_0',s_1',\\ldots\\in{\\mathit{E}}$. We get an input stream $\\vec{x}$ obtained from $i_0,i_1,\\ldots$ and an output stream $\\vec{y}$ obtained from $o_1,o_2,\\ldots$ by omitting all the occurrence of $\\tau$. Then $(\\vec{x},\\vec{y})\\in\\Sigma^{\\omega}\\times\\Sigma^{\\omega}$ is an interaction pair of ${\\mathcal{M}}$.\n\n  Then we may associate with an RTM for $\\omega$-translations ${\\mathcal{M}}$ an $\\omega$-translation as we did for ITMs. Moreover, an $\\omega$-translation $\\phi$ is called an \\emph{executable} translation if it can be realised by an RTM for $\\omega$-translation.}\n\n  \\delete{{\\underline{\\sf todo}: {\\color{red}{{By the formalism the computation of RTMs for $\\omega$-translations and ITMs, it is straightforward that they realise the same classes of $\\omega$-translations.}}}}}\n\n\\delete{\n\\subsection{Obtain $\\omega$-Translation from a transition system}~\\label{subsec:omega-lts}}\n\\delete{As mentioned in the theory of van Leeuwen and Wiedermann~\\cite{vLW2006}, $\\omega$-translations are used as a mathematical characterization of interactive computation. For an alphabet $\\Sigma$, we use $\\Sigma^{\\omega}$ to denote the set of infinite words over $\\Sigma$; an $\\omega$-translation is a function $\\phi:\\Sigma^{\\omega}\\rightarrow\\Sigma^{\\omega}$.}\n\n\\delete{\nNote that $\\omega$-translations for interactive computation are \\emph{total} by definition, since a valid system is always assumed to be able to react to every possible input stream of an environment.\nWe can get the $\\omega$-translation realized by an ITM from its transition system by applying Definition~\\ref{def:in-out-lts}, and call such $\\omega$-translation \\emph{interactively computable}. As a remark, in~\\cite{vLW2006} and~\\cite{Verbaan2006}, the $\\omega$-translation realized by an ITM is defined by the infinite computation sequence of the machine, in which every step is related with an input and output symbol, whereas in our definition, the $\\omega$-translation of an ITM is obtained from the weak infinite traces of its transition system. The notion of weak infinite trace just coincides with the infinite computation sequence of the machine. Therefore, we can verify that the definition of $\\omega$-translations from Definition~\\label{def:in-out-lts} is consistent with the original one for ITMs.}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\delete{\\subsection{Executable $\\omega$-translations}~\\label{subsec:exe-omega}}\n In the following lemma we establish some properties of the transition system associated with an RTM for $\\omega$-translation. \\notinfull{(See the Appendix for a proof of the lemma.)}\n\n\\begin{lemma}\\label{lemma:i-o-lts}\nLet ${\\mathcal{M}}$ be an RTM for $\\omega$-translation. Then ${\\mathcal{T}}({\\mathcal{M}})=({\\mathcal{S}}_{{\\mathcal{M}}},\\step{}_{{\\mathcal{M}}},\\uparrow_{{\\mathcal{M}}})$ satisfies the following properties:\n\\begin{enumerate}\n    \\item (\\emph{Alternation}) The set of states ${\\mathcal{S}}_{{\\mathcal{M}}}$ is partitioned into a set of input states ${\\mathit{I}}_{{\\mathcal{M}}}$ and a set of output states ${\\mathit{E}}_{{\\mathcal{M}}}$, i.e., ${\\mathcal{S}}_{{\\mathcal{M}}}={\\mathit{I}}_{{\\mathcal{M}}}\\cup{\\mathit{E}}_{{\\mathcal{M}}}$ and ${\\mathit{I}}_{{\\mathcal{M}}}\\cap{\\mathit{E}}_{{\\mathcal{M}}}=\\emptyset$. For every transition $s\\step{a} s'$, if $s\\in{\\mathit{I}}_{{\\mathcal{M}}}$, then $a\\in\\{?0,?1\\}$ and $s'\\in{\\mathit{E}}_{{\\mathcal{M}}}$; if $s\\in{\\mathit{E}}_{{\\mathcal{M}}}$, then $a\\in\\{!0,!1,\\tau\\}$ and $s'\\in{\\mathit{I}}_{{\\mathcal{M}}}$.\n    \\item (\\emph{Unambiguity}) For every $s\\in{\\mathit{E}}_{{\\mathcal{M}}}$, there is exactly one outgoing transition $s\\step{a} s'$ with $a\\in\\{!0,!1,\\tau\\}$.\n    \\item (\\emph{Totality}) For every $s\\in{\\mathit{I}}_{{\\mathcal{M}}}$, there are exactly two outgoing transitions, labelled with $?0$ and $?1$, respectively.\n\\end{enumerate}\n\\end{lemma}\n{{ \\begin{proof}  A state in ${\\mathcal{S}}_{{\\mathcal{M}}}$ is a configuration $(s,\\delta)$ of ${\\mathcal{M}}$, and we can make a partition of the set of all configurations according to the control states. If $s\\in{\\mathit{I}}$, then $(s,\\delta)\\in{\\mathit{I}}_{{\\mathcal{M}}}$; if $s\\in{\\mathit{E}}$, then $(s,\\delta)\\in{\\mathit{E}}_{{\\mathcal{M}}}$, where ${\\mathit{I}}$ and ${\\mathit{E}}$ are defined in Definition~\\ref{def:rtm-omega}. \\begin{enumerate}     \\item (Alternation) By condition 1 in Definition~\\ref{def:rtm-omega}, we have ${\\mathcal{S}}={\\mathit{I}}\\cup{\\mathit{E}}$ and ${\\mathit{I}}\\cap{\\mathit{E}}=\\emptyset$, which infers ${\\mathcal{S}}_{{\\mathcal{M}}}={\\mathit{I}}_{{\\mathcal{M}}}\\cup{\\mathit{E}}_{{\\mathcal{M}}}$ and ${\\mathit{I}}_{{\\mathcal{M}}}\\cap{\\mathit{E}}_{{\\mathcal{M}}}=\\emptyset$; moreover, by condition 2, for a transition $s\\step{a[d/e]M}t$, if $s\\in{\\mathit{I}}$, then $a\\in \\{?0,?1\\}$ and $t\\in{\\mathit{E}}$; if $s\\in{\\mathit{E}}$, then $a\\in\\{!0,!1,\\tau\\}$ and $t\\in {\\mathit{I}}$, which infers that for every transition $s\\step{a} s'$, if $s\\in{\\mathit{I}}_{{\\mathcal{M}}}$, then $a\\in\\{?0,?1\\}$ and $s'\\in{\\mathit{E}}_{{\\mathcal{M}}}$; if $s\\in{\\mathit{E}}_{{\\mathcal{M}}}$, then $a\\in\\{!0,!1,\\tau\\}$ and $s'\\in{\\mathit{I}}_{{\\mathcal{M}}}$.     \\item (Unambiguity) By condition 3 in Definition~\\ref{def:rtm-omega}, for all $(s,d)$ where $s\\in{\\mathit{E}}$ and $d\\in{\\mathcal{D}_{\\Box}}$, there is at most one transition $s\\step{o[d/e]M}t$, which infers that for every $s\\in{\\mathit{E}}_{{\\mathcal{M}}}$, there is exactly one outgoing transition $s\\step{a} s'$ with $a\\in\\{!0,!1,\\tau\\}$.     \\item (Totality) By condition 4 in Definition~\\ref{def:rtm-omega}, for all $(s,d)$ where $s\\in{\\mathit{I}}$ and $d\\in{\\mathcal{D}_{\\Box}}$, there are exactly two transitions of the form $s\\step{i[d/e]M}t$, with $?0$ and $?1$ as there labels, respectively, which infers that for every $s\\in{\\mathit{I}}_{{\\mathcal{M}}}$, there are two outgoing transitions labelled by $?0$ and $?1$, respectively. \\end{enumerate} \\end{proof} }}\n\nWe call a transition that satisfies the conditions of Lemma~\\ref{lemma:i-o-lts} an \\emph{i/o transition system}.\nMoreover, by analogy to the interactiveness condition for ITMs, we impose an interactiveness condition on RTMs for $\\omega$-translation.\n\n\\begin{definition}\nAn i/o transition system is interactive, if\n  for every $s\\in{\\mathcal{S}}$ and $s\\step{?i}s_0$ with $i\\in\\{0,1\\}$, and for every sequence $s_0\\step{}s_1\\step{}\\cdots$, there exists a natural number $i$, such that $s_i\\step{!o}s_{i+1}$ with $o\\in\\{0,1\\}$.\n\nAn RTM for $\\omega$-translation is \\emph{interactive} if the associated i/o transition system is.\n\\end{definition}\n\\delete{\n\\begin{enumerate}\n    \\item \\emph{free environment} assumption, that is, for every $s\\in{\\mathit{I}}$, it has has exactly three outgoing transitions, labelled by $?0,\\,?1,\\,\\tau$, respectively; and\n    \\item \\emph{full active environment} assumption, that is, for every $s\\in{\\mathit{I}}$, there are exactly two outgoing transitions, labelled by $?0,\\,?1$, respectively.\n\\end{enumerate}\n\n\n Naturally, we should not implicitly put any preassumption on the behaviour of the environment. To adapt to a nonrestrictive environment, the system should allow any behaviour in input states, which is reflected by the free environment assumption. However, we shall see that free environment sometimes does not lead to a valid $\\omega$-translation over $\\Sigma$. (It does lead to an omega-translation over $\\Sigma_\\lambda$, as we shall see later.) Therefore, we also consider the so called full active environment assumption, which is also mentioned in~\\cite{vLW2006}. In this case, the environment sends a non-empty input to the system for every input state.\n\n\n\n\n\n\n\n\n\n\n For an arbitrary input stream, the transition system should deterministically get an output stream, which requires the determinism. Namely, for every $s\\in{\\mathcal{S}},\\,a\\in {\\mathcal{A}_{\\tau}}$, if there are transitions $s\\step{a} s_1$, and $s\\step{a} s_2$, then $s_1=s_2$. Note that, by the above definition and assumption for the environment, we already get a deterministic transition system.}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\delete{\nTherefore, we can make a detour from the transition systems associated with RTMs and ITMs, in order make a comparison between interactively computable $\\omega$-translations and executable $\\omega$-translations.\n}\nWe define the $\\omega$-translation realized by an RTM by defining the $\\omega$-translation realized by the i/o transition system associated with it. Let ${\\mathcal{T}}=({\\mathcal{S}},\\step{},\\uparrow)$ be an i/o transition system, let $s\\in{\\mathcal{S}}$, and let $\\sigma\\in{\\mathcal{A}}^{\\omega}$, say $\\sigma=a_0,a_1,\\ldots$; we write $s\\step{\\sigma}$ if there exist\n  $s_0,s_0', s_1,s_1',\\ldots\\in{\\mathcal{S}}$\nsuch that $s=s_0$, and $s_i\\step{}^{*}s_i'\\step{a_i}s_{i+1}$ for all $i\\geq 0$. (By $\\step{}^{*}$ we denote the reflexive-transitive closure of the relation $\\step{\\tau}$.)\nIf $\\sigma\\in \\mathcal{A}^\\omega$ and $s \\step{\\sigma}$, then $\\sigma$ is a \\emph{weak infinite trace}\nfrom $s$. We denote by ${\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s)$ the set of weak infinite traces from $s$.\\delete{, i.e.,\n\n\n", "itemtype": "equation", "pos": 26231, "prevtext": "\nThe \\emph{input stream} \\delete{{\\underline{\\sf todo}: {\\color{red}{{It may not be a stream, but a finite sequence; we may want to adapt terminology.}}}}} associated with the computation in \\eqref{eq:itmcomputation} is obtained from $i_0,i_1,\\dots$ by omitting all occurrences of $\\lambda$, and the \\emph{output stream} associated with the computation in \\eqref{eq:itmcomputation} is obtained from $o_0,o_1,\\dots$ by omitting all occurrences of $\\lambda$. A pair $(\\vec{x},\\vec{y})\\in\\Sigma^{\\omega}\\times\\Sigma^{\\omega}$ is an \\emph{interaction pair} associated with ${\\mathcal{I}}$ if there exists a computation of ${\\mathcal{I}}$ with $\\vec{x}$ as input stream and $\\vec{y}$ as output stream. The set of all interaction pairs associated with an ITM ${\\mathcal{I}}$ is called its \\emph{interactive behaviour}. (In Section~\\ref{sec:itm} we shall present a more refined view on its behaviour when we associate with every ITM a transition system.) The computation in \\eqref{eq:itmcomputation} is \\emph{interactive} if, for all $k\\in\\mathbb{N}$, if $i_k\\neq\\lambda$, then there exists $\\ell\\geq k$ such that $o_{\\ell}\\neq\\lambda$. The computation in \\eqref{eq:itmcomputation} is \\emph{input-active} if $i_k\\neq\\lambda$ for all $k\\in\\mathbb{N}$.\n\nAn ITM satisfies the \\emph{interactiveness} condition if all its computations are interactive. Clearly, if a deterministic ITM ${\\mathcal{I}}$ satisfies the interactiveness condition, then its interactive behaviour is total, in the sense that for every $\\vec{x}\\in\\Sigma^{\\omega}$ there is at least one $\\vec{y}\\in\\Sigma^{\\omega}$ such that $(\\vec{x},\\vec{y})$ is an interaction pair of ${\\mathcal{I}}$. By confining our attention to the input-active computations---which, in the terminology of \\cite{vLW2006}, corresponds to adopting the full environmental activity postulate---, we may then associate with every such ITM an $\\omega$-translation: we say that ITM ${\\mathcal{I}}$ produces $\\vec{y}$ on input $\\vec{x}$ if $(\\vec{x},\\vec{y})$ is the interaction pair associated with an input-active computation of ${\\mathcal{I}}$.\n\n\\begin{definition}\n  An $\\omega$-translation $\\phi:\\Sigma^{\\omega}\\rightarrow\\Sigma^{\\omega}$ is \\emph{interactively computable} if there exists a deterministic ITM that satisfying the interactiveness condition that produces $\\phi(\\vec{x})$ on input $\\vec{x}$ for all $\\vec{x}\\in\\Sigma^{\\omega}$.\n\\end{definition}\n\n\n{{ Van Leeuwen and Wiedermann present in~\\cite{vLW2006} a characterisation of the interactively computable $\\omega$-translations by showing that they can be approximated by classically computable partial functions on finite sequences over $\\Sigma$. For finite and infinite sequences $\\vec{x}$ and $\\vec{y}$, we write $\\vec{x}\\prec\\vec{y}$ if $\\vec{x}$ is a finite and strict prefix of $\\vec{y}$, and $\\vec{x}\\preceq\\vec{y}$ if $\\vec{x}\\prec\\vec{y}$ or $\\vec{x}=\\vec{y}$. We use the following definition of monotonic functions and limit-continuous functions. \\begin{definition}\\label{def:mono-limit-cont} \\begin{enumerate} \\item A partial function $f:\\Sigma^{*}\\rightharpoonup\\Sigma^{*}$ is \\emph{monotonic} if for all $\\vec{x},\\vec{y}\\in\\Sigma^{*}$ such that $\\vec{x}\\prec\\vec{y}$ and $f(\\vec{y})$ is defined, it holds that $f(\\vec{x})$ is defined as well and $f(\\vec{x})\\preceq f(\\vec{y})$. \\item A partial function $\\phi: \\Sigma^{\\omega}\\rightarrow\\Sigma^{\\omega}$ is called \\emph{limit-continuous} if there exists a classically computable monotonic partial function $f:\\Sigma^{*}\\rightarrow\\Sigma^{*}$ such that   $\\phi(\\lim_{k\\rightarrow\\infty}\\vec{x}_k)=\\lim_{k\\rightarrow\\infty}f(\\vec{x}_k)$ for all strictly increasing chains $\\vec{x}_1\\prec \\vec{x}_2\\prec\\cdots\\prec \\vec{x}_k\\prec\\cdots$ with $\\vec{x}_k\\in\\Sigma^{*}$. \\end{enumerate} \\end{definition}}}\n\nIn~\\cite{vLW2006} a criterion of the interactively computable $\\omega$-translations is presented by using limit-continuous functions\\notinfull{ (a formal definition is included in the Appendix)}.\n\n\\begin{theorem}\\label{thm:int-trans}\n  A total $\\omega$-translation is interactively computable iff it is limit-continuous.\n\\end{theorem}\n\n\n\\subsection{The Theory of Executability}\n\\fullversion{\n{\\underline{\\sf todo}: {\\color{red}{{Reorganise this section (possibly reusing some text to found elsewhere in the paper). Its main purpose is to briefly recap the theory of executability introduced in \\cite{BLT2013} (as far as we need it in this paper). I propose the following structure for this section: \\begin{enumerate}   \\item A brief account of the motivation for the theory of executability: it tries to combine computation and concurrency-style interaction in such a way that both are treated on equal footing; thus, an integration of computability and concurrency theory is realised.   \\item Introduce transition systems as the mathematical representation of behaviour.   \\item Introduce reactive Turing machines in order to define the notion of executable transition system. Note that some of the notions (e.g., how to deal with the tape, what is a configuration, etc.) have already been introduced and explained in the preceding subsection, so we need not elaborate to much about these issues and can refer back to some extent.   \\item Explain that transition systems are generally considered up to some behavioural equivalence relation, and introduce divergence preserving branching bisimilarity as the finest useful notion.   \\item As an illustration (and to have it available for the remainder of the paper), establish the result that reactive Turing machines with 'stay-transitions' (no movement of the tape head) are not more powerful than reactive Turing machines without, up to divergence-preserving branching bisimilarity. \\end{enumerate}}}}}\n}\nThe theory of executability combines computation and concurrency-style interaction in such a way that both are treated on equal footing; thus, an integration of computability and concurrency theory is realised.\n\nThe transition system is the central notion in the mathematical theory of discrete-event behaviour. It is parameterised by a set ${\\mathcal{A}}$ of \\emph{action symbols}, denoting the observable events of a system. \\delete{We shall later impose extra restrictions on ${\\mathcal{A}}$, e.g., requiring that it be finite or has a particular structure, but for now we let ${\\mathcal{A}}$ be just an arbitrary abstract set.} We extend ${\\mathcal{A}}$ with a special symbol $\\tau$, which intuitively denotes unobservable internal activity\\delete{ of the system}. We shall abbreviate ${\\mathcal{A}} \\cup\\{\\tau\\}$ by ${\\mathcal{A}_{\\tau}}$.\n\n\\begin{definition}\\label{def:lts}\nAn \\emph{${\\mathcal{A}_{\\tau}}$-labelled transition system} ${\\mathcal{T}}$ is a triple $({\\mathcal{S}},\\step{},\\uparrow)$, where,\n\\begin{enumerate}\n    \\item ${\\mathcal{S}}$ is a set of \\emph{states},\n    \\item ${\\step{}}\\subseteq{\\mathcal{S}}\\times{\\mathcal{A}_{\\tau}}\\times{\\mathcal{S}}$ is an ${\\mathcal{A}_{\\tau}}$-labelled \\emph{transition relation},\n    \\item ${\\uparrow}\\in{\\mathcal{S}}$ is the initial state.\n\\end{enumerate}\n\\fullversion{If $(s,a,t)\\in{\\step{}}$, then we write $s\\step{a} t$.}\n\\end{definition}\n\n\n\n\n\n\n\n\nTransition systems can be used to give semantics to programming languages and process calculi. The standard method is to first associate with every program or process expression a transition system (its operational semantics), and then consider programs and process expressions modulo one of the many behavioural equivalences on transition systems that have been studied in the literature. In this paper, we shall use the notion of (divergence-preserving) branching bisimilarity \\cite{Glabbeek1996,Glabbeek2009}, which is the finest behavioural equivalence in van Glabbeek's linear time - branching time spectrum~\\cite{Glabbeek1993} that abstracts from internal computation steps (represented in the transition system by transitions labelled with $\\tau$).\\notinfull{ We adopt the notation ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$ for divergence-preserving branching bisimilarity, and $\\bbisim$ for the divergence-insensitive version (see the Appendix for a formal definition)}.\n{{  In the definition of (divergence-preserving) branching bisimilarity we need the following notation: let $\\step{}$ be an ${\\mathcal{A}_{\\tau}}$-labelled transition relation on a set ${\\mathcal{S}}$, and let $a\\in{\\mathcal{A}_{\\tau}}$; we write $s\\step{(a)}t$ for ``$s\\step{a}t$'' or ``$a=\\tau$ and $s=t$''. Furthermore, we denote the transitive closure of $\\step{\\tau}$ by $\\step{}^{+}$ and the reflexive-transitive closure of $\\step{\\tau}$ by $\\step{}^{*}$.  \\begin{definition}[Branching Bisimilarity]\\label{def:bbisim} Let $T_1=({\\mathcal{S}}_1,\\step{}_1,\\uparrow_1)$ and $T_2=({\\mathcal{S}}_2,\\step{}_2,\\uparrow_2)$ be transition systems. A \\emph{branching bisimulation} from $T_1$ to $T_2$ is a binary relation ${\\mathcal{\\mathop{R}}}\\subseteq{\\mathcal{S}}_1\\times{\\mathcal{S}}_2$ such that for all states $s_1$ and $s_2$, $s_1{\\mathcal{\\mathop{R}}} s_2$ implies \\begin{enumerate}     \\item if $s_1\\step{a}_1s_1'$, then there exist $s_2',s_2''\\in{\\mathcal{S}}_2$, s.t. $s_2\\step{}_2^{*}s_2''\\step{(a)}s_2'$, $s_1{\\mathcal{\\mathop{R}}} s_2''$ and $s_1'{\\mathcal{\\mathop{R}}} s_2'$;     \\item if $s_2\\step{a}_2s_2'$, then there exist $s_1',s_1''\\in{\\mathcal{S}}_1$, s.t. $s_1\\step{}_1^{*}s_1''\\step{(a)}s_1'$, $s_1''{\\mathcal{\\mathop{R}}} s_2$ and $s_1'{\\mathcal{\\mathop{R}}} s_2'$. \\end{enumerate} The transition systems $T_1$ and $T_2$ are \\emph{branching bisimilar} (notation: $T_1\\bbisim T_2$) if there exists a branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ s.t. $\\uparrow_1{\\mathcal{\\mathop{R}}}\\uparrow_2$.  A branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ is \\emph{divergence-preserving} if, for all states $s_1$ and $s_2$, $s_1{\\mathcal{\\mathop{R}}} s_2$ implies \\begin{enumerate} \\setcounter{enumi}{2}     \\item if there exists an infinite sequence $(s_{1,i})_{i\\in\\mathbb{N}}$ s.t. $s_1=s_{1,0},\\,s_{1,i}\\step{\\tau}s_{1,i+1}$ and $s_{1,i}{\\mathcal{\\mathop{R}}} s_2$ for all $i\\in\\mathbb{N}$, then there exists a state $s_2'$ s.t. $s_2\\step{}^{+}s_2'$ and $s_{1,i}{\\mathcal{\\mathop{R}}} s_2'$ for some $i\\in\\mathbb{N}$; and     \\item if there exists an infinite sequence $(s_{2,i})_{i\\in\\mathbb{N}}$ s.t. $s_2=s_{2,0},\\,s_{2,i}\\step{\\tau}s_{2,i+1}$ and $s_1{\\mathcal{\\mathop{R}}} s_{2,i}$ for all $i\\in\\mathbb{N}$, then there exists a state $s_1'$ s.t. $s_1\\step{}^{+}s_1'$ and $s_1'{\\mathcal{\\mathop{R}}} s_{2,i}$ for some $i\\in\\mathbb{N}$. \\end{enumerate} The transition systems $T_1$ and $T_2$ are \\emph{divergence-preserving branching bisimilar} (notation: $T_1\\bbisim^{\\Delta}T_2$) if there exists a divergence-preserving branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ s.t. $\\uparrow_1{\\mathcal{\\mathop{R}}}\\uparrow_2$. \\end{definition}}}\n\n\\delete{{\\underline{\\sf todo}: {\\color{red}{{Omit the notion of weak trace equivalence presented below. Instead, we should define (later, when we are going to discuss which RTMs are suitable for stream translation) what are the computations associated with a transition system and define the stream translation associated with a transition system similarly as above.}}}}\n\nWe also define the weak infinite trace equivalence between transition systems. This relation is useful for classifying the $\\omega$-translation realized by transition systems. For any LTS $({\\mathcal{S}},\\step{},\\uparrow)$, a state $s\\in{\\mathcal{S}}$, and an infinite action sequence $\\sigma\\in{\\mathcal{A}}^{\\omega}$, with $\\sigma=a_0,a_1,\\ldots$, we denote by $s\\step{\\sigma}$ the fact that there exist $s_0,s_0'\\ldots\\in{\\mathcal{S}}$ such that $s=s_0$, and $s_i\\step{}^{*}s_i'\\step{a_i}s_{i+1}$ for all $i\\geq 0$.\n\n\\begin{definition}[Weak Infinite Trace Equivalence]\\label{def:wtequ}\nFor any LTS $T=({\\mathcal{S}},\\step{},\\uparrow)$ and state $s\\in{\\mathcal{S}}$, we define ${\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s)$ to be the set of weak infinite traces possible from $s$\n\n", "index": 3, "text": "\\begin{equation*}\n{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s)=\\{\\sigma\\in{\\mathcal{A}}^{\\omega}\\mid s\\step{\\sigma}\\}\n\\enskip.\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"{\\mathit{Tr_{w}^{\\infty}}}(s)=\\{\\sigma\\in{\\mathcal{A}}^{\\omega}\\mid s\\step{%&#10;\\sigma}\\}\\enskip.\" display=\"block\"><mrow><mrow><mrow><msubsup><mi>\ud835\udc47\ud835\udc5f</mi><mi>w</mi><mi mathvariant=\"normal\">\u221e</mi></msubsup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mo stretchy=\"false\">{</mo><mrow><mi>\u03c3</mi><mo>\u2208</mo><msup><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9c</mi><mi>\u03c9</mi></msup></mrow><mo>\u2223</mo><mrow><mi>s</mi><mo>\u2062</mo><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mo>\u2062</mo><mi>\u03c3</mi></mrow><mo rspace=\"7.5pt\" stretchy=\"false\">}</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "\n\nLet $T_1=({\\mathcal{S}}_1,\\step{}_1,\\uparrow_1)$ and $T_2=({\\mathcal{S}}_2,\\step{}_2,\\uparrow_2)$ be transition systems. We say that $T_1$ and $T_2$ are weak trace equivalent iff ${\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(\\uparrow_1)={\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(\\uparrow_2)$, denoted by $T_1{\\ensuremath{\\mathrel{=_{\\text{wt}}^{\\infty}}}} T_2$.\n\\end{definition}}\n\n\\delete{\\subsection{Reactive Turing Machine and Executability}\n\n{\\underline{\\sf todo}: {\\color{red}{{Integrate the material in this subsection in the previous subsection.}}}}}\n\nThe notion of reactive Turing machine (RTM) was put forward in \\cite{BLT2013} to mathematically characterise which behaviour is executable by a conventional computing system. We recall the definition of RTMs and the ensued notion of executable transition system. \\delete{The definition of RTMs is parameterised with the set ${\\mathcal{A}_{\\tau}}$, which we  now assume to be a finite set. Furthermore, the definition is parameterised with another finite set ${\\mathcal{D}}$ of \\emph{data symbols}. We extend ${\\mathcal{D}}$ with a special symbol $\\Box\\notin{\\mathcal{D}}$ to denote a blank tape cell, and denote the set ${\\mathcal{D}}\\cup\\{\\Box\\}$ of \\emph{tape symbols} by ${\\mathcal{D}_{\\Box}}$.}\n\\begin{definition}\\label{def:rtm}\nA \\emph{reactive Turing machine} (RTM) ${\\mathcal{M}}$ is a triple $({\\mathcal{S}},\\step{},\\uparrow)$, where\n\\begin{enumerate}\n    \\item ${\\mathcal{S}}$ is a finite set of \\emph{states},\n    \\item ${\\step{}}\\subseteq {\\mathcal{S}}\\times{\\mathcal{D}_{\\Box}}\\times{\\mathcal{A}_{\\tau}}\\times{\\mathcal{D}_{\\Box}}\\times\\{L,R\\}\\times{\\mathcal{S}}$ is a $({\\mathcal{D}_{\\Box}}\\times{\\mathcal{A}_{\\tau}}\\times{\\mathcal{D}_{\\Box}}\\times\\{L,R\\})$-labelled \\emph{transition relation} (we write $s\\step{a[d/e]M}t$ for $(s,d,a,e,M,t)\\in{\\step{}}$),\n    \\item ${\\uparrow}\\in{\\mathcal{S}}$ is a distinguished \\emph{initial state}.\n\\end{enumerate}\n\\end{definition}\n\n\nIntuitively, the meaning of  a transition $s\\step{a[d/e]M}t$ is that whenever ${\\mathcal{M}}$ is in state $s$, and $d$ is the symbol currently read by the tape head, then it may execute the action $a$, write symbol $e$ on the tape (replacing $d$), move the read/write head one position to the left or the right on the tape, and then end up in state $t$.\n\nTo formalise the intuitive understanding of the operational behaviour of RTMs, we associate with every RTM ${\\mathcal{M}}$ an ${\\mathcal{A}_{\\tau}}$-labelled transition system  ${\\mathcal{T}}({\\mathcal{M}})$. The states of ${\\mathcal{T}}({\\mathcal{M}})$ are the configurations of ${\\mathcal{M}}$, pairs consisting of a state and a tape instance.\n\\fullversion{We adopt a convention to concisely denote new placement of the tape head marker. Let $\\delta$ be an element of ${\\mathcal{D}_{\\Box}}^{*}$. Then by ${{\\delta} \\!}^{\\scriptscriptstyle <}$ we denote the element of $({\\mathcal{D}_{\\Box}}\\cup\\check{{\\mathcal{D}_{\\Box}}})^{*}$ obtained by placing the tape head marker on the right-most symbol of $\\delta$ (if it exists), and $\\check{\\Box}$ otherwise.\nSimilarly ${\\prescript{\\scriptscriptstyle >}{}{\\! {\\delta}}}$ is obtained by placing the tape head marker on the left-most symbol of $\\delta$ (if it exists), and $\\check{\\Box}$ otherwise.  A configuration of an ITM consists of pair $(q,\\delta)$ of a state and a tape instance. We write $(q,\\delta)\\step{i/o}_{{\\mathcal{I}}}(q',\\delta')$ if ${\\step{}_{{\\mathcal{I}}}}(q,d,i)=(q',e,M,o)$, there is an occurrence of the marked version $\\check{d}$ of $d$ in $\\delta$, $\\delta'$ is obtained from $\\delta$ by replacing $\\check{d}$ by $e$ and replacing the symbol left or right of $\\check{d}$ (depending on whether $M=L$ or $M=R$) by its marked version.}\n\n\\begin{definition}\\label{def:lts-tm}\nLet ${\\mathcal{M}}=({\\mathcal{S}},\\step{},\\uparrow)$ be an RTM. The transition system ${\\mathcal{T}}({\\mathcal{M}})$ \\emph{associated with} ${\\mathcal{M}}$ is defined as follows:\n\\begin{enumerate}\n    \\item its set of states ${\\mathcal{S}}$ consists of the set of all configurations of ${\\mathcal{M}}$;\n    \\item its transition relation $\\step{}$ is the least relation satisfying, for all $a\\in{\\mathcal{A}_{\\tau}},\\,d,e\\in{\\mathcal{D}_{\\Box}}$ and $\\delta_L,\\delta_R\\in{\\mathcal{D}_{\\Box}}^{*}$:\n    \\begin{itemize}\n        \\item $(s,\\delta_L\\check{d}\\delta_R)\\step{a}(t,{{\\delta_L} \\!}^{\\scriptscriptstyle <}e\\delta_R)$ iff $s\\step{a[d/e]L}t$, and\n        \\item $(s,\\delta_L\\check{d}\\delta_R)\\step{a}(t,\\delta_L e{\\prescript{\\scriptscriptstyle >}{}{\\! {\\delta_R}}})$ iff $s\\step{a[d/e]R}t$\n    \\end{itemize}\n    (${{\\delta_L} \\!}^{\\scriptscriptstyle <}$ is obtained from $\\delta_L$ by placing the tape head marker on the right-most symbol in $\\delta_L$, and ${\\prescript{\\scriptscriptstyle >}{}{\\! {\\delta_R}}}$ is obtained analogously from $\\delta_R$);\n    \\item its initial state is the configuration $(\\uparrow,\\check{\\Box})$.\n\\end{enumerate}\n\\end{definition}\n\nTuring introduced his machines to define the notion of \\emph{effectively computable function} in~\\cite{Turing1936}. By analogy, we have a notion of \\emph{effectively executable behaviour}~\\cite{BLT2013}.\n\n\\begin{definition}\\label{def:exe}\nA transition system is \\emph{executable} if it is the transition system associated with some RTM.\n\\end{definition}\n\\fullversion{\nFor the convenience of proofs, we also introduce the RTMs with rules of the form $s\\step{a[d/e]N}t$, where $N$ means no movement of the tape head. We denote such machines as RTM$^{N}$. An observation is that one can simulate the transition system of an RTM$^{N}$ by an RTM up to divergence-preserving branching bisimilarity.\n\n\\begin{lemma}~\\label{lemma:RTMN}\nThe transition system associated with an RTM$^{N}$ is executable modulo divergence-preserving branching bisimilarity.\n\\end{lemma}}\n\n\\section{Executability of Interactive Turing Machines}~\\label{sec:itm}\n\n\nIn this section we associate a transition system with every ITM, and\nthen prove that it is executable modulo divergence-preserving\nbranching bisimilarity. It is convenient to consider input and output\nas separate actions in the transition system associated with an\nITM. We denote by $?i$ the action of inputting the\nsymbol $i\\in\\Sigma$, and by $!o$ the action of outputting the symbol $o\\in\\Sigma$.\n\n\n\\begin{definition}\\label{def:lts-itm}\nLet ${\\mathcal{I}}=(Q,\\step{}_{{\\mathcal{I}}},{q_{\\mathalpha{in}}})$ be an ITM.\nThe transition system ${\\mathcal{T}}({\\mathcal{I}})$ associated with ${\\mathcal{I}}$ is defined as follows:\n\\begin{enumerate}\n\\item its set of states is the set\n   $\\{(s,\\delta)\\mid s\\in Q\\cup\\{s_o\\mid o\\in\\Sigma_{\\lambda}, s\\in Q\\},\\,\\delta\\mbox{ is a tape instance}\\}$;\n\\item its transition relation $\\step{}$ is the least relation\n  satisfying, for all $i,o\\in\\Sigma_{\\lambda}$, $d,e\\in{\\mathcal{D}_{\\Box}}$, and\n  $\\delta_L,\\delta_R\\in{\\mathcal{D}_{\\Box}}^{*}$:\n  \\begin{itemize}\n  \\item\n    $(s,\\delta_L\\check{d}\\delta_R)\\step{?i}(t_o,{{\\delta_L} \\!}^{\\scriptscriptstyle <}e\\delta_R)$\n      iff $(s,d,i)\\step{}_{{\\mathcal{I}}}(t,e,L,o)$ and $i\\in\\Sigma$,\n  \\item\n    $(s,\\delta_L\\check{d}\\delta_R)\\step{?i}(t_o,\\delta_L\n    e{\\prescript{\\scriptscriptstyle >}{}{\\! {\\delta_R}}})$ iff $(s,d,i)\\step{}_{{\\mathcal{I}}}(t,e,R,o)$ and $i\\in\\Sigma$,\n \\item\n    $(s,\\delta_L\\check{d}\\delta_R)\\step{\\tau}(t_o,{{\\delta_L} \\!}^{\\scriptscriptstyle <}e\\delta_R)$\n      iff $(s,d,i)\\step{}_{{\\mathcal{I}}}(t,e,L,o)$ and $i=\\lambda$,\n  \\item\n    $(s,\\delta_L\\check{d}\\delta_R)\\step{\\tau}(t_o,\\delta_L\n    e{\\prescript{\\scriptscriptstyle >}{}{\\! {\\delta_R}}})$ iff $(s,d,i)\\step{}_{{\\mathcal{I}}}(t,e,R,o)$ and $i=\\lambda$,\n   \\item\n    $(s_o,\\delta)\\step{!o}(s,\\delta)$ iff $o\\in\\Sigma$, and\n    $(s_o,\\delta)\\step{\\tau}(s,\\delta)$ iff $o=\\lambda$.\n  \\end{itemize}\n\\item its initial state is the configuration $({q_{\\mathalpha{in}}},\\check{\\Box})$.\n\\end{enumerate}\n\\end{definition}\n\nThe following theorem shows that every transition systems associated\nwith an ITM can be simulated by an RTM.\\notinfull{ (A proof of the\n  theorem is included in the Appendix.)}\n{{ In the proof it is convenient to allow RTMs to have transitions of the form $s\\step{a[d/e]S}t$, where $S$ is a stay transition with no movement of the tape head. We refer to such machines as RTMs with stay transitions. The operational semantics of RTMs can be extended to an operational semantics for RTMs with stay transitions by adding the clause: $(s,\\delta_L\\check{d}\\delta_R)\\step{a}(t,\\delta_L \\check{e}\\delta_R)$ iff $s\\step{a[d/e]S}t$. The transition system of an RTM with stay transitions can be simulated by an RTM up to divergence-preserving branching bisimilarity.  \\begin{lemma}~\\label{lemma:RTMN} The transition system associated with an RTM with stay transitions is executable up to divergence-preserving branching bisimilarity. \\end{lemma}  \\begin{proof} We suppose that ${\\mathcal{M}}=({\\mathcal{S}},\\step{},\\uparrow)$ is an RTM with stay transitions, and its transition system is ${\\mathcal{T}}({\\mathcal{M}})$. We define a normal RTM ${\\mathcal{M}}'=({\\mathcal{S}}_1,\\step{}_1,\\uparrow_1)$ that simulates ${\\mathcal{T}}({\\mathcal{M}})$ as follows:  \\begin{enumerate} \\item ${\\mathcal{S}}_1={\\mathcal{S}}\\cup\\{s_t\\mid s,t\\in{\\mathcal{S}}\\}$; \\item $s\\step{a[d/e]L}_1 t$ iff $s\\step{a[d/e]L}t$; \\item $s\\step{a[d/e]R}_1 t$ iff $s\\step{a[d/e]R}t$; \\item $s\\step{a[d/e]L}_1 s_t$ and $s_t\\step{\\tau[d/d]R}_1t$ iff $s\\step{a[d/e]S}t$; and \\item $\\uparrow_1=\\uparrow$. \\end{enumerate}  Then it is straight forward to ${\\mathcal{T}}({\\mathcal{M}}'){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}{\\mathcal{T}}({\\mathcal{M}})$. \\end{proof} }}\n\n\\begin{theorem}\\label{thm:itm-lts-iso}\nFor every ITM ${\\mathcal{I}}$ there exists an RTM ${\\mathcal{M}}$, such that ${\\mathcal{T}}({\\mathcal{I}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}} {\\mathcal{T}}({\\mathcal{M}})$.\n\\end{theorem}\n{{     We let ${\\mathcal{I}}=(Q,\\step{}_{{\\mathcal{I}}},{q_{\\mathalpha{in}}})$ be an ITM. By Lemma~\\ref{lemma:RTMN}, it is enough to show that there exists an RTM with stay transitions ${\\mathcal{M}}$ satisfying ${\\mathcal{T}}({\\mathcal{M}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}{\\mathcal{T}}({\\mathcal{I}})$.     We construct ${\\mathcal{M}}=({\\mathcal{S}},\\step{},\\uparrow)$ as follows:     \\begin{enumerate}         \\item ${\\mathcal{S}}={\\mathit{I}}\\cup{\\mathit{O}}$, where ${\\mathit{I}}=Q$ and ${\\mathit{O}}=\\{s_o\\mid o\\in\\Sigma_{\\lambda}, s\\in Q\\}$;         \\item the transition relation $\\step{}$ is defined by:         $s\\step{\\mathit{in}(i)[d/e]M}t_o$ if $(s,d,i)\\step{}_{{\\mathcal{I}}}(t,e,M,o)$, and $s_o\\step{\\mathit{out}(o)[e/e]S}s$ for all $s\\in{\\mathcal{S}}$, $o\\in\\Sigma_{\\lambda}$; and         \\item $\\uparrow={q_{\\mathalpha{in}}}$.     \\end{enumerate}     Then according to Definitions~\\ref{def:lts-tm} and~\\ref{def:lts-itm}, we get a transition system ${\\mathcal{T}}({\\mathcal{M}})={\\mathcal{T}}({\\mathcal{I}})$, where `=' is the pointwise equality, which also implies ${\\mathcal{T}}({\\mathcal{M}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}} {\\mathcal{T}}({\\mathcal{I}})$. }}\nAs a consequence we have the following corollary.\n\n\\begin{corollary}\\label{cor:itm-lts-exe}\nThe transition system associated with an ITM is executable modulo divergence-preserving branching bisimilarity.\n\\end{corollary}\n\n\n\\section{Executable $\\omega$-Translations}\\label{sec:exeomega}\n\\delete{\n{\\underline{\\sf todo}: {\\color{red}{{The goal of this section is to prove that a stream translation is executable if, and only if, it is interactively computable. To realise this goal, we have two subsections, one for the implication from left to right; the other for the implication from right to left.  The first subsection establishes the implication from left to right. It proceeds according to the following program: \\begin{enumerate}   \\item Explain how RTMs can be thought of as stream translators. We do not want to modify or extend the definition; we only want to put restrictions. One such restriction is that it has a limited interface, with one input channel and one output channel over which symbols from $\\Sigma$ can be communicated with the environment. More restrictions may be derived from the assumptions of van Leeuwen and Wiedermann (interactiveness, full environmental activity, etc.). And perhaps we want the RTMs to implement a strictly alternating regime of input and output: its states are strictly partitioned into input and output states (but we do allow $\\tau$-transitions). Furthermore, its output states should be unambiguous. (This amounts to formulating Definition~{def:i-o-lts} for RTMs rather than for transition systems. But I think we should not, from the start, impose the `Reactive in response' condition, because it is undecidable. Rather we should, as van Leeuwen and Wiedermann do, explain that if the interactiveness condition is satisfied, then it is possible to associate a stream translation with an RTM.)   \\item An RTM with such a restricted interface gives rise to a transition system that can be thought of as the mathematical representation of a set of computations. We should first formally what is a computation in a transition system (see the definition for ITMs for inspiration!). Then we can say what is the input stream and what is the output stream associated with a computation. This gives a definition of interaction pairs (as for ITMs).   \\item Argue that an RTM suitable for stream translation, and satisfying the interactiveness condition, defines a stream translation (via the computations of the transition system). We can then define an executable stream translation as a stream translation associated with an RTM.   \\item Then, establish that executable stream translations are interactively computable by proving that they are limit continuous and using Theorem~\\ref{thm:int-trans}. \\end{enumerate}  The second subsection establishes the implication from right to left. It proceeds according to the following program: \\begin{enumerate}   \\item Associate with ITMs a transition system semantics.   \\item Argue that the stream translation associated with the ITM directly is the same as the stream translation derived from the transition system.   \\item Prove that the transition system associated with an ITM is executable (up to divergence-preserving branching bisimilarity).   \\item Explain that divergence-preserving branching bisimilarity preserves computations (perhaps state this result as a lemma) and then conclude that the interactive stream translations are executable. \\end{enumerate} }}}}\n}\n\\delete{\\subsection{RTMs for $\\omega$-Translations}~\\label{subsec:RTM-omega}}\n\\delete{\n The interactive computability of ITMs are defined as interactively computable $\\omega$-translations, then a nature question is that, does RTMs also give rise to the same class of $\\omega$-translations?}\n Recall that an $\\omega$-translation is defined to be interactively computable if, and only if, it can be realised by an ITM. RTMs are designed for exhibiting the expressive power of executable transition systems, rather than $\\omega$-translations, and not every RTM naturally has an $\\omega$-translation associated with it. Imposing some restrictions on the formalism of RTMs, however, we shall define a subclass of RTMs with which an $\\omega$-translation is naturally associated. The $\\omega$-translation realised by such an RTM is then called \\emph{executable}, and we shall establish that an $\\omega$-translation is interactively computable if, and only if, it is executable.\n\nBy analogy to the systems described in the theory of interactive computation, we let the RTMs for $\\omega$-translations execute in steps, in such a way that with every step a pair of input and output actions can be associated. With every infinite computation of the RTM we can then associate a interaction pair, and the RTM will thus give rise to an $\\omega$-translation.\n\n \\begin{definition}~\\label{def:rtm-omega}\n Let ${\\mathcal{A}_{\\tau}}=\\{?i,!o\\mid i,o\\in\\{0,1\\}\\}\\cup\\{\\tau\\}$, and let ${\\mathcal{M}}=({\\mathcal{S}},\\step{},\\uparrow)$ be an RTM with ${\\mathcal{A}_{\\tau}}$ as its set of labels. Then ${\\mathcal{M}}$ is an \\emph{RTM for $\\omega$-translation} if it satisfies the following properties:\n \\begin{enumerate}\n \\item the set of states ${\\mathcal{S}}$ is partitioned into disjoint sets $\\in$ of input states and ${\\mathit{E}}$ of execution states, i.e., ${\\mathcal{S}}={\\mathit{I}}\\cup{\\mathit{E}}$ and ${\\mathit{I}}\\cap{\\mathit{E}}=\\emptyset$;\n \\item the initial state ${\\uparrow}$ is an input state, i.e., ${\\uparrow}\\in{\\mathit{I}}$;\n \\item for a transition $s\\step{a[d/e]M}t$, if $s\\in{\\mathit{I}}$, then $a\\in \\{?0,?1\\}$ and $t\\in{\\mathit{E}}$; if $s\\in{\\mathit{E}}$, then $a\\in\\{!0,!1,\\tau\\}$ and $t\\in {\\mathit{I}}$; and\n \\item for all $(s,d)\\in{\\mathit{E}}\\times{\\mathcal{D}_{\\Box}}$, there is at most one transition of the form $s\\step{a[d/e]M}t$; and\n \\item for all $(s,d)\\in{\\mathit{I}}\\times{\\mathcal{D}_{\\Box}}$, there are exactly two transitions of the form $s\\step{a[d/e]M}t$, one with $a=?0$ and one with $a=?1$.\n \\end{enumerate}\n \\end{definition}\n \\delete{\n Note that we do not allow $\\tau$ actions in an input state, so that this restriction corresponds to full-active.} \\delete{We also make a discussion about the machines that incorporate with free environment, where $\\tau$ actions are enabled in an input state in the Appendix.}\n\\delete{\n \\textbf{Interface}\n One of such restrictions is that it has a limited interface, with one input channel and one output channel over which symbols from $\\Sigma$ can be communicated with the environment. Hence, we take ${\\mathcal{A}_{\\tau}}=\\{?i,!o\\mid i,o\\in\\Sigma\\}\\cup\\{\\tau\\}$ as the set of action labels.\n\n \\textbf{Execution}\n\n  The machine realises an $\\omega$-translation with a stepwise procedure. Each step is divided into an input transition and an execution transition. Therefore, we divide the set of control states ${\\mathcal{S}}$ into disjoint sets of input states and execution states, that is, ${\\mathcal{S}}={\\mathit{I}}\\cup{\\mathit{E}}$ and ${\\mathit{I}}\\cap{\\mathit{E}}=\\emptyset$.\n\n\n  For a control state $s\\in{\\mathit{I}}$, the machine can only receive an input symbol from the environment. So it only has the transition rules of the form $s\\step{i[d/e]M}t$, where $i\\in \\{?0,?1\\}$ and $t\\in{\\mathit{E}}$. We do not allow $\\tau$ actions in an input state, so that this restriction corresponds to full-active. We also make a discussion about the machines that incorporate with free environment, where $\\tau$ actions are enabled in an input state in Appendix~\\ref{appendix}.\n\n  For a control state $s\\in{\\mathit{E}}$, the machine either sends an output symbol to the environment, or makes a a step of internal computation. So it only has the transition rules of the form $s\\step{o[d/e]M}t$, where $o\\in\\{!0,!1,\\tau\\}$ and $t\\in {\\mathit{I}}$. Moreover, to obtain a function over streams, the execution of the machine should be deterministic with respect to certain input. Therefore, we require that for all $(s,d)$ where $s\\in{\\mathit{E}}$ and $d\\in{\\mathcal{D}_{\\Box}}$, there is at most one transition $s\\step{o[d/e]M}t$.\n\n  Then an execution sequence of such an RTM ${\\mathcal{M}}$ is $(s_0,\\delta_0)\\step{i_0}(s_0',\\delta_0')\\step{o_0}\\ldots (s_n,\\delta_n)\\step{i_n}(s_n',\\delta_n)\\step{o_n}\\ldots$, where $s_0,s_1,\\ldots\\in{\\mathit{I}}$ and $s_0',s_1',\\ldots\\in{\\mathit{E}}$. We get an input stream $\\vec{x}$ obtained from $i_0,i_1,\\ldots$ and an output stream $\\vec{y}$ obtained from $o_1,o_2,\\ldots$ by omitting all the occurrence of $\\tau$. Then $(\\vec{x},\\vec{y})\\in\\Sigma^{\\omega}\\times\\Sigma^{\\omega}$ is an interaction pair of ${\\mathcal{M}}$.\n\n  Then we may associate with an RTM for $\\omega$-translations ${\\mathcal{M}}$ an $\\omega$-translation as we did for ITMs. Moreover, an $\\omega$-translation $\\phi$ is called an \\emph{executable} translation if it can be realised by an RTM for $\\omega$-translation.}\n\n  \\delete{{\\underline{\\sf todo}: {\\color{red}{{By the formalism the computation of RTMs for $\\omega$-translations and ITMs, it is straightforward that they realise the same classes of $\\omega$-translations.}}}}}\n\n\\delete{\n\\subsection{Obtain $\\omega$-Translation from a transition system}~\\label{subsec:omega-lts}}\n\\delete{As mentioned in the theory of van Leeuwen and Wiedermann~\\cite{vLW2006}, $\\omega$-translations are used as a mathematical characterization of interactive computation. For an alphabet $\\Sigma$, we use $\\Sigma^{\\omega}$ to denote the set of infinite words over $\\Sigma$; an $\\omega$-translation is a function $\\phi:\\Sigma^{\\omega}\\rightarrow\\Sigma^{\\omega}$.}\n\n\\delete{\nNote that $\\omega$-translations for interactive computation are \\emph{total} by definition, since a valid system is always assumed to be able to react to every possible input stream of an environment.\nWe can get the $\\omega$-translation realized by an ITM from its transition system by applying Definition~\\ref{def:in-out-lts}, and call such $\\omega$-translation \\emph{interactively computable}. As a remark, in~\\cite{vLW2006} and~\\cite{Verbaan2006}, the $\\omega$-translation realized by an ITM is defined by the infinite computation sequence of the machine, in which every step is related with an input and output symbol, whereas in our definition, the $\\omega$-translation of an ITM is obtained from the weak infinite traces of its transition system. The notion of weak infinite trace just coincides with the infinite computation sequence of the machine. Therefore, we can verify that the definition of $\\omega$-translations from Definition~\\label{def:in-out-lts} is consistent with the original one for ITMs.}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\delete{\\subsection{Executable $\\omega$-translations}~\\label{subsec:exe-omega}}\n In the following lemma we establish some properties of the transition system associated with an RTM for $\\omega$-translation. \\notinfull{(See the Appendix for a proof of the lemma.)}\n\n\\begin{lemma}\\label{lemma:i-o-lts}\nLet ${\\mathcal{M}}$ be an RTM for $\\omega$-translation. Then ${\\mathcal{T}}({\\mathcal{M}})=({\\mathcal{S}}_{{\\mathcal{M}}},\\step{}_{{\\mathcal{M}}},\\uparrow_{{\\mathcal{M}}})$ satisfies the following properties:\n\\begin{enumerate}\n    \\item (\\emph{Alternation}) The set of states ${\\mathcal{S}}_{{\\mathcal{M}}}$ is partitioned into a set of input states ${\\mathit{I}}_{{\\mathcal{M}}}$ and a set of output states ${\\mathit{E}}_{{\\mathcal{M}}}$, i.e., ${\\mathcal{S}}_{{\\mathcal{M}}}={\\mathit{I}}_{{\\mathcal{M}}}\\cup{\\mathit{E}}_{{\\mathcal{M}}}$ and ${\\mathit{I}}_{{\\mathcal{M}}}\\cap{\\mathit{E}}_{{\\mathcal{M}}}=\\emptyset$. For every transition $s\\step{a} s'$, if $s\\in{\\mathit{I}}_{{\\mathcal{M}}}$, then $a\\in\\{?0,?1\\}$ and $s'\\in{\\mathit{E}}_{{\\mathcal{M}}}$; if $s\\in{\\mathit{E}}_{{\\mathcal{M}}}$, then $a\\in\\{!0,!1,\\tau\\}$ and $s'\\in{\\mathit{I}}_{{\\mathcal{M}}}$.\n    \\item (\\emph{Unambiguity}) For every $s\\in{\\mathit{E}}_{{\\mathcal{M}}}$, there is exactly one outgoing transition $s\\step{a} s'$ with $a\\in\\{!0,!1,\\tau\\}$.\n    \\item (\\emph{Totality}) For every $s\\in{\\mathit{I}}_{{\\mathcal{M}}}$, there are exactly two outgoing transitions, labelled with $?0$ and $?1$, respectively.\n\\end{enumerate}\n\\end{lemma}\n{{ \\begin{proof}  A state in ${\\mathcal{S}}_{{\\mathcal{M}}}$ is a configuration $(s,\\delta)$ of ${\\mathcal{M}}$, and we can make a partition of the set of all configurations according to the control states. If $s\\in{\\mathit{I}}$, then $(s,\\delta)\\in{\\mathit{I}}_{{\\mathcal{M}}}$; if $s\\in{\\mathit{E}}$, then $(s,\\delta)\\in{\\mathit{E}}_{{\\mathcal{M}}}$, where ${\\mathit{I}}$ and ${\\mathit{E}}$ are defined in Definition~\\ref{def:rtm-omega}. \\begin{enumerate}     \\item (Alternation) By condition 1 in Definition~\\ref{def:rtm-omega}, we have ${\\mathcal{S}}={\\mathit{I}}\\cup{\\mathit{E}}$ and ${\\mathit{I}}\\cap{\\mathit{E}}=\\emptyset$, which infers ${\\mathcal{S}}_{{\\mathcal{M}}}={\\mathit{I}}_{{\\mathcal{M}}}\\cup{\\mathit{E}}_{{\\mathcal{M}}}$ and ${\\mathit{I}}_{{\\mathcal{M}}}\\cap{\\mathit{E}}_{{\\mathcal{M}}}=\\emptyset$; moreover, by condition 2, for a transition $s\\step{a[d/e]M}t$, if $s\\in{\\mathit{I}}$, then $a\\in \\{?0,?1\\}$ and $t\\in{\\mathit{E}}$; if $s\\in{\\mathit{E}}$, then $a\\in\\{!0,!1,\\tau\\}$ and $t\\in {\\mathit{I}}$, which infers that for every transition $s\\step{a} s'$, if $s\\in{\\mathit{I}}_{{\\mathcal{M}}}$, then $a\\in\\{?0,?1\\}$ and $s'\\in{\\mathit{E}}_{{\\mathcal{M}}}$; if $s\\in{\\mathit{E}}_{{\\mathcal{M}}}$, then $a\\in\\{!0,!1,\\tau\\}$ and $s'\\in{\\mathit{I}}_{{\\mathcal{M}}}$.     \\item (Unambiguity) By condition 3 in Definition~\\ref{def:rtm-omega}, for all $(s,d)$ where $s\\in{\\mathit{E}}$ and $d\\in{\\mathcal{D}_{\\Box}}$, there is at most one transition $s\\step{o[d/e]M}t$, which infers that for every $s\\in{\\mathit{E}}_{{\\mathcal{M}}}$, there is exactly one outgoing transition $s\\step{a} s'$ with $a\\in\\{!0,!1,\\tau\\}$.     \\item (Totality) By condition 4 in Definition~\\ref{def:rtm-omega}, for all $(s,d)$ where $s\\in{\\mathit{I}}$ and $d\\in{\\mathcal{D}_{\\Box}}$, there are exactly two transitions of the form $s\\step{i[d/e]M}t$, with $?0$ and $?1$ as there labels, respectively, which infers that for every $s\\in{\\mathit{I}}_{{\\mathcal{M}}}$, there are two outgoing transitions labelled by $?0$ and $?1$, respectively. \\end{enumerate} \\end{proof} }}\n\nWe call a transition that satisfies the conditions of Lemma~\\ref{lemma:i-o-lts} an \\emph{i/o transition system}.\nMoreover, by analogy to the interactiveness condition for ITMs, we impose an interactiveness condition on RTMs for $\\omega$-translation.\n\n\\begin{definition}\nAn i/o transition system is interactive, if\n  for every $s\\in{\\mathcal{S}}$ and $s\\step{?i}s_0$ with $i\\in\\{0,1\\}$, and for every sequence $s_0\\step{}s_1\\step{}\\cdots$, there exists a natural number $i$, such that $s_i\\step{!o}s_{i+1}$ with $o\\in\\{0,1\\}$.\n\nAn RTM for $\\omega$-translation is \\emph{interactive} if the associated i/o transition system is.\n\\end{definition}\n\\delete{\n\\begin{enumerate}\n    \\item \\emph{free environment} assumption, that is, for every $s\\in{\\mathit{I}}$, it has has exactly three outgoing transitions, labelled by $?0,\\,?1,\\,\\tau$, respectively; and\n    \\item \\emph{full active environment} assumption, that is, for every $s\\in{\\mathit{I}}$, there are exactly two outgoing transitions, labelled by $?0,\\,?1$, respectively.\n\\end{enumerate}\n\n\n Naturally, we should not implicitly put any preassumption on the behaviour of the environment. To adapt to a nonrestrictive environment, the system should allow any behaviour in input states, which is reflected by the free environment assumption. However, we shall see that free environment sometimes does not lead to a valid $\\omega$-translation over $\\Sigma$. (It does lead to an omega-translation over $\\Sigma_\\lambda$, as we shall see later.) Therefore, we also consider the so called full active environment assumption, which is also mentioned in~\\cite{vLW2006}. In this case, the environment sends a non-empty input to the system for every input state.\n\n\n\n\n\n\n\n\n\n\n For an arbitrary input stream, the transition system should deterministically get an output stream, which requires the determinism. Namely, for every $s\\in{\\mathcal{S}},\\,a\\in {\\mathcal{A}_{\\tau}}$, if there are transitions $s\\step{a} s_1$, and $s\\step{a} s_2$, then $s_1=s_2$. Note that, by the above definition and assumption for the environment, we already get a deterministic transition system.}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\delete{\nTherefore, we can make a detour from the transition systems associated with RTMs and ITMs, in order make a comparison between interactively computable $\\omega$-translations and executable $\\omega$-translations.\n}\nWe define the $\\omega$-translation realized by an RTM by defining the $\\omega$-translation realized by the i/o transition system associated with it. Let ${\\mathcal{T}}=({\\mathcal{S}},\\step{},\\uparrow)$ be an i/o transition system, let $s\\in{\\mathcal{S}}$, and let $\\sigma\\in{\\mathcal{A}}^{\\omega}$, say $\\sigma=a_0,a_1,\\ldots$; we write $s\\step{\\sigma}$ if there exist\n  $s_0,s_0', s_1,s_1',\\ldots\\in{\\mathcal{S}}$\nsuch that $s=s_0$, and $s_i\\step{}^{*}s_i'\\step{a_i}s_{i+1}$ for all $i\\geq 0$. (By $\\step{}^{*}$ we denote the reflexive-transitive closure of the relation $\\step{\\tau}$.)\nIf $\\sigma\\in \\mathcal{A}^\\omega$ and $s \\step{\\sigma}$, then $\\sigma$ is a \\emph{weak infinite trace}\nfrom $s$. We denote by ${\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s)$ the set of weak infinite traces from $s$.\\delete{, i.e.,\n\n\n", "itemtype": "equation", "pos": 26231, "prevtext": "\nThe \\emph{input stream} \\delete{{\\underline{\\sf todo}: {\\color{red}{{It may not be a stream, but a finite sequence; we may want to adapt terminology.}}}}} associated with the computation in \\eqref{eq:itmcomputation} is obtained from $i_0,i_1,\\dots$ by omitting all occurrences of $\\lambda$, and the \\emph{output stream} associated with the computation in \\eqref{eq:itmcomputation} is obtained from $o_0,o_1,\\dots$ by omitting all occurrences of $\\lambda$. A pair $(\\vec{x},\\vec{y})\\in\\Sigma^{\\omega}\\times\\Sigma^{\\omega}$ is an \\emph{interaction pair} associated with ${\\mathcal{I}}$ if there exists a computation of ${\\mathcal{I}}$ with $\\vec{x}$ as input stream and $\\vec{y}$ as output stream. The set of all interaction pairs associated with an ITM ${\\mathcal{I}}$ is called its \\emph{interactive behaviour}. (In Section~\\ref{sec:itm} we shall present a more refined view on its behaviour when we associate with every ITM a transition system.) The computation in \\eqref{eq:itmcomputation} is \\emph{interactive} if, for all $k\\in\\mathbb{N}$, if $i_k\\neq\\lambda$, then there exists $\\ell\\geq k$ such that $o_{\\ell}\\neq\\lambda$. The computation in \\eqref{eq:itmcomputation} is \\emph{input-active} if $i_k\\neq\\lambda$ for all $k\\in\\mathbb{N}$.\n\nAn ITM satisfies the \\emph{interactiveness} condition if all its computations are interactive. Clearly, if a deterministic ITM ${\\mathcal{I}}$ satisfies the interactiveness condition, then its interactive behaviour is total, in the sense that for every $\\vec{x}\\in\\Sigma^{\\omega}$ there is at least one $\\vec{y}\\in\\Sigma^{\\omega}$ such that $(\\vec{x},\\vec{y})$ is an interaction pair of ${\\mathcal{I}}$. By confining our attention to the input-active computations---which, in the terminology of \\cite{vLW2006}, corresponds to adopting the full environmental activity postulate---, we may then associate with every such ITM an $\\omega$-translation: we say that ITM ${\\mathcal{I}}$ produces $\\vec{y}$ on input $\\vec{x}$ if $(\\vec{x},\\vec{y})$ is the interaction pair associated with an input-active computation of ${\\mathcal{I}}$.\n\n\\begin{definition}\n  An $\\omega$-translation $\\phi:\\Sigma^{\\omega}\\rightarrow\\Sigma^{\\omega}$ is \\emph{interactively computable} if there exists a deterministic ITM that satisfying the interactiveness condition that produces $\\phi(\\vec{x})$ on input $\\vec{x}$ for all $\\vec{x}\\in\\Sigma^{\\omega}$.\n\\end{definition}\n\n\n{{ Van Leeuwen and Wiedermann present in~\\cite{vLW2006} a characterisation of the interactively computable $\\omega$-translations by showing that they can be approximated by classically computable partial functions on finite sequences over $\\Sigma$. For finite and infinite sequences $\\vec{x}$ and $\\vec{y}$, we write $\\vec{x}\\prec\\vec{y}$ if $\\vec{x}$ is a finite and strict prefix of $\\vec{y}$, and $\\vec{x}\\preceq\\vec{y}$ if $\\vec{x}\\prec\\vec{y}$ or $\\vec{x}=\\vec{y}$. We use the following definition of monotonic functions and limit-continuous functions. \\begin{definition}\\label{def:mono-limit-cont} \\begin{enumerate} \\item A partial function $f:\\Sigma^{*}\\rightharpoonup\\Sigma^{*}$ is \\emph{monotonic} if for all $\\vec{x},\\vec{y}\\in\\Sigma^{*}$ such that $\\vec{x}\\prec\\vec{y}$ and $f(\\vec{y})$ is defined, it holds that $f(\\vec{x})$ is defined as well and $f(\\vec{x})\\preceq f(\\vec{y})$. \\item A partial function $\\phi: \\Sigma^{\\omega}\\rightarrow\\Sigma^{\\omega}$ is called \\emph{limit-continuous} if there exists a classically computable monotonic partial function $f:\\Sigma^{*}\\rightarrow\\Sigma^{*}$ such that   $\\phi(\\lim_{k\\rightarrow\\infty}\\vec{x}_k)=\\lim_{k\\rightarrow\\infty}f(\\vec{x}_k)$ for all strictly increasing chains $\\vec{x}_1\\prec \\vec{x}_2\\prec\\cdots\\prec \\vec{x}_k\\prec\\cdots$ with $\\vec{x}_k\\in\\Sigma^{*}$. \\end{enumerate} \\end{definition}}}\n\nIn~\\cite{vLW2006} a criterion of the interactively computable $\\omega$-translations is presented by using limit-continuous functions\\notinfull{ (a formal definition is included in the Appendix)}.\n\n\\begin{theorem}\\label{thm:int-trans}\n  A total $\\omega$-translation is interactively computable iff it is limit-continuous.\n\\end{theorem}\n\n\n\\subsection{The Theory of Executability}\n\\fullversion{\n{\\underline{\\sf todo}: {\\color{red}{{Reorganise this section (possibly reusing some text to found elsewhere in the paper). Its main purpose is to briefly recap the theory of executability introduced in \\cite{BLT2013} (as far as we need it in this paper). I propose the following structure for this section: \\begin{enumerate}   \\item A brief account of the motivation for the theory of executability: it tries to combine computation and concurrency-style interaction in such a way that both are treated on equal footing; thus, an integration of computability and concurrency theory is realised.   \\item Introduce transition systems as the mathematical representation of behaviour.   \\item Introduce reactive Turing machines in order to define the notion of executable transition system. Note that some of the notions (e.g., how to deal with the tape, what is a configuration, etc.) have already been introduced and explained in the preceding subsection, so we need not elaborate to much about these issues and can refer back to some extent.   \\item Explain that transition systems are generally considered up to some behavioural equivalence relation, and introduce divergence preserving branching bisimilarity as the finest useful notion.   \\item As an illustration (and to have it available for the remainder of the paper), establish the result that reactive Turing machines with 'stay-transitions' (no movement of the tape head) are not more powerful than reactive Turing machines without, up to divergence-preserving branching bisimilarity. \\end{enumerate}}}}}\n}\nThe theory of executability combines computation and concurrency-style interaction in such a way that both are treated on equal footing; thus, an integration of computability and concurrency theory is realised.\n\nThe transition system is the central notion in the mathematical theory of discrete-event behaviour. It is parameterised by a set ${\\mathcal{A}}$ of \\emph{action symbols}, denoting the observable events of a system. \\delete{We shall later impose extra restrictions on ${\\mathcal{A}}$, e.g., requiring that it be finite or has a particular structure, but for now we let ${\\mathcal{A}}$ be just an arbitrary abstract set.} We extend ${\\mathcal{A}}$ with a special symbol $\\tau$, which intuitively denotes unobservable internal activity\\delete{ of the system}. We shall abbreviate ${\\mathcal{A}} \\cup\\{\\tau\\}$ by ${\\mathcal{A}_{\\tau}}$.\n\n\\begin{definition}\\label{def:lts}\nAn \\emph{${\\mathcal{A}_{\\tau}}$-labelled transition system} ${\\mathcal{T}}$ is a triple $({\\mathcal{S}},\\step{},\\uparrow)$, where,\n\\begin{enumerate}\n    \\item ${\\mathcal{S}}$ is a set of \\emph{states},\n    \\item ${\\step{}}\\subseteq{\\mathcal{S}}\\times{\\mathcal{A}_{\\tau}}\\times{\\mathcal{S}}$ is an ${\\mathcal{A}_{\\tau}}$-labelled \\emph{transition relation},\n    \\item ${\\uparrow}\\in{\\mathcal{S}}$ is the initial state.\n\\end{enumerate}\n\\fullversion{If $(s,a,t)\\in{\\step{}}$, then we write $s\\step{a} t$.}\n\\end{definition}\n\n\n\n\n\n\n\n\nTransition systems can be used to give semantics to programming languages and process calculi. The standard method is to first associate with every program or process expression a transition system (its operational semantics), and then consider programs and process expressions modulo one of the many behavioural equivalences on transition systems that have been studied in the literature. In this paper, we shall use the notion of (divergence-preserving) branching bisimilarity \\cite{Glabbeek1996,Glabbeek2009}, which is the finest behavioural equivalence in van Glabbeek's linear time - branching time spectrum~\\cite{Glabbeek1993} that abstracts from internal computation steps (represented in the transition system by transitions labelled with $\\tau$).\\notinfull{ We adopt the notation ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$ for divergence-preserving branching bisimilarity, and $\\bbisim$ for the divergence-insensitive version (see the Appendix for a formal definition)}.\n{{  In the definition of (divergence-preserving) branching bisimilarity we need the following notation: let $\\step{}$ be an ${\\mathcal{A}_{\\tau}}$-labelled transition relation on a set ${\\mathcal{S}}$, and let $a\\in{\\mathcal{A}_{\\tau}}$; we write $s\\step{(a)}t$ for ``$s\\step{a}t$'' or ``$a=\\tau$ and $s=t$''. Furthermore, we denote the transitive closure of $\\step{\\tau}$ by $\\step{}^{+}$ and the reflexive-transitive closure of $\\step{\\tau}$ by $\\step{}^{*}$.  \\begin{definition}[Branching Bisimilarity]\\label{def:bbisim} Let $T_1=({\\mathcal{S}}_1,\\step{}_1,\\uparrow_1)$ and $T_2=({\\mathcal{S}}_2,\\step{}_2,\\uparrow_2)$ be transition systems. A \\emph{branching bisimulation} from $T_1$ to $T_2$ is a binary relation ${\\mathcal{\\mathop{R}}}\\subseteq{\\mathcal{S}}_1\\times{\\mathcal{S}}_2$ such that for all states $s_1$ and $s_2$, $s_1{\\mathcal{\\mathop{R}}} s_2$ implies \\begin{enumerate}     \\item if $s_1\\step{a}_1s_1'$, then there exist $s_2',s_2''\\in{\\mathcal{S}}_2$, s.t. $s_2\\step{}_2^{*}s_2''\\step{(a)}s_2'$, $s_1{\\mathcal{\\mathop{R}}} s_2''$ and $s_1'{\\mathcal{\\mathop{R}}} s_2'$;     \\item if $s_2\\step{a}_2s_2'$, then there exist $s_1',s_1''\\in{\\mathcal{S}}_1$, s.t. $s_1\\step{}_1^{*}s_1''\\step{(a)}s_1'$, $s_1''{\\mathcal{\\mathop{R}}} s_2$ and $s_1'{\\mathcal{\\mathop{R}}} s_2'$. \\end{enumerate} The transition systems $T_1$ and $T_2$ are \\emph{branching bisimilar} (notation: $T_1\\bbisim T_2$) if there exists a branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ s.t. $\\uparrow_1{\\mathcal{\\mathop{R}}}\\uparrow_2$.  A branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ is \\emph{divergence-preserving} if, for all states $s_1$ and $s_2$, $s_1{\\mathcal{\\mathop{R}}} s_2$ implies \\begin{enumerate} \\setcounter{enumi}{2}     \\item if there exists an infinite sequence $(s_{1,i})_{i\\in\\mathbb{N}}$ s.t. $s_1=s_{1,0},\\,s_{1,i}\\step{\\tau}s_{1,i+1}$ and $s_{1,i}{\\mathcal{\\mathop{R}}} s_2$ for all $i\\in\\mathbb{N}$, then there exists a state $s_2'$ s.t. $s_2\\step{}^{+}s_2'$ and $s_{1,i}{\\mathcal{\\mathop{R}}} s_2'$ for some $i\\in\\mathbb{N}$; and     \\item if there exists an infinite sequence $(s_{2,i})_{i\\in\\mathbb{N}}$ s.t. $s_2=s_{2,0},\\,s_{2,i}\\step{\\tau}s_{2,i+1}$ and $s_1{\\mathcal{\\mathop{R}}} s_{2,i}$ for all $i\\in\\mathbb{N}$, then there exists a state $s_1'$ s.t. $s_1\\step{}^{+}s_1'$ and $s_1'{\\mathcal{\\mathop{R}}} s_{2,i}$ for some $i\\in\\mathbb{N}$. \\end{enumerate} The transition systems $T_1$ and $T_2$ are \\emph{divergence-preserving branching bisimilar} (notation: $T_1\\bbisim^{\\Delta}T_2$) if there exists a divergence-preserving branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ s.t. $\\uparrow_1{\\mathcal{\\mathop{R}}}\\uparrow_2$. \\end{definition}}}\n\n\\delete{{\\underline{\\sf todo}: {\\color{red}{{Omit the notion of weak trace equivalence presented below. Instead, we should define (later, when we are going to discuss which RTMs are suitable for stream translation) what are the computations associated with a transition system and define the stream translation associated with a transition system similarly as above.}}}}\n\nWe also define the weak infinite trace equivalence between transition systems. This relation is useful for classifying the $\\omega$-translation realized by transition systems. For any LTS $({\\mathcal{S}},\\step{},\\uparrow)$, a state $s\\in{\\mathcal{S}}$, and an infinite action sequence $\\sigma\\in{\\mathcal{A}}^{\\omega}$, with $\\sigma=a_0,a_1,\\ldots$, we denote by $s\\step{\\sigma}$ the fact that there exist $s_0,s_0'\\ldots\\in{\\mathcal{S}}$ such that $s=s_0$, and $s_i\\step{}^{*}s_i'\\step{a_i}s_{i+1}$ for all $i\\geq 0$.\n\n\\begin{definition}[Weak Infinite Trace Equivalence]\\label{def:wtequ}\nFor any LTS $T=({\\mathcal{S}},\\step{},\\uparrow)$ and state $s\\in{\\mathcal{S}}$, we define ${\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s)$ to be the set of weak infinite traces possible from $s$\n\n", "index": 3, "text": "\\begin{equation*}\n{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s)=\\{\\sigma\\in{\\mathcal{A}}^{\\omega}\\mid s\\step{\\sigma}\\}\n\\enskip.\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"{\\mathit{Tr_{w}^{\\infty}}}(s)=\\{\\sigma\\in{\\mathcal{A}}^{\\omega}\\mid s\\step{%&#10;\\sigma}\\}\\enskip.\" display=\"block\"><mrow><mrow><mrow><msubsup><mi>\ud835\udc47\ud835\udc5f</mi><mi>w</mi><mi mathvariant=\"normal\">\u221e</mi></msubsup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mo stretchy=\"false\">{</mo><mrow><mi>\u03c3</mi><mo>\u2208</mo><msup><mi class=\"ltx_font_mathcaligraphic\">\ud835\udc9c</mi><mi>\u03c9</mi></msup></mrow><mo>\u2223</mo><mrow><mi>s</mi><mo>\u2062</mo><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mo>\u2062</mo><mi>\u03c3</mi></mrow><mo rspace=\"7.5pt\" stretchy=\"false\">}</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": " where $(a_i,s_i)\\in \\{(a_1,s_1),\\ldots,(a_m,s_m)\\}$ iff $s\\step{a_i}_{{\\mathcal{T}}} s_i$.  An outline of the execution of ${\\mathcal{M}}$ is defined as follows. \\begin{enumerate}     \\item We need the following control states: $\\mathit{initial}$, $\\mathit{advice}$, $\\mathit{decode}$, $\\mathit{next}_{{\\mathcal{A}_{\\tau}}^{\\leq k}}$ (${\\mathcal{A}_{\\tau}}^{\\leq k}$ ranges over all ${\\mathcal{A}_{\\tau}}$ words with at most length $k$), $\\mathit{choose}_i$ ($i\\leq k$).     \\item The execution of ${\\mathcal{M}}$ is as follows, its initial configuration is $(\\mathit{initial},\\Box)$.     \\begin{enumerate}         \\item In $\\mathit{initial}$ state, the machine writes the encoding of initial state of the transition system ${\\ensuremath{\\ulcorner {{\\uparrow_{{\\mathcal{T}}}}}\\urcorner}}$ on the tape, and reaches $\\mathit{advice}$ state.         \n", "itemtype": "equation", "pos": -1, "prevtext": "\n}\n\\begin{definition}\\label{def:in-out-lts}\n Let ${\\mathcal{T}}$ be an i/o transition system, and $s_0$ be the initial state. For $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$,\n the \\emph{input stream realised by $\\sigma$} is the stream $\\vec{x}\\in \\Sigma^{\\omega}$ such that $\\vec{x}=x_1x_2\\ldots$, where $x_j=i$ if $?i$ is the $j$-th input action in $\\sigma$, and similarly for the \\emph{output stream realized by $\\sigma$}.\n \\delete{\n we define $(\\vec{x},\\vec{y})\\in \\{?0,?1\\}^{\\omega}\\times \\{!0,!1\\}^{\\omega}$ as the pair of input and output streams realized by $\\sigma$ as follows.\n\\begin{enumerate}\n    \\item Its input stream is $\\vec{x}=x_1x_2\\ldots$, where $x_j=i$, if $?i$ is the $j$-th input action in $\\sigma$, and\n    \\item its output stream is $\\vec{y}=y_1y_2\\ldots$, where $y_j=o$, if $!o$ is the $j$-th output action in $\\sigma$.\n\\end{enumerate}\n}\nWe say that ${\\mathcal{T}}$ realizes $\\omega$-translation $\\phi:\\Sigma^{\\omega}\\rightarrow \\Sigma^{\\omega}$ iff, for every $\\vec{x}\\in \\Sigma^{\\omega}$, there exists a trace $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ with $\\vec{x}$ as its input stream, and for every such trace, its output stream is $\\vec{y}=\\phi(\\vec{x})$.\n\\delete{\nMoreover, if ${\\mathcal{T}}$ is an executable i/o transition system, we say that it realizes an executable $\\omega$-translation.\n}\n\\end{definition}\n\nWe can now define when an $\\omega$-translation is executable.\n\n\\begin{definition}\\label{def:executable-omega}\nAn $\\omega$-translation is executable if it can be realized by an executable i/o transition system.\n\\end{definition}\n\nThe following lemma establishes that an $\\omega$-translation can be associated with every interactive i/o transition system.\n\\begin{lemma}~\\label{lemma:io-LTS-omega}\n    If an i/o transition system is interactive, then it realises an $\\omega$-translation.\n\\end{lemma}\n{{ \\begin{proof}    Let ${\\mathcal{T}}$ be an i/o interactive transition system, and let $s_0$ be the initial state of ${\\mathcal{T}}$. By Definition~\\ref{def:in-out-lts}, we need to show that there exists an $\\omega$-translation $\\phi$ such that for every $\\vec{x}\\in\\Sigma^{\\omega}$, there exists a trace $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ with input stream $\\vec{x}$, and for every trace with input stream $\\vec{x}$, its output stream is $\\vec{y}=\\phi(\\vec{x})$.     By the alternation condition in Lemma~\\ref{lemma:i-o-lts}, every $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ is of the form $i_0 o_0 i_1 o_1\\ldots$ where $i_j\\in\\{?0,?1\\}$ and $o_j\\in\\{!0,!1,\\tau\\}$.    Let $\\vec{x}$ be an arbitrary input stream, by the totality condition in Lemma~\\ref{lemma:i-o-lts}, we can find a trace $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ with input stream $\\vec{x}$.      Moreover, given an trace $\\sigma$ with an infinite input stream $\\vec{x}$, by interactiveness, it would always produce an infinite output stream $\\vec{y}$.      Finally, by unambiguity, there do not exist two traces sharing the same input stream. It follows that for every trace with input stream $\\vec{x}$, its output stream is $\\vec{y}$. Hence, we relate with every input stream a unique output stream, in a way, we get a $\\omega$-translation from ${\\mathcal{T}}$. \\end{proof} }}\n\n{{ It is not hard to show the following lemmas,  \\begin{lemma}\\label{lemma:bis-translation} Let ${\\mathcal{T}}_1$ and ${\\mathcal{T}}_2$ be two i/o transition systems, and ${\\mathcal{T}}_1\\bbisim {\\mathcal{T}}_2$. Then they realize the same $\\omega$-translation. \\end{lemma}  \\begin{proof} We let $s_1$ and $s_2$ be the initial states of ${\\mathcal{T}}_1$ and ${\\mathcal{T}}_2$, respectively. As ${\\mathcal{T}}_1\\bbisim {\\mathcal{T}}_2$, we have that for every $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_1)$, there exists a trace $\\sigma'\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_2)$, and they share the same input and output stream, and vice versa. It follows that ${\\mathcal{T}}_1$ and ${\\mathcal{T}}_2$ realize the same $\\omega$-translation. \\end{proof}  \\begin{lemma}~\\label{lemma:finite-input} Let ${\\mathcal{T}}$ be an interactive i/o transition system, and let $s_0$ be its initial state, then the following function is computable: $g: \\Sigma^{*}\\rightarrow \\Sigma^{*}$, satisfying that if $g(x)=y$, then for every $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ with input and output stream $\\vec{x}$ and $\\vec{y}$, if $x\\prec\\vec{x}$, then $y\\prec\\vec{y}$. \\end{lemma}  \\begin{proof} We consider a finite trace from $s_0$, we can associate with such a trace its input and output sequences in a similar way as defined in Definition~\\ref{def:in-out-lts}. By Lemma~\\ref{lemma:i-o-lts}, there is only one finite trace with $x$ as its input sequence, and its output sequence is $y$. By totality, it holds for every $x\\in\\Sigma^{*}$. As the transition relation of i/o transition systems are computable, $g$ is also computable. \\end{proof} }}\n\nMoreover, we have the following theorem. \\notinfull{(A proof can be found in the appendix.)}\n\\begin{theorem}~\\label{thm:lc-exe-translation2}\n An $\\omega$-translation is an executable iff it is a limit-continuous total function.\n\\end{theorem}\n{{ \\begin{proof} We let $\\phi$ be an $\\omega$-translation. \\begin{enumerate} \\item For the ``only if'' part, we need to show that there exists a computable total function $g:\\Sigma^{*}\\rightarrow\\Sigma^{*}$, such that $g$ is monotonic and for all strictly increasing chains $u_1\\prec u_2\\prec\\ldots\\prec u_t\\prec\\ldots$ with $u_t\\in\\Sigma^{*}$ ($t\\geq 1$), one has $\\phi(\\lim_{t\\rightarrow\\infty}u_t)=\\lim_{t\\rightarrow\\infty}g(u_t)$.      We assume that $\\phi$ is realized by an interactive i/o transition system ${\\mathcal{T}}$, and we let $s_0$ be the initial state of ${\\mathcal{T}}$. By Lemma~\\ref{lemma:finite-input} the following function is computable: $g: \\Sigma^{*}\\rightarrow \\Sigma^{*}$, satisfying that if $g(x)=y$, then for every $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ with input and output stream $\\vec{x}$ and $\\vec{y}$, if $x\\prec\\vec{x}$, then $y\\prec\\vec{y}$. By unambiguity and totality, $g$ is a monotonic and total computable function.   Moreover, for a strictly increasing chain $u_1\\prec u_2\\prec\\ldots\\prec u_t\\prec\\ldots$ with $u_t\\in\\Sigma^{*}$ for $t\\geq 1$, the computation of $\\lim_{t\\rightarrow\\infty}g(u_t)$ is the execution of a trace $\\sigma$ receiving the input stream $\\lim_{t\\rightarrow\\infty}u_t$. Hence we have $\\phi(\\lim_{t\\rightarrow\\infty}u_t)=\\lim_{t\\rightarrow\\infty}g(u_t)$.      Thus, $g$ is the computable total function we need, and it follows that $\\phi$ is a computable limit-continuous total function.  \\item      For the ``if'' part, we assume that $\\phi$ is a total limit-continuous function, and design an RTM ${\\mathcal{M}}$ to realize this translation.     By Theorem~\\ref{thm:int-trans}, $\\phi$ is interactively computable by some ITM ${\\mathcal{M}}'$. According to Definition~\\ref{def:lts-itm} and Lemma~\\ref{lemma:i-o-lts}, the transition system associated with ${\\mathcal{M}}'$ is an i/o transition system, moreover, according to Corollary~\\ref{cor:itm-lts-exe}, it is an executable i/o transition system. Therefore, we have shown that $\\phi$ is an executable $\\omega$-translation by Lemma~\\ref{lemma:bis-translation}. \\end{enumerate} \\end{proof} }}\n\nBy Theorem~\\ref{thm:int-trans}, we have the following corollary.\n\\begin{corollary}~\\label{cor:equiv}\nAn $\\omega$-translation is executable iff it is interactively computable.\n\\end{corollary}\nTherefore, the classes of computable limit-continuous functions, interactively computable $\\omega$-translations and executable $\\omega$-translations coincide.\n\\delete{\nNow we turn our attention to free environment assumption, where the environment is allowed to send a datum or do nothing in an input state. This assumption is natural since in many practical cases, the environment does not keep sending data to the system all the time, and the system needs to be able to deal with such environment with non-input moments.\n\nOne can observe that if we assume a free environment, and keep other conditions unchanged, the behaviour of input-output labelled transition systems is no longer to realize $\\omega$-translations of the form $\\phi:\\Sigma^{\\omega}\\rightarrow\\Sigma^{\\omega}$.\n\n\n\\input{example}\n\n\\begin{example}~\\label{exp:phi-lambda}\n    Consider the following input-output transition system $T=({\\mathcal{S}},\\step{},\\uparrow)$ with free environment assumption, where\n    \\begin{enumerate}\n        \\item ${\\mathcal{S}}=\\{s_0,s_1,s_0',s_1'\\}$, where $s_0,s_1\\in{\\mathit{I}}$ and $s_0,s_1'\\in{\\mathit{E}}$ are input and output states, respectively;\n        \\item $s_0\\step{?1} s_1'$, $s_0\\step{?0} s_0'$, $s_0\\step{\\tau}s_0'$,\n\n              $s_1\\step{?1} s_0'$, $s_1\\step{?0} s_1'$, $s_1\\step{\\tau}s_1'$,\n\n              $s_0'\\step{!0} s_0$, $s_1'\\step{!1} s_1$; and\n        \\item $\\uparrow=s_0$.\n    \\end{enumerate}\n    The function of this system is to judge the number of ``$1$''s received from the input channel, if it is an even number, then the output channel sends a $?0$ to the environment, otherwise, it sends an $!1$.\n\n    Now we explain that we cannot use Definition~\\ref{def:in-out-lts} to get an $\\omega$-translation $\\phi:\\Sigma^{\\omega}\\rightarrow\\Sigma^{\\omega}$.\n    Consider the following stream of behaviour from the environment $?1,?\\lambda,?1,?0,?0,\\ldots$ and $?1,?1,?0,?0,\\ldots$, both followed by infinitely many $?0$s.\n    Then the output for the first stream should be $!1,!1,!0,!0,\\ldots$, and the other one is $!1,!0,!0,!0,\\ldots$.\n    Then by Definition~\\ref{def:in-out-lts}, both of them are associated with an input stream $\\vec{x}=11000\\ldots$, but their output streams are $\\vec{y}_1=11000\\ldots$ and $\\vec{y}_2=10000\\ldots$, which are different.\n\\end{example}\n\nHence, we need a more general notion of $\\omega$-translation for such behaviour, that is, we extend $\\phi$ to $\\phi_\\lambda: \\Sigma_\\lambda\\rightarrow\\Sigma_\\lambda$.\n\n\\begin{definition}\\label{def:in-out-lambda-lts}\n Let $T$ be a transition system with free environment and the restrictions in this section. Let $s_0$ be its initial state, and ${\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ be the set of weak infinite trace $s_0$. For $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$, we define $(\\vec{x},\\vec{y})\\in (0,1,\\lambda)^{\\omega}\\times (0,1,\\lambda)^{\\omega}$ as the pair of input and output streams realized by $\\sigma$ as follows. Suppose $a_j$ is the $j$-th label of $\\sigma$.\n \\begin{enumerate}\n    \\item Its input stream is $\\vec{x}=x_1x_2\\ldots$, where $x_j=i(a_{2j-1})$, and\n    \\item its output stream is $\\vec{y}=y_1y_2\\ldots$, where $y_j=o(a_{2j})$, where\n\n     $\\mathit{i}(a)=\\left\\{\\begin{array}{ll}\n     x& a=?x\\\\\n     \\lambda & a=\\tau\n     \\end{array}\\right.$,\n     $\\mathit{out}(o)=\\left\\{\\begin{array}{ll}\n        x& a=!x\\\\\n     \\lambda & a=\\tau\n     \\end{array}\\right.$.\n\\end{enumerate}\n\nWe say that $T$ realizes an $\\omega$-translation $\\phi_\\lambda:\\Sigma_\\lambda^{\\omega}\\rightarrow \\Sigma_\\lambda^{\\omega}$, iff for every $\\vec{x}\\in \\Sigma_\\lambda^{\\omega}$, there exists a trace $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ receiving $\\vec{x}$, and for every such trace, it produce the output stream $\\vec{y}=\\phi(\\vec{x})$.\n\nWe call an $\\omega$-translation $\\phi_\\lambda$ executable if it is realized by an executable transition system.\n\\end{definition}\n\nBy analogy to Theorem~\\ref{thm:lc-exe-translation2}, we have the following statement.\n\\begin{theorem}~\\label{thm:lc-exe-translation3}\nFor free environment, the following statement is valid.\n\n    Let $\\phi_{\\lambda}$ be a function $\\phi_\\lambda^{\\omega}\\rightarrow\\phi_\\lambda^{\\omega}$. Then $\\phi_{\\lambda}$ is an executable translation iff $\\phi_{\\lambda}$ is a limit-continuous total function.\n\n\\end{theorem}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\section{Advice}\\label{sec:advice}\n\nIn~\\cite{vLW2001}, the computational power of evolving interactive systems is studied using ITMs. Particularly, a mechanism called \\emph{advice function} is introduced to enhance the computational power of an ITM. In this way, the insertion of external information into the course of a computation is allowed, which leads to a non-uniform operation. In this section, we introduce the notion of advice as a process in parallel composition with an RTM, and show that advice processes indeed give the systems more expressive power. \n\\delete{\n\\subsection{Advice Process}}\n\nIn this section, we consider advices as functions over natural numbers. In order to record a number on the tape, a natural number $n$ is encoded by a sequence $n$ ``$1$''s ending with a ``$0$''. In~\\cite{vLW2001}, the notion of ITM with advice is defined as follows.\n\n\\begin{definition}\nAn \\emph{advice} function is a function $f: \\mathbb{N}\\rightarrow \\mathbb{N}$. An ITM with advice (ITM/A) is equipped with a separate \\emph{advice tape} and a distinguished \\emph{advice state}. By writing the value of the argument $x$ on the advice tape and by entering into the advice state, the value of $f(x)$ will appear on the advice tape in a single step. By this action, the original contents of the advice tape is completely overwritten.\n\\end{definition}\n\nHere we do not put the restriction on the length of the advice function as in~\\cite{vLW2006}, since it does not make a difference in the issue of computability, and we are not yet interested in the issue of complexity. It is obvious that ITMs with uncomputable advice functions cannot be simulated by any RTM, as uncomputable advice function cannot be evaluated by the mechanism of RTMs. As an extension, we equip RTMs with advice processes which enable the simulation of ITM/As.\n\nAn advice process $A_f$ is designed to compute the function $f$, and can only interact with a certain RTM ${\\mathcal{M}}$. As an advice function is not necessarily computable, we cannot associate with every advice process an executable transition system. An RTM ${\\mathcal{M}}$ communicates with $A_f$ as follows: when it needs to get the result of $f(i)$, it enters a special control state $a_f$, and starts to send  a sequence of $i$ ``1'' s and a ``0'' , which is already written on the tape, to the channel $\\overline{\\mathit{in}}$, and then, it receives the result sequence $f(i)$ ``1''s and a ``$0$'' from $\\mathit{out}$ channel, and write them on the tape. This procedure ends up with another control state. We can model an advice process as follows.\n\n\\begin{definition}\\label{def:advice}\nLet $f: \\mathbb{N}\\rightarrow \\mathbb{N}$ be a function, $A_f$ is an advice process for $f$ with transition system ${\\mathcal{T}}(A_f)=({\\mathcal{S}},\\rightarrow,\\uparrow)$, where\n\\begin{enumerate}\n    \\item ${\\mathcal{S}}=\\{s_i\\mid i=0,1,2,\\ldots\\}\\cup\\{t_i\\mid i=0,1,2,\\ldots\\}$, and\n    \\item $s_i\\step {\\mathit{in}? 1} s_{i+1},\\, i=0,1,2\\ldots\\quad s_i\\step{\\mathit{in}? 0}t_{f(i)},\\, i=1,2\\ldots$\\\\\n        $t_i\\step{\\mathit{out} !1} t_{i-1},\\, i=1,2\\ldots\\quad t_0\\step{\\mathit{out}! 0} s_0$\n    \\item $\\uparrow=s_0$.\n\\end{enumerate}\n\\end{definition}\n\nThe behaviour of $A_f$ is deterministic. It receives a sequence of $i$ ``$1$''s from the channel $\\mathit{in}$, followed by a ``$0$'' symbol, indicating the end of the sequence, and then, it produces $f(i)$ ``$1$''s to the channel $\\mathit{out}$, also followed by a ``$0$'' symbol. This procedure is repeated indefinitely.\n\n The parallel composition of an RTM ${\\mathcal{M}}$ and an advice process $A_f$, we write as $[{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}}$. The parallel composition is defined in the same way as the parallel composition of two RTMs in~\\cite{BLT2013}, where ${\\mathcal{C}}=\\{\\mathit{in},\\mathit{out}\\}$ is the set of restricted names for communication. If ${\\mathcal{M}}$ is an RTM and $A_f$  is an advice process, then we call $[{\\mathcal{M}}\\parallel A_f] _{{\\mathcal{C}}}$ a reactive Turing machine with advice (RTM/A).\n\nNote that, since advice functions and advice processes have the same computational power, by Corollary~\\ref{cor:equiv}, an $\\omega$-translation is realisable by an ITM/A if, and\nonly if, it is realisable by an RTM/A.\n\\delete{\n\\subsection{Executability with Advice}}\n\n    \\delete{In the theory of executability, it is substantial to figure out the expressive power of the labelled transition systems associated with RTM/As.\n    We now proceed to show that every boundedly branching labelled transition system can be simulated by some RTM/A up to divergence-preserving branching bisimilarity, providing that the advice is not restricted to evaluate computable functions.}\n\nLet ${\\mathcal{T}}$ be any bounded branching transition system (not necessarily effective). Based on a presupposed\nencoding of its sets of states and actions and its transition relation, let the advice function $f_{{\\mathcal{T}}}$ be such\nthat for the code of a state it yields the code of the set of all outgoing transitions of that state. It is\nstraightforward to define an RTM that simulates ${\\mathcal{T}}$ with the help of $f_{{\\mathcal{T}}}$. Then we obtain the following result.\n\n\\begin{theorem}~\\label{thm:bound-lts-rtma}\nIf ${\\mathcal{T}}$ is a boundedly branching labelled transition system, then there exists an RTM/A $[{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}}$ such that ${\\mathcal{T}}([{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}} {\\mathcal{T}}$.\n\\end{theorem}\n{{ \\begin{proof} We assume that ${\\mathcal{T}}=({\\mathcal{S}}_{{\\mathcal{T}}},\\step{}_{{\\mathcal{T}}},\\uparrow_{{\\mathcal{T}}})$ is an ${\\mathcal{A}_{\\tau}}$-labelled transition system. It has $n$ distinct action labels and its branching degree is bounded by $k$. Then we encode ${\\mathcal{A}_{\\tau}}$ and ${\\mathcal{S}}_{{\\mathcal{T}}}$ as natural numbers. Let ${\\ensuremath{\\ulcorner {{a}}\\urcorner}}$ and ${\\ensuremath{\\ulcorner {{s}}\\urcorner}}$ be the encodings of an action and a state, and ${\\ensuremath{\\ulcorner {{x_1,x_2,\\ldots,x_n}}\\urcorner}}$ be the encoding of an $n$-tuple.  The advice process $A_{f}$ realizes the following function: \n", "index": 7, "text": "\\begin{equation*} f({\\ensuremath{\\ulcorner {{s}}\\urcorner}})={\\ensuremath{\\ulcorner {{a_1,\\ldots, a_m, s_1,\\ldots,s_m}}\\urcorner}} \\enskip, \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"f({\\ulcorner{{s}}\\urcorner})={\\ulcorner{{a_{1},\\ldots,a_{m},s_{1},\\ldots,s_{m}%&#10;}}\\urcorner}\\enskip,\" display=\"block\"><mrow><mrow><mrow><mi>f</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">\u231c</mi><mo>\u2062</mo><mi>s</mi><mo>\u2062</mo><mi mathvariant=\"normal\">\u231d</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mrow><mi mathvariant=\"normal\">\u231c</mi><mo>\u2062</mo><msub><mi>a</mi><mn>1</mn></msub></mrow><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>a</mi><mi>m</mi></msub><mo>,</mo><msub><mi>s</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><mrow><msub><mi>s</mi><mi>m</mi></msub><mo>\u2062</mo><mpadded width=\"+5pt\"><mi mathvariant=\"normal\">\u231d</mi></mpadded></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "         \\item In $\\mathit{advice}$ state, the machine sends the encoding of the current state ${\\ensuremath{\\ulcorner {{s_0}}\\urcorner}}$ to the advice process, and gets the encoding of list of all possible transitions ${\\ensuremath{\\ulcorner {{a_1,\\ldots, a_m, s_1,\\ldots,s_m}}\\urcorner}}$ from the advice process.         \n", "itemtype": "equation", "pos": -1, "prevtext": " where $(a_i,s_i)\\in \\{(a_1,s_1),\\ldots,(a_m,s_m)\\}$ iff $s\\step{a_i}_{{\\mathcal{T}}} s_i$.  An outline of the execution of ${\\mathcal{M}}$ is defined as follows. \\begin{enumerate}     \\item We need the following control states: $\\mathit{initial}$, $\\mathit{advice}$, $\\mathit{decode}$, $\\mathit{next}_{{\\mathcal{A}_{\\tau}}^{\\leq k}}$ (${\\mathcal{A}_{\\tau}}^{\\leq k}$ ranges over all ${\\mathcal{A}_{\\tau}}$ words with at most length $k$), $\\mathit{choose}_i$ ($i\\leq k$).     \\item The execution of ${\\mathcal{M}}$ is as follows, its initial configuration is $(\\mathit{initial},\\Box)$.     \\begin{enumerate}         \\item In $\\mathit{initial}$ state, the machine writes the encoding of initial state of the transition system ${\\ensuremath{\\ulcorner {{\\uparrow_{{\\mathcal{T}}}}}\\urcorner}}$ on the tape, and reaches $\\mathit{advice}$ state.         \n", "index": 9, "text": "\\begin{equation*}          (\\mathit{initial}, \\Box)\\step{}^{*} (\\mathit{advice}, {\\ensuremath{\\ulcorner {{\\uparrow_{{\\mathcal{T}}}}}\\urcorner}})          \\enskip.         \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex4.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{initial},\\Box)\\step{}^{*}(\\mathit{advice},{\\ulcorner{{\\uparrow_{{%&#10;\\mathcal{T}}}}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc56\ud835\udc5b\ud835\udc56\ud835\udc61\ud835\udc56\ud835\udc4e\ud835\udc59</mi><mo>,</mo><mi mathvariant=\"normal\">\u25a1</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc4e\ud835\udc51\ud835\udc63\ud835\udc56\ud835\udc50\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mo>\u2191</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcaf</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "         \\item In $\\mathit{decode}$ state, the machine decodes all the actions from the tape, and enters one of the $\\mathit{next}$ state.         \n", "itemtype": "equation", "pos": -1, "prevtext": "         \\item In $\\mathit{advice}$ state, the machine sends the encoding of the current state ${\\ensuremath{\\ulcorner {{s_0}}\\urcorner}}$ to the advice process, and gets the encoding of list of all possible transitions ${\\ensuremath{\\ulcorner {{a_1,\\ldots, a_m, s_1,\\ldots,s_m}}\\urcorner}}$ from the advice process.         \n", "index": 11, "text": "\\begin{equation*}          (\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0}}\\urcorner}})\\step{}^{*} (\\mathit{decode},{\\ensuremath{\\ulcorner {{a_1,\\ldots, a_m, s_1,\\ldots,s_m}}\\urcorner}})          \\enskip.         \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{advice},{\\ulcorner{{s_{0}}}\\urcorner})\\step{}^{*}(\\mathit{decode},{%&#10;\\ulcorner{{a_{1},\\ldots,a_{m},s_{1},\\ldots,s_{m}}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc4e\ud835\udc51\ud835\udc63\ud835\udc56\ud835\udc50\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mn>0</mn></msub><mi mathvariant=\"normal\">\u231d</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc51\ud835\udc52\ud835\udc50\ud835\udc5c\ud835\udc51\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>a</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>a</mi><mi>m</mi></msub><mo>,</mo><msub><mi>s</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>s</mi><mi>m</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "         \\item In $\\mathit{next}_{\\{a_1,\\ldots,a_m\\}}$ state, the machine chooses one of the actions. For every $i=1,\\ldots,m$, there is a transition         \n", "itemtype": "equation", "pos": -1, "prevtext": "         \\item In $\\mathit{decode}$ state, the machine decodes all the actions from the tape, and enters one of the $\\mathit{next}$ state.         \n", "index": 13, "text": "\\begin{equation*}         (\\mathit{decode},{\\ensuremath{\\ulcorner {{a_1,\\ldots, a_m, s_1,\\ldots,s_m}}\\urcorner}})\\step{}^{*} (\\mathit{next}_{\\{a_1,\\ldots,a_m\\}},{\\ensuremath{\\ulcorner {{s_1,\\ldots,s_m}}\\urcorner}})         \\enskip.         \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{decode},{\\ulcorner{{a_{1},\\ldots,a_{m},s_{1},\\ldots,s_{m}}}\\urcorner}%&#10;)\\step{}^{*}(\\mathit{next}_{\\{a_{1},\\ldots,a_{m}\\}},{\\ulcorner{{s_{1},\\ldots,s%&#10;_{m}}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc51\ud835\udc52\ud835\udc50\ud835\udc5c\ud835\udc51\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>a</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>a</mi><mi>m</mi></msub><mo>,</mo><msub><mi>s</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>s</mi><mi>m</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><msub><mi>\ud835\udc5b\ud835\udc52\ud835\udc65\ud835\udc61</mi><mrow><mo stretchy=\"false\">{</mo><msub><mi>a</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>a</mi><mi>m</mi></msub><mo stretchy=\"false\">}</mo></mrow></msub><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>s</mi><mi>m</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "         \\item In $\\mathit{choose}_i$ state, the machine projects the encoding ${\\ensuremath{\\ulcorner {{s_1,\\ldots,s_m}}\\urcorner}}$ to the encoding of the $i$-th state, and enters $\\mathit{advice}$ state again.         \n", "itemtype": "equation", "pos": -1, "prevtext": "         \\item In $\\mathit{next}_{\\{a_1,\\ldots,a_m\\}}$ state, the machine chooses one of the actions. For every $i=1,\\ldots,m$, there is a transition         \n", "index": 15, "text": "\\begin{equation*}         (\\mathit{next}_{\\{a_1,\\ldots,a_m\\}},{\\ensuremath{\\ulcorner {{s_1,\\ldots,s_m}}\\urcorner}})\\step{a_i} (\\mathit{choose}_i,{\\ensuremath{\\ulcorner {{s_1,\\ldots,s_m}}\\urcorner}})         \\enskip.         \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{next}_{\\{a_{1},\\ldots,a_{m}\\}},{\\ulcorner{{s_{1},\\ldots,s_{m}}}%&#10;\\urcorner})\\step{a_{i}}(\\mathit{choose}_{i},{\\ulcorner{{s_{1},\\ldots,s_{m}}}%&#10;\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><msub><mi>\ud835\udc5b\ud835\udc52\ud835\udc65\ud835\udc61</mi><mrow><mo stretchy=\"false\">{</mo><msub><mi>a</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>a</mi><mi>m</mi></msub><mo stretchy=\"false\">}</mo></mrow></msub><mo>,</mo><mrow><mi mathvariant=\"normal\">\u231c</mi><mo>\u2062</mo><msub><mi>s</mi><mn>1</mn></msub></mrow><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><mrow><msub><mi>s</mi><mi>m</mi></msub><mo>\u2062</mo><mi mathvariant=\"normal\">\u231d</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mo>\u2062</mo><msub><mi>a</mi><mi>i</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>\ud835\udc50\u210e\ud835\udc5c\ud835\udc5c\ud835\udc60\ud835\udc52</mi><mi>i</mi></msub><mo>,</mo><mrow><mi mathvariant=\"normal\">\u231c</mi><mo>\u2062</mo><msub><mi>s</mi><mn>1</mn></msub></mrow><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><mrow><msub><mi>s</mi><mi>m</mi></msub><mo>\u2062</mo><mi mathvariant=\"normal\">\u231d</mi></mrow><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "     \\end{enumerate} \\end{enumerate} The above procedure describes the simulation of a step of transition $s_0\\step{a_i}_{{\\mathcal{T}}}s_i$ in ${\\mathcal{T}}$. Note that the choice of the transition is happened only in the state $\\mathit{next}_{\\{a_1,\\ldots,a_m\\}}$. Moreover, no infinite $\\tau$-transition sequence is introduced for simulation. Hence, we are able to verify that ${\\mathcal{T}}([{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}} {\\mathcal{T}}$. \\end{proof} }}\n\nIf we, instead, let the advice function $f_{{\\mathcal{T}}}$ be such that on the code of a pair of a state $s$ and a natural\nnumber $i$ yields the code of the $i$th outgoing transition of $s$, then we can extend the simulation to transition\nsystems with countable many states and transitions.\n\n\\begin{theorem}\\label{thm:lts-rtma}\nIf $T$ is a countable labelled transition system, then there exists an RTM/A $[{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}}$ such that ${\\mathcal{T}}([{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}})\\bbisim T$.\n\\end{theorem}\n{{ \\begin{proof} We assume that ${\\mathcal{T}}=({\\mathcal{S}}_{{\\mathcal{T}}},\\step{}_{{\\mathcal{T}}},\\uparrow_{{\\mathcal{T}}})$ is a countable ${\\mathcal{A}_{\\tau}}$-labelled transition system. It has $n$ distinct action labels and it possibly has infinitely branching. Then we encode ${\\mathcal{A}_{\\tau}}$ and ${\\mathcal{S}}_{{\\mathcal{T}}}$ as natural numbers. Let ${\\ensuremath{\\ulcorner {{a}}\\urcorner}}$ and ${\\ensuremath{\\ulcorner {{s}}\\urcorner}}$ be the encodings of an action and a state, and ${\\ensuremath{\\ulcorner {{x_1,x_2,\\ldots,x_n}}\\urcorner}}$ be the encoding of an $n$-tuple.  The transition relation $\\step{}_{{\\mathcal{T}}}$ maps a state, namely, $s_0$, to a possibly infinite set $\\{(a_i,s_i)\\mid s_0\\step{a_i}_{{\\mathcal{T}}} s_i\\}$, denoted by $s_0\\step{}_{{\\mathcal{T}}}$. We define an order $<_{{\\mathcal{T}}}$ over the elements in the set $s_0\\step{}_{{\\mathcal{T}}}$ such that $(a,s)<_{{\\mathcal{T}}}(a',s')$, if ${\\ensuremath{\\ulcorner {{a,s}}\\urcorner}}<_{{\\mathcal{T}}}{\\ensuremath{\\ulcorner {{a',s'}}\\urcorner}}$.  The advice function $A_{f}$ realizes the following function: \n", "itemtype": "equation", "pos": -1, "prevtext": "         \\item In $\\mathit{choose}_i$ state, the machine projects the encoding ${\\ensuremath{\\ulcorner {{s_1,\\ldots,s_m}}\\urcorner}}$ to the encoding of the $i$-th state, and enters $\\mathit{advice}$ state again.         \n", "index": 17, "text": "\\begin{equation*}         (\\mathit{choose}_i,{\\ensuremath{\\ulcorner {{s_1,\\ldots,s_m}}\\urcorner}})\\step{}^{*}(\\mathit{advice},{\\ensuremath{\\ulcorner {{s_i}}\\urcorner}})         \\enskip.         \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex8.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{choose}_{i},{\\ulcorner{{s_{1},\\ldots,s_{m}}}\\urcorner})\\step{}^{*}(%&#10;\\mathit{advice},{\\ulcorner{{s_{i}}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><msub><mi>\ud835\udc50\u210e\ud835\udc5c\ud835\udc5c\ud835\udc60\ud835\udc52</mi><mi>i</mi></msub><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>s</mi><mi>m</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc4e\ud835\udc51\ud835\udc63\ud835\udc56\ud835\udc50\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mi>i</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": " where $(a_i,s_i)$ is the $i$-th element from $s_0\\step{}_{{\\mathcal{T}}}$ regarding to $<_{{\\mathcal{T}}}$.  An outline of the execution of ${\\mathcal{M}}$ is defined as follows. \\begin{enumerate}     \\item We need the following control states: $\\mathit{initial}$, $\\mathit{advice}$, $\\mathit{decode}$, $\\mathit{next}_{{\\mathcal{A}_{\\tau}}}$, $\\mathit{choose}_i$ ($i=1,2$).     \\item The execution of ${\\mathcal{M}}$ is as follows, we use a pair $(s,\\delta)$ to denote the current configuration of the machine.     \\begin{enumerate}         \\item In $\\mathit{initial}$ state, the machine writes the encoding of the initial state of the transition system ${\\ensuremath{\\ulcorner {{\\uparrow_{{\\mathcal{T}}}}}\\urcorner}}$ on the tape, and reaches $\\mathit{advice}$ state.         \n", "itemtype": "equation", "pos": -1, "prevtext": "     \\end{enumerate} \\end{enumerate} The above procedure describes the simulation of a step of transition $s_0\\step{a_i}_{{\\mathcal{T}}}s_i$ in ${\\mathcal{T}}$. Note that the choice of the transition is happened only in the state $\\mathit{next}_{\\{a_1,\\ldots,a_m\\}}$. Moreover, no infinite $\\tau$-transition sequence is introduced for simulation. Hence, we are able to verify that ${\\mathcal{T}}([{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}} {\\mathcal{T}}$. \\end{proof} }}\n\nIf we, instead, let the advice function $f_{{\\mathcal{T}}}$ be such that on the code of a pair of a state $s$ and a natural\nnumber $i$ yields the code of the $i$th outgoing transition of $s$, then we can extend the simulation to transition\nsystems with countable many states and transitions.\n\n\\begin{theorem}\\label{thm:lts-rtma}\nIf $T$ is a countable labelled transition system, then there exists an RTM/A $[{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}}$ such that ${\\mathcal{T}}([{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}})\\bbisim T$.\n\\end{theorem}\n{{ \\begin{proof} We assume that ${\\mathcal{T}}=({\\mathcal{S}}_{{\\mathcal{T}}},\\step{}_{{\\mathcal{T}}},\\uparrow_{{\\mathcal{T}}})$ is a countable ${\\mathcal{A}_{\\tau}}$-labelled transition system. It has $n$ distinct action labels and it possibly has infinitely branching. Then we encode ${\\mathcal{A}_{\\tau}}$ and ${\\mathcal{S}}_{{\\mathcal{T}}}$ as natural numbers. Let ${\\ensuremath{\\ulcorner {{a}}\\urcorner}}$ and ${\\ensuremath{\\ulcorner {{s}}\\urcorner}}$ be the encodings of an action and a state, and ${\\ensuremath{\\ulcorner {{x_1,x_2,\\ldots,x_n}}\\urcorner}}$ be the encoding of an $n$-tuple.  The transition relation $\\step{}_{{\\mathcal{T}}}$ maps a state, namely, $s_0$, to a possibly infinite set $\\{(a_i,s_i)\\mid s_0\\step{a_i}_{{\\mathcal{T}}} s_i\\}$, denoted by $s_0\\step{}_{{\\mathcal{T}}}$. We define an order $<_{{\\mathcal{T}}}$ over the elements in the set $s_0\\step{}_{{\\mathcal{T}}}$ such that $(a,s)<_{{\\mathcal{T}}}(a',s')$, if ${\\ensuremath{\\ulcorner {{a,s}}\\urcorner}}<_{{\\mathcal{T}}}{\\ensuremath{\\ulcorner {{a',s'}}\\urcorner}}$.  The advice function $A_{f}$ realizes the following function: \n", "index": 19, "text": "\\begin{equation*} f({\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}})={\\ensuremath{\\ulcorner {{a_i,s_i}}\\urcorner}} \\enskip, \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex9.m1\" class=\"ltx_Math\" alttext=\"f({\\ulcorner{{s_{0},i}}\\urcorner})={\\ulcorner{{a_{i},s_{i}}}\\urcorner}\\enskip,\" display=\"block\"><mrow><mrow><mrow><mi>f</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">\u231c</mi><mo>\u2062</mo><msub><mi>s</mi><mn>0</mn></msub></mrow><mo>,</mo><mrow><mi>i</mi><mo>\u2062</mo><mi mathvariant=\"normal\">\u231d</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mrow><mi mathvariant=\"normal\">\u231c</mi><mo>\u2062</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><mo>,</mo><mrow><msub><mi>s</mi><mi>i</mi></msub><mo>\u2062</mo><mpadded width=\"+5pt\"><mi mathvariant=\"normal\">\u231d</mi></mpadded></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "         \\item In $\\mathit{advice}$ state, the machine either increase the counter $i$ by $1$, or sends ${\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}}$ to the advice, and gets ${\\ensuremath{\\ulcorner {{(a_i,s_i)}}\\urcorner}}$ from the advice.         \\begin{eqnarray*}          (\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}})\\step{}^{*}(\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0,i+1}}\\urcorner}}), or\\\\          (\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}})\\step{}^{*} (\\mathit{decode},{\\ensuremath{\\ulcorner {{s_0,s_i,a_i}}\\urcorner}})          \\end{eqnarray*}         \\item In $\\mathit{decode}$ state, the machine decodes the action $a_i$ from the tape, and enters the state $\\mathit{next_{a_i}}$.         \n", "itemtype": "equation", "pos": -1, "prevtext": " where $(a_i,s_i)$ is the $i$-th element from $s_0\\step{}_{{\\mathcal{T}}}$ regarding to $<_{{\\mathcal{T}}}$.  An outline of the execution of ${\\mathcal{M}}$ is defined as follows. \\begin{enumerate}     \\item We need the following control states: $\\mathit{initial}$, $\\mathit{advice}$, $\\mathit{decode}$, $\\mathit{next}_{{\\mathcal{A}_{\\tau}}}$, $\\mathit{choose}_i$ ($i=1,2$).     \\item The execution of ${\\mathcal{M}}$ is as follows, we use a pair $(s,\\delta)$ to denote the current configuration of the machine.     \\begin{enumerate}         \\item In $\\mathit{initial}$ state, the machine writes the encoding of the initial state of the transition system ${\\ensuremath{\\ulcorner {{\\uparrow_{{\\mathcal{T}}}}}\\urcorner}}$ on the tape, and reaches $\\mathit{advice}$ state.         \n", "index": 21, "text": "\\begin{equation*}          (\\mathit{initial}, \\Box)\\step{}^{*} (\\mathit{advice}, {\\ensuremath{\\ulcorner {{\\uparrow_{{\\mathcal{T}}},1}}\\urcorner}})          \\enskip.         \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex10.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{initial},\\Box)\\step{}^{*}(\\mathit{advice},{\\ulcorner{{\\uparrow_{{%&#10;\\mathcal{T}}},1}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc56\ud835\udc5b\ud835\udc56\ud835\udc61\ud835\udc56\ud835\udc4e\ud835\udc59</mi><mo>,</mo><mi mathvariant=\"normal\">\u25a1</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc4e\ud835\udc51\ud835\udc63\ud835\udc56\ud835\udc50\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mo>\u2191</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcaf</mi></msub><mo>,</mo><mn>1</mn><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "         \\item In $\\mathit{next}_{a_i}$ state, the machine either performs the action, or change its current choice to another transition.         \\begin{eqnarray*}         (\\mathit{next}_{a_i},{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})\\step{\\tau} (\\mathit{choose}_1,{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}}), or\\\\         (\\mathit{next}_{a_i},{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})\\step{a_i} (\\mathit{choose}_2,{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})         \\enskip.         \\end{eqnarray*}         \\item In $\\mathit{choose}_i$ state (i=1,2), the machine projects the encoding ${\\ensuremath{\\ulcorner {{s_1,s_2}}\\urcorner}}$ to the encoding of the $i$-th state, and enters $\\mathit{advice}$ state again.         \n", "itemtype": "equation", "pos": -1, "prevtext": "         \\item In $\\mathit{advice}$ state, the machine either increase the counter $i$ by $1$, or sends ${\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}}$ to the advice, and gets ${\\ensuremath{\\ulcorner {{(a_i,s_i)}}\\urcorner}}$ from the advice.         \\begin{eqnarray*}          (\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}})\\step{}^{*}(\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0,i+1}}\\urcorner}}), or\\\\          (\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}})\\step{}^{*} (\\mathit{decode},{\\ensuremath{\\ulcorner {{s_0,s_i,a_i}}\\urcorner}})          \\end{eqnarray*}         \\item In $\\mathit{decode}$ state, the machine decodes the action $a_i$ from the tape, and enters the state $\\mathit{next_{a_i}}$.         \n", "index": 23, "text": "\\begin{equation*}         (\\mathit{decode},{\\ensuremath{\\ulcorner {{s_0,s_i,a_i}}\\urcorner}})\\step{}^{*} (\\mathit{next}_{a_i},{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})         \\enskip.         \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex11.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{decode},{\\ulcorner{{s_{0},s_{i},a_{i}}}\\urcorner})\\step{}^{*}(\\mathit%&#10;{next}_{a_{i}},{\\ulcorner{{s_{0},s_{i}}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc51\ud835\udc52\ud835\udc50\ud835\udc5c\ud835\udc51\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mn>0</mn></msub><mo>,</mo><msub><mi>s</mi><mi>i</mi></msub><mo>,</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><msub><mi>\ud835\udc5b\ud835\udc52\ud835\udc65\ud835\udc61</mi><msub><mi>a</mi><mi>i</mi></msub></msub><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mn>0</mn></msub><mo>,</mo><msub><mi>s</mi><mi>i</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "     \\end{enumerate} \\end{enumerate} One can verify that ${\\mathcal{\\mathop{R}}}=\\{(s,s')\\mid s\\in{\\mathcal{S}}_{{\\mathcal{T}}}, s'=\\\\(\\mathit{advice}, {\\ensuremath{\\ulcorner {{s,i}}\\urcorner}})\\mbox{ or } (\\mathit{decode},{\\ensuremath{\\ulcorner {{s,a_i,s_i}}\\urcorner}}) \\mbox{ or } (\\mathit{next}_{a_i},{\\ensuremath{\\ulcorner {{s,s_i}}\\urcorner}})\\mbox{ or } (\\mathit{choose}_1,{\\ensuremath{\\ulcorner {{s,s_i}}\\urcorner}})\\mbox{ or } (\\mathit{choose}_2,{\\ensuremath{\\ulcorner {{s_i,s}}\\urcorner}})\\}$ is a branching bisimulation relation. Hence, we have ${\\mathcal{T}}([{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}})\\bbisim T$. \\end{proof} }}\n Note that the transition system associated with an RTM/A is boundedly branching. Hence, by Theorem 2 in~\\cite{LY14}, if a transition system has no divergence up to ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$ and is unboundedly branching up to ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$, then it is not executable modulo ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$. It follows that there exist countable unboundedly branching transition systems that cannot be simulated by an RTM/A modulo ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$.\n\n\\delete{Actually, for unboundedly branching transition systems with no divergence, it is unavoidable to introduce divergence in simulation. We first have the following fact.\n\n\\begin{lemma}~\\label{lemma:branching-itma}\nThe labelled transition system associated with an RTM/A is boundedly branching.\n\\end{lemma}\n\nThen we recall the following lemma in~\\cite{LY14}.\n\n \\begin{lemma}\\label{lemma:divergence}\nIf a transition system is boundedly branching and does not have divergence up to ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$, then it is boundedly branching up to ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$.\n\\end{lemma}\n\n By analogy to the analysis in~\\cite{LY14}, we have the following result.\n\n\\begin{corollary}\\label{cor:unboundly-lts-itma}\nThere exists an unboundedly branching labelled transition system $T$, such that there is no RTM/A $[{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}}$, satisfying ${\\mathcal{T}}([{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}} T$.\n\\end{corollary}\n}\n\n\\section{Conclusion}\\label{sec:conclusion}\n\nWe have discussed the relationship between two models of computation that take interaction into account. We have established that the model of RTMs subsumes and is more expressive the model of ITMs when it comes specifying behaviour, and coincides with the model of ITMs when it comes to defining $\\omega$-translations.\n\nFurthermore, we have shown that RTMs admit an extension with advice that facilitates modelling non-uniform behaviour. In \\cite{BLT2013} it was established that every effective transition system can be simulated by an RTM. Our result that every countable transition system can be simulated by an RTM with advice further confirms the universal expressiveness of the notion of RTM.\n\nIn~\\cite{Verbaan2006}, a complexity theory for interactive computation has been defined on the basis of ITMs and $\\omega$-translations. Clearly, such a complexity theory could also be based on the restricted class of RTMs for $\\omega$-translation. Such a complexity theory could then further be generalised towards a complexity theory for general executable behaviour. \n\\bibliographystyle{splncs03}\n\\bibliography{ITMvsRTM}\n\\notinfull{\n\\newpage\n\\section*{Appendix}\\label{appendix}\n\n{\\noindent\\textbf{{Definition of limit-continuous functions}}}\n\nVan Leeuwen and Wiedermann present in~\\cite{vLW2006} a characterisation of the interactively computable $\\omega$-translations by showing that they can be approximated by classically computable partial functions on finite sequences over $\\Sigma$.\n\nFor finite and infinite sequences $\\vec{x}$ and $\\vec{y}$, we write $\\vec{x}\\prec\\vec{y}$ if $\\vec{x}$ is a finite and strict prefix of $\\vec{y}$, and $\\vec{x}\\preceq\\vec{y}$ if $\\vec{x}\\prec\\vec{y}$ or $\\vec{x}=\\vec{y}$. We use the following definition of monotonic functions and limit-continuous functions.\n\\begin{definition}\\label{def:mono-limit-cont}\n\\begin{enumerate}\n\\item A partial function $f:\\Sigma^{*}\\rightharpoonup\\Sigma^{*}$ is \\emph{monotonic} if for all $\\vec{x},\\vec{y}\\in\\Sigma^{*}$ such that $\\vec{x}\\prec\\vec{y}$ and $f(\\vec{y})$ is defined, it holds that $f(\\vec{x})$ is defined as well and $f(\\vec{x})\\preceq f(\\vec{y})$.\n\\item A partial function $\\phi: \\Sigma^{\\omega}\\rightarrow\\Sigma^{\\omega}$ is called \\emph{limit-continuous} if there exists a classically computable monotonic partial function $f:\\Sigma^{*}\\rightarrow\\Sigma^{*}$ such that\n  $\\phi(\\lim_{k\\rightarrow\\infty}\\vec{x}_k)=\\lim_{k\\rightarrow\\infty}f(\\vec{x}_k)$\nfor all strictly increasing chains $\\vec{x}_1\\prec \\vec{x}_2\\prec\\cdots\\prec \\vec{x}_k\\prec\\cdots$ with $\\vec{x}_k\\in\\Sigma^{*}$.\n\\end{enumerate}\n\\end{definition}\n\n{\\noindent\\textbf{{Definition of Branching Bisimilarity}}}\n\nIn the definition of (divergence-preserving) branching bisimilarity we need the following notation: let $\\step{}$ be an ${\\mathcal{A}_{\\tau}}$-labelled transition relation on a set ${\\mathcal{S}}$, and let $a\\in{\\mathcal{A}_{\\tau}}$; we write $s\\step{(a)}t$ for ``$s\\step{a}t$'' or ``$a=\\tau$ and $s=t$''. Furthermore, we denote the transitive closure of $\\step{\\tau}$ by $\\step{}^{+}$ and the reflexive-transitive closure of $\\step{\\tau}$ by $\\step{}^{*}$.\n\n\\begin{definition}[Branching Bisimilarity]\\label{def:bbisim}\nLet $T_1=({\\mathcal{S}}_1,\\step{}_1,\\uparrow_1)$ and $T_2=({\\mathcal{S}}_2,\\step{}_2,\\uparrow_2)$ be transition systems. A \\emph{branching bisimulation} from $T_1$ to $T_2$ is a binary relation ${\\mathcal{\\mathop{R}}}\\subseteq{\\mathcal{S}}_1\\times{\\mathcal{S}}_2$ such that for all states $s_1$ and $s_2$, $s_1{\\mathcal{\\mathop{R}}} s_2$ implies\n\\begin{enumerate}\n    \\item if $s_1\\step{a}_1s_1'$, then there exist $s_2',s_2''\\in{\\mathcal{S}}_2$, s.t. $s_2\\step{}_2^{*}s_2''\\step{(a)}s_2'$, $s_1{\\mathcal{\\mathop{R}}} s_2''$ and $s_1'{\\mathcal{\\mathop{R}}} s_2'$;\n    \\item if $s_2\\step{a}_2s_2'$, then there exist $s_1',s_1''\\in{\\mathcal{S}}_1$, s.t. $s_1\\step{}_1^{*}s_1''\\step{(a)}s_1'$, $s_1''{\\mathcal{\\mathop{R}}} s_2$ and $s_1'{\\mathcal{\\mathop{R}}} s_2'$.\n\\end{enumerate}\nThe transition systems $T_1$ and $T_2$ are \\emph{branching bisimilar} (notation: $T_1\\bbisim T_2$) if there exists a branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ s.t. $\\uparrow_1{\\mathcal{\\mathop{R}}}\\uparrow_2$.\n\nA branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ is \\emph{divergence-preserving} if, for all states $s_1$ and $s_2$, $s_1{\\mathcal{\\mathop{R}}} s_2$ implies\n\\begin{enumerate}\n\\setcounter{enumi}{2}\n    \\item if there exists an infinite sequence $(s_{1,i})_{i\\in\\mathbb{N}}$ s.t. $s_1=s_{1,0},\\,s_{1,i}\\step{\\tau}s_{1,i+1}$ and $s_{1,i}{\\mathcal{\\mathop{R}}} s_2$ for all $i\\in\\mathbb{N}$, then there exists a state $s_2'$ s.t. $s_2\\step{}^{+}s_2'$ and $s_{1,i}{\\mathcal{\\mathop{R}}} s_2'$ for some $i\\in\\mathbb{N}$; and\n    \\item if there exists an infinite sequence $(s_{2,i})_{i\\in\\mathbb{N}}$ s.t. $s_2=s_{2,0},\\,s_{2,i}\\step{\\tau}s_{2,i+1}$ and $s_1{\\mathcal{\\mathop{R}}} s_{2,i}$ for all $i\\in\\mathbb{N}$, then there exists a state $s_1'$ s.t. $s_1\\step{}^{+}s_1'$ and $s_1'{\\mathcal{\\mathop{R}}} s_{2,i}$ for some $i\\in\\mathbb{N}$.\n\\end{enumerate}\nThe transition systems $T_1$ and $T_2$ are \\emph{divergence-preserving branching bisimilar} (notation: $T_1\\bbisim^{\\Delta}T_2$) if there exists a divergence-preserving branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ s.t. $\\uparrow_1{\\mathcal{\\mathop{R}}}\\uparrow_2$.\n\\end{definition}\n\n{\\noindent\\textbf{{Proof of Theorem~\\ref{thm:itm-lts-iso}}}}\n\nIn the proof it is convenient to allow RTMs to have transitions of the form $s\\step{a[d/e]S}t$, where $S$ is a stay transition with no movement of the tape head. We refer to such machines as RTMs with stay transitions. The operational semantics of RTMs can be extended to an operational semantics for RTMs with stay transitions by adding the clause: $(s,\\delta_L\\check{d}\\delta_R)\\step{a}(t,\\delta_L \\check{e}\\delta_R)$ iff $s\\step{a[d/e]S}t$. The transition system of an RTM with stay transitions can be simulated by an RTM up to divergence-preserving branching bisimilarity.\n\n\\begin{lemma}~\\label{lemma:RTMN}\nThe transition system associated with an RTM with stay transitions is executable up to divergence-preserving branching bisimilarity.\n\\end{lemma}\n\n\\begin{proof}\nWe suppose that ${\\mathcal{M}}=({\\mathcal{S}},\\step{},\\uparrow)$ is an RTM with stay transitions, and its transition system is ${\\mathcal{T}}({\\mathcal{M}})$. We define a normal RTM ${\\mathcal{M}}'=({\\mathcal{S}}_1,\\step{}_1,\\uparrow_1)$ that simulates ${\\mathcal{T}}({\\mathcal{M}})$ as follows:\n\n\\begin{enumerate}\n\\item ${\\mathcal{S}}_1={\\mathcal{S}}\\cup\\{s_t\\mid s,t\\in{\\mathcal{S}}\\}$; \n\\item $s\\step{a[d/e]L}_1 t$ iff $s\\step{a[d/e]L}t$;\n\\item $s\\step{a[d/e]R}_1 t$ iff $s\\step{a[d/e]R}t$;\n\\item $s\\step{a[d/e]L}_1 s_t$ and $s_t\\step{\\tau[d/d]R}_1t$ iff $s\\step{a[d/e]S}t$; and\n\\item $\\uparrow_1=\\uparrow$.\n\\end{enumerate}\n\nThen it is straight forward to ${\\mathcal{T}}({\\mathcal{M}}'){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}{\\mathcal{T}}({\\mathcal{M}})$.\n\\end{proof}\n\n\nWe proceed to give a proof for Theorem~\\ref{thm:itm-lts-iso}\n\n\\begin{proof}\n    We let ${\\mathcal{I}}=(Q,\\step{}_{{\\mathcal{I}}},{q_{\\mathalpha{in}}})$ be an ITM. By Lemma~\\ref{lemma:RTMN}, it is enough to show that there exists an RTM with stay transitions ${\\mathcal{M}}$ satisfying ${\\mathcal{T}}({\\mathcal{M}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}{\\mathcal{T}}({\\mathcal{I}})$.\n    We construct ${\\mathcal{M}}=({\\mathcal{S}},\\step{},\\uparrow)$ as follows:\n    \\begin{enumerate}\n        \\item ${\\mathcal{S}}={\\mathit{I}}\\cup{\\mathit{O}}$, where ${\\mathit{I}}=Q$ and ${\\mathit{O}}=\\{s_o\\mid o\\in\\Sigma_{\\lambda}, s\\in Q\\}$ as defined in Definition~\\ref{def:lts-itm};\n        \\item the transition relation $\\step{}$ is defined by:\n        $s\\step{\\mathit{in}(i)[d/e]M}t_o$ if $(s,d,i)\\step{}_{{\\mathcal{I}}}(t,e,M,o)$, and $s_o\\step{\\mathit{out}(o)[e/e]S}s$ for all $s\\in{\\mathcal{S}}$, $o\\in\\Sigma_{\\lambda}$; and\n        \\item $\\uparrow={q_{\\mathalpha{in}}}$.\n    \\end{enumerate}\n    Then according to Definitions~\\ref{def:lts-tm} and~\\ref{def:lts-itm}, we get a transition system ${\\mathcal{T}}({\\mathcal{M}})={\\mathcal{T}}({\\mathcal{I}})$, where `=' is the pointwise equality, which also implies ${\\mathcal{T}}({\\mathcal{M}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}} {\\mathcal{T}}({\\mathcal{I}})$.\n\\end{proof}\n\n{\\noindent\\textbf{{Proof of Lemma~\\ref{lemma:i-o-lts}}}}\n\\begin{proof}\n A state in ${\\mathcal{S}}_{{\\mathcal{M}}}$ is a configuration $(s,\\delta)$ of ${\\mathcal{M}}$, and we can make a partition of the set of all configurations according to the control states. If $s\\in{\\mathit{I}}$, then $(s,\\delta)\\in{\\mathit{I}}_{{\\mathcal{M}}}$; if $s\\in{\\mathit{E}}$, then $(s,\\delta)\\in{\\mathit{E}}_{{\\mathcal{M}}}$, where ${\\mathit{I}}$ and ${\\mathit{E}}$ are defined in Definition~\\ref{def:rtm-omega}.\n\\begin{enumerate}\n    \\item (Alternation) By condition 1 in Definition~\\ref{def:rtm-omega}, we have ${\\mathcal{S}}={\\mathit{I}}\\cup{\\mathit{E}}$ and ${\\mathit{I}}\\cap{\\mathit{E}}=\\emptyset$, which infers ${\\mathcal{S}}_{{\\mathcal{M}}}={\\mathit{I}}_{{\\mathcal{M}}}\\cup{\\mathit{E}}_{{\\mathcal{M}}}$ and ${\\mathit{I}}_{{\\mathcal{M}}}\\cap{\\mathit{E}}_{{\\mathcal{M}}}=\\emptyset$; moreover, by condition 2, for a transition $s\\step{a[d/e]M}t$, if $s\\in{\\mathit{I}}$, then $a\\in \\{?0,?1\\}$ and $t\\in{\\mathit{E}}$; if $s\\in{\\mathit{E}}$, then $a\\in\\{!0,!1,\\tau\\}$ and $t\\in {\\mathit{I}}$, which infers that for every transition $s\\step{a} s'$, if $s\\in{\\mathit{I}}_{{\\mathcal{M}}}$, then $a\\in\\{?0,?1\\}$ and $s'\\in{\\mathit{E}}_{{\\mathcal{M}}}$; if $s\\in{\\mathit{E}}_{{\\mathcal{M}}}$, then $a\\in\\{!0,!1,\\tau\\}$ and $s'\\in{\\mathit{I}}_{{\\mathcal{M}}}$.\n    \\item (Unambiguity) By condition 3 in Definition~\\ref{def:rtm-omega}, for all $(s,d)$ where $s\\in{\\mathit{E}}$ and $d\\in{\\mathcal{D}_{\\Box}}$, there is at most one transition $s\\step{o[d/e]M}t$, which infers that for every $s\\in{\\mathit{E}}_{{\\mathcal{M}}}$, there is exactly one outgoing transition $s\\step{a} s'$ with $a\\in\\{!0,!1,\\tau\\}$.\n    \\item (Totality) By condition 4 in Definition~\\ref{def:rtm-omega}, for all $(s,d)$ where $s\\in{\\mathit{I}}$ and $d\\in{\\mathcal{D}_{\\Box}}$, there are exactly two transitions of the form $s\\step{i[d/e]M}t$, with $?0$ and $?1$ as there labels, respectively, which infers that for every $s\\in{\\mathit{I}}_{{\\mathcal{M}}}$, there are two outgoing transitions labelled by $?0$ and $?1$, respectively.\n\\end{enumerate}\n\\end{proof}\n\n{\\noindent\\textbf{{Proof of Lemma~\\ref{lemma:io-LTS-omega}}}}\n\n\\begin{proof}\n   Let ${\\mathcal{T}}$ be an i/o interactive transition system, and let $s_0$ be the initial state of ${\\mathcal{T}}$. By Definition~\\ref{def:in-out-lts}, we need to show that there exists an $\\omega$-translation $\\phi$ such that for every $\\vec{x}\\in\\Sigma^{\\omega}$, there exists a trace $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ with input stream $\\vec{x}$, and for every trace with input stream $\\vec{x}$, its output stream is $\\vec{y}=\\phi(\\vec{x})$.\n\n   By the alternation condition in Lemma~\\ref{lemma:i-o-lts}, every $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ is of the form $i_0 o_0 i_1 o_1\\ldots$ where $i_j\\in\\{?0,?1\\}$ and $o_j\\in\\{!0,!1,\\tau\\}$.\n   Let $\\vec{x}$ be an arbitrary input stream, by the totality condition in Lemma~\\ref{lemma:i-o-lts}, we can find a trace $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ with input stream $\\vec{x}$.\n\n    Moreover, given an trace $\\sigma$ with an infinite input stream $\\vec{x}$, by interactiveness, it would always produce an infinite output stream $\\vec{y}$.\n\n    Finally, by unambiguity, there do not exist two traces sharing the same input stream. It follows that for every trace with input stream $\\vec{x}$, its output stream is $\\vec{y}$. Hence, we relate with every input stream a unique output stream, in a way, we get a $\\omega$-translation from ${\\mathcal{T}}$.\n\\end{proof}\n\n{\\noindent\\textbf{{Proof of Theorem~\\ref{thm:lc-exe-translation2}}}}\n\nIt is not hard to show the following lemmas,\n\n\\begin{lemma}\\label{lemma:bis-translation}\nLet ${\\mathcal{T}}_1$ and ${\\mathcal{T}}_2$ be two i/o transition systems, and ${\\mathcal{T}}_1\\bbisim {\\mathcal{T}}_2$. Then they realize the same $\\omega$-translation.\n\\end{lemma}\n\n\\begin{proof}\nWe let $s_1$ and $s_2$ be the initial states of ${\\mathcal{T}}_1$ and ${\\mathcal{T}}_2$, respectively. As ${\\mathcal{T}}_1\\bbisim {\\mathcal{T}}_2$, we have that for every $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_1)$, there exists a trace $\\sigma'\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_2)$, and they share the same input and output stream, and vice versa. It follows that ${\\mathcal{T}}_1$ and ${\\mathcal{T}}_2$ realize the same $\\omega$-translation.\n\\end{proof}\n\n\\begin{lemma}~\\label{lemma:finite-input}\nLet ${\\mathcal{T}}$ be an interactive i/o transition system, and let $s_0$ be its initial state, then the following function is computable:\n$g: \\Sigma^{*}\\rightarrow \\Sigma^{*}$, satisfying that if $g(x)=y$, then for every $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ with input and output stream $\\vec{x}$ and $\\vec{y}$, if $x\\prec\\vec{x}$, then $y\\prec\\vec{y}$.\n\\end{lemma}\n\n\\begin{proof}\nWe consider a finite trace from $s_0$, we can associate with such a trace its input and output sequences in a similar way as defined in Definition~\\ref{def:in-out-lts}.\nBy Lemma~\\ref{lemma:i-o-lts}, there is only one finite trace with $x$ as its input sequence, and its output sequence is $y$. By totality, it holds for every $x\\in\\Sigma^{*}$.\nAs the transition relation of i/o transition systems are computable, $g$ is also computable.\n\\end{proof}\n\nHence, we are able to make a proof of Theorem~\\ref{thm:lc-exe-translation2}\n\\begin{proof}\nWe let $\\phi$ be an $\\omega$-translation.\n\\begin{enumerate}\n\\item For the ``only if'' part, we need to show that there exists a computable total function $g:\\Sigma^{*}\\rightarrow\\Sigma^{*}$, such that $g$ is monotonic and for all strictly increasing chains $u_1\\prec u_2\\prec\\ldots\\prec u_t\\prec\\ldots$ with $u_t\\in\\Sigma^{*}$ ($t\\geq 1$), one has $\\phi(\\lim_{t\\rightarrow\\infty}u_t)=\\lim_{t\\rightarrow\\infty}g(u_t)$.\n\n    We assume that $\\phi$ is realized by an interactive i/o transition system ${\\mathcal{T}}$, and we let $s_0$ be the initial state of ${\\mathcal{T}}$. By Lemma~\\ref{lemma:finite-input} the following function is computable: $g: \\Sigma^{*}\\rightarrow \\Sigma^{*}$, satisfying that if $g(x)=y$, then for every $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ with input and output stream $\\vec{x}$ and $\\vec{y}$, if $x\\prec\\vec{x}$, then $y\\prec\\vec{y}$. By unambiguity and totality, $g$ is a monotonic and total computable function.\n\n Moreover, for a strictly increasing chain $u_1\\prec u_2\\prec\\ldots\\prec u_t\\prec\\ldots$ with $u_t\\in\\Sigma^{*}$ for $t\\geq 1$, the computation of $\\lim_{t\\rightarrow\\infty}g(u_t)$ is the execution of a trace $\\sigma$ receiving the input stream $\\lim_{t\\rightarrow\\infty}u_t$. Hence we have $\\phi(\\lim_{t\\rightarrow\\infty}u_t)=\\lim_{t\\rightarrow\\infty}g(u_t)$.\n\n    Thus, $g$ is the computable total function we need, and it follows that $\\phi$ is a computable limit-continuous total function.\n\n\\item\n\n    For the ``if'' part, we assume that $\\phi$ is a total limit-continuous function, and design an RTM ${\\mathcal{M}}$ to realize this translation.\n    By Theorem~\\ref{thm:int-trans}, $\\phi$ is interactively computable by some ITM ${\\mathcal{M}}'$. According to Definition~\\ref{def:lts-itm} and Lemma~\\ref{lemma:i-o-lts}, the transition system associated with ${\\mathcal{M}}'$ is an i/o transition system, moreover, according to Corollary~\\ref{cor:itm-lts-exe}, it is an executable i/o transition system. Therefore, we have shown that $\\phi$ is an executable $\\omega$-translation by Lemma~\\ref{lemma:bis-translation}.\n\\end{enumerate}\n\\end{proof}\n\n{\\noindent\\textbf{{Proof of Theorem~\\ref{thm:bound-lts-rtma}}}}\n\n\\begin{proof}\nWe assume that ${\\mathcal{T}}=({\\mathcal{S}}_{{\\mathcal{T}}},\\step{}_{{\\mathcal{T}}},\\uparrow_{{\\mathcal{T}}})$ is an ${\\mathcal{A}_{\\tau}}$-labelled transition system. It has $n$ distinct action labels and its branching degree is bounded by $k$.\nThen we encode ${\\mathcal{A}_{\\tau}}$ and ${\\mathcal{S}}_{{\\mathcal{T}}}$ as natural numbers. Let ${\\ensuremath{\\ulcorner {{a}}\\urcorner}}$ and ${\\ensuremath{\\ulcorner {{s}}\\urcorner}}$ be the encodings of an action and a state, and ${\\ensuremath{\\ulcorner {{x_1,x_2,\\ldots,x_n}}\\urcorner}}$ be the encoding of an $n$-tuple.\n\nThe advice process $A_{f}$ realizes the following function:\n\n", "itemtype": "equation", "pos": -1, "prevtext": "         \\item In $\\mathit{next}_{a_i}$ state, the machine either performs the action, or change its current choice to another transition.         \\begin{eqnarray*}         (\\mathit{next}_{a_i},{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})\\step{\\tau} (\\mathit{choose}_1,{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}}), or\\\\         (\\mathit{next}_{a_i},{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})\\step{a_i} (\\mathit{choose}_2,{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})         \\enskip.         \\end{eqnarray*}         \\item In $\\mathit{choose}_i$ state (i=1,2), the machine projects the encoding ${\\ensuremath{\\ulcorner {{s_1,s_2}}\\urcorner}}$ to the encoding of the $i$-th state, and enters $\\mathit{advice}$ state again.         \n", "index": 25, "text": "\\begin{equation*}         (\\mathit{choose}_i,{\\ensuremath{\\ulcorner {{s_1,s_2}}\\urcorner}})\\step{}^{*}(\\mathit{advice},{\\ensuremath{\\ulcorner {{s_i,1}}\\urcorner}})         \\enskip.         \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex12.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{choose}_{i},{\\ulcorner{{s_{1},s_{2}}}\\urcorner})\\step{}^{*}(\\mathit{%&#10;advice},{\\ulcorner{{s_{i},1}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><msub><mi>\ud835\udc50\u210e\ud835\udc5c\ud835\udc5c\ud835\udc60\ud835\udc52</mi><mi>i</mi></msub><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mn>1</mn></msub><mo>,</mo><msub><mi>s</mi><mn>2</mn></msub><mi mathvariant=\"normal\">\u231d</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc4e\ud835\udc51\ud835\udc63\ud835\udc56\ud835\udc50\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mi>i</mi></msub><mo>,</mo><mn>1</mn><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "\nwhere $(a_i,s_i)\\in \\{(a_1,s_1),\\ldots,(a_m,s_m)\\}$ iff $s\\step{a_i}_{{\\mathcal{T}}} s_i$.\n\nAn outline of the execution of ${\\mathcal{M}}$ is defined as follows.\n\\begin{enumerate}\n    \\item We need the following control states: $\\mathit{initial}$, $\\mathit{advice}$, $\\mathit{decode}$, $\\mathit{next}_{{\\mathcal{A}_{\\tau}}^{\\leq k}}$ (${\\mathcal{A}_{\\tau}}^{\\leq k}$ ranges over all ${\\mathcal{A}_{\\tau}}$ words with at most length $k$), $\\mathit{choose}_i$ ($i\\leq k$).\n    \\item The execution of ${\\mathcal{M}}$ is as follows, its initial configuration is $(\\mathit{initial},\\Box)$.\n    \\begin{enumerate}\n        \\item In $\\mathit{initial}$ state, the machine writes the encoding of initial state of the transition system ${\\ensuremath{\\ulcorner {{\\uparrow_{{\\mathcal{T}}}}}\\urcorner}}$ on the tape, and reaches $\\mathit{advice}$ state.\n        \n", "itemtype": "equation", "pos": 99715, "prevtext": "     \\end{enumerate} \\end{enumerate} One can verify that ${\\mathcal{\\mathop{R}}}=\\{(s,s')\\mid s\\in{\\mathcal{S}}_{{\\mathcal{T}}}, s'=\\\\(\\mathit{advice}, {\\ensuremath{\\ulcorner {{s,i}}\\urcorner}})\\mbox{ or } (\\mathit{decode},{\\ensuremath{\\ulcorner {{s,a_i,s_i}}\\urcorner}}) \\mbox{ or } (\\mathit{next}_{a_i},{\\ensuremath{\\ulcorner {{s,s_i}}\\urcorner}})\\mbox{ or } (\\mathit{choose}_1,{\\ensuremath{\\ulcorner {{s,s_i}}\\urcorner}})\\mbox{ or } (\\mathit{choose}_2,{\\ensuremath{\\ulcorner {{s_i,s}}\\urcorner}})\\}$ is a branching bisimulation relation. Hence, we have ${\\mathcal{T}}([{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}})\\bbisim T$. \\end{proof} }}\n Note that the transition system associated with an RTM/A is boundedly branching. Hence, by Theorem 2 in~\\cite{LY14}, if a transition system has no divergence up to ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$ and is unboundedly branching up to ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$, then it is not executable modulo ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$. It follows that there exist countable unboundedly branching transition systems that cannot be simulated by an RTM/A modulo ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$.\n\n\\delete{Actually, for unboundedly branching transition systems with no divergence, it is unavoidable to introduce divergence in simulation. We first have the following fact.\n\n\\begin{lemma}~\\label{lemma:branching-itma}\nThe labelled transition system associated with an RTM/A is boundedly branching.\n\\end{lemma}\n\nThen we recall the following lemma in~\\cite{LY14}.\n\n \\begin{lemma}\\label{lemma:divergence}\nIf a transition system is boundedly branching and does not have divergence up to ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$, then it is boundedly branching up to ${\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}$.\n\\end{lemma}\n\n By analogy to the analysis in~\\cite{LY14}, we have the following result.\n\n\\begin{corollary}\\label{cor:unboundly-lts-itma}\nThere exists an unboundedly branching labelled transition system $T$, such that there is no RTM/A $[{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}}$, satisfying ${\\mathcal{T}}([{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}} T$.\n\\end{corollary}\n}\n\n\\section{Conclusion}\\label{sec:conclusion}\n\nWe have discussed the relationship between two models of computation that take interaction into account. We have established that the model of RTMs subsumes and is more expressive the model of ITMs when it comes specifying behaviour, and coincides with the model of ITMs when it comes to defining $\\omega$-translations.\n\nFurthermore, we have shown that RTMs admit an extension with advice that facilitates modelling non-uniform behaviour. In \\cite{BLT2013} it was established that every effective transition system can be simulated by an RTM. Our result that every countable transition system can be simulated by an RTM with advice further confirms the universal expressiveness of the notion of RTM.\n\nIn~\\cite{Verbaan2006}, a complexity theory for interactive computation has been defined on the basis of ITMs and $\\omega$-translations. Clearly, such a complexity theory could also be based on the restricted class of RTMs for $\\omega$-translation. Such a complexity theory could then further be generalised towards a complexity theory for general executable behaviour. \n\\bibliographystyle{splncs03}\n\\bibliography{ITMvsRTM}\n\\notinfull{\n\\newpage\n\\section*{Appendix}\\label{appendix}\n\n{\\noindent\\textbf{{Definition of limit-continuous functions}}}\n\nVan Leeuwen and Wiedermann present in~\\cite{vLW2006} a characterisation of the interactively computable $\\omega$-translations by showing that they can be approximated by classically computable partial functions on finite sequences over $\\Sigma$.\n\nFor finite and infinite sequences $\\vec{x}$ and $\\vec{y}$, we write $\\vec{x}\\prec\\vec{y}$ if $\\vec{x}$ is a finite and strict prefix of $\\vec{y}$, and $\\vec{x}\\preceq\\vec{y}$ if $\\vec{x}\\prec\\vec{y}$ or $\\vec{x}=\\vec{y}$. We use the following definition of monotonic functions and limit-continuous functions.\n\\begin{definition}\\label{def:mono-limit-cont}\n\\begin{enumerate}\n\\item A partial function $f:\\Sigma^{*}\\rightharpoonup\\Sigma^{*}$ is \\emph{monotonic} if for all $\\vec{x},\\vec{y}\\in\\Sigma^{*}$ such that $\\vec{x}\\prec\\vec{y}$ and $f(\\vec{y})$ is defined, it holds that $f(\\vec{x})$ is defined as well and $f(\\vec{x})\\preceq f(\\vec{y})$.\n\\item A partial function $\\phi: \\Sigma^{\\omega}\\rightarrow\\Sigma^{\\omega}$ is called \\emph{limit-continuous} if there exists a classically computable monotonic partial function $f:\\Sigma^{*}\\rightarrow\\Sigma^{*}$ such that\n  $\\phi(\\lim_{k\\rightarrow\\infty}\\vec{x}_k)=\\lim_{k\\rightarrow\\infty}f(\\vec{x}_k)$\nfor all strictly increasing chains $\\vec{x}_1\\prec \\vec{x}_2\\prec\\cdots\\prec \\vec{x}_k\\prec\\cdots$ with $\\vec{x}_k\\in\\Sigma^{*}$.\n\\end{enumerate}\n\\end{definition}\n\n{\\noindent\\textbf{{Definition of Branching Bisimilarity}}}\n\nIn the definition of (divergence-preserving) branching bisimilarity we need the following notation: let $\\step{}$ be an ${\\mathcal{A}_{\\tau}}$-labelled transition relation on a set ${\\mathcal{S}}$, and let $a\\in{\\mathcal{A}_{\\tau}}$; we write $s\\step{(a)}t$ for ``$s\\step{a}t$'' or ``$a=\\tau$ and $s=t$''. Furthermore, we denote the transitive closure of $\\step{\\tau}$ by $\\step{}^{+}$ and the reflexive-transitive closure of $\\step{\\tau}$ by $\\step{}^{*}$.\n\n\\begin{definition}[Branching Bisimilarity]\\label{def:bbisim}\nLet $T_1=({\\mathcal{S}}_1,\\step{}_1,\\uparrow_1)$ and $T_2=({\\mathcal{S}}_2,\\step{}_2,\\uparrow_2)$ be transition systems. A \\emph{branching bisimulation} from $T_1$ to $T_2$ is a binary relation ${\\mathcal{\\mathop{R}}}\\subseteq{\\mathcal{S}}_1\\times{\\mathcal{S}}_2$ such that for all states $s_1$ and $s_2$, $s_1{\\mathcal{\\mathop{R}}} s_2$ implies\n\\begin{enumerate}\n    \\item if $s_1\\step{a}_1s_1'$, then there exist $s_2',s_2''\\in{\\mathcal{S}}_2$, s.t. $s_2\\step{}_2^{*}s_2''\\step{(a)}s_2'$, $s_1{\\mathcal{\\mathop{R}}} s_2''$ and $s_1'{\\mathcal{\\mathop{R}}} s_2'$;\n    \\item if $s_2\\step{a}_2s_2'$, then there exist $s_1',s_1''\\in{\\mathcal{S}}_1$, s.t. $s_1\\step{}_1^{*}s_1''\\step{(a)}s_1'$, $s_1''{\\mathcal{\\mathop{R}}} s_2$ and $s_1'{\\mathcal{\\mathop{R}}} s_2'$.\n\\end{enumerate}\nThe transition systems $T_1$ and $T_2$ are \\emph{branching bisimilar} (notation: $T_1\\bbisim T_2$) if there exists a branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ s.t. $\\uparrow_1{\\mathcal{\\mathop{R}}}\\uparrow_2$.\n\nA branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ is \\emph{divergence-preserving} if, for all states $s_1$ and $s_2$, $s_1{\\mathcal{\\mathop{R}}} s_2$ implies\n\\begin{enumerate}\n\\setcounter{enumi}{2}\n    \\item if there exists an infinite sequence $(s_{1,i})_{i\\in\\mathbb{N}}$ s.t. $s_1=s_{1,0},\\,s_{1,i}\\step{\\tau}s_{1,i+1}$ and $s_{1,i}{\\mathcal{\\mathop{R}}} s_2$ for all $i\\in\\mathbb{N}$, then there exists a state $s_2'$ s.t. $s_2\\step{}^{+}s_2'$ and $s_{1,i}{\\mathcal{\\mathop{R}}} s_2'$ for some $i\\in\\mathbb{N}$; and\n    \\item if there exists an infinite sequence $(s_{2,i})_{i\\in\\mathbb{N}}$ s.t. $s_2=s_{2,0},\\,s_{2,i}\\step{\\tau}s_{2,i+1}$ and $s_1{\\mathcal{\\mathop{R}}} s_{2,i}$ for all $i\\in\\mathbb{N}$, then there exists a state $s_1'$ s.t. $s_1\\step{}^{+}s_1'$ and $s_1'{\\mathcal{\\mathop{R}}} s_{2,i}$ for some $i\\in\\mathbb{N}$.\n\\end{enumerate}\nThe transition systems $T_1$ and $T_2$ are \\emph{divergence-preserving branching bisimilar} (notation: $T_1\\bbisim^{\\Delta}T_2$) if there exists a divergence-preserving branching bisimulation ${\\mathcal{\\mathop{R}}}$ from $T_1$ to $T_2$ s.t. $\\uparrow_1{\\mathcal{\\mathop{R}}}\\uparrow_2$.\n\\end{definition}\n\n{\\noindent\\textbf{{Proof of Theorem~\\ref{thm:itm-lts-iso}}}}\n\nIn the proof it is convenient to allow RTMs to have transitions of the form $s\\step{a[d/e]S}t$, where $S$ is a stay transition with no movement of the tape head. We refer to such machines as RTMs with stay transitions. The operational semantics of RTMs can be extended to an operational semantics for RTMs with stay transitions by adding the clause: $(s,\\delta_L\\check{d}\\delta_R)\\step{a}(t,\\delta_L \\check{e}\\delta_R)$ iff $s\\step{a[d/e]S}t$. The transition system of an RTM with stay transitions can be simulated by an RTM up to divergence-preserving branching bisimilarity.\n\n\\begin{lemma}~\\label{lemma:RTMN}\nThe transition system associated with an RTM with stay transitions is executable up to divergence-preserving branching bisimilarity.\n\\end{lemma}\n\n\\begin{proof}\nWe suppose that ${\\mathcal{M}}=({\\mathcal{S}},\\step{},\\uparrow)$ is an RTM with stay transitions, and its transition system is ${\\mathcal{T}}({\\mathcal{M}})$. We define a normal RTM ${\\mathcal{M}}'=({\\mathcal{S}}_1,\\step{}_1,\\uparrow_1)$ that simulates ${\\mathcal{T}}({\\mathcal{M}})$ as follows:\n\n\\begin{enumerate}\n\\item ${\\mathcal{S}}_1={\\mathcal{S}}\\cup\\{s_t\\mid s,t\\in{\\mathcal{S}}\\}$; \n\\item $s\\step{a[d/e]L}_1 t$ iff $s\\step{a[d/e]L}t$;\n\\item $s\\step{a[d/e]R}_1 t$ iff $s\\step{a[d/e]R}t$;\n\\item $s\\step{a[d/e]L}_1 s_t$ and $s_t\\step{\\tau[d/d]R}_1t$ iff $s\\step{a[d/e]S}t$; and\n\\item $\\uparrow_1=\\uparrow$.\n\\end{enumerate}\n\nThen it is straight forward to ${\\mathcal{T}}({\\mathcal{M}}'){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}{\\mathcal{T}}({\\mathcal{M}})$.\n\\end{proof}\n\n\nWe proceed to give a proof for Theorem~\\ref{thm:itm-lts-iso}\n\n\\begin{proof}\n    We let ${\\mathcal{I}}=(Q,\\step{}_{{\\mathcal{I}}},{q_{\\mathalpha{in}}})$ be an ITM. By Lemma~\\ref{lemma:RTMN}, it is enough to show that there exists an RTM with stay transitions ${\\mathcal{M}}$ satisfying ${\\mathcal{T}}({\\mathcal{M}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}}{\\mathcal{T}}({\\mathcal{I}})$.\n    We construct ${\\mathcal{M}}=({\\mathcal{S}},\\step{},\\uparrow)$ as follows:\n    \\begin{enumerate}\n        \\item ${\\mathcal{S}}={\\mathit{I}}\\cup{\\mathit{O}}$, where ${\\mathit{I}}=Q$ and ${\\mathit{O}}=\\{s_o\\mid o\\in\\Sigma_{\\lambda}, s\\in Q\\}$ as defined in Definition~\\ref{def:lts-itm};\n        \\item the transition relation $\\step{}$ is defined by:\n        $s\\step{\\mathit{in}(i)[d/e]M}t_o$ if $(s,d,i)\\step{}_{{\\mathcal{I}}}(t,e,M,o)$, and $s_o\\step{\\mathit{out}(o)[e/e]S}s$ for all $s\\in{\\mathcal{S}}$, $o\\in\\Sigma_{\\lambda}$; and\n        \\item $\\uparrow={q_{\\mathalpha{in}}}$.\n    \\end{enumerate}\n    Then according to Definitions~\\ref{def:lts-tm} and~\\ref{def:lts-itm}, we get a transition system ${\\mathcal{T}}({\\mathcal{M}})={\\mathcal{T}}({\\mathcal{I}})$, where `=' is the pointwise equality, which also implies ${\\mathcal{T}}({\\mathcal{M}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}} {\\mathcal{T}}({\\mathcal{I}})$.\n\\end{proof}\n\n{\\noindent\\textbf{{Proof of Lemma~\\ref{lemma:i-o-lts}}}}\n\\begin{proof}\n A state in ${\\mathcal{S}}_{{\\mathcal{M}}}$ is a configuration $(s,\\delta)$ of ${\\mathcal{M}}$, and we can make a partition of the set of all configurations according to the control states. If $s\\in{\\mathit{I}}$, then $(s,\\delta)\\in{\\mathit{I}}_{{\\mathcal{M}}}$; if $s\\in{\\mathit{E}}$, then $(s,\\delta)\\in{\\mathit{E}}_{{\\mathcal{M}}}$, where ${\\mathit{I}}$ and ${\\mathit{E}}$ are defined in Definition~\\ref{def:rtm-omega}.\n\\begin{enumerate}\n    \\item (Alternation) By condition 1 in Definition~\\ref{def:rtm-omega}, we have ${\\mathcal{S}}={\\mathit{I}}\\cup{\\mathit{E}}$ and ${\\mathit{I}}\\cap{\\mathit{E}}=\\emptyset$, which infers ${\\mathcal{S}}_{{\\mathcal{M}}}={\\mathit{I}}_{{\\mathcal{M}}}\\cup{\\mathit{E}}_{{\\mathcal{M}}}$ and ${\\mathit{I}}_{{\\mathcal{M}}}\\cap{\\mathit{E}}_{{\\mathcal{M}}}=\\emptyset$; moreover, by condition 2, for a transition $s\\step{a[d/e]M}t$, if $s\\in{\\mathit{I}}$, then $a\\in \\{?0,?1\\}$ and $t\\in{\\mathit{E}}$; if $s\\in{\\mathit{E}}$, then $a\\in\\{!0,!1,\\tau\\}$ and $t\\in {\\mathit{I}}$, which infers that for every transition $s\\step{a} s'$, if $s\\in{\\mathit{I}}_{{\\mathcal{M}}}$, then $a\\in\\{?0,?1\\}$ and $s'\\in{\\mathit{E}}_{{\\mathcal{M}}}$; if $s\\in{\\mathit{E}}_{{\\mathcal{M}}}$, then $a\\in\\{!0,!1,\\tau\\}$ and $s'\\in{\\mathit{I}}_{{\\mathcal{M}}}$.\n    \\item (Unambiguity) By condition 3 in Definition~\\ref{def:rtm-omega}, for all $(s,d)$ where $s\\in{\\mathit{E}}$ and $d\\in{\\mathcal{D}_{\\Box}}$, there is at most one transition $s\\step{o[d/e]M}t$, which infers that for every $s\\in{\\mathit{E}}_{{\\mathcal{M}}}$, there is exactly one outgoing transition $s\\step{a} s'$ with $a\\in\\{!0,!1,\\tau\\}$.\n    \\item (Totality) By condition 4 in Definition~\\ref{def:rtm-omega}, for all $(s,d)$ where $s\\in{\\mathit{I}}$ and $d\\in{\\mathcal{D}_{\\Box}}$, there are exactly two transitions of the form $s\\step{i[d/e]M}t$, with $?0$ and $?1$ as there labels, respectively, which infers that for every $s\\in{\\mathit{I}}_{{\\mathcal{M}}}$, there are two outgoing transitions labelled by $?0$ and $?1$, respectively.\n\\end{enumerate}\n\\end{proof}\n\n{\\noindent\\textbf{{Proof of Lemma~\\ref{lemma:io-LTS-omega}}}}\n\n\\begin{proof}\n   Let ${\\mathcal{T}}$ be an i/o interactive transition system, and let $s_0$ be the initial state of ${\\mathcal{T}}$. By Definition~\\ref{def:in-out-lts}, we need to show that there exists an $\\omega$-translation $\\phi$ such that for every $\\vec{x}\\in\\Sigma^{\\omega}$, there exists a trace $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ with input stream $\\vec{x}$, and for every trace with input stream $\\vec{x}$, its output stream is $\\vec{y}=\\phi(\\vec{x})$.\n\n   By the alternation condition in Lemma~\\ref{lemma:i-o-lts}, every $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ is of the form $i_0 o_0 i_1 o_1\\ldots$ where $i_j\\in\\{?0,?1\\}$ and $o_j\\in\\{!0,!1,\\tau\\}$.\n   Let $\\vec{x}$ be an arbitrary input stream, by the totality condition in Lemma~\\ref{lemma:i-o-lts}, we can find a trace $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ with input stream $\\vec{x}$.\n\n    Moreover, given an trace $\\sigma$ with an infinite input stream $\\vec{x}$, by interactiveness, it would always produce an infinite output stream $\\vec{y}$.\n\n    Finally, by unambiguity, there do not exist two traces sharing the same input stream. It follows that for every trace with input stream $\\vec{x}$, its output stream is $\\vec{y}$. Hence, we relate with every input stream a unique output stream, in a way, we get a $\\omega$-translation from ${\\mathcal{T}}$.\n\\end{proof}\n\n{\\noindent\\textbf{{Proof of Theorem~\\ref{thm:lc-exe-translation2}}}}\n\nIt is not hard to show the following lemmas,\n\n\\begin{lemma}\\label{lemma:bis-translation}\nLet ${\\mathcal{T}}_1$ and ${\\mathcal{T}}_2$ be two i/o transition systems, and ${\\mathcal{T}}_1\\bbisim {\\mathcal{T}}_2$. Then they realize the same $\\omega$-translation.\n\\end{lemma}\n\n\\begin{proof}\nWe let $s_1$ and $s_2$ be the initial states of ${\\mathcal{T}}_1$ and ${\\mathcal{T}}_2$, respectively. As ${\\mathcal{T}}_1\\bbisim {\\mathcal{T}}_2$, we have that for every $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_1)$, there exists a trace $\\sigma'\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_2)$, and they share the same input and output stream, and vice versa. It follows that ${\\mathcal{T}}_1$ and ${\\mathcal{T}}_2$ realize the same $\\omega$-translation.\n\\end{proof}\n\n\\begin{lemma}~\\label{lemma:finite-input}\nLet ${\\mathcal{T}}$ be an interactive i/o transition system, and let $s_0$ be its initial state, then the following function is computable:\n$g: \\Sigma^{*}\\rightarrow \\Sigma^{*}$, satisfying that if $g(x)=y$, then for every $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ with input and output stream $\\vec{x}$ and $\\vec{y}$, if $x\\prec\\vec{x}$, then $y\\prec\\vec{y}$.\n\\end{lemma}\n\n\\begin{proof}\nWe consider a finite trace from $s_0$, we can associate with such a trace its input and output sequences in a similar way as defined in Definition~\\ref{def:in-out-lts}.\nBy Lemma~\\ref{lemma:i-o-lts}, there is only one finite trace with $x$ as its input sequence, and its output sequence is $y$. By totality, it holds for every $x\\in\\Sigma^{*}$.\nAs the transition relation of i/o transition systems are computable, $g$ is also computable.\n\\end{proof}\n\nHence, we are able to make a proof of Theorem~\\ref{thm:lc-exe-translation2}\n\\begin{proof}\nWe let $\\phi$ be an $\\omega$-translation.\n\\begin{enumerate}\n\\item For the ``only if'' part, we need to show that there exists a computable total function $g:\\Sigma^{*}\\rightarrow\\Sigma^{*}$, such that $g$ is monotonic and for all strictly increasing chains $u_1\\prec u_2\\prec\\ldots\\prec u_t\\prec\\ldots$ with $u_t\\in\\Sigma^{*}$ ($t\\geq 1$), one has $\\phi(\\lim_{t\\rightarrow\\infty}u_t)=\\lim_{t\\rightarrow\\infty}g(u_t)$.\n\n    We assume that $\\phi$ is realized by an interactive i/o transition system ${\\mathcal{T}}$, and we let $s_0$ be the initial state of ${\\mathcal{T}}$. By Lemma~\\ref{lemma:finite-input} the following function is computable: $g: \\Sigma^{*}\\rightarrow \\Sigma^{*}$, satisfying that if $g(x)=y$, then for every $\\sigma\\in{\\ensuremath{\\mathit{Tr_w^{\\infty}}}}(s_0)$ with input and output stream $\\vec{x}$ and $\\vec{y}$, if $x\\prec\\vec{x}$, then $y\\prec\\vec{y}$. By unambiguity and totality, $g$ is a monotonic and total computable function.\n\n Moreover, for a strictly increasing chain $u_1\\prec u_2\\prec\\ldots\\prec u_t\\prec\\ldots$ with $u_t\\in\\Sigma^{*}$ for $t\\geq 1$, the computation of $\\lim_{t\\rightarrow\\infty}g(u_t)$ is the execution of a trace $\\sigma$ receiving the input stream $\\lim_{t\\rightarrow\\infty}u_t$. Hence we have $\\phi(\\lim_{t\\rightarrow\\infty}u_t)=\\lim_{t\\rightarrow\\infty}g(u_t)$.\n\n    Thus, $g$ is the computable total function we need, and it follows that $\\phi$ is a computable limit-continuous total function.\n\n\\item\n\n    For the ``if'' part, we assume that $\\phi$ is a total limit-continuous function, and design an RTM ${\\mathcal{M}}$ to realize this translation.\n    By Theorem~\\ref{thm:int-trans}, $\\phi$ is interactively computable by some ITM ${\\mathcal{M}}'$. According to Definition~\\ref{def:lts-itm} and Lemma~\\ref{lemma:i-o-lts}, the transition system associated with ${\\mathcal{M}}'$ is an i/o transition system, moreover, according to Corollary~\\ref{cor:itm-lts-exe}, it is an executable i/o transition system. Therefore, we have shown that $\\phi$ is an executable $\\omega$-translation by Lemma~\\ref{lemma:bis-translation}.\n\\end{enumerate}\n\\end{proof}\n\n{\\noindent\\textbf{{Proof of Theorem~\\ref{thm:bound-lts-rtma}}}}\n\n\\begin{proof}\nWe assume that ${\\mathcal{T}}=({\\mathcal{S}}_{{\\mathcal{T}}},\\step{}_{{\\mathcal{T}}},\\uparrow_{{\\mathcal{T}}})$ is an ${\\mathcal{A}_{\\tau}}$-labelled transition system. It has $n$ distinct action labels and its branching degree is bounded by $k$.\nThen we encode ${\\mathcal{A}_{\\tau}}$ and ${\\mathcal{S}}_{{\\mathcal{T}}}$ as natural numbers. Let ${\\ensuremath{\\ulcorner {{a}}\\urcorner}}$ and ${\\ensuremath{\\ulcorner {{s}}\\urcorner}}$ be the encodings of an action and a state, and ${\\ensuremath{\\ulcorner {{x_1,x_2,\\ldots,x_n}}\\urcorner}}$ be the encoding of an $n$-tuple.\n\nThe advice process $A_{f}$ realizes the following function:\n\n", "index": 27, "text": "\\begin{equation*}\nf({\\ensuremath{\\ulcorner {{s}}\\urcorner}})={\\ensuremath{\\ulcorner {{a_1,\\ldots, a_m, s_1,\\ldots,s_m}}\\urcorner}}\n\\enskip,\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex13.m1\" class=\"ltx_Math\" alttext=\"f({\\ulcorner{{s}}\\urcorner})={\\ulcorner{{a_{1},\\ldots,a_{m},s_{1},\\ldots,s_{m}%&#10;}}\\urcorner}\\enskip,\" display=\"block\"><mrow><mrow><mrow><mi>f</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">\u231c</mi><mo>\u2062</mo><mi>s</mi><mo>\u2062</mo><mi mathvariant=\"normal\">\u231d</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mrow><mi mathvariant=\"normal\">\u231c</mi><mo>\u2062</mo><msub><mi>a</mi><mn>1</mn></msub></mrow><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>a</mi><mi>m</mi></msub><mo>,</mo><msub><mi>s</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><mrow><msub><mi>s</mi><mi>m</mi></msub><mo>\u2062</mo><mpadded width=\"+5pt\"><mi mathvariant=\"normal\">\u231d</mi></mpadded></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "\n        \\item In $\\mathit{advice}$ state, the machine sends the encoding of the current state ${\\ensuremath{\\ulcorner {{s_0}}\\urcorner}}$ to the advice process, and gets the encoding of list of all possible transitions ${\\ensuremath{\\ulcorner {{a_1,\\ldots, a_m, s_1,\\ldots,s_m}}\\urcorner}}$ from the advice process.\n        \n", "itemtype": "equation", "pos": 100718, "prevtext": "\nwhere $(a_i,s_i)\\in \\{(a_1,s_1),\\ldots,(a_m,s_m)\\}$ iff $s\\step{a_i}_{{\\mathcal{T}}} s_i$.\n\nAn outline of the execution of ${\\mathcal{M}}$ is defined as follows.\n\\begin{enumerate}\n    \\item We need the following control states: $\\mathit{initial}$, $\\mathit{advice}$, $\\mathit{decode}$, $\\mathit{next}_{{\\mathcal{A}_{\\tau}}^{\\leq k}}$ (${\\mathcal{A}_{\\tau}}^{\\leq k}$ ranges over all ${\\mathcal{A}_{\\tau}}$ words with at most length $k$), $\\mathit{choose}_i$ ($i\\leq k$).\n    \\item The execution of ${\\mathcal{M}}$ is as follows, its initial configuration is $(\\mathit{initial},\\Box)$.\n    \\begin{enumerate}\n        \\item In $\\mathit{initial}$ state, the machine writes the encoding of initial state of the transition system ${\\ensuremath{\\ulcorner {{\\uparrow_{{\\mathcal{T}}}}}\\urcorner}}$ on the tape, and reaches $\\mathit{advice}$ state.\n        \n", "index": 29, "text": "\\begin{equation*}\n         (\\mathit{initial}, \\Box)\\step{}^{*} (\\mathit{advice}, {\\ensuremath{\\ulcorner {{\\uparrow_{{\\mathcal{T}}}}}\\urcorner}})\n         \\enskip.\n        \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex14.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{initial},\\Box)\\step{}^{*}(\\mathit{advice},{\\ulcorner{{\\uparrow_{{%&#10;\\mathcal{T}}}}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc56\ud835\udc5b\ud835\udc56\ud835\udc61\ud835\udc56\ud835\udc4e\ud835\udc59</mi><mo>,</mo><mi mathvariant=\"normal\">\u25a1</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc4e\ud835\udc51\ud835\udc63\ud835\udc56\ud835\udc50\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mo>\u2191</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcaf</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "\n        \\item In $\\mathit{decode}$ state, the machine decodes all the actions from the tape, and enters one of the $\\mathit{next}$ state.\n        \n", "itemtype": "equation", "pos": 101229, "prevtext": "\n        \\item In $\\mathit{advice}$ state, the machine sends the encoding of the current state ${\\ensuremath{\\ulcorner {{s_0}}\\urcorner}}$ to the advice process, and gets the encoding of list of all possible transitions ${\\ensuremath{\\ulcorner {{a_1,\\ldots, a_m, s_1,\\ldots,s_m}}\\urcorner}}$ from the advice process.\n        \n", "index": 31, "text": "\\begin{equation*}\n         (\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0}}\\urcorner}})\\step{}^{*} (\\mathit{decode},{\\ensuremath{\\ulcorner {{a_1,\\ldots, a_m, s_1,\\ldots,s_m}}\\urcorner}})\n         \\enskip.\n        \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex15.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{advice},{\\ulcorner{{s_{0}}}\\urcorner})\\step{}^{*}(\\mathit{decode},{%&#10;\\ulcorner{{a_{1},\\ldots,a_{m},s_{1},\\ldots,s_{m}}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc4e\ud835\udc51\ud835\udc63\ud835\udc56\ud835\udc50\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mn>0</mn></msub><mi mathvariant=\"normal\">\u231d</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc51\ud835\udc52\ud835\udc50\ud835\udc5c\ud835\udc51\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>a</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>a</mi><mi>m</mi></msub><mo>,</mo><msub><mi>s</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>s</mi><mi>m</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "\n        \\item In $\\mathit{next}_{\\{a_1,\\ldots,a_m\\}}$ state, the machine chooses one of the actions. For every $i=1,\\ldots,m$, there is a transition\n        \n", "itemtype": "equation", "pos": 101603, "prevtext": "\n        \\item In $\\mathit{decode}$ state, the machine decodes all the actions from the tape, and enters one of the $\\mathit{next}$ state.\n        \n", "index": 33, "text": "\\begin{equation*}\n        (\\mathit{decode},{\\ensuremath{\\ulcorner {{a_1,\\ldots, a_m, s_1,\\ldots,s_m}}\\urcorner}})\\step{}^{*} (\\mathit{next}_{\\{a_1,\\ldots,a_m\\}},{\\ensuremath{\\ulcorner {{s_1,\\ldots,s_m}}\\urcorner}})\n        \\enskip.\n        \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex16.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{decode},{\\ulcorner{{a_{1},\\ldots,a_{m},s_{1},\\ldots,s_{m}}}\\urcorner}%&#10;)\\step{}^{*}(\\mathit{next}_{\\{a_{1},\\ldots,a_{m}\\}},{\\ulcorner{{s_{1},\\ldots,s%&#10;_{m}}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc51\ud835\udc52\ud835\udc50\ud835\udc5c\ud835\udc51\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>a</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>a</mi><mi>m</mi></msub><mo>,</mo><msub><mi>s</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>s</mi><mi>m</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><msub><mi>\ud835\udc5b\ud835\udc52\ud835\udc65\ud835\udc61</mi><mrow><mo stretchy=\"false\">{</mo><msub><mi>a</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>a</mi><mi>m</mi></msub><mo stretchy=\"false\">}</mo></mrow></msub><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>s</mi><mi>m</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "\n        \\item In $\\mathit{choose}_i$ state, the machine projects the encoding ${\\ensuremath{\\ulcorner {{s_1,\\ldots,s_m}}\\urcorner}}$ to the encoding of the $i$-th state, and enters $\\mathit{advice}$ state again.\n        \n", "itemtype": "equation", "pos": 102016, "prevtext": "\n        \\item In $\\mathit{next}_{\\{a_1,\\ldots,a_m\\}}$ state, the machine chooses one of the actions. For every $i=1,\\ldots,m$, there is a transition\n        \n", "index": 35, "text": "\\begin{equation*}\n        (\\mathit{next}_{\\{a_1,\\ldots,a_m\\}},{\\ensuremath{\\ulcorner {{s_1,\\ldots,s_m}}\\urcorner}})\\step{a_i} (\\mathit{choose}_i,{\\ensuremath{\\ulcorner {{s_1,\\ldots,s_m}}\\urcorner}})\n        \\enskip.\n        \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex17.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{next}_{\\{a_{1},\\ldots,a_{m}\\}},{\\ulcorner{{s_{1},\\ldots,s_{m}}}%&#10;\\urcorner})\\step{a_{i}}(\\mathit{choose}_{i},{\\ulcorner{{s_{1},\\ldots,s_{m}}}%&#10;\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><msub><mi>\ud835\udc5b\ud835\udc52\ud835\udc65\ud835\udc61</mi><mrow><mo stretchy=\"false\">{</mo><msub><mi>a</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>a</mi><mi>m</mi></msub><mo stretchy=\"false\">}</mo></mrow></msub><mo>,</mo><mrow><mi mathvariant=\"normal\">\u231c</mi><mo>\u2062</mo><msub><mi>s</mi><mn>1</mn></msub></mrow><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><mrow><msub><mi>s</mi><mi>m</mi></msub><mo>\u2062</mo><mi mathvariant=\"normal\">\u231d</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mo>\u2062</mo><msub><mi>a</mi><mi>i</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>\ud835\udc50\u210e\ud835\udc5c\ud835\udc5c\ud835\udc60\ud835\udc52</mi><mi>i</mi></msub><mo>,</mo><mrow><mi mathvariant=\"normal\">\u231c</mi><mo>\u2062</mo><msub><mi>s</mi><mn>1</mn></msub></mrow><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><mrow><msub><mi>s</mi><mi>m</mi></msub><mo>\u2062</mo><mi mathvariant=\"normal\">\u231d</mi></mrow><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "\n    \\end{enumerate}\n\\end{enumerate}\nThe above procedure describes the simulation of a step of transition $s_0\\step{a_i}_{{\\mathcal{T}}}s_i$ in ${\\mathcal{T}}$. Note that the choice of the transition is happened only in the state $\\mathit{next}_{\\{a_1,\\ldots,a_m\\}}$. Moreover, no infinite $\\tau$-transition sequence is introduced for simulation.\nHence, we are able to verify that ${\\mathcal{T}}([{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}} {\\mathcal{T}}$.\n\\end{proof}\n\n\n{\\noindent\\textbf{{Proof of Theorem~\\ref{thm:lts-rtma}}}}\n\n\\begin{proof}\nWe assume that ${\\mathcal{T}}=({\\mathcal{S}}_{{\\mathcal{T}}},\\step{}_{{\\mathcal{T}}},\\uparrow_{{\\mathcal{T}}})$ is a countable ${\\mathcal{A}_{\\tau}}$-labelled transition system. It has $n$ distinct action labels and it possibly has infinitely branching.\nThen we encode ${\\mathcal{A}_{\\tau}}$ and ${\\mathcal{S}}_{{\\mathcal{T}}}$ as natural numbers. Let ${\\ensuremath{\\ulcorner {{a}}\\urcorner}}$ and ${\\ensuremath{\\ulcorner {{s}}\\urcorner}}$ be the encodings of an action and a state, and ${\\ensuremath{\\ulcorner {{x_1,x_2,\\ldots,x_n}}\\urcorner}}$ be the encoding of an $n$-tuple.\n\nThe transition relation $\\step{}_{{\\mathcal{T}}}$ maps a state, namely, $s_0$, to a possibly infinite set $\\{(a_i,s_i)\\mid s_0\\step{a_i}_{{\\mathcal{T}}} s_i\\}$, denoted by $s_0\\step{}_{{\\mathcal{T}}}$. We define an order $<_{{\\mathcal{T}}}$ over the elements in the set $s_0\\step{}_{{\\mathcal{T}}}$ such that $(a,s)<_{{\\mathcal{T}}}(a',s')$, if ${\\ensuremath{\\ulcorner {{a,s}}\\urcorner}}<_{{\\mathcal{T}}}{\\ensuremath{\\ulcorner {{a',s'}}\\urcorner}}$.\n\nThe advice function $A_{f}$ realizes the following function:\n\n", "itemtype": "equation", "pos": 102476, "prevtext": "\n        \\item In $\\mathit{choose}_i$ state, the machine projects the encoding ${\\ensuremath{\\ulcorner {{s_1,\\ldots,s_m}}\\urcorner}}$ to the encoding of the $i$-th state, and enters $\\mathit{advice}$ state again.\n        \n", "index": 37, "text": "\\begin{equation*}\n        (\\mathit{choose}_i,{\\ensuremath{\\ulcorner {{s_1,\\ldots,s_m}}\\urcorner}})\\step{}^{*}(\\mathit{advice},{\\ensuremath{\\ulcorner {{s_i}}\\urcorner}})\n        \\enskip.\n        \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex18.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{choose}_{i},{\\ulcorner{{s_{1},\\ldots,s_{m}}}\\urcorner})\\step{}^{*}(%&#10;\\mathit{advice},{\\ulcorner{{s_{i}}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><msub><mi>\ud835\udc50\u210e\ud835\udc5c\ud835\udc5c\ud835\udc60\ud835\udc52</mi><mi>i</mi></msub><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>s</mi><mi>m</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc4e\ud835\udc51\ud835\udc63\ud835\udc56\ud835\udc50\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mi>i</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "\nwhere $(a_i,s_i)$ is the $i$-th element from $s_0\\step{}_{{\\mathcal{T}}}$ regarding to $<_{{\\mathcal{T}}}$.\n\nAn outline of the execution of ${\\mathcal{M}}$ is defined as follows.\n\\begin{enumerate}\n    \\item We need the following control states: $\\mathit{initial}$, $\\mathit{advice}$, $\\mathit{decode}$, $\\mathit{next}_{{\\mathcal{A}_{\\tau}}}$, $\\mathit{choose}_i$ ($i=1,2$).\n    \\item The execution of ${\\mathcal{M}}$ is as follows, we use a pair $(s,\\delta)$ to denote the current configuration of the machine.\n    \\begin{enumerate}\n        \\item In $\\mathit{initial}$ state, the machine writes the encoding of the initial state of the transition system ${\\ensuremath{\\ulcorner {{\\uparrow_{{\\mathcal{T}}}}}\\urcorner}}$ on the tape, and reaches $\\mathit{advice}$ state.\n        \n", "itemtype": "equation", "pos": 104365, "prevtext": "\n    \\end{enumerate}\n\\end{enumerate}\nThe above procedure describes the simulation of a step of transition $s_0\\step{a_i}_{{\\mathcal{T}}}s_i$ in ${\\mathcal{T}}$. Note that the choice of the transition is happened only in the state $\\mathit{next}_{\\{a_1,\\ldots,a_m\\}}$. Moreover, no infinite $\\tau$-transition sequence is introduced for simulation.\nHence, we are able to verify that ${\\mathcal{T}}([{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}}){\\ensuremath{\\mathrel{\\bbisim^{\\Delta}}}} {\\mathcal{T}}$.\n\\end{proof}\n\n\n{\\noindent\\textbf{{Proof of Theorem~\\ref{thm:lts-rtma}}}}\n\n\\begin{proof}\nWe assume that ${\\mathcal{T}}=({\\mathcal{S}}_{{\\mathcal{T}}},\\step{}_{{\\mathcal{T}}},\\uparrow_{{\\mathcal{T}}})$ is a countable ${\\mathcal{A}_{\\tau}}$-labelled transition system. It has $n$ distinct action labels and it possibly has infinitely branching.\nThen we encode ${\\mathcal{A}_{\\tau}}$ and ${\\mathcal{S}}_{{\\mathcal{T}}}$ as natural numbers. Let ${\\ensuremath{\\ulcorner {{a}}\\urcorner}}$ and ${\\ensuremath{\\ulcorner {{s}}\\urcorner}}$ be the encodings of an action and a state, and ${\\ensuremath{\\ulcorner {{x_1,x_2,\\ldots,x_n}}\\urcorner}}$ be the encoding of an $n$-tuple.\n\nThe transition relation $\\step{}_{{\\mathcal{T}}}$ maps a state, namely, $s_0$, to a possibly infinite set $\\{(a_i,s_i)\\mid s_0\\step{a_i}_{{\\mathcal{T}}} s_i\\}$, denoted by $s_0\\step{}_{{\\mathcal{T}}}$. We define an order $<_{{\\mathcal{T}}}$ over the elements in the set $s_0\\step{}_{{\\mathcal{T}}}$ such that $(a,s)<_{{\\mathcal{T}}}(a',s')$, if ${\\ensuremath{\\ulcorner {{a,s}}\\urcorner}}<_{{\\mathcal{T}}}{\\ensuremath{\\ulcorner {{a',s'}}\\urcorner}}$.\n\nThe advice function $A_{f}$ realizes the following function:\n\n", "index": 39, "text": "\\begin{equation*}\nf({\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}})={\\ensuremath{\\ulcorner {{a_i,s_i}}\\urcorner}}\n\\enskip,\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex19.m1\" class=\"ltx_Math\" alttext=\"f({\\ulcorner{{s_{0},i}}\\urcorner})={\\ulcorner{{a_{i},s_{i}}}\\urcorner}\\enskip,\" display=\"block\"><mrow><mrow><mrow><mi>f</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">\u231c</mi><mo>\u2062</mo><msub><mi>s</mi><mn>0</mn></msub></mrow><mo>,</mo><mrow><mi>i</mi><mo>\u2062</mo><mi mathvariant=\"normal\">\u231d</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mrow><mi mathvariant=\"normal\">\u231c</mi><mo>\u2062</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><mo>,</mo><mrow><msub><mi>s</mi><mi>i</mi></msub><mo>\u2062</mo><mpadded width=\"+5pt\"><mi mathvariant=\"normal\">\u231d</mi></mpadded></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "\n        \\item In $\\mathit{advice}$ state, the machine either increase the counter $i$ by $1$, or sends ${\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}}$ to the advice, and gets ${\\ensuremath{\\ulcorner {{(a_i,s_i)}}\\urcorner}}$ from the advice.\n        \\begin{eqnarray*}\n         (\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}})\\step{}^{*}(\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0,i+1}}\\urcorner}}), or\\\\\n         (\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}})\\step{}^{*} (\\mathit{decode},{\\ensuremath{\\ulcorner {{s_0,s_i,a_i}}\\urcorner}})\n         \\end{eqnarray*}\n        \\item In $\\mathit{decode}$ state, the machine decodes the action $a_i$ from the tape, and enters the state $\\mathit{next_{a_i}}$.\n        \n", "itemtype": "equation", "pos": 105278, "prevtext": "\nwhere $(a_i,s_i)$ is the $i$-th element from $s_0\\step{}_{{\\mathcal{T}}}$ regarding to $<_{{\\mathcal{T}}}$.\n\nAn outline of the execution of ${\\mathcal{M}}$ is defined as follows.\n\\begin{enumerate}\n    \\item We need the following control states: $\\mathit{initial}$, $\\mathit{advice}$, $\\mathit{decode}$, $\\mathit{next}_{{\\mathcal{A}_{\\tau}}}$, $\\mathit{choose}_i$ ($i=1,2$).\n    \\item The execution of ${\\mathcal{M}}$ is as follows, we use a pair $(s,\\delta)$ to denote the current configuration of the machine.\n    \\begin{enumerate}\n        \\item In $\\mathit{initial}$ state, the machine writes the encoding of the initial state of the transition system ${\\ensuremath{\\ulcorner {{\\uparrow_{{\\mathcal{T}}}}}\\urcorner}}$ on the tape, and reaches $\\mathit{advice}$ state.\n        \n", "index": 41, "text": "\\begin{equation*}\n         (\\mathit{initial}, \\Box)\\step{}^{*} (\\mathit{advice}, {\\ensuremath{\\ulcorner {{\\uparrow_{{\\mathcal{T}}},1}}\\urcorner}})\n         \\enskip.\n        \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex20.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{initial},\\Box)\\step{}^{*}(\\mathit{advice},{\\ulcorner{{\\uparrow_{{%&#10;\\mathcal{T}}},1}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc56\ud835\udc5b\ud835\udc56\ud835\udc61\ud835\udc56\ud835\udc4e\ud835\udc59</mi><mo>,</mo><mi mathvariant=\"normal\">\u25a1</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc4e\ud835\udc51\ud835\udc63\ud835\udc56\ud835\udc50\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mo>\u2191</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcaf</mi></msub><mo>,</mo><mn>1</mn><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "\n        \\item In $\\mathit{next}_{a_i}$ state, the machine either performs the action, or change its current choice to another transition.\n        \\begin{eqnarray*}\n        (\\mathit{next}_{a_i},{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})\\step{\\tau} (\\mathit{choose}_1,{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}}), or\\\\\n        (\\mathit{next}_{a_i},{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})\\step{a_i} (\\mathit{choose}_2,{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})\n        \\enskip.\n        \\end{eqnarray*}\n        \\item In $\\mathit{choose}_i$ state (i=1,2), the machine projects the encoding ${\\ensuremath{\\ulcorner {{s_1,s_2}}\\urcorner}}$ to the encoding of the $i$-th state, and enters $\\mathit{advice}$ state again.\n        \n", "itemtype": "equation", "pos": 106205, "prevtext": "\n        \\item In $\\mathit{advice}$ state, the machine either increase the counter $i$ by $1$, or sends ${\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}}$ to the advice, and gets ${\\ensuremath{\\ulcorner {{(a_i,s_i)}}\\urcorner}}$ from the advice.\n        \\begin{eqnarray*}\n         (\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}})\\step{}^{*}(\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0,i+1}}\\urcorner}}), or\\\\\n         (\\mathit{advice},{\\ensuremath{\\ulcorner {{s_0,i}}\\urcorner}})\\step{}^{*} (\\mathit{decode},{\\ensuremath{\\ulcorner {{s_0,s_i,a_i}}\\urcorner}})\n         \\end{eqnarray*}\n        \\item In $\\mathit{decode}$ state, the machine decodes the action $a_i$ from the tape, and enters the state $\\mathit{next_{a_i}}$.\n        \n", "index": 43, "text": "\\begin{equation*}\n        (\\mathit{decode},{\\ensuremath{\\ulcorner {{s_0,s_i,a_i}}\\urcorner}})\\step{}^{*} (\\mathit{next}_{a_i},{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})\n        \\enskip.\n        \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex21.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{decode},{\\ulcorner{{s_{0},s_{i},a_{i}}}\\urcorner})\\step{}^{*}(\\mathit%&#10;{next}_{a_{i}},{\\ulcorner{{s_{0},s_{i}}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc51\ud835\udc52\ud835\udc50\ud835\udc5c\ud835\udc51\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mn>0</mn></msub><mo>,</mo><msub><mi>s</mi><mi>i</mi></msub><mo>,</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><msub><mi>\ud835\udc5b\ud835\udc52\ud835\udc65\ud835\udc61</mi><msub><mi>a</mi><mi>i</mi></msub></msub><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mn>0</mn></msub><mo>,</mo><msub><mi>s</mi><mi>i</mi></msub><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01546.tex", "nexttext": "\n    \\end{enumerate}\n\\end{enumerate}\nOne can verify that ${\\mathcal{\\mathop{R}}}=\\{(s,s')\\mid s\\in{\\mathcal{S}}_{{\\mathcal{T}}}, s'=\\\\(\\mathit{advice}, {\\ensuremath{\\ulcorner {{s,i}}\\urcorner}})\\mbox{ or } (\\mathit{decode},{\\ensuremath{\\ulcorner {{s,a_i,s_i}}\\urcorner}}) \\mbox{ or } (\\mathit{next}_{a_i},{\\ensuremath{\\ulcorner {{s,s_i}}\\urcorner}})\\mbox{ or } (\\mathit{choose}_1,{\\ensuremath{\\ulcorner {{s,s_i}}\\urcorner}})\\mbox{ or } (\\mathit{choose}_2,{\\ensuremath{\\ulcorner {{s_i,s}}\\urcorner}})\\}$ is a branching bisimulation relation. Hence, we have ${\\mathcal{T}}([{\\mathcal{M}}\\parallel A_{f}]_{{\\mathcal{C}}})\\bbisim T$.\n\\end{proof} \n}\n\n", "itemtype": "equation", "pos": 107156, "prevtext": "\n        \\item In $\\mathit{next}_{a_i}$ state, the machine either performs the action, or change its current choice to another transition.\n        \\begin{eqnarray*}\n        (\\mathit{next}_{a_i},{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})\\step{\\tau} (\\mathit{choose}_1,{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}}), or\\\\\n        (\\mathit{next}_{a_i},{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})\\step{a_i} (\\mathit{choose}_2,{\\ensuremath{\\ulcorner {{s_0,s_i}}\\urcorner}})\n        \\enskip.\n        \\end{eqnarray*}\n        \\item In $\\mathit{choose}_i$ state (i=1,2), the machine projects the encoding ${\\ensuremath{\\ulcorner {{s_1,s_2}}\\urcorner}}$ to the encoding of the $i$-th state, and enters $\\mathit{advice}$ state again.\n        \n", "index": 45, "text": "\\begin{equation*}\n        (\\mathit{choose}_i,{\\ensuremath{\\ulcorner {{s_1,s_2}}\\urcorner}})\\step{}^{*}(\\mathit{advice},{\\ensuremath{\\ulcorner {{s_i,1}}\\urcorner}})\n        \\enskip.\n        \\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex22.m1\" class=\"ltx_Math\" alttext=\"(\\mathit{choose}_{i},{\\ulcorner{{s_{1},s_{2}}}\\urcorner})\\step{}^{*}(\\mathit{%&#10;advice},{\\ulcorner{{s_{i},1}}\\urcorner})\\enskip.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">(</mo><msub><mi>\ud835\udc50\u210e\ud835\udc5c\ud835\udc5c\ud835\udc60\ud835\udc52</mi><mi>i</mi></msub><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mn>1</mn></msub><mo>,</mo><msub><mi>s</mi><mn>2</mn></msub><mi mathvariant=\"normal\">\u231d</mi><mo stretchy=\"false\">)</mo></mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\step</mtext></merror><mmultiscripts><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc4e\ud835\udc51\ud835\udc63\ud835\udc56\ud835\udc50\ud835\udc52</mi><mo>,</mo><mi mathvariant=\"normal\">\u231c</mi><msub><mi>s</mi><mi>i</mi></msub><mo>,</mo><mn>1</mn><mi mathvariant=\"normal\">\u231d</mi><mo rspace=\"7.5pt\" stretchy=\"false\">)</mo></mrow><mprescripts/><none/><mo>*</mo></mmultiscripts><mo>.</mo></mrow></math>", "type": "latex"}]