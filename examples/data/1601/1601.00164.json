[{"file": "1601.00164.tex", "nexttext": "\n\n}\nThis theorem provides a polynomial-time algorithm to reduce the size of the input\ngraph by possibly finding partial solution.\nIt turns out that NT-Theorem has great applications in approximation algorithms~\\cite{BE:WVC,hochbaum,khuller} and parameterized algorithms~\\cite{CKJ:VC,A:crown2}. We can see that $V\\setminus I$ is a 2-approximation solution\nand $G[V \\setminus (C \\cup I)]$ is a $2k$-vertex kernel\nof the problem taking the size of\nthe solution as the parameter $k$. Lokshtanov et al.~\\cite{lp} also apply NT-Theorem to branching algorithms for \\textsc{Vertex Cover} and some other related problems.\nDue to NT-Theorem's practical usefulness and theoretical depth in graph theory, it has attracted numerous\nfurther studies and follow-up work~\\cite{FG:gNT,BRH:extension,CC:WVC,A:crown2}.\nBar-Yehuda, Rawitz and Hermelin~\\cite{BRH:extension} extended NT-Theorem for a generalized vertex cover problem, where edges are allowed not to be covered at a certain\npredetermined penalty. Fellows, Guo, Moser and Niedermeier~\\cite{FG:gNT} extended NT-Theorem for \\textsc{Bounded-Degree Vertex Deletion}.\n\nIn this paper, we are interested in \\textsc{Bounded-Degree Vertex Deletion}.\nA \\emph{$d$-degree deletion set} of a graph $G$ is a subset of vertices, whose deletion\nleaves a graph of maximum degree at most $d$. For each fixed $d$, \\textsc{Bounded-Degree Vertex Deletion} is to find\na $d$-degree deletion set of minimum size in an input graph.\n\\textsc{Bounded-Degree Vertex Deletion} and its ``dual problem'' to find maximum $s$-plexes have applications in computational biology~\\cite{FG:gNT,CF:copath}\nand social network analysis~\\cite{SF:plex,BBH:plex}.\nThere is a substantial amount of theoretical work on this problem~\\cite{khmn,NRT,SF:plex}, specially in parameterized complexity~\\cite{BBNU:treewidth,FG:gNT,CF:copath}.\n\nSince \\textsc{Vertex Cover} is a special case of \\textsc{Bounded-Degree Vertex Deletion},\nwe are interested in finding a local optimization theorem similar to NT-Theorem for \\textsc{Bounded-Degree Vertex Deletion}.\nFellows, Guo, Moser and Niedermeier~\\cite{FG:gNT} made a great progress toward to this interesting problem by giving the following theorem.\n\n\n\\thmm{ntg-thm}{ \\emph{\\cite{FG:gNT}}\nFor an undirected graph $G=(V,E)$ of $n=|V|$ vertices and $m=|E|$ edges, any constant $\\varepsilon > 0$ and any integer $d\\geq0$, there is an $O(n^4m)$-time\nalgorithm to compute two disjoint vertex subsets $C$\nand $I$ of $G$ such that for any minimum $d$-degree deletion set $K'$ of the induced subgraph $G[V \\setminus (C \\cup I)]$, $K' \\cup C$ is\na minimum $d$-degree deletion set of $G$, and\n\n", "itemtype": "equation", "pos": 1972, "prevtext": "\n\n\\begin{frontmatter}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\title{On a generalization of Nemhauser and Trotter's local optimization theorem}\n\n\n\n\n\n\n\\author{Mingyu Xiao}\n\n\\ead{myxiao@uestc.edu.cn}\n\\address{School of Computer Science and Engineering,\\\\\nUniversity of Electronic Science and Technology of China, China\n}\n\n\\begin{abstract}\n\n\n\n\n\n\n\n\n\nFellows, Guo, Moser and Niedermeier~[JCSS2011] proved a generalization of Nemhauser and Trotter's theorem, which applies to \\textsc{Bounded-Degree Vertex Deletion}\n(for a fixed integer $d\\geq 0$,  to delete $k$ vertices of the input graph to make\nthe maximum degree of it $\\leq d$)\nand gets a linear-vertex kernel for\n$d=0$ and $1$, and a superlinear-vertex kernel for each $d\\geq 2$.\nIt is still left as an open problem whether \\textsc{Bounded-Degree Vertex Deletion} admits a linear-vertex kernel for each $d\\geq 3$.\nIn this paper, we refine the generalized Nemhauser and Trotter's theorem and get a linear-vertex kernel for each $d\\geq 0$.\n\n\n\\end{abstract}\n\n\\begin{keyword}\nKernelization\\sep Fixed-Parameter Tractable\\sep Graph Algorithms\\sep Graph Theory\\sep  Graph Decomposition\\sep Bounded-Degree Vertex Deletion\n\n\n\n\n\n\n\\end{keyword}\n\n\\end{frontmatter}\n\n\\section{Introduction}\n\n\\textsc{Vertex Cover}, to find a minimum set of vertices in a graph such that each edge in the graph is incident on at least one vertex in this set, is one of the most fundamental problems in graph algorithms, graph theory, parameterized algorithms, theories of NP-completeness\nand many others.\nNemhauser and Trotter~\\cite{NT-theorem}\nproved a famous theorem (NT-Theorem) for  \\textsc{Vertex Cover}.\n\\thmm{ntthm}{ \\emph{[\\textbf{NT-Theorem}]}\nFor an undirected graph $G=(V,E)$ of $n=|V|$ vertices and $m=|E|$ edges, there is an $O(\\sqrt{n}m)$-time\nalgorithm to compute two disjoint vertex subsets $C$\nand $I$ of $G$ such that for any minimum vertex cover $K'$ of the induced subgraph $G[V \\setminus (C \\cup I)]$, $K' \\cup C$ is\na minimum vertex cover of $G$ and\n\n", "index": 1, "text": "$$|K'|\\geq {\\frac{|V \\setminus (C \\cup I)|}{2}}.$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"|K^{\\prime}|\\geq{\\frac{|V\\setminus(C\\cup I)|}{2}}.\" display=\"block\"><mrow><mrow><mrow><mo stretchy=\"false\">|</mo><msup><mi>K</mi><mo>\u2032</mo></msup><mo stretchy=\"false\">|</mo></mrow><mo>\u2265</mo><mfrac><mrow><mo stretchy=\"false\">|</mo><mrow><mi>V</mi><mo>\u2216</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>C</mi><mo>\u222a</mo><mi>I</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">|</mo></mrow><mn>2</mn></mfrac></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.00164.tex", "nexttext": "\n", "itemtype": "equation", "pos": 4641, "prevtext": "\n\n}\nThis theorem provides a polynomial-time algorithm to reduce the size of the input\ngraph by possibly finding partial solution.\nIt turns out that NT-Theorem has great applications in approximation algorithms~\\cite{BE:WVC,hochbaum,khuller} and parameterized algorithms~\\cite{CKJ:VC,A:crown2}. We can see that $V\\setminus I$ is a 2-approximation solution\nand $G[V \\setminus (C \\cup I)]$ is a $2k$-vertex kernel\nof the problem taking the size of\nthe solution as the parameter $k$. Lokshtanov et al.~\\cite{lp} also apply NT-Theorem to branching algorithms for \\textsc{Vertex Cover} and some other related problems.\nDue to NT-Theorem's practical usefulness and theoretical depth in graph theory, it has attracted numerous\nfurther studies and follow-up work~\\cite{FG:gNT,BRH:extension,CC:WVC,A:crown2}.\nBar-Yehuda, Rawitz and Hermelin~\\cite{BRH:extension} extended NT-Theorem for a generalized vertex cover problem, where edges are allowed not to be covered at a certain\npredetermined penalty. Fellows, Guo, Moser and Niedermeier~\\cite{FG:gNT} extended NT-Theorem for \\textsc{Bounded-Degree Vertex Deletion}.\n\nIn this paper, we are interested in \\textsc{Bounded-Degree Vertex Deletion}.\nA \\emph{$d$-degree deletion set} of a graph $G$ is a subset of vertices, whose deletion\nleaves a graph of maximum degree at most $d$. For each fixed $d$, \\textsc{Bounded-Degree Vertex Deletion} is to find\na $d$-degree deletion set of minimum size in an input graph.\n\\textsc{Bounded-Degree Vertex Deletion} and its ``dual problem'' to find maximum $s$-plexes have applications in computational biology~\\cite{FG:gNT,CF:copath}\nand social network analysis~\\cite{SF:plex,BBH:plex}.\nThere is a substantial amount of theoretical work on this problem~\\cite{khmn,NRT,SF:plex}, specially in parameterized complexity~\\cite{BBNU:treewidth,FG:gNT,CF:copath}.\n\nSince \\textsc{Vertex Cover} is a special case of \\textsc{Bounded-Degree Vertex Deletion},\nwe are interested in finding a local optimization theorem similar to NT-Theorem for \\textsc{Bounded-Degree Vertex Deletion}.\nFellows, Guo, Moser and Niedermeier~\\cite{FG:gNT} made a great progress toward to this interesting problem by giving the following theorem.\n\n\n\\thmm{ntg-thm}{ \\emph{\\cite{FG:gNT}}\nFor an undirected graph $G=(V,E)$ of $n=|V|$ vertices and $m=|E|$ edges, any constant $\\varepsilon > 0$ and any integer $d\\geq0$, there is an $O(n^4m)$-time\nalgorithm to compute two disjoint vertex subsets $C$\nand $I$ of $G$ such that for any minimum $d$-degree deletion set $K'$ of the induced subgraph $G[V \\setminus (C \\cup I)]$, $K' \\cup C$ is\na minimum $d$-degree deletion set of $G$, and\n\n", "index": 3, "text": "\n\\[|K'|\\geq {\\frac{|V \\setminus (C \\cup I)|}{d^3+4d^2+6d+4}}~~~~~~\\mbox{for}~~d\\leq 1, ~~~~~~~\\mbox{and}\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"|K^{\\prime}|\\geq{\\frac{|V\\setminus(C\\cup I)|}{d^{3}+4d^{2}+6d+4}}~{}~{}~{}~{}~%&#10;{}~{}\\mbox{for}~{}~{}d\\leq 1,~{}~{}~{}~{}~{}~{}~{}\\mbox{and}\" display=\"block\"><mrow><mrow><mrow><mo stretchy=\"false\">|</mo><msup><mi>K</mi><mo>\u2032</mo></msup><mo stretchy=\"false\">|</mo></mrow><mo>\u2265</mo><mfrac><mrow><mo stretchy=\"false\">|</mo><mrow><mi>V</mi><mo>\u2216</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>C</mi><mo>\u222a</mo><mi>I</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">|</mo></mrow><mrow><msup><mi>d</mi><mn>3</mn></msup><mo>+</mo><mrow><mn>4</mn><mo>\u2062</mo><msup><mi>d</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>6</mn><mo>\u2062</mo><mi>d</mi></mrow><mo>+</mo><mn>4</mn></mrow></mfrac></mrow><mo mathvariant=\"italic\" separator=\"true\">\u2003\u2002\u2003</mo><mrow><mrow><mpadded width=\"+6.6pt\"><mtext>for</mtext></mpadded><mo>\u2062</mo><mi>d</mi></mrow><mo>\u2264</mo><mrow><mn>1</mn><mo rspace=\"25.6pt\">,</mo><mtext>and</mtext></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00164.tex", "nexttext": "\n\n\n\n\n\n\nwhere $c$ is a function of $d$ and $\\varepsilon$.\n}\n\nIn this theorem, for $d\\geq 2$, the number of remaining vertices in $V \\setminus (C \\cup I)$\nis not bounded by a constant times of the solution size $|K'|$ of $G[V \\setminus (C \\cup I)]$.\nThis is a significant difference between this theorem and the NT-Theorem for \\textsc{Vertex Cover}.\nIn terms of parameterized algorithms, \\reft{ntg-thm} cannot get a linear-vertex kernel for\n\\textsc{Parameterized Bounded-Degree Vertex Deletion} (with parameter $k$ being the solution size) for  each $d\\geq 2$.\nIn fact, in an initial version \\cite{FG:gNTc} of Fellows, Guo, Moser and Niedermeier's paper, a better result was claimed, which can get\na linear-vertex kernel for \\textsc{Parameterized Bounded-Degree Vertex Deletion} for  each $d\\geq 0$.\nUnfortunately, the proof in \\cite{FG:gNTc} is incomplete.\nWe also note that Chen et al.~\\cite{CF:copath} proved a $37k$-vertex kernel for \\textsc{Bounded-Degree Vertex Deletion} for $d=2$.\nHowever, whether \\textsc{Bounded-Degree Vertex Deletion} for each $d\\geq 3$ allows a linear-vertex kernel is not known.\nIn this paper, based on Fellows, Guo, Moser and Niedermeier's work \\cite{FG:gNTc},\nwe close the above gap by proving the following theorem for \\textsc{Bounded-Degree Vertex Deletion}.\n\n\\thmm{our-thm}{\\emph{\\textbf{[Our result]}}\nFor an undirected graph $G=(V,E)$ of $n=|V|$ vertices and $m=|E|$ edges and any integer $d\\geq 0$, there is an $O(n^{5/2}m)$-time\nalgorithm to compute two disjoint vertex subsets $C$\nand $I$ of $G$ such that for any minimum $d$-degree deletion set $K'$ of the induced subgraph $G[V \\setminus (C \\cup I)]$, $K' \\cup C$ is\na minimum $d$-degree deletion set of $G$ and\n\n", "itemtype": "equation", "pos": 4747, "prevtext": "\n", "index": 5, "text": "\n\\[|K'|^{1+\\varepsilon}\\geq {\\frac{|V \\setminus (C \\cup I)|}{c}}~~~~~~~\\mbox{for}~~d\\geq 2, ~~~~~~~~~~~~\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"|K^{\\prime}|^{1+\\varepsilon}\\geq{\\frac{|V\\setminus(C\\cup I)|}{c}}~{}~{}~{}~{}~%&#10;{}~{}~{}\\mbox{for}~{}~{}d\\geq 2,~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}\" display=\"block\"><mrow><mrow><mrow><msup><mrow><mo stretchy=\"false\">|</mo><msup><mi>K</mi><mo>\u2032</mo></msup><mo stretchy=\"false\">|</mo></mrow><mrow><mn>1</mn><mo>+</mo><mi>\u03b5</mi></mrow></msup><mo>\u2265</mo><mfrac><mrow><mo stretchy=\"false\">|</mo><mrow><mi>V</mi><mo>\u2216</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>C</mi><mo>\u222a</mo><mi>I</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">|</mo></mrow><mi>c</mi></mfrac></mrow><mo mathvariant=\"italic\" separator=\"true\">\u2003\u2003\u2005</mo><mrow><mrow><mpadded width=\"+6.6pt\"><mtext>for</mtext></mpadded><mo>\u2062</mo><mi>d</mi></mrow><mo>\u2265</mo><mn>2</mn></mrow></mrow><mo rspace=\"42.1pt\">,</mo></mrow></math>", "type": "latex"}, {"file": "1601.00164.tex", "nexttext": "\n}\n\nFrom this version of the generalized Nemhauser and Trotter's theorem, we can get a\n$(d^3+4d^2+5d+3)k$-vertex kernel for\n\\textsc{Bounded-Degree Vertex Deletion} parameterized by the size $k$ of the solution,\nwhich is linear in $k$ for any constant $d\\geq 0$. There is no difference between the cases that $d\\leq 1$ and $d\\geq 2$ anymore.\n\n\n\n\nFor the special case that $d=0$, our theorem specializes a $3k$-vertex kernel for \\textsc{Vertex Cover}, while\n\\reft{ntg-thm} provides a $4k$-vertex kernel and NT-Theorem provides a $2k$-vertex kernel.\nFor the special case that $d=1$, our theorem provides a $13k$-vertex kernel and \\reft{ntg-thm} provides a $15k$-vertex kernel.\nFor the special case that $d=2$, our theorem obtains a $37k$-vertex kernel, the same result obtained by Chen et al.~\\cite{CF:copath}.\n\nRecently, Dell and van Melkebeek~\\cite{dell} showed that unless the polynomial-time hierarchy collapses,\n\\textsc{Parameterized Bounded-Degree Vertex Deletion}\n\ndoes not have kernels consisting of $O(k^{2-\\epsilon})$ edges for any constant $\\epsilon>0$, which implies that linear size would be the best possible bound on the number of vertices in any kernel for this problem. It has also been proved by\nFellows, Guo, Moser and Niedermeier~\\cite{FG:gNT} that when $d$ is not bounded, \\textsc{Parameterized Bounded-Degree Vertex Deletion} is W[2]-hard. Then unless FPT=W[2], it is impossible to remove $d$ from the size function of any kernel of this problem. These two hardness results also imply  that our result is `tight' in some sense.\n\nThe framework of our algorithm follows that of Fellows, Guo, Moser and Niedermeier's algorithm~\\cite{FG:gNT}.\nBut we still need some new and nontrivial ideas to get our result.\nFor the purpose of presentation, we will define a decomposition, called `$d$-bounded decomposition' to\nprove \\reft{our-thm} and construct our algorithms. This decomposition can be regarded as an extension of the crown decomposition for \\textsc{Vertex Cover}~\\cite{A:crown,cfj:crown}, but more sophisticated.\nTo compute $C$ and $I$ in \\reft{our-thm}, we will change to compute a proper $d$-bounded decomposition.\nSome similar ideas in construction of crown decompositions as in Fellows, Guo, Moser and Niedermeier's algorithm for \\reft{ntg-thm}~\\cite{FG:gNT} are used to construct our decomposition. The detailed differences between our and previous algorithms will be addressed in Section~\\ref{sec_alg}.\nBefore introducing the decompositions,\n we first give the notation system in this paper.\n\n\\section{Notation system}\nLet $G=(V,E)$ stand for a simple undirected graph with a set $V$ of $n=|V|$ vertices and a set $E$ of $m=|E|$ edges.\n\nFor simplicity,  we may denote a singleton set $\\{v\\}$   by $v$.\nFor a vertex subset $V'$, a vertex in $V'$ is denoted by \\emph{$V'$-vertex}. The graph induced by $V'$ is denoted by $G[V']$. We also use $N(V')$ to denote the set of vertices in $V\\setminus V'$ adjacent to some vertices in $V'$ and let $N[V']=N(V')\\cup V'$.\nThe vertex set and edge set of a graph $G'$ are denoted by $V(G')$ and $E(G')$, respectively.\nA bipartite graph with two parts of vertices $A$ and $B$ and edge set $E_H$ is denoted by $H=(A, B, E_H)$.\n\nFor  an integer $d'\\geq 1$, a star with $d'+1$ vertices is called a  {\\em $d'$-star}.\nFor $d'>1$, the unique vertex of degree $>1$ in a $d'$-star is called the \\emph{center}\nof the star and all other degree-1 vertices are called the \\emph{leaves} of the star.\nFor a 1-star, any vertex can be regarded as a \\emph{center} and the other vertex as a \\emph{leaf}.\nA star with a center $v$ is also called a star \\emph{centered at} $v$.\nFor two disjoint vertex sets $V_1$ and $V_2$, a set of stars is \\emph{from $V_1$ to $V_2$} if\nthe centers of the stars are in $V_1$ and leaves are in $V_2$.\nA \\emph{$_\\leq d'$-star} is a star with at most $d'$ leaves.\nA \\emph{$d'$-star packing} (resp., \\emph{$_\\leq d'$-star packing}) is\na set of vertex-disjoint $d'$-stars (resp., $_\\leq d'$-stars).\n\nFor each $d\\geq 0$, a \\emph{$d$-degree deletion set} of a graph is a subset of vertices the deletion of which makes\nthe maximum degree of the remaining graph at most $d$.\nWe use $\\alpha(G)$ to denote the size of a minimum $d$-degree deletion set of a graph $G$.\n\nNext, we introduce the decomposition techniques in Section~\\ref{sec_dec} and then describe and analyze our\nalgorithms in Section~\\ref{sec_alg}.\n\n\\section{The decomposition\ntechniques}\\label{sec_dec}\nCrown decomposition is a powerful tool to obtain kernels for \\textsc{Vertex Cover}.\nThis technique was firstly introduced in~\\cite{A:crown} and~\\cite{cfj:crown} and found to be very useful\nin designing kernelization algorithms for \\textsc{Vertex Cover} and related problems~\\cite{A:crown2,CC:WVC,X:vc3}.\n\n\n\n\\dfn{crown}{\\emph{[\\textbf{Crown Decomposition}]} A crown decomposition of a graph $G$ is\na partition of the vertex set of $G$ into three sets $I$, $C$ and\n$J$ such that\\\\\n(1) $I$  is an independent set, \\\\\n(2) there are no edges between $I$ and $J$, and \\\\\n(3) there is a matching $M$ on the edges between $I$ and $C$ such that all vertices in $C$ are matched.\n}\nSee Figure~\\ref{fig1}(a) for an illustration for crown decompositions. In some references, $I\\neq \\emptyset$ is also required in the definition of crown decompositions. Here we allow $I=\\emptyset$ for the\npurpose of presentation.\nIt is known that\n\\llem{crown_local}{\\emph{\\cite{A:crown}} Let $(I,C,J)$ be a crown decomposition of $G$. Then $(I,C)$ satisfies the local optimality condition in \\reft{ntthm}, i.e.,\n$K' \\cup C$ is a minimum vertex cover of $G$ for any minimum vertex cover $K'$ of the induced subgraph $G[V \\setminus (I \\cup C)]$.\n}\nBy this lemma, we can reduce the instance of \\textsc{Vertex Cover} by removing $I\\cup C$ of a  crown decomposition. There are some methods that find certain crown decompositions of a graph and result in a linear-vertex\nkernel for \\textsc{Vertex Cover}~\\cite{A:crown2}.\n\n\\begin{figure}[h]\n\\begin{center}\n\\includegraphics[width=0.9\\textwidth]{decompositions.eps}\n\\end{center}\n\\caption{Decompositions}\\label{fig1}\n\\end{figure}\n\n\n\nIn this paper, we will use \\emph{$d$-bounded decomposition}, which extends the definition of crown decompositions and \\refl{crown_local}.\nLet $A$ and $B$ be two disjoint vertex subsets of a graph $G$. A \\emph{full $d'$-star packing from $A$ to $B$} is a set of $|A|$ vertex-disjoint $d'$-stars\nwith centers in $A$ and leaves in $B$. The third item in \\refd{crown} means that there is a full $1$-star packing from $C$ to $I$. We define the following decomposition.\n\n\\dfn{general_dc}{\\emph{[\\textbf{$d$-Bounded Decomposition}]} A $d$-bounded decomposition of a graph $G=(V,E)$ is\na partition of the vertex set of $G$ into four sets $I$, $C$, $T$ and\n$J$ such that\\\\\n\n(1) any vertex in $I\\cup T$ is of degree $\\leq d$ in the induced subgraph $G[V\\setminus C]$, \\\\\n(2) there are no edges between $I$ and $J$, and \\\\\n(3) there is a full $(d+1)$-star packing from $C$ to $I$.\n}\n\nAn illustration for $d$-bounded decompositions is given in Figure~\\ref{fig1}(b).\nWe have the following \\refl{dc_local} for $d$-bounded decompositions.\nThis lemma can be derived from the lemmas in \\cite{FG:gNT}, although $d$-bounded decomposition is not formally defined\nin \\cite{FG:gNT}.\n\n\\llem{dc_local}{Let $(I,C,T,J)$ be a $d$-bounded decomposition of $G$. Then $(I,C)$ satisfies the local optimality condition in \\reft{our-thm}, i.e.,\n$K' \\cup C$ is a minimum $d$-degree deletion set of $G$ for any minimum $d$-degree deletion set $K'$ of the induced subgraph $G[V \\setminus (I \\cup C)]$.\n}\n\\pff{ First, we show that $K' \\cup C$ is a $d$-degree deletion set of $G$.\nIf there is vertex $v_0$ of degree $\\geq d+1$ in $G[V \\setminus (K' \\cup C)]$, then $v_0$ should be a $J$-vertex, since\nany vertex in $I\\cup T$ is of degree $\\leq d$ after removing $C$ by the definition of the decomposition.\nNote that no $J$-vertex is adjacent to an $I$-vertex.\nThen $v_0$ would also be a vertex of degree $\\geq d+1$ in $G[V \\setminus (K' \\cup C\\cup I)]$,\nwhich implies a contradiction that $K'$ is not a $d$-degree deletion set of $G[V \\setminus (I \\cup C)]$.\nSo no vertex of degree $\\geq d+1$ exists in $G[V \\setminus (K' \\cup C)]$.\n\nNext, we prove the minimality.\nLet $D$ be an arbitrary minimum $d$-degree deletion set of $G$.\nLet $D_1=D\\cap (I\\cup C)$ and $D_2=D\\cap (T\\cup J)$.\nSince there is a full $(d+1)$-star packing from $C$ to $I$, we know that any $d$-degree deletion set contains\nat least $|C|$ vertices in the $(d+1)$-star packing. So we have that\n\n", "itemtype": "equation", "pos": 6555, "prevtext": "\n\n\n\n\n\n\nwhere $c$ is a function of $d$ and $\\varepsilon$.\n}\n\nIn this theorem, for $d\\geq 2$, the number of remaining vertices in $V \\setminus (C \\cup I)$\nis not bounded by a constant times of the solution size $|K'|$ of $G[V \\setminus (C \\cup I)]$.\nThis is a significant difference between this theorem and the NT-Theorem for \\textsc{Vertex Cover}.\nIn terms of parameterized algorithms, \\reft{ntg-thm} cannot get a linear-vertex kernel for\n\\textsc{Parameterized Bounded-Degree Vertex Deletion} (with parameter $k$ being the solution size) for  each $d\\geq 2$.\nIn fact, in an initial version \\cite{FG:gNTc} of Fellows, Guo, Moser and Niedermeier's paper, a better result was claimed, which can get\na linear-vertex kernel for \\textsc{Parameterized Bounded-Degree Vertex Deletion} for  each $d\\geq 0$.\nUnfortunately, the proof in \\cite{FG:gNTc} is incomplete.\nWe also note that Chen et al.~\\cite{CF:copath} proved a $37k$-vertex kernel for \\textsc{Bounded-Degree Vertex Deletion} for $d=2$.\nHowever, whether \\textsc{Bounded-Degree Vertex Deletion} for each $d\\geq 3$ allows a linear-vertex kernel is not known.\nIn this paper, based on Fellows, Guo, Moser and Niedermeier's work \\cite{FG:gNTc},\nwe close the above gap by proving the following theorem for \\textsc{Bounded-Degree Vertex Deletion}.\n\n\\thmm{our-thm}{\\emph{\\textbf{[Our result]}}\nFor an undirected graph $G=(V,E)$ of $n=|V|$ vertices and $m=|E|$ edges and any integer $d\\geq 0$, there is an $O(n^{5/2}m)$-time\nalgorithm to compute two disjoint vertex subsets $C$\nand $I$ of $G$ such that for any minimum $d$-degree deletion set $K'$ of the induced subgraph $G[V \\setminus (C \\cup I)]$, $K' \\cup C$ is\na minimum $d$-degree deletion set of $G$ and\n\n", "index": 7, "text": "\n\\[|K'|\\geq {\\frac{|V \\setminus (C \\cup I)|}{d^3+4d^2+5d+3}}.\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex4.m1\" class=\"ltx_Math\" alttext=\"|K^{\\prime}|\\geq{\\frac{|V\\setminus(C\\cup I)|}{d^{3}+4d^{2}+5d+3}}.\" display=\"block\"><mrow><mrow><mrow><mo stretchy=\"false\">|</mo><msup><mi>K</mi><mo>\u2032</mo></msup><mo stretchy=\"false\">|</mo></mrow><mo>\u2265</mo><mfrac><mrow><mo stretchy=\"false\">|</mo><mrow><mi>V</mi><mo>\u2216</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>C</mi><mo>\u222a</mo><mi>I</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">|</mo></mrow><mrow><msup><mi>d</mi><mn>3</mn></msup><mo>+</mo><mrow><mn>4</mn><mo>\u2062</mo><msup><mi>d</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>5</mn><mo>\u2062</mo><mi>d</mi></mrow><mo>+</mo><mn>3</mn></mrow></mfrac></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.00164.tex", "nexttext": "\nSet $D_2$ is a $d$-degree deletion set of $G[V\\setminus D_1]$ and\nset $K'$ is a minimum $d$-degree deletion set of $G[V \\setminus (I \\cup C)]$.\nNote that $D_1 \\subseteq I\\cup C$ and then $G[V \\setminus (I \\cup C)]$ is an induced subgraph of $G[V\\setminus D_1]$.\nSo it holds that\n\n", "itemtype": "equation", "pos": 15118, "prevtext": "\n}\n\nFrom this version of the generalized Nemhauser and Trotter's theorem, we can get a\n$(d^3+4d^2+5d+3)k$-vertex kernel for\n\\textsc{Bounded-Degree Vertex Deletion} parameterized by the size $k$ of the solution,\nwhich is linear in $k$ for any constant $d\\geq 0$. There is no difference between the cases that $d\\leq 1$ and $d\\geq 2$ anymore.\n\n\n\n\nFor the special case that $d=0$, our theorem specializes a $3k$-vertex kernel for \\textsc{Vertex Cover}, while\n\\reft{ntg-thm} provides a $4k$-vertex kernel and NT-Theorem provides a $2k$-vertex kernel.\nFor the special case that $d=1$, our theorem provides a $13k$-vertex kernel and \\reft{ntg-thm} provides a $15k$-vertex kernel.\nFor the special case that $d=2$, our theorem obtains a $37k$-vertex kernel, the same result obtained by Chen et al.~\\cite{CF:copath}.\n\nRecently, Dell and van Melkebeek~\\cite{dell} showed that unless the polynomial-time hierarchy collapses,\n\\textsc{Parameterized Bounded-Degree Vertex Deletion}\n\ndoes not have kernels consisting of $O(k^{2-\\epsilon})$ edges for any constant $\\epsilon>0$, which implies that linear size would be the best possible bound on the number of vertices in any kernel for this problem. It has also been proved by\nFellows, Guo, Moser and Niedermeier~\\cite{FG:gNT} that when $d$ is not bounded, \\textsc{Parameterized Bounded-Degree Vertex Deletion} is W[2]-hard. Then unless FPT=W[2], it is impossible to remove $d$ from the size function of any kernel of this problem. These two hardness results also imply  that our result is `tight' in some sense.\n\nThe framework of our algorithm follows that of Fellows, Guo, Moser and Niedermeier's algorithm~\\cite{FG:gNT}.\nBut we still need some new and nontrivial ideas to get our result.\nFor the purpose of presentation, we will define a decomposition, called `$d$-bounded decomposition' to\nprove \\reft{our-thm} and construct our algorithms. This decomposition can be regarded as an extension of the crown decomposition for \\textsc{Vertex Cover}~\\cite{A:crown,cfj:crown}, but more sophisticated.\nTo compute $C$ and $I$ in \\reft{our-thm}, we will change to compute a proper $d$-bounded decomposition.\nSome similar ideas in construction of crown decompositions as in Fellows, Guo, Moser and Niedermeier's algorithm for \\reft{ntg-thm}~\\cite{FG:gNT} are used to construct our decomposition. The detailed differences between our and previous algorithms will be addressed in Section~\\ref{sec_alg}.\nBefore introducing the decompositions,\n we first give the notation system in this paper.\n\n\\section{Notation system}\nLet $G=(V,E)$ stand for a simple undirected graph with a set $V$ of $n=|V|$ vertices and a set $E$ of $m=|E|$ edges.\n\nFor simplicity,  we may denote a singleton set $\\{v\\}$   by $v$.\nFor a vertex subset $V'$, a vertex in $V'$ is denoted by \\emph{$V'$-vertex}. The graph induced by $V'$ is denoted by $G[V']$. We also use $N(V')$ to denote the set of vertices in $V\\setminus V'$ adjacent to some vertices in $V'$ and let $N[V']=N(V')\\cup V'$.\nThe vertex set and edge set of a graph $G'$ are denoted by $V(G')$ and $E(G')$, respectively.\nA bipartite graph with two parts of vertices $A$ and $B$ and edge set $E_H$ is denoted by $H=(A, B, E_H)$.\n\nFor  an integer $d'\\geq 1$, a star with $d'+1$ vertices is called a  {\\em $d'$-star}.\nFor $d'>1$, the unique vertex of degree $>1$ in a $d'$-star is called the \\emph{center}\nof the star and all other degree-1 vertices are called the \\emph{leaves} of the star.\nFor a 1-star, any vertex can be regarded as a \\emph{center} and the other vertex as a \\emph{leaf}.\nA star with a center $v$ is also called a star \\emph{centered at} $v$.\nFor two disjoint vertex sets $V_1$ and $V_2$, a set of stars is \\emph{from $V_1$ to $V_2$} if\nthe centers of the stars are in $V_1$ and leaves are in $V_2$.\nA \\emph{$_\\leq d'$-star} is a star with at most $d'$ leaves.\nA \\emph{$d'$-star packing} (resp., \\emph{$_\\leq d'$-star packing}) is\na set of vertex-disjoint $d'$-stars (resp., $_\\leq d'$-stars).\n\nFor each $d\\geq 0$, a \\emph{$d$-degree deletion set} of a graph is a subset of vertices the deletion of which makes\nthe maximum degree of the remaining graph at most $d$.\nWe use $\\alpha(G)$ to denote the size of a minimum $d$-degree deletion set of a graph $G$.\n\nNext, we introduce the decomposition techniques in Section~\\ref{sec_dec} and then describe and analyze our\nalgorithms in Section~\\ref{sec_alg}.\n\n\\section{The decomposition\ntechniques}\\label{sec_dec}\nCrown decomposition is a powerful tool to obtain kernels for \\textsc{Vertex Cover}.\nThis technique was firstly introduced in~\\cite{A:crown} and~\\cite{cfj:crown} and found to be very useful\nin designing kernelization algorithms for \\textsc{Vertex Cover} and related problems~\\cite{A:crown2,CC:WVC,X:vc3}.\n\n\n\n\\dfn{crown}{\\emph{[\\textbf{Crown Decomposition}]} A crown decomposition of a graph $G$ is\na partition of the vertex set of $G$ into three sets $I$, $C$ and\n$J$ such that\\\\\n(1) $I$  is an independent set, \\\\\n(2) there are no edges between $I$ and $J$, and \\\\\n(3) there is a matching $M$ on the edges between $I$ and $C$ such that all vertices in $C$ are matched.\n}\nSee Figure~\\ref{fig1}(a) for an illustration for crown decompositions. In some references, $I\\neq \\emptyset$ is also required in the definition of crown decompositions. Here we allow $I=\\emptyset$ for the\npurpose of presentation.\nIt is known that\n\\llem{crown_local}{\\emph{\\cite{A:crown}} Let $(I,C,J)$ be a crown decomposition of $G$. Then $(I,C)$ satisfies the local optimality condition in \\reft{ntthm}, i.e.,\n$K' \\cup C$ is a minimum vertex cover of $G$ for any minimum vertex cover $K'$ of the induced subgraph $G[V \\setminus (I \\cup C)]$.\n}\nBy this lemma, we can reduce the instance of \\textsc{Vertex Cover} by removing $I\\cup C$ of a  crown decomposition. There are some methods that find certain crown decompositions of a graph and result in a linear-vertex\nkernel for \\textsc{Vertex Cover}~\\cite{A:crown2}.\n\n\\begin{figure}[h]\n\\begin{center}\n\\includegraphics[width=0.9\\textwidth]{decompositions.eps}\n\\end{center}\n\\caption{Decompositions}\\label{fig1}\n\\end{figure}\n\n\n\nIn this paper, we will use \\emph{$d$-bounded decomposition}, which extends the definition of crown decompositions and \\refl{crown_local}.\nLet $A$ and $B$ be two disjoint vertex subsets of a graph $G$. A \\emph{full $d'$-star packing from $A$ to $B$} is a set of $|A|$ vertex-disjoint $d'$-stars\nwith centers in $A$ and leaves in $B$. The third item in \\refd{crown} means that there is a full $1$-star packing from $C$ to $I$. We define the following decomposition.\n\n\\dfn{general_dc}{\\emph{[\\textbf{$d$-Bounded Decomposition}]} A $d$-bounded decomposition of a graph $G=(V,E)$ is\na partition of the vertex set of $G$ into four sets $I$, $C$, $T$ and\n$J$ such that\\\\\n\n(1) any vertex in $I\\cup T$ is of degree $\\leq d$ in the induced subgraph $G[V\\setminus C]$, \\\\\n(2) there are no edges between $I$ and $J$, and \\\\\n(3) there is a full $(d+1)$-star packing from $C$ to $I$.\n}\n\nAn illustration for $d$-bounded decompositions is given in Figure~\\ref{fig1}(b).\nWe have the following \\refl{dc_local} for $d$-bounded decompositions.\nThis lemma can be derived from the lemmas in \\cite{FG:gNT}, although $d$-bounded decomposition is not formally defined\nin \\cite{FG:gNT}.\n\n\\llem{dc_local}{Let $(I,C,T,J)$ be a $d$-bounded decomposition of $G$. Then $(I,C)$ satisfies the local optimality condition in \\reft{our-thm}, i.e.,\n$K' \\cup C$ is a minimum $d$-degree deletion set of $G$ for any minimum $d$-degree deletion set $K'$ of the induced subgraph $G[V \\setminus (I \\cup C)]$.\n}\n\\pff{ First, we show that $K' \\cup C$ is a $d$-degree deletion set of $G$.\nIf there is vertex $v_0$ of degree $\\geq d+1$ in $G[V \\setminus (K' \\cup C)]$, then $v_0$ should be a $J$-vertex, since\nany vertex in $I\\cup T$ is of degree $\\leq d$ after removing $C$ by the definition of the decomposition.\nNote that no $J$-vertex is adjacent to an $I$-vertex.\nThen $v_0$ would also be a vertex of degree $\\geq d+1$ in $G[V \\setminus (K' \\cup C\\cup I)]$,\nwhich implies a contradiction that $K'$ is not a $d$-degree deletion set of $G[V \\setminus (I \\cup C)]$.\nSo no vertex of degree $\\geq d+1$ exists in $G[V \\setminus (K' \\cup C)]$.\n\nNext, we prove the minimality.\nLet $D$ be an arbitrary minimum $d$-degree deletion set of $G$.\nLet $D_1=D\\cap (I\\cup C)$ and $D_2=D\\cap (T\\cup J)$.\nSince there is a full $(d+1)$-star packing from $C$ to $I$, we know that any $d$-degree deletion set contains\nat least $|C|$ vertices in the $(d+1)$-star packing. So we have that\n\n", "index": 9, "text": "$$|D_1|\\geq |C|.$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m1\" class=\"ltx_Math\" alttext=\"|D_{1}|\\geq|C|.\" display=\"block\"><mrow><mrow><mrow><mo stretchy=\"false\">|</mo><msub><mi>D</mi><mn>1</mn></msub><mo stretchy=\"false\">|</mo></mrow><mo>\u2265</mo><mrow><mo stretchy=\"false\">|</mo><mi>C</mi><mo stretchy=\"false\">|</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.00164.tex", "nexttext": "\nTherefore,  $|K' \\cup C|=|K'|+|C|\\leq |D_1|+|D_2|=|D|$.\n}\n\n\nBy \\refl{dc_local}, we can reduce an instance by removing $I\\cup C$ if the graph has a $d$-bounded decomposition $(I,C,T,J)$.\nThis is the main idea how we get \\reft{our-thm} and kernels for our problem.\nHere arises a problem how to find a $d$-bounded decomposition $(I,C,T,J)$ of a graph such that $I\\neq \\emptyset$ if it exists.\nFirst, we give a simple observation.\n\\begin{observation}{\\label{simple_dc}\nLet $R$ be a set of vertices $v$ such that any vertex in $N[v]$ is of degree $\\leq d$.\nThen $(I=R, C=\\emptyset, T=N(R), J=V\\setminus(I\\cup T))$ is a $d$-bounded decomposition of $G$.}\n\\end{observation}\n\nBy \\refl{dc_local} and Observation~\\ref{simple_dc}, we can reduce an instance by removing from the graph the set $B$ of vertices $v$ such that any vertex in $N[v]$ is of degree $\\leq d$.\nFor more general cases, in this paper we will show that\n\\thmm{normal_dc}{ For a given graph $G=(V,E)$ and an integer $d\\geq 0$,\nthere is a special $d$-degree deletion set $X$ of $G$ with $|X| \\leq (d+2)\\alpha(G)$ such that if $|V\\setminus X| >{\\frac{(d+1)(d^2+3d+1)}{d+2}}|X|$,\nthen $G$ admits a $d$-bounded decomposition $(I,C,T,J)$ with $I\\neq \\emptyset$. The special $d$-degree deletion set $X$ and\n$d$-bounded decomposition $(I,C,T,J)$ can be found in $O(n^{3/2}m)$ time.}\n\nIn the next section, we construct an algorithm to prove this theorem.\n\n\n\n\n\n\n\n\n\\section{Algorithms}\\label{sec_alg}\n\nWe first introduce an algorithm to find $d$-bounded decompositions of graphs, based on which we can easily get an algorithm for\nthe generalization of NT-theorem in \\reft{our-thm}.\n\n\\subsection{The algorithm for decompositions}\nFirst of all, we give the main idea of our algorithm to find a $d$-bounded decomposition $(I,C,T,J)$ of a graph $G=(V,E)$. It contains three major phases.\n\\\\\nPhase 1: find a partition $(X,Y)$ of the vertex set $V$ such that the maximum degree in $G[Y]$ is at most $d$.\\\\\nPhase 2: find two subsets $C'\\subseteq X$ and $I'\\subseteq Y$ satisfying \\emph{Basic Condition}: there is a full $(d+1)$-star packing from $C'$ to $I'$ and\nthere is no edge between $I'$ and $X\\setminus C'$.\\\\\nPhase 3: iteratively move some vertices out of $I'$ and some vertices out of $C'$ to make $(I',C',T'=N(I')\\setminus C',J'=V\\setminus(I'\\cup C'\\cup T'))$\n a $d$-bounded decomposition.\n\nIn fact, the first two phases of our algorithm are almost the same as that of Fellows, Guo, Moser and Niedermeier's algorithm~\\cite{FG:gNT}.\nHowever, in Phase 3, our algorithm uses a different method to compute $I'$ and $C'$. This is critical for us to get an improvement.\n\n\\medskip\n\\noindent\n\\textbf{Phase 1.}\nFor Phase 1, we can find a maximal $(d+1)$-star packing $S$ and let $X=V(S)$. By the maximality of $S$, we know that $X$ is a $d$-degree deletion set and $G[Y]$ has no vertex of degree $>d$.\nThen the partition $(X,Y)$ satisfies the condition in Phase 1. In order to obtain a good performance, our algorithm may not use an arbitrary\nmaximal $(d+1)$-star packing $S$.\nWhen we obtain a new $(d+1)$-star packing $S'$ such that $|S'|> |S|$ in our algorithm, we will update  $X$ by letting $X=V(S')$.\n\n\n\n\n\\medskip\n\\noindent\n\\textbf{Phase 2.} After obtaining $(X,Y)$ in Phase 1, our algorithm finds two special sets $C'\\subseteq X$ and $I'\\subseteq Y$ in Phase 2.\nTo find $C'$ and $I'$ satisfying Basic Condition, we need to find a special $_{\\leq} (d+1)$-star packing from $X$ to $Y$,\nwhich can be computed by the algorithms for finding maximum matchings in bipartite graphs. Note that the idea of computing $_{\\leq} (d+1)$-stars from $X$ and $Y$ has been used to solve some other problems in references~\\cite{fvs,fomin,cygan}.\n\nWe consider the bipartite graph $H=(X,Y,E_H)$ with edge set $E_H$ being the set of edges between $X$ and $Y$ in $G$, and are going to find a $_{\\leq} (d+1)$-star  packing from $X$ to $Y$ in $H$.\nNote that a $Y$-vertex no adjacent to any vertex in $X$ will become a degree-0 vertex in $H$.\n\nWe construct an auxiliary bipartite graph $H'=(X_1\\cup X_2\\cup \\dots X_{d+1},Y,E'_H)$,\nwhere each $X_i$ $(i=1,2,\\dots, d+1)$ is a copy of $X$ and a vertex  $v_i\\in X_i$ is adjacent\nto a vertex $u\\in Y$ if and only if the corresponding vertex $v\\in X$ is adjacent to $u$ in $H$. For a vertex $v\\in X$, we may use $v_i$ to denote its corresponding vertex in $X_i$.\n\n\nWe find a maximum matching $M'$ in $H'$ by using an $O(n^{1/2}m)$-time algorithm~\\cite{ET:bm,hk:bm}.\n\n\nLet $M$ be the set of edges in $H$ corresponding to the matching $M'$, i.e., an edge $uv$ ($u\\in Y$ and $v\\in X$) of $H$ is in $M$ if and only if $uv_i$ is in $M'$ for some $v_i$ corresponding to $v$. Edges in $M$ are called \\emph{marked} and others are called \\emph{unmarked}.\nSince $M'$ is a matching in $H'$, we have that $|M|=|M'|$.\nThe set of marked edges in $H$ forms a $_{\\leq} (d+1)$-star packing $S_{\\leq d+1}$. This is the $_{\\leq} (d+1)$-star packing we are seeking for.\nIt is also easy to observe that\n\n\\llem{mm}{Graph $H$ has a $_{\\leq} (d+1)$-star packing  containing $t$ edges if and only if $H'$ has a matching of size $t$.}\n\n\nNext, we analyze some properties of $S_{\\leq d+1}$ and find $C'$ and $I'$ satisfying Basic Condition based on these properties.\n\n\n\n\n\nLet $S_{d+1}$ denote the set of $(d+1)$-stars in $S_{\\leq d+1}$.\n\nAn $X$-vertex in a star in $S_{d+1}$ is \\emph{fully tagged}. Then $X\\cap V(S_{d+1})$ is the set of fully tagged vertices.\n\nA $Y$-vertex is \\emph{untagged} if it is adjacent to at least one vertex in $X$ in $H$ but not contained in any star in  $S_{\\leq d+1}$.\nA path $P$ in $H$ \nthat alternates between edges not in $M$ and edges in $M$ is called an \\emph{$M$-alternating path}. Please\nsee Figure~\\ref{fig2} for an illustration of these definitions.\n\n\\begin{figure}[h]\n\\begin{center}\n\\includegraphics[width=0.4\\textwidth]{f2.eps}\n\\end{center}\n\\caption{An illustration for $I'$ and $C'$, where thick edges are marked edges, $v_1$ and $v_2$\nare fully tagged vertices, $u_1$ and $u_5$ are untagged vertices, and $u_1v_1u_4v_2u_6$ is an $M$-alternating\npath}\\label{fig2}\n\\end{figure}\n\n\n\n\n\\llem{111}{If there is an $M$-alternating path $P$ from an untagged vertex $u\\in Y$ to a vertex $v\\in X$ in $H$,\nthen $v$ is fully tagged.\n}\n\\pff{ Note that the edge incident on $u$ in $P$, which can be regarded as the first edge in $P$, is unmarked, and $P$ contains odd number of edges since\n$u\\in Y$ and $v\\in X$.\nAccording to the definition of $M$-alternating paths, we know that $P$ contains more unmarked edges than marked edges.\nReplacing $M\\cap E(P)$ by $E(P)\\setminus M$ in $M$ produces $M_0$.\nIf $v$ is not fully tagged, then $M_0$ still can form a $_{\\leq} (d+1)$-star packing in $H$. By \\refl{mm}, there will be a matching of size $|M_0|>|M'|$ in $H'$, contradicting to the maximality of $M'$. So $v$ is fully tagged.\n}\n\\medskip\nNext, we are going to set $C'$ and $I'$.\nIf there is no untagged vertex, let $C'=\\emptyset$. Otherwise let $C'$ be the set of $X$-vertices connected with at least one untagged vertex by an $M$-alternating path in $H$. Let $X'=X\\setminus C'$.\nLet $Y'$ be the set of $Y$-vertices that is a leaf of a  $_{\\leq} (d+1)$-star in  $S_{\\leq d+1}$ that is centered at a vertex in $X'$, and $I'=Y\\setminus Y'$.\n\n\n\\llem{112}{The two sets $C'$ and $I'$ obtained above satisfy Basic Condition.}\n\\pff{\nBy the definition of $C'$ and \\refl{111}, we know that all vertices in $C'$ are fully tagged. Any leaf of a star centered at a vertex in $C'$ will\nnot be in $Y'$ since each vertex in $Y$ is in at most one star in $S_{\\leq d+1}$.\nThen we know that the set of stars in $S_{\\leq d+1}$ centered at vertices in $C'$ is a full $(d+1)$-star packing from $C'$ to $I'$.\n\nNext, we show that there is no edge between $I'$ and $X'=X\\setminus C'$. Assume to the contrary that there is an edge $uv$ between $I'$ and $X'$,\nwhere $u \\in I'$ and $v \\in X'$. The vertex $u$ cannot be an untagged vertex, otherwise if $v$ is fully tagged then $v$ would be included to $C'$ by\nthe definition of $C'$, and\n\nif $v$ is not fully tagged then $uv$ could be added to $M$ to obtain a matching of larger size.\nSo $u$ is a leaf of a $(d+1)$-star in $S_{\\leq d+1}$ centered at a vertex $v_0\\in C'$ and $v_0u$ is an $M$-edge in $H$. We can find an $M$-alternating path $P$ from an untagged vertex $u_0$ to $u$ in $H$. There is an $M$-alternating path $P'$ from an untagged vertex $u_0$ to $v_0$ according to the definition of $C'$. If $P'$ passes $u$ then let $P$ be the subpath of $P'$ from $u_0$ to $u$. Otherwise we let $P$ be the path adding $v_0u$ to the end of $P'$.\nThen $P$ is an $M$-alternating path from an untagged vertex $u_0$ to $u$.\nLet $P^*$ be the path adding $uv$ to the end of $P$. We can see that $P^*$ is still an $M$-alternating path,\nwhich is from an untagged vertex $u_0$ to a $J'$-vertex $v$. However, according to the definition of $C'$, $v$ should be included to $C'$.\nFor any case, there is a contradiction.\n\nSo $C'$ and $I'$ satisfy Basic Condition.\n}\n\n\\medskip\n\nWe describe the above progress to compute $C'$ and $I'$ as an algorithm ${\\tt basic}(G,X,Y)$ in Figure~\\ref{phase2}, which will be used as a subalgorithm in our main algorithm.\nStep~1 of ${\\tt basic}(G,X,Y)$ takes linear time and $H'$ has $O(n)$ vertices and $O(m)$ edges since $d$ is a constant.\nStep~2 takes $O(n^{1/2}m)$ time to compute a maximum matching $M'$ in the bipartite $H'$.\nIn Step~3, $C'$ can be computed in linear time by contracting all untagged vertices into a single vertex and using BFS. Therefore,\n\\llem{time1}{Algorithm ${\\tt basic}(G,X,Y)$ runs in $O(n^{1/2}m)$ time.}\n\n\\begin{figure*}\n\n\\rule{\\linewidth}{0.4mm}\n\n\\textbf{Input}: A graph $G=(V,E)$ and a partition $(X, Y)$ of the vertex set $V$. \\\\\n\\textbf{Output}: Two sets $C'\\subseteq X$ and $I'\\subseteq Y$ satisfying the Basic Condition.\n\n\\begin{enumerate}\n\n\\item Compute the bipartite graph $H$ and the auxiliary bipartite graph $H'$.\n\\item Compute a maximum matching $M'$ in $H'$ and the corresponding edge set $M$ and the $_{\\leq} (d+1)$-star packing $S_{\\leq d+1}$ in $H$.\n\\item Let $C'$ be $\\emptyset$ if there is no untagged vertex, and the set of $X$-vertices connected with at least one untagged vertex by an $M$-alternating path in $H$ otherwise. Let $X'\\leftarrow X\\setminus C'$. Let $Y'$ be the set of $Y$-vertices each of which is a leaf of a  $_{\\leq} (d+1)$-star centered at a vertex in $X'$ and let $I'\\leftarrow Y\\setminus Y'$.\n\\item Return $(C',I')$.\n\n\\end{enumerate}\n\n\\rule{\\linewidth}{0.4mm}\n\\caption{Algorithm ${\\tt basic}(G,X,Y)$}\\label{phase2}\n\\end{figure*}\n\nNote that all untagged vertices will be in $I'$. So if the size of $Y$ is large, for example $|Y|> (d+1)|X|$,\nwe can guarantee that there is always some untagged vertices and the set $I'$ returned by ${\\tt basic}(G,X,Y)$\nis not an empty set.\n\n\\medskip\n\\noindent\n\\textbf{Phase 3.} After obtaining $(C',I')$ from Phase~2, we look at the partition $\\mathcal{P}=(I', C', T'=N(I')\\setminus C',J'=V\\setminus(I'\\cup C'\\cup T'))$.\nSince  there is no edge between $I'$ and $X'=X\\setminus C'$, we know that $T'\\subseteq Y$ and $X'\\subseteq J'$.\nThen there is no edge between $I'$ and $J'$. The partition $\\mathcal{P}$ satisfies Conditions (2) and (3) in \\refd{general_dc} for $d$-bounded decompositions.\n\nNext, we consider Condition (1).\nLet $G^*=G[V\\setminus C']$. Any vertex in $I'$ is of degree $\\leq d$ in $G^*$, because $G[Y]=G[V\\setminus X]$ has maximum degree $\\leq d$ and $I'$-vertices are not adjacent to any vertex in $X\\setminus C'$. Although  $T'=N(I')\\setminus C' \\subseteq Y$, vertices in $T'$ is possible to be of degree $>d$ in $G^*$.\nIn fact, we only know that each vertex in $T'$ is of degree $\\leq d$ in $G[Y]$. But in $G^*$, every $T'$-vertex is adjacent to some vertices in $X'=X\\setminus C'$ and\nthus can be of degree $> d$. So Condition (1) may not hold. We will move some vertices out of $C'$ and $I'$ to\nmake the decomposition satisfying Condition (1).\n\nLet $B$ be the set of $T'$-vertices that are of degree $>d$ in $G^*$.\nNote that any vertex in $B$ is adjacent to some vertices in $X$.\nWe call vertices in $N_{I'}(B)=N(B)\\cap I'$ \\emph{bad} vertices.\nNote that $B$ is not an empty set if and only if $N_{I'}(B)$ is not an empty set.\nIf $B=\\emptyset$, then Condition (1) holds directly. For the case that $B\\neq \\emptyset$, i.e., $N_{I'}(B)\\neq\\emptyset$,\nour idea is to update $I'$ by removing $N_{I'}(B)$ out of $I'$.\n\nHowever, after moving some vertices out of $I'$, there may not be a full $(d+1)$-star packing from $C'$ to $I'$ anymore.\nSo after moving $N_{I'}(B)$ out of $I'$ we invoke the algorithm  ${\\tt basic}(G[C'\\cup I'],C',I')$  for Phase~2 on the subgraph $G[C'\\cup I']$ to find new $C'$ and $I'$, and then check whether there are new bad vertices or not.\nWe do these iteratively until we find a $d$-bounded decomposition, where no bad vertex exists.\nIn the returned $d$-bounded decomposition, $I'$ and $C'$ may become empty.\nHowever, we can guarantee $I'\\neq \\emptyset$ when the size of the graph satisfies some conditions.\nWe analyze this after describing the whole algorithm.\n\n\\medskip\n\\noindent\n\\textbf{The whole algorithm for decomposition.}\nOur algorithm ${\\tt decomposition}(G)$ presented in Figure~\\ref{kernel} is to compute two subsets of vertices $C$ and $I$ of the input graph $G$\nsuch that $(I, C, T=N(I)\\setminus C, J=V\\setminus(I\\cup C\\cup T))$ is a $d$-bounded decomposition of $G$.\n\nSteps 3, 4 and 6 in ${\\tt decomposition}(G)$ are the same steps in ${\\tt basic}(G,X,Y)$. Here we add Step~5 into these steps, which is used to update\nthe $(d + 1)$-star packing $S$. In ${\\tt decomposition}(G)$, Steps 1, 2 and 5 are corresponding to Phase~1, Steps 3, 4 and 6 are corresponding to Phase~2, and Steps 7 and 8 are corresponding to Phase~3. Note that Step~8 will also invoke ${\\tt basic}(G,X,Y)$.\n\n\\begin{figure*}\n\n\\rule{\\linewidth}{0.4mm}\n\n\\textbf{Input}: A graph $G=(V,E)$. \\\\\n\\textbf{Output}: Two subsets of vertices $C$ and $I$ such that $(I, C, T=N(I)\\setminus C,J=V\\setminus(I\\cup C\\cup T))$ is a $d$-bounded decomposition.\n\n\\begin{enumerate}\n\\item Find a maximal $(d + 1)$-star packing $S$ in $G$.\n\\item $X \\leftarrow V(S)$ and $Y \\leftarrow V\\setminus X$.\n\\item Compute the bipartite graph $H$ and the auxiliary bipartite graph $H'$.\n\\item Compute a maximum matching $M'$ in $H'$ and the corresponding edge set $M$ and the $_{\\leq} (d+1)$-star packing $S_{\\leq d+1}$ in $H$.\n\\item Let $S_{d+1}$ be the set of $(d+1)$-stars in $S_{\\leq d+1}$.\\\\\n \\textbf{If} \\{$|S_{d+1}|> |S|$\\}, \\\\\n \\textbf{then} $S \\leftarrow S_{d+1}$ and \\textbf{goto} Step 2.\n\\item Let $C'$ be $\\emptyset$ if there is no untagged vertex, and be the set of $X$-vertices connected with at least one untagged vertex by an $M$-alternating path in $H$ otherwise. Let $X'\\leftarrow X\\setminus C'$. Let $Y'$ be the set of leaves of $_{\\leq} (d+1)$-stars in $S_{\\leq d+1}$ centered at vertices in $X'$ and let $I'\\leftarrow Y\\setminus Y'$.\n\\item Compute the set $N_{I'}(B)$ of bad vertices based on $C'$ and $I'$.\n\\item \\textbf{If} \\{$N_{I'}(B)\\neq\\emptyset$\\}, \\\\\n\\textbf{then} $I' \\leftarrow I'\\setminus N_{I'}(B)$, $(C',I')\\leftarrow {\\tt basic}(G[C'\\cup I'],C',I')$, and \\textbf{goto} Step~7.\n\\item \\textbf{Return} $(C=C',I=I')$.\n\n\\end{enumerate}\n\n\\rule{\\linewidth}{0.4mm}\n\\caption{Algorithm ${\\tt decomposition}(G)$}\\label{kernel}\n\\end{figure*}\n\n\\llem{correct}{The two vertex sets $C$ and $I$ returned by ${\\tt decomposition}(G)$\nmake $(I, C, T=N(I)\\setminus C,J=V\\setminus(I\\cup C\\cup T))$ a $d$-bounded decomposition.}\n\\pff{\nTo prove this  we only need to show the three conditions in the definition of $d$-bounded decomposition.\n\\refl{112} shows that the initial $C'$ and $I'$  satisfy Basic Condition. In Step~8, we will update $C'$ and $I'$ by taking a subset of each of them.\nIt is clear that there is a full $(d+1)$-star packing from $C'$ to $I'$ after updating them in Step 8, because we still use ${\\tt basic}$ to compute new $C'$ and $I'$.\nThere is no edge between $I'$ and $X\\setminus C'$ after each execution of Step~8, since \\refl{112} guarantees that the vertices moved out of $X'$ in Step 8 are not adjacent to any vertices in the current $I'$. Then $C'$ and $I'$ in the whole algorithm always satisfy Basic Condition. Only when $N_{I'}(B)=\\emptyset$, i.e., $B=\\emptyset$, the algorithm will not execute Steps 7 and 8 anymore and stop. So when the algorithm stops, the decomposition based on $C=C'$ and $I=I'$ satisfy all the three conditions in the definition of $d$-bounded decomposition.\n}\n\nFigure~\\ref{fig3} illustrates how the algorithm computes.\nNext we consider the running time bound of the algorithm and show that it always stops.\n\n\\begin{figure}[h]\n\\begin{center}\n\\includegraphics[width=0.9\\textwidth]{alg.eps}\n\\end{center}\n\\caption{An illustration for how ${\\tt decomposition}(G)$ works, where we use $X_0$ (resp., $Y_0$)\nto denote $X'$ (resp., $Y'$) computed in Step~6, $N_i$ to denote the set of vertices moved out of $I'$ in the  $i$th execution of $I' \\leftarrow I'\\setminus N_{I'}(B)$ in Step 8, and $X_i$ (resp., $Y_i$) to denote the\nset of vertices moved out of $C'$ (resp., $I'$) in the\n$i$th execution of $(C',I')\\leftarrow {\\tt basic}(G[C'\\cup I'],C',I')$ in Step 8 for each $i\\geq1$}\\label{fig3}\n\\end{figure}\n\n\nSteps 1 and 2 take only linear time. We have analyzed in ${\\tt basic}(G,X,Y)$ that Steps 3 and 6  take linear time and Step 4 uses $O(n^{1/2}m)$ time.\nEach time when we update $S$ in Step 5, the size of $S$ increases by at least 1 and the size of $S$ is at most $\\alpha(G)$ since each $(d+1)$-star contains\nat least one vertex in a $d$-degree deletion set. Therefore, $S$ will be updated by at most $\\alpha(G)$ times and the first six steps of\n${\\tt decomposition}(G)$ use $O(\\alpha(G)n^{1/2}m)$ time.\n\nStep 7 takes linear time. When $N_{I'}(B)\\neq \\emptyset$, Step 8 first moves some vertices out of $I'$ in linear time and\nthen updates $C'$ and $I'$ by calling ${\\tt basic}(G,X,Y)$ in  $O(n^{1/2}m)$ time. We are interested in how many times Steps 7 and 8 will be executed.\n\nFor the purpose of presentation, we rewrite the second line of Step 8 as follows by using different notation:\n", "itemtype": "equation", "pos": 15416, "prevtext": "\nSet $D_2$ is a $d$-degree deletion set of $G[V\\setminus D_1]$ and\nset $K'$ is a minimum $d$-degree deletion set of $G[V \\setminus (I \\cup C)]$.\nNote that $D_1 \\subseteq I\\cup C$ and then $G[V \\setminus (I \\cup C)]$ is an induced subgraph of $G[V\\setminus D_1]$.\nSo it holds that\n\n", "index": 11, "text": "$$|D_2|\\geq |K'|.$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m1\" class=\"ltx_Math\" alttext=\"|D_{2}|\\geq|K^{\\prime}|.\" display=\"block\"><mrow><mrow><mrow><mo stretchy=\"false\">|</mo><msub><mi>D</mi><mn>2</mn></msub><mo stretchy=\"false\">|</mo></mrow><mo>\u2265</mo><mrow><mo stretchy=\"false\">|</mo><msup><mi>K</mi><mo>\u2032</mo></msup><mo stretchy=\"false\">|</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.00164.tex", "nexttext": "\n\n\nEach time when execute Step 8, we have that\n\n", "itemtype": "equation", "pos": 33490, "prevtext": "\nTherefore,  $|K' \\cup C|=|K'|+|C|\\leq |D_1|+|D_2|=|D|$.\n}\n\n\nBy \\refl{dc_local}, we can reduce an instance by removing $I\\cup C$ if the graph has a $d$-bounded decomposition $(I,C,T,J)$.\nThis is the main idea how we get \\reft{our-thm} and kernels for our problem.\nHere arises a problem how to find a $d$-bounded decomposition $(I,C,T,J)$ of a graph such that $I\\neq \\emptyset$ if it exists.\nFirst, we give a simple observation.\n\\begin{observation}{\\label{simple_dc}\nLet $R$ be a set of vertices $v$ such that any vertex in $N[v]$ is of degree $\\leq d$.\nThen $(I=R, C=\\emptyset, T=N(R), J=V\\setminus(I\\cup T))$ is a $d$-bounded decomposition of $G$.}\n\\end{observation}\n\nBy \\refl{dc_local} and Observation~\\ref{simple_dc}, we can reduce an instance by removing from the graph the set $B$ of vertices $v$ such that any vertex in $N[v]$ is of degree $\\leq d$.\nFor more general cases, in this paper we will show that\n\\thmm{normal_dc}{ For a given graph $G=(V,E)$ and an integer $d\\geq 0$,\nthere is a special $d$-degree deletion set $X$ of $G$ with $|X| \\leq (d+2)\\alpha(G)$ such that if $|V\\setminus X| >{\\frac{(d+1)(d^2+3d+1)}{d+2}}|X|$,\nthen $G$ admits a $d$-bounded decomposition $(I,C,T,J)$ with $I\\neq \\emptyset$. The special $d$-degree deletion set $X$ and\n$d$-bounded decomposition $(I,C,T,J)$ can be found in $O(n^{3/2}m)$ time.}\n\nIn the next section, we construct an algorithm to prove this theorem.\n\n\n\n\n\n\n\n\n\\section{Algorithms}\\label{sec_alg}\n\nWe first introduce an algorithm to find $d$-bounded decompositions of graphs, based on which we can easily get an algorithm for\nthe generalization of NT-theorem in \\reft{our-thm}.\n\n\\subsection{The algorithm for decompositions}\nFirst of all, we give the main idea of our algorithm to find a $d$-bounded decomposition $(I,C,T,J)$ of a graph $G=(V,E)$. It contains three major phases.\n\\\\\nPhase 1: find a partition $(X,Y)$ of the vertex set $V$ such that the maximum degree in $G[Y]$ is at most $d$.\\\\\nPhase 2: find two subsets $C'\\subseteq X$ and $I'\\subseteq Y$ satisfying \\emph{Basic Condition}: there is a full $(d+1)$-star packing from $C'$ to $I'$ and\nthere is no edge between $I'$ and $X\\setminus C'$.\\\\\nPhase 3: iteratively move some vertices out of $I'$ and some vertices out of $C'$ to make $(I',C',T'=N(I')\\setminus C',J'=V\\setminus(I'\\cup C'\\cup T'))$\n a $d$-bounded decomposition.\n\nIn fact, the first two phases of our algorithm are almost the same as that of Fellows, Guo, Moser and Niedermeier's algorithm~\\cite{FG:gNT}.\nHowever, in Phase 3, our algorithm uses a different method to compute $I'$ and $C'$. This is critical for us to get an improvement.\n\n\\medskip\n\\noindent\n\\textbf{Phase 1.}\nFor Phase 1, we can find a maximal $(d+1)$-star packing $S$ and let $X=V(S)$. By the maximality of $S$, we know that $X$ is a $d$-degree deletion set and $G[Y]$ has no vertex of degree $>d$.\nThen the partition $(X,Y)$ satisfies the condition in Phase 1. In order to obtain a good performance, our algorithm may not use an arbitrary\nmaximal $(d+1)$-star packing $S$.\nWhen we obtain a new $(d+1)$-star packing $S'$ such that $|S'|> |S|$ in our algorithm, we will update  $X$ by letting $X=V(S')$.\n\n\n\n\n\\medskip\n\\noindent\n\\textbf{Phase 2.} After obtaining $(X,Y)$ in Phase 1, our algorithm finds two special sets $C'\\subseteq X$ and $I'\\subseteq Y$ in Phase 2.\nTo find $C'$ and $I'$ satisfying Basic Condition, we need to find a special $_{\\leq} (d+1)$-star packing from $X$ to $Y$,\nwhich can be computed by the algorithms for finding maximum matchings in bipartite graphs. Note that the idea of computing $_{\\leq} (d+1)$-stars from $X$ and $Y$ has been used to solve some other problems in references~\\cite{fvs,fomin,cygan}.\n\nWe consider the bipartite graph $H=(X,Y,E_H)$ with edge set $E_H$ being the set of edges between $X$ and $Y$ in $G$, and are going to find a $_{\\leq} (d+1)$-star  packing from $X$ to $Y$ in $H$.\nNote that a $Y$-vertex no adjacent to any vertex in $X$ will become a degree-0 vertex in $H$.\n\nWe construct an auxiliary bipartite graph $H'=(X_1\\cup X_2\\cup \\dots X_{d+1},Y,E'_H)$,\nwhere each $X_i$ $(i=1,2,\\dots, d+1)$ is a copy of $X$ and a vertex  $v_i\\in X_i$ is adjacent\nto a vertex $u\\in Y$ if and only if the corresponding vertex $v\\in X$ is adjacent to $u$ in $H$. For a vertex $v\\in X$, we may use $v_i$ to denote its corresponding vertex in $X_i$.\n\n\nWe find a maximum matching $M'$ in $H'$ by using an $O(n^{1/2}m)$-time algorithm~\\cite{ET:bm,hk:bm}.\n\n\nLet $M$ be the set of edges in $H$ corresponding to the matching $M'$, i.e., an edge $uv$ ($u\\in Y$ and $v\\in X$) of $H$ is in $M$ if and only if $uv_i$ is in $M'$ for some $v_i$ corresponding to $v$. Edges in $M$ are called \\emph{marked} and others are called \\emph{unmarked}.\nSince $M'$ is a matching in $H'$, we have that $|M|=|M'|$.\nThe set of marked edges in $H$ forms a $_{\\leq} (d+1)$-star packing $S_{\\leq d+1}$. This is the $_{\\leq} (d+1)$-star packing we are seeking for.\nIt is also easy to observe that\n\n\\llem{mm}{Graph $H$ has a $_{\\leq} (d+1)$-star packing  containing $t$ edges if and only if $H'$ has a matching of size $t$.}\n\n\nNext, we analyze some properties of $S_{\\leq d+1}$ and find $C'$ and $I'$ satisfying Basic Condition based on these properties.\n\n\n\n\n\nLet $S_{d+1}$ denote the set of $(d+1)$-stars in $S_{\\leq d+1}$.\n\nAn $X$-vertex in a star in $S_{d+1}$ is \\emph{fully tagged}. Then $X\\cap V(S_{d+1})$ is the set of fully tagged vertices.\n\nA $Y$-vertex is \\emph{untagged} if it is adjacent to at least one vertex in $X$ in $H$ but not contained in any star in  $S_{\\leq d+1}$.\nA path $P$ in $H$ \nthat alternates between edges not in $M$ and edges in $M$ is called an \\emph{$M$-alternating path}. Please\nsee Figure~\\ref{fig2} for an illustration of these definitions.\n\n\\begin{figure}[h]\n\\begin{center}\n\\includegraphics[width=0.4\\textwidth]{f2.eps}\n\\end{center}\n\\caption{An illustration for $I'$ and $C'$, where thick edges are marked edges, $v_1$ and $v_2$\nare fully tagged vertices, $u_1$ and $u_5$ are untagged vertices, and $u_1v_1u_4v_2u_6$ is an $M$-alternating\npath}\\label{fig2}\n\\end{figure}\n\n\n\n\n\\llem{111}{If there is an $M$-alternating path $P$ from an untagged vertex $u\\in Y$ to a vertex $v\\in X$ in $H$,\nthen $v$ is fully tagged.\n}\n\\pff{ Note that the edge incident on $u$ in $P$, which can be regarded as the first edge in $P$, is unmarked, and $P$ contains odd number of edges since\n$u\\in Y$ and $v\\in X$.\nAccording to the definition of $M$-alternating paths, we know that $P$ contains more unmarked edges than marked edges.\nReplacing $M\\cap E(P)$ by $E(P)\\setminus M$ in $M$ produces $M_0$.\nIf $v$ is not fully tagged, then $M_0$ still can form a $_{\\leq} (d+1)$-star packing in $H$. By \\refl{mm}, there will be a matching of size $|M_0|>|M'|$ in $H'$, contradicting to the maximality of $M'$. So $v$ is fully tagged.\n}\n\\medskip\nNext, we are going to set $C'$ and $I'$.\nIf there is no untagged vertex, let $C'=\\emptyset$. Otherwise let $C'$ be the set of $X$-vertices connected with at least one untagged vertex by an $M$-alternating path in $H$. Let $X'=X\\setminus C'$.\nLet $Y'$ be the set of $Y$-vertices that is a leaf of a  $_{\\leq} (d+1)$-star in  $S_{\\leq d+1}$ that is centered at a vertex in $X'$, and $I'=Y\\setminus Y'$.\n\n\n\\llem{112}{The two sets $C'$ and $I'$ obtained above satisfy Basic Condition.}\n\\pff{\nBy the definition of $C'$ and \\refl{111}, we know that all vertices in $C'$ are fully tagged. Any leaf of a star centered at a vertex in $C'$ will\nnot be in $Y'$ since each vertex in $Y$ is in at most one star in $S_{\\leq d+1}$.\nThen we know that the set of stars in $S_{\\leq d+1}$ centered at vertices in $C'$ is a full $(d+1)$-star packing from $C'$ to $I'$.\n\nNext, we show that there is no edge between $I'$ and $X'=X\\setminus C'$. Assume to the contrary that there is an edge $uv$ between $I'$ and $X'$,\nwhere $u \\in I'$ and $v \\in X'$. The vertex $u$ cannot be an untagged vertex, otherwise if $v$ is fully tagged then $v$ would be included to $C'$ by\nthe definition of $C'$, and\n\nif $v$ is not fully tagged then $uv$ could be added to $M$ to obtain a matching of larger size.\nSo $u$ is a leaf of a $(d+1)$-star in $S_{\\leq d+1}$ centered at a vertex $v_0\\in C'$ and $v_0u$ is an $M$-edge in $H$. We can find an $M$-alternating path $P$ from an untagged vertex $u_0$ to $u$ in $H$. There is an $M$-alternating path $P'$ from an untagged vertex $u_0$ to $v_0$ according to the definition of $C'$. If $P'$ passes $u$ then let $P$ be the subpath of $P'$ from $u_0$ to $u$. Otherwise we let $P$ be the path adding $v_0u$ to the end of $P'$.\nThen $P$ is an $M$-alternating path from an untagged vertex $u_0$ to $u$.\nLet $P^*$ be the path adding $uv$ to the end of $P$. We can see that $P^*$ is still an $M$-alternating path,\nwhich is from an untagged vertex $u_0$ to a $J'$-vertex $v$. However, according to the definition of $C'$, $v$ should be included to $C'$.\nFor any case, there is a contradiction.\n\nSo $C'$ and $I'$ satisfy Basic Condition.\n}\n\n\\medskip\n\nWe describe the above progress to compute $C'$ and $I'$ as an algorithm ${\\tt basic}(G,X,Y)$ in Figure~\\ref{phase2}, which will be used as a subalgorithm in our main algorithm.\nStep~1 of ${\\tt basic}(G,X,Y)$ takes linear time and $H'$ has $O(n)$ vertices and $O(m)$ edges since $d$ is a constant.\nStep~2 takes $O(n^{1/2}m)$ time to compute a maximum matching $M'$ in the bipartite $H'$.\nIn Step~3, $C'$ can be computed in linear time by contracting all untagged vertices into a single vertex and using BFS. Therefore,\n\\llem{time1}{Algorithm ${\\tt basic}(G,X,Y)$ runs in $O(n^{1/2}m)$ time.}\n\n\\begin{figure*}\n\n\\rule{\\linewidth}{0.4mm}\n\n\\textbf{Input}: A graph $G=(V,E)$ and a partition $(X, Y)$ of the vertex set $V$. \\\\\n\\textbf{Output}: Two sets $C'\\subseteq X$ and $I'\\subseteq Y$ satisfying the Basic Condition.\n\n\\begin{enumerate}\n\n\\item Compute the bipartite graph $H$ and the auxiliary bipartite graph $H'$.\n\\item Compute a maximum matching $M'$ in $H'$ and the corresponding edge set $M$ and the $_{\\leq} (d+1)$-star packing $S_{\\leq d+1}$ in $H$.\n\\item Let $C'$ be $\\emptyset$ if there is no untagged vertex, and the set of $X$-vertices connected with at least one untagged vertex by an $M$-alternating path in $H$ otherwise. Let $X'\\leftarrow X\\setminus C'$. Let $Y'$ be the set of $Y$-vertices each of which is a leaf of a  $_{\\leq} (d+1)$-star centered at a vertex in $X'$ and let $I'\\leftarrow Y\\setminus Y'$.\n\\item Return $(C',I')$.\n\n\\end{enumerate}\n\n\\rule{\\linewidth}{0.4mm}\n\\caption{Algorithm ${\\tt basic}(G,X,Y)$}\\label{phase2}\n\\end{figure*}\n\nNote that all untagged vertices will be in $I'$. So if the size of $Y$ is large, for example $|Y|> (d+1)|X|$,\nwe can guarantee that there is always some untagged vertices and the set $I'$ returned by ${\\tt basic}(G,X,Y)$\nis not an empty set.\n\n\\medskip\n\\noindent\n\\textbf{Phase 3.} After obtaining $(C',I')$ from Phase~2, we look at the partition $\\mathcal{P}=(I', C', T'=N(I')\\setminus C',J'=V\\setminus(I'\\cup C'\\cup T'))$.\nSince  there is no edge between $I'$ and $X'=X\\setminus C'$, we know that $T'\\subseteq Y$ and $X'\\subseteq J'$.\nThen there is no edge between $I'$ and $J'$. The partition $\\mathcal{P}$ satisfies Conditions (2) and (3) in \\refd{general_dc} for $d$-bounded decompositions.\n\nNext, we consider Condition (1).\nLet $G^*=G[V\\setminus C']$. Any vertex in $I'$ is of degree $\\leq d$ in $G^*$, because $G[Y]=G[V\\setminus X]$ has maximum degree $\\leq d$ and $I'$-vertices are not adjacent to any vertex in $X\\setminus C'$. Although  $T'=N(I')\\setminus C' \\subseteq Y$, vertices in $T'$ is possible to be of degree $>d$ in $G^*$.\nIn fact, we only know that each vertex in $T'$ is of degree $\\leq d$ in $G[Y]$. But in $G^*$, every $T'$-vertex is adjacent to some vertices in $X'=X\\setminus C'$ and\nthus can be of degree $> d$. So Condition (1) may not hold. We will move some vertices out of $C'$ and $I'$ to\nmake the decomposition satisfying Condition (1).\n\nLet $B$ be the set of $T'$-vertices that are of degree $>d$ in $G^*$.\nNote that any vertex in $B$ is adjacent to some vertices in $X$.\nWe call vertices in $N_{I'}(B)=N(B)\\cap I'$ \\emph{bad} vertices.\nNote that $B$ is not an empty set if and only if $N_{I'}(B)$ is not an empty set.\nIf $B=\\emptyset$, then Condition (1) holds directly. For the case that $B\\neq \\emptyset$, i.e., $N_{I'}(B)\\neq\\emptyset$,\nour idea is to update $I'$ by removing $N_{I'}(B)$ out of $I'$.\n\nHowever, after moving some vertices out of $I'$, there may not be a full $(d+1)$-star packing from $C'$ to $I'$ anymore.\nSo after moving $N_{I'}(B)$ out of $I'$ we invoke the algorithm  ${\\tt basic}(G[C'\\cup I'],C',I')$  for Phase~2 on the subgraph $G[C'\\cup I']$ to find new $C'$ and $I'$, and then check whether there are new bad vertices or not.\nWe do these iteratively until we find a $d$-bounded decomposition, where no bad vertex exists.\nIn the returned $d$-bounded decomposition, $I'$ and $C'$ may become empty.\nHowever, we can guarantee $I'\\neq \\emptyset$ when the size of the graph satisfies some conditions.\nWe analyze this after describing the whole algorithm.\n\n\\medskip\n\\noindent\n\\textbf{The whole algorithm for decomposition.}\nOur algorithm ${\\tt decomposition}(G)$ presented in Figure~\\ref{kernel} is to compute two subsets of vertices $C$ and $I$ of the input graph $G$\nsuch that $(I, C, T=N(I)\\setminus C, J=V\\setminus(I\\cup C\\cup T))$ is a $d$-bounded decomposition of $G$.\n\nSteps 3, 4 and 6 in ${\\tt decomposition}(G)$ are the same steps in ${\\tt basic}(G,X,Y)$. Here we add Step~5 into these steps, which is used to update\nthe $(d + 1)$-star packing $S$. In ${\\tt decomposition}(G)$, Steps 1, 2 and 5 are corresponding to Phase~1, Steps 3, 4 and 6 are corresponding to Phase~2, and Steps 7 and 8 are corresponding to Phase~3. Note that Step~8 will also invoke ${\\tt basic}(G,X,Y)$.\n\n\\begin{figure*}\n\n\\rule{\\linewidth}{0.4mm}\n\n\\textbf{Input}: A graph $G=(V,E)$. \\\\\n\\textbf{Output}: Two subsets of vertices $C$ and $I$ such that $(I, C, T=N(I)\\setminus C,J=V\\setminus(I\\cup C\\cup T))$ is a $d$-bounded decomposition.\n\n\\begin{enumerate}\n\\item Find a maximal $(d + 1)$-star packing $S$ in $G$.\n\\item $X \\leftarrow V(S)$ and $Y \\leftarrow V\\setminus X$.\n\\item Compute the bipartite graph $H$ and the auxiliary bipartite graph $H'$.\n\\item Compute a maximum matching $M'$ in $H'$ and the corresponding edge set $M$ and the $_{\\leq} (d+1)$-star packing $S_{\\leq d+1}$ in $H$.\n\\item Let $S_{d+1}$ be the set of $(d+1)$-stars in $S_{\\leq d+1}$.\\\\\n \\textbf{If} \\{$|S_{d+1}|> |S|$\\}, \\\\\n \\textbf{then} $S \\leftarrow S_{d+1}$ and \\textbf{goto} Step 2.\n\\item Let $C'$ be $\\emptyset$ if there is no untagged vertex, and be the set of $X$-vertices connected with at least one untagged vertex by an $M$-alternating path in $H$ otherwise. Let $X'\\leftarrow X\\setminus C'$. Let $Y'$ be the set of leaves of $_{\\leq} (d+1)$-stars in $S_{\\leq d+1}$ centered at vertices in $X'$ and let $I'\\leftarrow Y\\setminus Y'$.\n\\item Compute the set $N_{I'}(B)$ of bad vertices based on $C'$ and $I'$.\n\\item \\textbf{If} \\{$N_{I'}(B)\\neq\\emptyset$\\}, \\\\\n\\textbf{then} $I' \\leftarrow I'\\setminus N_{I'}(B)$, $(C',I')\\leftarrow {\\tt basic}(G[C'\\cup I'],C',I')$, and \\textbf{goto} Step~7.\n\\item \\textbf{Return} $(C=C',I=I')$.\n\n\\end{enumerate}\n\n\\rule{\\linewidth}{0.4mm}\n\\caption{Algorithm ${\\tt decomposition}(G)$}\\label{kernel}\n\\end{figure*}\n\n\\llem{correct}{The two vertex sets $C$ and $I$ returned by ${\\tt decomposition}(G)$\nmake $(I, C, T=N(I)\\setminus C,J=V\\setminus(I\\cup C\\cup T))$ a $d$-bounded decomposition.}\n\\pff{\nTo prove this  we only need to show the three conditions in the definition of $d$-bounded decomposition.\n\\refl{112} shows that the initial $C'$ and $I'$  satisfy Basic Condition. In Step~8, we will update $C'$ and $I'$ by taking a subset of each of them.\nIt is clear that there is a full $(d+1)$-star packing from $C'$ to $I'$ after updating them in Step 8, because we still use ${\\tt basic}$ to compute new $C'$ and $I'$.\nThere is no edge between $I'$ and $X\\setminus C'$ after each execution of Step~8, since \\refl{112} guarantees that the vertices moved out of $X'$ in Step 8 are not adjacent to any vertices in the current $I'$. Then $C'$ and $I'$ in the whole algorithm always satisfy Basic Condition. Only when $N_{I'}(B)=\\emptyset$, i.e., $B=\\emptyset$, the algorithm will not execute Steps 7 and 8 anymore and stop. So when the algorithm stops, the decomposition based on $C=C'$ and $I=I'$ satisfy all the three conditions in the definition of $d$-bounded decomposition.\n}\n\nFigure~\\ref{fig3} illustrates how the algorithm computes.\nNext we consider the running time bound of the algorithm and show that it always stops.\n\n\\begin{figure}[h]\n\\begin{center}\n\\includegraphics[width=0.9\\textwidth]{alg.eps}\n\\end{center}\n\\caption{An illustration for how ${\\tt decomposition}(G)$ works, where we use $X_0$ (resp., $Y_0$)\nto denote $X'$ (resp., $Y'$) computed in Step~6, $N_i$ to denote the set of vertices moved out of $I'$ in the  $i$th execution of $I' \\leftarrow I'\\setminus N_{I'}(B)$ in Step 8, and $X_i$ (resp., $Y_i$) to denote the\nset of vertices moved out of $C'$ (resp., $I'$) in the\n$i$th execution of $(C',I')\\leftarrow {\\tt basic}(G[C'\\cup I'],C',I')$ in Step 8 for each $i\\geq1$}\\label{fig3}\n\\end{figure}\n\n\nSteps 1 and 2 take only linear time. We have analyzed in ${\\tt basic}(G,X,Y)$ that Steps 3 and 6  take linear time and Step 4 uses $O(n^{1/2}m)$ time.\nEach time when we update $S$ in Step 5, the size of $S$ increases by at least 1 and the size of $S$ is at most $\\alpha(G)$ since each $(d+1)$-star contains\nat least one vertex in a $d$-degree deletion set. Therefore, $S$ will be updated by at most $\\alpha(G)$ times and the first six steps of\n${\\tt decomposition}(G)$ use $O(\\alpha(G)n^{1/2}m)$ time.\n\nStep 7 takes linear time. When $N_{I'}(B)\\neq \\emptyset$, Step 8 first moves some vertices out of $I'$ in linear time and\nthen updates $C'$ and $I'$ by calling ${\\tt basic}(G,X,Y)$ in  $O(n^{1/2}m)$ time. We are interested in how many times Steps 7 and 8 will be executed.\n\nFor the purpose of presentation, we rewrite the second line of Step 8 as follows by using different notation:\n", "index": 13, "text": "\n\\[\\mbox{\\textbf{then} $I'_0 \\leftarrow I'\\setminus N_{I'}(B)$, $(C^*,I^*)\\leftarrow {\\tt basic}(G[C'\\cup I'_0],C',I'_0)$, and \\textbf{goto} Step~7.}\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m1.m1\" class=\"ltx_Math\" alttext=\"I^{\\prime}_{0}\\leftarrow I^{\\prime}\\setminus N_{I^{\\prime}}(B)\" display=\"inline\"><mrow><msubsup><mi>I</mi><mn>0</mn><mo>\u2032</mo></msubsup><mo>\u2190</mo><mrow><msup><mi>I</mi><mo>\u2032</mo></msup><mo>\u2216</mo><mrow><msub><mi>N</mi><msup><mi>I</mi><mo>\u2032</mo></msup></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m1.m2\" class=\"ltx_Math\" alttext=\"(C^{*},I^{*})\\leftarrow{\\tt basic}(G[C^{\\prime}\\cup I^{\\prime}_{0}],C^{\\prime}%&#10;,I^{\\prime}_{0})\" display=\"inline\"><mrow><mrow><mo stretchy=\"false\">(</mo><msup><mi>C</mi><mo>*</mo></msup><mo>,</mo><msup><mi>I</mi><mo>*</mo></msup><mo stretchy=\"false\">)</mo></mrow><mo>\u2190</mo><mrow><mi>\ud835\ude8b\ud835\ude8a\ud835\ude9c\ud835\ude92\ud835\ude8c</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>G</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">[</mo><mrow><msup><mi>C</mi><mo>\u2032</mo></msup><mo>\u222a</mo><msubsup><mi>I</mi><mn>0</mn><mo>\u2032</mo></msubsup></mrow><mo stretchy=\"false\">]</mo></mrow></mrow><mo>,</mo><msup><mi>C</mi><mo>\u2032</mo></msup><mo>,</mo><msubsup><mi>I</mi><mn>0</mn><mo>\u2032</mo></msubsup><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00164.tex", "nexttext": "\nFirst we consider the case that $C^* = C'$. Now we have that\n\n", "itemtype": "equation", "pos": 33688, "prevtext": "\n\n\nEach time when execute Step 8, we have that\n\n", "index": 15, "text": "$$C^* \\subseteq C', ~~I^*\\subseteq I'_0\\subseteq I' ~~~\\mbox{and}~~~ N(I'_0) \\setminus C' \\subseteq I'\\setminus I'_0.$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex8.m1\" class=\"ltx_Math\" alttext=\"C^{*}\\subseteq C^{\\prime},~{}~{}I^{*}\\subseteq I^{\\prime}_{0}\\subseteq I^{%&#10;\\prime}~{}~{}~{}\\mbox{and}~{}~{}~{}N(I^{\\prime}_{0})\\setminus C^{\\prime}%&#10;\\subseteq I^{\\prime}\\setminus I^{\\prime}_{0}.\" display=\"block\"><mrow><mrow><mrow><msup><mi>C</mi><mo>*</mo></msup><mo>\u2286</mo><msup><mi>C</mi><mo>\u2032</mo></msup></mrow><mo rspace=\"9.1pt\">,</mo><mrow><msup><mi>I</mi><mo>*</mo></msup><mo>\u2286</mo><msubsup><mi>I</mi><mn>0</mn><mo>\u2032</mo></msubsup><mo>\u2286</mo><mrow><mrow><mpadded width=\"+9.9pt\"><msup><mi>I</mi><mo>\u2032</mo></msup></mpadded><mo>\u2062</mo><mpadded width=\"+9.9pt\"><mtext>and</mtext></mpadded><mo>\u2062</mo><mi>N</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>I</mi><mn>0</mn><mo>\u2032</mo></msubsup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2216</mo><msup><mi>C</mi><mo>\u2032</mo></msup></mrow><mo>\u2286</mo><mrow><msup><mi>I</mi><mo>\u2032</mo></msup><mo>\u2216</mo><msubsup><mi>I</mi><mn>0</mn><mo>\u2032</mo></msubsup></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.00164.tex", "nexttext": "\nEach vertex in $I'$ is of degree at most $d$ in $G[V\\setminus C']$ by \\refl{112}.\nSo any vertex in  $N(I^*)\\setminus C^*$ is of degree at most $d$ in $G[V\\setminus C^*]$, which means that there is no bad vertex.\nWe conclude that: if $C^* = C'$, then $N_{I'}(B)$ will be empty in the next step and Step 8 will not be\nexecuted any more.\n\nBy this property, we know that only when the size of $C'$ decreases the algorithm is possibly to execute the next iteration of Steps 7 and 8.\nInitially, $|C'|\\leq \\alpha(G)$ since each $(d+1)$-star contains\nat least one vertex in a $d$-degree deletion set. Therefore, Steps 7,8 and 9 of ${\\tt decomposition}(G)$ run in $O(\\alpha(G)n^{1/2}m)$ time.\n\nIn total, ${\\tt decomposition}(G)$ uses $O(\\alpha(G)n^{1/2}m)=O(n^{3/2}m)$ time.\n\n\\llem{time}{Algorithm ${\\tt decomposition}(G)$ runs in $O(n^{3/2}m)$ time and returns $(C,I)$\nsuch that $(I, C, T, J)$ is a $d$-bounded decomposition of $G$,\nwhere $ T=N(I)\\setminus C$ and $J=V(G)\\setminus(I\\cup C\\cup T)$.\n}\n\n\\refl{time} is not enough to prove \\reft{normal_dc}, because $C$ and $I$ returned by ${\\tt decomposition}(G)$ may be empty sets.\nWe still need to show that $I$ will not be empty if the size of the graph $G$ is large (compared to $\\alpha(G)$).\n\n\n\\medskip\n\n\nWe prove the following lemma to show the size condition.\n\\llem{size}{Algorithm ${\\tt decomposition}(G)$ returns $(C,I)$ such that\n\n", "itemtype": "equation", "pos": 33869, "prevtext": "\nFirst we consider the case that $C^* = C'$. Now we have that\n\n", "index": 17, "text": "$$N(I^*)\\setminus C^* = N(I^*)\\setminus C' \\subseteq N(I'_0) \\setminus C' \\subseteq I'\\setminus I'_0.$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex9.m1\" class=\"ltx_Math\" alttext=\"N(I^{*})\\setminus C^{*}=N(I^{*})\\setminus C^{\\prime}\\subseteq N(I^{\\prime}_{0}%&#10;)\\setminus C^{\\prime}\\subseteq I^{\\prime}\\setminus I^{\\prime}_{0}.\" display=\"block\"><mrow><mrow><mrow><mrow><mi>N</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msup><mi>I</mi><mo>*</mo></msup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2216</mo><msup><mi>C</mi><mo>*</mo></msup></mrow><mo>=</mo><mrow><mrow><mi>N</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msup><mi>I</mi><mo>*</mo></msup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2216</mo><msup><mi>C</mi><mo>\u2032</mo></msup></mrow><mo>\u2286</mo><mrow><mrow><mi>N</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>I</mi><mn>0</mn><mo>\u2032</mo></msubsup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2216</mo><msup><mi>C</mi><mo>\u2032</mo></msup></mrow><mo>\u2286</mo><mrow><msup><mi>I</mi><mo>\u2032</mo></msup><mo>\u2216</mo><msubsup><mi>I</mi><mn>0</mn><mo>\u2032</mo></msubsup></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.00164.tex", "nexttext": "\n}\n\\pff{\n\n\nAfter Step 5, $S$ will not be updated anymore. In our algorithm, we assume that $S$ is the one after Step~5 and will not change anymore. Note that\n$C'$ and $I'$ are created and updated only after Step 5.\n\nWe let $s$ denote the number of $(d+1)$-stars in $S$. Then $s\\leq \\alpha(G)$ and $|X|=(d+2)s$.\nRecall that $S_{\\leq d+1}$ is a $_{\\leq} (d+1)$-star packing from $X$ to $Y$ computed in Step~4.\nLet $s_0$ be the number of $(d+1)$-stars in $S_{\\leq d+1}$. Now we have $s_0\\leq s$, otherwise $S$ would have been updated in Step~5.\n\nIn Step 6, initially $Y'$ is the set of leaves of  $_{\\leq} (d+1)$-stars in $S_{\\leq d+1}$ centered at vertices in $X'$. We let $Y_0=Y'$ in this step. Let $r_1$ be the number of $(d+1)$-stars in $S_{\\leq d+1}$ centered at\nsome vertex in $X'$ and $r_2$ be the number of other stars in $S_{\\leq d+1}$ centered at a vertex in $X'$. Then we have that $r_1+r_2\\leq |X'|$ and $|Y_0|=|Y'|\\leq (d+1)r_1 +dr_2$.\nThis is not the finial size of $Y'$, since some vertices more may be included to $Y'$ in Step~8.\nLet $c_1$ denote the size of $C'$ in Step 6. Then we have that $c_1+r_1=s_0\\leq s$ and $c_1+r_1+r_2\\leq |X|$.\n\nWe consider the first execution of Step~8.\nIf $N_{I'}(B)\\neq \\emptyset$, then vertices in $N_{I'}(B)$ will be moved out of $I'$ and then will be included to $Y'$. Note that each vertex has degree at most $d$ in $G[Y]$, $B\\subseteq Y'\\subseteq Y$ and  $N_{I'}(B)\\subseteq Y$. Then at most $|N_{I'}(B)|\\leq d|B|\\leq d|Y'|\\leq d(d+1)r_1 +d^2r_2$ vertices will be moved out of $I'$.\nSo after executing $I' \\leftarrow  I'\\setminus N_{I'}(B)$ in Step 8 for the first time, the number of $Y$-vertices not in $I'$ is  at most\n\n", "itemtype": "equation", "pos": 35352, "prevtext": "\nEach vertex in $I'$ is of degree at most $d$ in $G[V\\setminus C']$ by \\refl{112}.\nSo any vertex in  $N(I^*)\\setminus C^*$ is of degree at most $d$ in $G[V\\setminus C^*]$, which means that there is no bad vertex.\nWe conclude that: if $C^* = C'$, then $N_{I'}(B)$ will be empty in the next step and Step 8 will not be\nexecuted any more.\n\nBy this property, we know that only when the size of $C'$ decreases the algorithm is possibly to execute the next iteration of Steps 7 and 8.\nInitially, $|C'|\\leq \\alpha(G)$ since each $(d+1)$-star contains\nat least one vertex in a $d$-degree deletion set. Therefore, Steps 7,8 and 9 of ${\\tt decomposition}(G)$ run in $O(\\alpha(G)n^{1/2}m)$ time.\n\nIn total, ${\\tt decomposition}(G)$ uses $O(\\alpha(G)n^{1/2}m)=O(n^{3/2}m)$ time.\n\n\\llem{time}{Algorithm ${\\tt decomposition}(G)$ runs in $O(n^{3/2}m)$ time and returns $(C,I)$\nsuch that $(I, C, T, J)$ is a $d$-bounded decomposition of $G$,\nwhere $ T=N(I)\\setminus C$ and $J=V(G)\\setminus(I\\cup C\\cup T)$.\n}\n\n\\refl{time} is not enough to prove \\reft{normal_dc}, because $C$ and $I$ returned by ${\\tt decomposition}(G)$ may be empty sets.\nWe still need to show that $I$ will not be empty if the size of the graph $G$ is large (compared to $\\alpha(G)$).\n\n\n\\medskip\n\n\nWe prove the following lemma to show the size condition.\n\\llem{size}{Algorithm ${\\tt decomposition}(G)$ returns $(C,I)$ such that\n\n", "index": 19, "text": "$$|V\\setminus (C\\cup I)| \\leq (d^3+4d^2+5d+3)\\alpha (G).$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex10.m1\" class=\"ltx_Math\" alttext=\"|V\\setminus(C\\cup I)|\\leq(d^{3}+4d^{2}+5d+3)\\alpha(G).\" display=\"block\"><mrow><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>V</mi><mo>\u2216</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>C</mi><mo>\u222a</mo><mi>I</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">|</mo></mrow><mo>\u2264</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><msup><mi>d</mi><mn>3</mn></msup><mo>+</mo><mrow><mn>4</mn><mo>\u2062</mo><msup><mi>d</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>5</mn><mo>\u2062</mo><mi>d</mi></mrow><mo>+</mo><mn>3</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mi>\u03b1</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.00164.tex", "nexttext": "\nNow we have not analyzed the first execution of $(C',I')\\leftarrow {\\tt basic}(G[C'\\cup I'],C',I')$ in Step~8 yet.\n\nFor each $i\\geq 1$, assume that $x_i$ vertices are moved out of $C'$ in the $i$th execution of $(C',I')\\leftarrow {\\tt basic}(G[C'\\cup I'],C',I')$ in Step 8. Then at most $(d+1)x_i$ vertices, the set of which is denoted by $Y_i$,\nare moved out of $I'$ in this operation. In the $(i+1)$th execution of $I' \\leftarrow I'\\setminus N_{I'}(B)$, at most $d(d+1)x_i$ vertices will be moved out of $I'$ since $N_{I'}(B) \\subseteq N(Y_i)\\cap I' \\subseteq N(Y_i)\\cap Y$.\nNote that if the algorithm executes Step~8 only for $i$ iterations, then we simply assume that $0$ vertices will be moved out of $I'$ in the $(i+1)$th iteration. In these two operations -- the $i$th execution of $(C',I')\\leftarrow {\\tt basic}(G[C'\\cup I'],C',I')$ and the $(i+1)$th execution of $I' \\leftarrow I'\\setminus N_{I'}(B)$,\nat most  $(d+1)^2x_i$ vertices are moved out of $I'$.\n\nFinally, the number of $Y$-vertices not in $I=I'$ is at most\n\n", "itemtype": "equation", "pos": 37082, "prevtext": "\n}\n\\pff{\n\n\nAfter Step 5, $S$ will not be updated anymore. In our algorithm, we assume that $S$ is the one after Step~5 and will not change anymore. Note that\n$C'$ and $I'$ are created and updated only after Step 5.\n\nWe let $s$ denote the number of $(d+1)$-stars in $S$. Then $s\\leq \\alpha(G)$ and $|X|=(d+2)s$.\nRecall that $S_{\\leq d+1}$ is a $_{\\leq} (d+1)$-star packing from $X$ to $Y$ computed in Step~4.\nLet $s_0$ be the number of $(d+1)$-stars in $S_{\\leq d+1}$. Now we have $s_0\\leq s$, otherwise $S$ would have been updated in Step~5.\n\nIn Step 6, initially $Y'$ is the set of leaves of  $_{\\leq} (d+1)$-stars in $S_{\\leq d+1}$ centered at vertices in $X'$. We let $Y_0=Y'$ in this step. Let $r_1$ be the number of $(d+1)$-stars in $S_{\\leq d+1}$ centered at\nsome vertex in $X'$ and $r_2$ be the number of other stars in $S_{\\leq d+1}$ centered at a vertex in $X'$. Then we have that $r_1+r_2\\leq |X'|$ and $|Y_0|=|Y'|\\leq (d+1)r_1 +dr_2$.\nThis is not the finial size of $Y'$, since some vertices more may be included to $Y'$ in Step~8.\nLet $c_1$ denote the size of $C'$ in Step 6. Then we have that $c_1+r_1=s_0\\leq s$ and $c_1+r_1+r_2\\leq |X|$.\n\nWe consider the first execution of Step~8.\nIf $N_{I'}(B)\\neq \\emptyset$, then vertices in $N_{I'}(B)$ will be moved out of $I'$ and then will be included to $Y'$. Note that each vertex has degree at most $d$ in $G[Y]$, $B\\subseteq Y'\\subseteq Y$ and  $N_{I'}(B)\\subseteq Y$. Then at most $|N_{I'}(B)|\\leq d|B|\\leq d|Y'|\\leq d(d+1)r_1 +d^2r_2$ vertices will be moved out of $I'$.\nSo after executing $I' \\leftarrow  I'\\setminus N_{I'}(B)$ in Step 8 for the first time, the number of $Y$-vertices not in $I'$ is  at most\n\n", "index": 21, "text": "\n\\[\\begin{array}{*{20}{l}}\n&|Y_0|+|N_{I'}(B)|\\leq (d+1)r_1 +dr_2+(d(d+1)r_1 +d^2r_2)\\\\\n=&(d+1)^2r_1 +d(d+1)r_2.\n\\end{array}\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex11.m1\" class=\"ltx_Math\" alttext=\"\\begin{array}[]{*{20}{l}}&amp;|Y_{0}|+|N_{I^{\\prime}}(B)|\\leq(d+1)r_{1}+dr_{2}+(d(%&#10;d+1)r_{1}+d^{2}r_{2})\\\\&#10;=&amp;(d+1)^{2}r_{1}+d(d+1)r_{2}.\\end{array}\" display=\"block\"><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd/><mtd columnalign=\"left\"><mrow><mrow><mrow><mo stretchy=\"false\">|</mo><msub><mi>Y</mi><mn>0</mn></msub><mo stretchy=\"false\">|</mo></mrow><mo>+</mo><mrow><mo stretchy=\"false\">|</mo><mrow><msub><mi>N</mi><msup><mi>I</mi><mo>\u2032</mo></msup></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>\u2264</mo><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msub><mi>r</mi><mn>1</mn></msub></mrow><mo>+</mo><mrow><mi>d</mi><mo>\u2062</mo><msub><mi>r</mi><mn>2</mn></msub></mrow><mo>+</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msub><mi>r</mi><mn>1</mn></msub></mrow><mo>+</mo><mrow><msup><mi>d</mi><mn>2</mn></msup><mo>\u2062</mo><msub><mi>r</mi><mn>2</mn></msub></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd columnalign=\"left\"><mo>=</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mrow><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup><mo>\u2062</mo><msub><mi>r</mi><mn>1</mn></msub></mrow><mo>+</mo><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msub><mi>r</mi><mn>2</mn></msub></mrow></mrow><mo>.</mo></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr></mtable></math>", "type": "latex"}, {"file": "1601.00164.tex", "nexttext": "\nNote that $c_1=\\sum_i x_i+|C|$, $c_1+r_1\\leq s={\\frac{|X|}{d+2}}$ and $r_1+r_2+c_1\\leq |X|$.\n\nWe have that\n\n", "itemtype": "equation", "pos": 38235, "prevtext": "\nNow we have not analyzed the first execution of $(C',I')\\leftarrow {\\tt basic}(G[C'\\cup I'],C',I')$ in Step~8 yet.\n\nFor each $i\\geq 1$, assume that $x_i$ vertices are moved out of $C'$ in the $i$th execution of $(C',I')\\leftarrow {\\tt basic}(G[C'\\cup I'],C',I')$ in Step 8. Then at most $(d+1)x_i$ vertices, the set of which is denoted by $Y_i$,\nare moved out of $I'$ in this operation. In the $(i+1)$th execution of $I' \\leftarrow I'\\setminus N_{I'}(B)$, at most $d(d+1)x_i$ vertices will be moved out of $I'$ since $N_{I'}(B) \\subseteq N(Y_i)\\cap I' \\subseteq N(Y_i)\\cap Y$.\nNote that if the algorithm executes Step~8 only for $i$ iterations, then we simply assume that $0$ vertices will be moved out of $I'$ in the $(i+1)$th iteration. In these two operations -- the $i$th execution of $(C',I')\\leftarrow {\\tt basic}(G[C'\\cup I'],C',I')$ and the $(i+1)$th execution of $I' \\leftarrow I'\\setminus N_{I'}(B)$,\nat most  $(d+1)^2x_i$ vertices are moved out of $I'$.\n\nFinally, the number of $Y$-vertices not in $I=I'$ is at most\n\n", "index": 23, "text": "$$\ny\\leq(d+1)^2r_1 +d(d+1)r_2 +\\sum_i{(d+1)^2x_i}.\n$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex12.m1\" class=\"ltx_Math\" alttext=\"y\\leq(d+1)^{2}r_{1}+d(d+1)r_{2}+\\sum_{i}{(d+1)^{2}x_{i}}.\" display=\"block\"><mrow><mrow><mi>y</mi><mo>\u2264</mo><mrow><mrow><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup><mo>\u2062</mo><msub><mi>r</mi><mn>1</mn></msub></mrow><mo>+</mo><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msub><mi>r</mi><mn>2</mn></msub></mrow><mo>+</mo><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mi>i</mi></munder><mrow><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup><mo>\u2062</mo><msub><mi>x</mi><mi>i</mi></msub></mrow></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.00164.tex", "nexttext": "\nThis inequality can be used to prove \\reft{normal_dc}.\n\nThe number of $X$-vertices not in $C=C'$ is $|X|-|C|$. By $|X|=(d+2)s\\leq (d+2)\\alpha(G)$, we have\n\n\n", "itemtype": "equation", "pos": 38396, "prevtext": "\nNote that $c_1=\\sum_i x_i+|C|$, $c_1+r_1\\leq s={\\frac{|X|}{d+2}}$ and $r_1+r_2+c_1\\leq |X|$.\n\nWe have that\n\n", "index": 25, "text": "\n\\[\\begin{array}{*{20}{l}}\ny& \\le &(d+1)^2(r_1+c_1-|C|)+d(d+1)(|X|-r_1-c_1)\\\\\n{}& \\le & (d+1)^2{\\frac{|X|}{d+2}}+ d(d+1)|X|\\\\\n& = & {\\frac{(d+1)(d^2+3d+1)}{d+2}}|X|.\n\\end{array}\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex13.m1\" class=\"ltx_Math\" alttext=\"\\begin{array}[]{*{20}{l}}y&amp;\\leq&amp;(d+1)^{2}(r_{1}+c_{1}-|C|)+d(d+1)(|X|-r_{1}-c_%&#10;{1})\\\\&#10;&amp;\\leq&amp;(d+1)^{2}{\\frac{|X|}{d+2}}+d(d+1)|X|\\\\&#10;&amp;=&amp;{\\frac{(d+1)(d^{2}+3d+1)}{d+2}}|X|.\\end{array}\" display=\"block\"><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><mi>y</mi></mtd><mtd columnalign=\"left\"><mo>\u2264</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><msub><mi>r</mi><mn>1</mn></msub><mo>+</mo><msub><mi>c</mi><mn>1</mn></msub></mrow><mo>-</mo><mrow><mo stretchy=\"false\">|</mo><mi>C</mi><mo stretchy=\"false\">|</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mi>X</mi><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><msub><mi>r</mi><mn>1</mn></msub><mo>-</mo><msub><mi>c</mi><mn>1</mn></msub></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mo>\u2264</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup><mo>\u2062</mo><mfrac><mrow><mo stretchy=\"false\">|</mo><mi>X</mi><mo stretchy=\"false\">|</mo></mrow><mrow><mi>d</mi><mo>+</mo><mn>2</mn></mrow></mfrac></mrow><mo>+</mo><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">|</mo><mi>X</mi><mo stretchy=\"false\">|</mo></mrow></mrow></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mo>=</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mfrac><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msup><mi>d</mi><mn>2</mn></msup><mo>+</mo><mrow><mn>3</mn><mo>\u2062</mo><mi>d</mi></mrow><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mi>d</mi><mo>+</mo><mn>2</mn></mrow></mfrac><mo>\u2062</mo><mrow><mo stretchy=\"false\">|</mo><mi>X</mi><mo stretchy=\"false\">|</mo></mrow></mrow><mo>.</mo></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr></mtable></math>", "type": "latex"}, {"file": "1601.00164.tex", "nexttext": "\n}\n\n\\refl{time} and the proof in \\refl{size} imply \\reft{normal_dc}.\nThe set $X$ after Step 5 in ${\\tt decomposition}(G)$ is the special $d$-degree deletion set in \\reft{normal_dc}.\nSo ${\\tt decomposition}(G)$ finds the special $d$-degree deletion set and\n$d$-bounded decomposition in \\reft{normal_dc} in $O(n^{3/2}m)$ time.\n\n\\subsection{The algorithm for \\reft{our-thm}}\nNeither \\reft{normal_dc} nor \\refl{size} can get the size condition in \\reft{our-thm} directly.\nWe use the following algorithm in Figure~\\ref{bdd} for \\reft{our-thm}.\n\n\\begin{figure*}\n\n\\rule{\\linewidth}{0.4mm}\n\n\\textbf{Input}: A graph $G=(V,E)$. \\\\\n\\textbf{Output}: Two subsets of vertices $C$ and $I$ satisfying the conditions in \\reft{our-thm}.\n\n\\begin{enumerate}\n\\item $C, I \\leftarrow \\emptyset$.\n\\item \\textbf{Do} \\{ $(C',I') \\leftarrow {\\tt decomposition}(G[V\\setminus (C\\cup I)])$, $C \\leftarrow C\\cup C'$ and $I \\leftarrow I\\cup I'$ \\}\\\\\n\\textbf{while} $I'\\neq \\emptyset$.\n\\item \\textbf{Return} $(C,I)$.\n\\end{enumerate}\n\n\\rule{\\linewidth}{0.4mm}\n\\caption{Algorithm ${\\tt BDD}(G)$}\\label{bdd}\n\\end{figure*}\n\nFrom the second iteration of Step~2 in ${\\tt BDD}(G)$, each execution of $I \\leftarrow I\\cup I'$ will include at least  one new vertex to $I$.\nSo ${\\tt decomposition}(G[V\\setminus (C\\cup I)])$ will be called for at most $n+1$ times.\nAlgorithm ${\\tt BDD}(G)$ runs in $O(n^{5/2}m)$ time. Furthermore, if ${\\tt decomposition}(G'=G[V\\setminus (C\\cup I)])$ returns\ntwo empty sets, then by \\refl{size} we have $|V(G')|=|V(G')\\setminus (C\\cup I)| \\leq (d^3+4d^2+5d+3)\\alpha (G')$. These together with\n\\refl{time} and \\refl{size} imply \\reft{our-thm}.\n\n\n\\section{Concluding Remarks}\nIn this paper, we provide a refined version of the generalized Nemhauser-Trotter-Theorem,\nwhich applies to \\textsc{Bounded-Degree Vertex Deletion} and for any  $d\\geq 0$ can get a linear-vertex problem kernel for the problem parameterized by the solution size.\nThis is the first linear-vertex kernel for the case that $d\\geq 3$.\nOur algorithms and proofs are based on extremal\ncombinatorial arguments, while the original NT-Theorem uses linear programming relaxations~\\cite{NT-theorem}.\nIt seems no way to generalize the linear programming relaxations used for the original NT-Theorem  to\n\\textsc{Bounded-Degree Vertex Deletion}~\\cite{FG:gNT}.\nA crucial technique in this paper is the\n$d$-bounded decomposition.\nTo find such kinds of decompositions, we follow the ideas to find crown decompositions~\\cite{A:crown2}\nand the algorithmic strategy in~\\cite{FG:gNT}. However, we use more ticks and can finally obtain the linear\nsize condition.\n\nAs pointed out by Fellows et al.~\\cite{FG:gNT}, the results for \\textsc{Bounded-Degree Vertex Deletion} in this paper can be modified for the problem of packing stars.\n\n\nWe believe that the new decomposition technique can be used to get local optimization properties and kernels for more deletion and packing problems.\n\nOur algorithm obtains a kernel of $O(d^3k)$ vertices for \\textsc{Bounded-Degree Vertex Deletion} when $d$ is also part of the input. Another interesting problem for further study\nis to investigate the lower bound of the kernel size for the dependency on $d$.\n\n\\section*{Acknowledgement}\nThe author was supported in part by National Natural Science Foundation of China under the Grant\n61370071.\n\n\n\\begin{thebibliography}{00}\n\n\n\n\n\\bibitem{A:crown}\nF.N. Abu-Khzam, R.L. Collins, M.R. Fellows, M.A. Langston, W.H. Suters, C.T. Symons:\nKernelization algorithms for the Vertex Cover problem: Theory and experiments,\nin: Proceedings of the 6th Workshop on Algorithm Engineering and Experiments (ALENEX 04), ACM/SIAM, (2004) 62--69.\n\n\\bibitem{A:crown2}\nF.N. Abu-Khzam, M.R. Fellows, M.A. Langston, W.H. Suters:\nCrown structures for vertex cover kernelization,\nTheory Comput. Syst. 41 (3) (2007) 411--430.\n\n\\bibitem{BBH:plex}\nB. Balasundaram, S. Butenko, I.V. Hicks:\nClique relaxations in social\nnetwork analysis: The maximum k-plex problem.\nOperations Research,\n59(1) (2011) 133--142.\n\n\\bibitem{BRH:extension}\nR. Bar-Yehuda, D. Rawitz, D. Hermelin:\nAn extension of the Nemhauser \\& Trotter theorem to generalized vertex cover with applications,\nSIAM J. Discrete Math. 24 (1) (2010) 287--300.\n\n\\bibitem{BE:WVC}\nR. Bar-Yehuda, S. Even:\nA local-ratio theorem for approximating the weighted vertex cover problem,\nAnn. Discrete Math. 25 (1985) 27--45.\n\n\\bibitem{BBNU:treewidth}\nN. Betzler, R. Bredereck, R. Niedermeier, J. Uhlmann:\nOn bounded-degree vertex deletion parameterized by treewidth,\nDiscrete Applied Mathematics\n160(1-2) (2012) 53--60.\n\n\\bibitem{CKJ:VC}\nJ. Chen, I.A. Kanj, W. Jia:\nVertex cover: Further observations and further improvements,\nJ. Algorithms 41 (2) (2001) 280--301.\n\n\\bibitem{CF:copath}\nZ.-Z. Chen, M. Fellows, B. Fu, H. Jiang, Y. Liu, L. Wang, B. Zhu:\nA linear kernel for co-path/cycle packing,\nin: Proceedings of the 6th International Conference on Algorithmic Aspects in Information and Management (AAIM \u00a1\u00af10), LNCS 6124, Springer, (2010) 90--102.\n\n\\bibitem{CC:WVC}\nM. Chleb\\'{i}k, J. Chleb\\'{i}kov\\'{a}:\nCrown reductions for the minimum weighted vertex cover problem,\nDiscrete Appl. Math. 156 (2008) 292--312.\n\n\\bibitem{cfj:crown}\nB. Chor, M.R. Fellows, D.W. Juedes:\nLinear kernels in linear time, or how to save k colors in $O(n^2)$ steps,\nin: Proceedings of the 30th International\nWorkshop on Graph-Theoretic Concepts in Computer Science (WG \u00a1\u00af04), LNCS 3353, Springer, (2004) 257--269.\n\n\\bibitem{cygan}\nM. Cygan, M. Pilipczuk, M. Pilipczuk, J.O. Wojtaszczyk:\nAn Improved FPT Algorithm and a Quadratic Kernel for Pathwidth One Vertex Deletion.\nAlgorithmica 64(1) (2012): 170--188\n\n\n\\bibitem{dell}\nH. Dell, D. van Melkebeek:\nSatisfiability Allows No Nontrivial Sparsification unless the Polynomial-Time Hierarchy Collapses.\nJ. ACM 61(4)(2014): 23:1--23:27\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\bibitem{ET:bm}\nS. Even and R. E. Tarjan:\nAn $O(n^{2.5})$ algorithm for maximum matching in general graphs.\nIn proceedings of the 16th Annual Symposium on the Foundations of Computer Science. (1975) 100-112.\n\n\\bibitem{FG:gNT}\nM. R. Fellows, J. Guo, H. Moser, and R. Niedermeier:\nA generalization of Nemhauser and Trotter's local optimization theorem.\nJournal of Computer and System Sciences 77(2011) 1141--1158.\n\n\\bibitem{FG:gNTc}\nM. R. Fellows, J. Guo, H. Moser, and R. Niedermeier:\nA generalization of Nemhauser and Trotter's local optimization theorem.\nin: Proceedings of the 26th\nInternational Symposium on Theoretical Aspects of Computer Science (STACS \u00a1\u00af09),\nIBFI Dagstuhl, Germany, 2009, pp. 409--420.\n\n\\bibitem{fomin}\nF.V. Fomin, D. Lokshtanov, N. Misra, G. Philip, S. Saurabh:\nHitting forbidden minors: Approximation and Kernelization. STACS 2011: 189--200\n\n\n\\bibitem{hochbaum}\nD.S. Hochbaum:\nApproximation algorithms for the set covering and vertex cover problems,\nSIAM J. Comput. 11 (3) (1982) 555--556.\n\n\\bibitem{hk:bm}\nJ. Hopcroft and R.M. Karp:\nAn $O(n^{2.5})$ algorithm for maximum matching in bipartite graphs.\nSIAM J. Comput. 2(4) (1973) 225--231.\n\n\\bibitem{khuller}\nS. Khuller:\nThe Vertex Cover problem,\nSIGACT News 33 (2) (2002) 31--33.\n\n\\bibitem{khmn}\nC. Komusiewicz, F. H{u}ffner, H. Moser, R. Niedermeier:\nIsolation concepts for efficiently enumerating dense subgraphs,\nTheoret. Comput. Sci. 410 (38-40) (2009) 3640--3654.\n\n\\bibitem{lp}\nD. Lokshtanov, N. S. Narayanaswamy, V. Raman, M. S. Ramanujan, S. Saurabh:\nFaster Parameterized Algorithms Using Linear Programming.\nACM Transactions on Algorithms 11(2): 15 (2014)\n\n\n\\bibitem{NT-theorem}\nG.L. Nemhauser, L.E. Trotter:\nVertex packings: Structural properties and algorithms,\nMath. Program. 8 (1975) 232--248.\n\n\\bibitem{NRT}\nN. Nishimura, P. Ragde, D.M. Thilikos:\nFast fixed-parameter tractable algorithms for nontrivial generalizations of Vertex Cover,\nDiscrete Appl. Math. 152 (1-3) (2005) 229--245.\n\n\\bibitem{SF:plex}\nS. B. Seidman and B. L. Foster:\nA graph-theoretic generalization of the clique concept.\nJournal of Mathematical Sociology,\n6 (1978) 139--154.\n\n\\bibitem{fvs}\nS. Thomass\\'{e}: A $4k^2$ kernel for feedback vertex set. ACM Transactions on Algorithms 6(2) (2010)\n\n\\bibitem{X:vc3}\nM. Xiao:\nA note on vertex cover in graphs with maximum degree 3,\nIn: M.T. Thai and S. Sahni (Eds.): COCOON 2010, LNCS 6196, (2010) 150--159.\n\n\\end{thebibliography}\n\n", "itemtype": "equation", "pos": 38732, "prevtext": "\nThis inequality can be used to prove \\reft{normal_dc}.\n\nThe number of $X$-vertices not in $C=C'$ is $|X|-|C|$. By $|X|=(d+2)s\\leq (d+2)\\alpha(G)$, we have\n\n\n", "index": 27, "text": "\n\\[\\begin{array}{*{20}{l}}\n|V\\setminus (C\\cup I)| & = & |X|-|C|+y\\\\\n{}& \\le & {\\frac{(d+1)(d^2+3d+1)}{d+2}}|X|+|X|\\\\\n  & \\le & (d^3+4d^2+5d+3)\\alpha (G). \\\\\n\\end{array}\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex14.m1\" class=\"ltx_Math\" alttext=\"\\begin{array}[]{*{20}{l}}|V\\setminus(C\\cup I)|&amp;=&amp;|X|-|C|+y\\\\&#10;&amp;\\leq&amp;{\\frac{(d+1)(d^{2}+3d+1)}{d+2}}|X|+|X|\\\\&#10;&amp;\\leq&amp;(d^{3}+4d^{2}+5d+3)\\alpha(G).\\\\&#10;\\end{array}\" display=\"block\"><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><mrow><mo stretchy=\"false\">|</mo><mrow><mi>V</mi><mo>\u2216</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>C</mi><mo>\u222a</mo><mi>I</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">|</mo></mrow></mtd><mtd columnalign=\"left\"><mo>=</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mrow><mo stretchy=\"false\">|</mo><mi>X</mi><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mo stretchy=\"false\">|</mo><mi>C</mi><mo stretchy=\"false\">|</mo></mrow></mrow><mo>+</mo><mi>y</mi></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mo>\u2264</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mfrac><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msup><mi>d</mi><mn>2</mn></msup><mo>+</mo><mrow><mn>3</mn><mo>\u2062</mo><mi>d</mi></mrow><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mi>d</mi><mo>+</mo><mn>2</mn></mrow></mfrac><mo>\u2062</mo><mrow><mo stretchy=\"false\">|</mo><mi>X</mi><mo stretchy=\"false\">|</mo></mrow></mrow><mo>+</mo><mrow><mo stretchy=\"false\">|</mo><mi>X</mi><mo stretchy=\"false\">|</mo></mrow></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mo>\u2264</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><msup><mi>d</mi><mn>3</mn></msup><mo>+</mo><mrow><mn>4</mn><mo>\u2062</mo><msup><mi>d</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>5</mn><mo>\u2062</mo><mi>d</mi></mrow><mo>+</mo><mn>3</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mi>\u03b1</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>.</mo></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr></mtable></math>", "type": "latex"}]