[{"file": "1601.07457.tex", "nexttext": " \nwhere $\\text{dist()}$ computes the euclidean distance between two points in the 3D space. \nNote that, theoretically, Gondola works with any motor configuration {e.g.,\\xspace} number of motors, position of motors. Nevertheless, because the pulling wires are tensioned only by gravity, to achieve a good range of movement, Gondola needs at least three properly positioned motors.  \n\nOnce the required spooling distance is computed for each motor, the System Controller sends a command to the Motor Controller and waits for an acknowledgment (ACK), indicating that gondola reached the required position. \nThen, the System Controller starts logging the experiment output until a predefined event occurs {e.g.,\\xspace} a timeout or a specific output from the sensor node, and the System Controller can proceed processing the next planned position (if any).\n\n\\subsection{Motor Controller}\n\\begin{figure}\n\t\\includegraphics[width=0.48\n\t\\textwidth]{motor_controller}\n\t\\caption{Gondola's Motor Controller (green pcb). The shield hosts an ethernet interface and a stepper drivers (violet pcb) for each of the four spooling motors. Computation and serial communication is performed by the underneath Arduino Mega (blue pcb).}\n\t\\label{fig:motor}\n\\end{figure}\n\nThe Motor Controller is a combination of hardware and software that drives a series of motors, each one precisely spooling/unspooling a pulling wire according to the instructions received by the System Controller. For simplicity and cost effectiveness, we designed the Motor Controller as a shield for Arduino Mega\\footnote{\\url{http://www.arduino.cc/en/Main/ArduinoBoardMega2560}} that can interface with up to four stepper motors via ethernet cables. \n\nNote that the current version of Gondola relies only on the stepper motors to control the spooled length of the pulling wires, with no feedback control. Thus, it requires a constant calibration to keep an unbiased information of length actually spooled by each motor. \nTo overcome this problem, it is possible in the future to add a rotary encoder to each one of the spooling motors and provide feedback to our system. The Motor Controller allows such modification, interfacing four of the eight ethernet wires with the Arduino's GPIO (the other four wires are used to control the stepper motor). \n\n\\subsection{Spooling Motor(s)}\n\\begin{figure}\n\t\\includegraphics[width=0.48\n\t\\textwidth]{working_gondola}\n\t\\caption{Gondola's moving an heavy power supply and a wireless device.}\n\t\\label{fig:gondola}\n\\end{figure}\n\nOur robotic infrastructure moves the Carriage (and the wireless sensor) by changing the length of wire, spooled by each motor. \nThe characteristics of these motors are therefore very important for the overall performance of the system. \nWhile it is obvious that movement precision is important, it is not obvious that other characteristics, such as the holding torque (the capacity to maintain a position, when the carriage is loaded), are equally important (see Fig.~\\ref{fig:gondola}). \nMoreover, to improve usability, motors must spool fast and smoothly.\n\nFor our implementation, we choose four 42BYGHW811 Wantai stepper motors, with 1.8$^{\\circ}$ movement precision and a holding torque of 4800 g-cm. Because each motor drive a wheel of radius 2\\,cm (no gears), the resulting movement precision is ($\\pi$ 4)1.8/360 = 0.062\\,cm, while the holding force is 2400\\,g. \nNote that, because of the limited diameter chosen in our implementation, the pulling wire will spool several times around the spooling wheel, changing its radius and, thus, the spooled length, speed and force. As we will see in the evaluation section, this will affect the precision of our system.\nTo reduce the aforementioned problem, each spool used a special 0.01\\,cm-thin fishing line with minimal elasticity and capable of holding up to 7000\\,g. \n\n\n\\section{Evaluation}\n\\label{sec:evaluation}\n\n\\begin{figure}[t]\n\\begin{center}\n\t\\subfloat[Gondola's positioning error for linear 1-dimensional movements. The less wire motors spool, the higher the relative error.]{\n\t\\includegraphics[width=0.48\n\t\\textwidth]{linear_error}\n\t\\label{fig:linear_error}\n\t}\\\\\t\n\t\\subfloat[Gondola's positioning error for spatial 3-dimensional movements. The further Gondola moves from the center of the room, the higher the relative error.]{\n\t\\includegraphics[width=0.48\n\t\\textwidth]{spatial_error}\n\t\\label{fig:spatial_error}\n\t}\n\t\\end{center}\n\\caption{Gondola relative positioning error in 1- and 3-dimensional spaces. For comparison, the horizontal black line indicates the relative error produced by an absolute movement error of 1\\,cm.}\n\\label{fig:error}\n\\end{figure}\n\n\\begin{table}\n\t\\begin{center}\n\\begin{tabular}{|c|ccc|ccc|}\n\\hline\n\\multirow{2}{*}{Position} & \\multicolumn{3}{c|}{Absolute} & \\multicolumn{3}{c|}{Normalized}\\\\ \\cline{2-7}\n & x & y & z & x & y & z\\\\\n\\hline\n\\hline\n\\multicolumn{7}{|c|}{Linear Experiments}\\\\\n\\hline\n1 & 50 & - & - & 0.07 & - & -\\\\\n2 & 100 & - & - & 0.14 & - & -\\\\\n3 & 150 & - & - & 0.21 & - & -\\\\\n4 & 200 & - & - & 0.28 & - & -\\\\\n5 & 250 & - & - & 0.35 & - & -\\\\\n6 & 300 & - & - & 0.42 & - & -\\\\\n7 & 350 & - & - & 0.49 & - & -\\\\\n8 & 400 & - & - & 0.56 & - & -\\\\\n9 & 450 & - & - & 0.63 & - & -\\\\\n10 & 500 & - & - & 0.70 & - & -\\\\\n11 & 550 & - & - & 0.77 & - & -\\\\\n12 & 600 & - & - & 0.84 & - & -\\\\\n13 & 650 & - & - & 0.91 & - & -\\\\\n\\hline\n\\hline\n\\multicolumn{7}{|c|}{Spatial Experiments}\\\\\n\\hline\n1 & 355 & 196 & 310 & 0.54 & 0.50 & 0.99\\\\\n2 & 405 & 86 & 240 & 0.61 & 0.22 & 0.77\\\\\n3 & 495 & 196 & 240 & 0.75 & 0.50 & 0.77\\\\\n\\hline\n\\end{tabular}\n\\end{center}\n\\caption{Starting positions for the linear and spatial experiments.}\n\\label{tab:positions}\n\\end{table}\n\nIn order to evaluate the characteristics of Gondola, we measured the accuracy of each individual motor (1D linear movement) and later, the overall system (3D spatial movement). In particular, we set the position of Gondola to a set of starting coordinates (summarized in Table~\\ref{tab:positions}) and measured the relative error for a fixed-length movement (25 and 30\\,cm for the linear and spatial movements, respectively).\n\nIn the case of the linear spooling distance, the results in Figure~\\ref{fig:linear_error} shows that the more wire is spooled, the smaller the error. This is due to the fact that, when lots of wire is spooled, the diameter of the spooling wheel increases, enlarging the spooled lengths.\n\nThis affects in order Gondola's movement in 3-dimensional space. As soon as Gondola is positioned in the center of the experimental room, all the motors' spooled distance are long (position 1, Fig.~\\ref{fig:spatial_error}) and Gondola's position error in space is very low. \nAs soon as Gondola moves towards one angle of the room (position 2 and 3, Fig.~\\ref{fig:spatial_error}), few motors' spooled distance reduce drastically, increasing the linear positioning error and, thus, the spatial error in 3-dimensional space.\n\n\\section{Discussion}\n\\label{sec:discussion}\nIn this paper we presented Gondola, a parametric robotic system that provides an accurate and repeatable movements for Wireless Sensor Networks. Thanks to its flexibility, Gondola can be easily adapted to different environment and testing scenarios, from linear movements (using only 1 motor) to 3-dimensional movements (using 3 or more motors).\n\nNevertheless, accurately spool the desired wire length has proven to be one of the main challenges of Gondola. In the future, we plan to explore different solution to overcome this problem. From adding a feedback loop, based on rotary encoders, to substitute the actual simple wires (fishing lines) with ball-chain wires. We argue that precisely spooling the desired length of wire, together with an accurate measurement of the motors' position are the keys to improve even more the positioning accuracy of Gondola.\n\n\n\n\\bibliographystyle{abbrv} \n {\n \\small\n \\bibliography{library}\n }\n\n\n\n\n", "itemtype": "equation", "pos": -1, "prevtext": "\n\t\n\\title{Gondola: a Parametric Robot Infrastructure\\\\for Repeatable Mobile Experiments}\n\n\\author{\n{Marco Cattani, Ioannis Protonotarios}\n\\vspace{1.5mm}\\\\\n\\fontsize{10}{10}\\selectfont\\itshape m.cattani@tudelft.nl, i.protonotarios@tudelft.nl\\\\\n\\fontsize{10}{10}\\selectfont\\itshape Delft University of Technology, The Netherlands\n}\n\n\\maketitle\n\n\\begin{abstract}\nWhen deploying a testbed infrastructure for Wireless Sensor Networks (WSNs), one of the most challenging feature is to provide repeatable mobility. Wheeled robots, usually employed for such tasks, strive to adapt to the wide range of environments where WSNs are deployed, from chaotic office spaces to potato fields in the farmland. For this reson, these robot systems often require expensive customization steps that, for example, adapt their localization and navigation system. \n\nTo avoid these issues, in this paper we present the design of Gondola, a parametric robot infrastructure based on pulling wires, rather than wheels, that avoids the most common problems of wheeled robot and easily adapts to many WSN's scenarios. \nDifferent from wheeled robots, wich movements are constrained on a 2-dimensional plane, Gondola can easily move in 3-dimensional spaces with no need of a complex localization system and an accuracy that is comparable with off-the-shelf wheeled robots.\n\\end{abstract}\n\n\\section{Introduction}\n\\label{sec:intro}\n\nProviding a repeatable movement is essential for a wide range of WSN's applications, from automated testing to optimal sensor placements. \n\nTo this end, several WSN mobile infrastructures couple wireless sensors with wheeled small-scale robots that are cheap and easily available on the market. Unfortunately, wheeled robots present several drawbacks that practically limit the range of mobile experiments a researcher can run.\nFirstly, in order to navigate, affordable wheeled robots often require a localization infrastructure that accurately estimate the robot's position and heading: from simple black lines on the ground ~\\cite{Rensfelt2010} to complex tracking systems based on a camera~\\cite{Johnson2006}.\nSecondly, these mobile robots rely on batteries as source of power, limiting the maximum duration of an experiment and imposing a periodic recharging task.\nFinally, and most importantly, wheeled robots can only move on a horizontal 2-dimensional plane (possibly free of obstacles such as furniture and stairs), heavily limiting the movement space of the experiment.\n\n\nTo avoid the aforementioned problems, we present the design of Gondola, a robotic infrastructure that moves through cables, rather than wheels. Inspired by plotters based on polar coordinates~\\cite{DanRoyer,JurgLehni202,SandyNoble} our robotic system embeds the mobile wireless sensor in a carriage, which is connected trough thin wires to one or more spooling motor, depending on the required degree-of-freedom of the movement (see Fig.~\\ref{fig:3d}).\n\n\nBecause the design of Gondola is completely parametric (both the location and the number of spooling motors), it can be easily adapted to different environments (small rooms, halls, outdoor) and needs (linear motion, volumetric scannings). Moreover, because its movement is not bounded to the ground plane, Gondola is less affected by obstacles than traditional wheeled robots. \n\nPreliminary experiments show that, in a 6.5$\\times$3.9$\\times$3.1 meter room, Gondola repeatedly achieves a positioning error of less than 2\\,cm. This error can be further reduced with a proper design of the spooling mechanism, a topic we briefly discuss in Section~\\ref{sec:discussion}.\n\nFinally, Gondola parametric infrastructure is completely open-source. The design files of both hardware and software are available at \\url{http://github.com/iprotonotarios/gondola}. \n\n\\section{The Gondola Platform}\n\\label{sec:mechanism}\n\n\\begin{figure}\n\t\\begin{center}\n\t\\includegraphics[width=0.48\n\t\\textwidth]{gondola_3d}\n\t\\caption{Example of Gondola infrastructure in a 3-dimensional space. In this example the carriage (C) is attache to three spooling motors on an office ceiling.}\n\t\\label{fig:3d}\n\t\\end{center}\n\\end{figure}\n\nThe architecture of Gondola, shown in Fig.~\\ref{fig:architecture}, is composed of several modules. \n(i) The \\emph{System Controller}, which gets a sequence of 3-dimensional positions (carriage's trace) and translate them into a sequence of 1-dimensional spooling movements. One for each spooling motor. \n(ii) The \\emph{Motor Controller}, which is in charge of receiving a spooling sequence and properly actuate the motors such that the resulting movement in the 3-dimensional space is smooth and the speed is constant.\n(iii) The \\emph{Carriage} (C), which is connected to each motor via thin wires and carries devices such as a wireless sensors (WS1). Once the Carriage (C) reaches the intended position, the System Controller logs the experiment output running on another wireless device (WS2) until an event occurs. Then, the Carriage is moved to the next scripted location.\n\nWe now analyze in detail the implementation details of our system.\n\n\\begin{figure}\n\t\\includegraphics[width=0.48\n\t\\textwidth]{architecture}\n\t\\caption{The system architecture of Gondola. The carriage (C) is connected to one or more spooling motors (M) via thin wires. By controlling the length of the wire spooled by each motor, the Motor and System controllers are able to move a carried object (WS) in space.}\n\t\\label{fig:architecture}\n\\end{figure}\n\n\\subsection{System Controller}\nGondola's System Controller comprise of a computer running a software that interfaces with the user (who runs an experiment), a wireless sensor node (WS2) and the Motor Controller. Its interface is written in Processing\\footnote{\\url{https://processing.org}} and can run on several platforms. \n\nThrough this interface a user can input the 3D coordinates of the location of each spooling motor, together with the carriage's starting position. This calibration step is essential to convert a desired movements in 3D space to 1D spolling distances. \nIn particular, given a 3D movement from point A to point B, the 1D spolling distance of a motor M is computed as \n\n", "index": 1, "text": "$$\\text{dist}(A,M) - \\text{dist}(B,M),$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"\\text{dist}(A,M)-\\text{dist}(B,M),\" display=\"block\"><mrow><mrow><mrow><mtext>dist</mtext><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>,</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mrow><mtext>dist</mtext><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>B</mi><mo>,</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}]