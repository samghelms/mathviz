[{"file": "1601.08143.tex", "nexttext": "\nwhere $g_s(\\mu)$ is the strong gauge coupling, $g(\\mu)$ and $g^\\prime(\\mu)$ are\nthe EW gauge couplings, $y_t(\\mu)$ and $y_b(\\mu)$ are Yukawa couplings\nof the top and bottom quarks, $\\lambda(\\mu)$ is the scalar self coupling, and\nthe vacuum expectation value $v(\\mu)=\\sqrt{m_\\phi^2(\\mu)/(2\\lambda(\\mu))}$ is\ndefined through $\\lambda(\\mu)$ and the Higgs mass parameter $m_\\phi(\\mu)$,\nwhich both appear in the scalar potential,\n\n", "itemtype": "equation", "pos": 7196, "prevtext": "\n\n\\begin{frontmatter}\n    \n  \\title{\n\\vskip-1.5cm{\\baselineskip14pt\\rm\n\\centerline{\\normalsize DESY 16-019\\hfill ISSN 0418-9833}\n\\centerline{\\normalsize January 2016\\hfill}}\n\\vskip1.5cm\n\\texttt{mr}: a \\texttt{C++} library for the matching and running of\nthe Standard Model parameters}\n    \n  \\author[a]{Bernd A. Kniehl}\n  \\ead{kniehl@desy.de}\n  \\author[a,b]{Andrey F. Pikelner\\corref{mycorrespondingauthor}}\n\\cortext[mycorrespondingauthor]{Corresponding author}\n  \\ead{andrey.pikelner@desy.de}\n  \\author[a]{Oleg L. Veretin}\n  \\ead{oleg.veretin@desy.de}\n  \\address[a]{II.~Institut f\\\"ur Theoretische Physik, Universit\\\"at Hamburg,\n    Luruper Chaussee 149, 22761 Hamburg, Germany}\n  \\address[b]{Bogoliubov Laboratory of Theoretical Physics, Joint Institute for\nNuclear Research, 141980~Dubna, Russia}\n  \n  \\begin{abstract}\n    \nWe present the \\texttt{C++} program library \\texttt{mr} that allows us to\nreliably calculate the values of the running parameters in the Standard Model\nat high energy scales. \nThe initial conditions are obtained by relating the running parameters in the\n$\\overline{\\mathrm{MS}}$ renormalization scheme to observables at lower\nenergies with full two-loop precision.\nThe evolution is then performed in accordance with the renormalization group\nequations with full three-loop precision.\nPure QCD corrections to the matching and running are included through four\nloops.\nWe also provide a \\texttt{Mathematica} interface for this program library.\n\n    \n  \\end{abstract}\n\n  \\begin{keyword}\n    \nParticle physics \\sep Standard Model \\sep Running parameters \\sep\nRenormalization group evolution \\sep Threshold corrections\n\n  \\end{keyword}\n\n\\end{frontmatter}\n\n\\pagebreak\n\n\n{\\bf PROGRAM SUMMARY}\n\n\\begin{small}\n  \\noindent\n  {\\em Manuscript title:} \\texttt{mr}: a \\texttt{C++} library for the matching\nand running of the Standard Model parameters\\\\\n  {\\em Authors:} B.~A.~Kniehl, A.~F.~Pikelner, O.~L.~Veretin \\\\\n  {\\em Program title:} \\texttt{mr} \\\\\n  {\\em Journal reference:} \\\\\n  \n  {\\em Catalogue identifier:} \\\\\n  \n  {\\em Licensing provisions:} GPLv3 \\\\\n  \n  {\\em Programming language:} \\texttt{C++} \\\\\n  {\\em Computer:} IBM PC \\\\\n  \n  {\\em Operating system:} Linux, Mac OS X \\\\\n  \n  {\\em RAM:} 1~GB \\\\\n  \n  {\\em Number of processors used:} available with \\texttt{OpenMP} \\\\\n  \n  {\\em Supplementary material:} \\\\\n  \n  {\\em Keywords:} particle physics; Standard Model; running parameters;\nrenormalization group evolution; threshold corrections \\\\\n  \n  \n  {\\em Classification:} 11 Elementary Particle Physics,\n 11.1 General, High Energy Physics and Computing \\\\\n  \n  \n  \n  {\\em External routines/libraries:} \\texttt{TSIL}~[1], \\texttt{OdeInt}~[2] \\\\\n  \n  \n  \n  {\\em Nature of problem:}\\\\\n  \nThe running parameters of the Standard Model renormalized in the\n$\\overline{\\mathrm{MS}}$ scheme at some high renormalization scale, which is\nchosen by the user, are evaluated in perturbation theory as precisely as\npossible in two steps. \nFirst, the initial conditions at the electroweak energy scale are evaluated\nfrom the Fermi constant $G_F$ and the pole masses of the $W$, $Z$, and Higgs\nbosons and the bottom and top quarks including the full two-loop threshold\ncorrections.\nSecond, the evolution to the high energy scale is performed by numerically\nsolving the renormalization group evolution equations through three loops.\nPure QCD corrections to the matching and running are included through four\nloops. \\\\\n  {\\em Solution method:}\\\\\n  numerical integration of analytic expressions \\\\\n  {\\em Restrictions:}\\\\\n  \n  {\\em Unusual features:}\\\\\n  \n  {\\em Additional comments:}\\\\\n  Available for download from URL: \\url{http://apik.github.io/mr/} \\\\\n  {\\em Running time:}\\\\\n  less than 1 second \\\\\n\n  \\begin{thebibliography}{0}\n  \\bibitem{1}\n    S.~P.~Martin and D.~G.~Robertson,\n    \n    Comput.\\ Phys.\\ Commun.\\ {\\bf 174} (2006) 133--151\n    [hep-ph/0501132].\n  \n  \n  \n  \n  \n  \n  \\bibitem{2}\n    K.~Ahnert and M.~Mulansky, \n    \n    AIP Conf.\\ Proc.\\ {\\bf 1389} (2011) 1586--1589 [arxiv:1110.3397 [cs.MS]].\n  \\end{thebibliography}\n\\end{small}\n\n\n\n\n\\section{Introduction}\n\\label{sec:introduction}\n\nThe Standard Model (SM) exhibits excellent agreement with an enormous wealth of\nexperimental data.\nIt is supposed to describe particle physics from low energies up to\ntera-electron-volt scales and beyond.\nMoreover, the recent discovery of a Higgs-like particle\n\\cite{aad:2012tfa,Chatrchyan:2012xdj} makes the SM one of the best candidates\nfor the theory of the electroweak (EW) and strong interactions.\nThe absence of clear signals for {\\it new physics}, e.g., supersymmetry, at the\nLHC leads us to the question:\nhow far up in the energy scale can the SM be extrapolated?\nThe answer to this question depends, among numerous factors, on whether the\nEW vacuum remains stable at ultimatively high energies or not.\nRecent studies of the scalar potential show that, with the Higgs boson mass\nbeing around 125~GeV, the SM can at most become metastable, in the sense that\nthe lifetime of our EW vacuum exceeds the age of the Universe,\nwhen extrapolated up to the scales of the Planck mass\n\\cite{Bezrukov:2012sa,Degrassi:2012ry,Buttazzo:2013uya,Bednyakov:2015sca}.\n\nThe analysis of the scalar potential at high energies basically requires two\ningredients:\n(i) the renormalization group (RG) evolution of the running parameters\nand (ii) the initial conditions that relate the latter to the physical\nobservables.\nThese initial conditions, which are determined by the so-called threshold\ncorrections, are usually taken at some lower energy scale, which is typically\nof the order of the masses of the weak gauge bosons or the top quark.\nFor the consistent use of $L$-loop RG evolution, one should take into account\nat least $(L-1)$-loop matching.\n\nIt is the goal of this paper to introduce the \\texttt{C++} program library\n\\texttt{mr}, which is designed to conveniently perform the above analysis at\nthe next-to-next-to-leading-order (NNLO) EW level.\nThis means that we take into account the full two-loop threshold corrections\nand the full three-loop RG equations.\nIn addition, we collect in our program library all the theoretical knowledge\navailable to date, including the QCD $\\beta$ function and mass anomalous\ndimensions through four loops.\n\nThis paper is organized as follows.\nSection~\\ref{sec:setup} contains the relevant definitions and notations\nconcerning the parametrization of the SM.\nSection~\\ref{sec:c++-interface} provides a description of the \\texttt{mr}\nprogram library. \nSection~\\ref{sec:math-interf} explains how to use the \\texttt{Mathematica}\ninterface.\nSection~\\ref{sec:typical-examples} points the reader towards example programs.\nSection~\\ref{sec:conclusion} contains our summary.\n\\ref{sec:a}, \\ref{sec:b}, and \\ref{sec:methods-rge} list the methods needed for\nthe on-shell (OS) mass input, running-parameter input, and the RG evolution,\nrespectively, and\\break \\ref{sec:example} guides the reader through a typical\nexample.\n\n\\section{The physical setup}\n\\label{sec:setup}\n\nThe SM can be described in terms of the following running parameters defined in\nthe modified minimal-subtraction ($\\overline{\\mathrm{MS}}$) renormalization\nscheme at the renormalization scale $\\mu$:\n\n", "index": 1, "text": "\\begin{equation}\n\\label{ms_param}\n  g_s(\\mu), g(\\mu), g^\\prime(\\mu), y_t(\\mu), y_b(\\mu), \\lambda(\\mu), v(\\mu),\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m1\" class=\"ltx_Math\" alttext=\"g_{s}(\\mu),g(\\mu),g^{\\prime}(\\mu),y_{t}(\\mu),y_{b}(\\mu),\\lambda(\\mu),v(\\mu),\" display=\"block\"><mrow><mrow><mrow><msub><mi>g</mi><mi>s</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><mi>g</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><msup><mi>g</mi><mo>\u2032</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><msub><mi>y</mi><mi>t</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><msub><mi>y</mi><mi>b</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><mi>\u03bb</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><mi>v</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.08143.tex", "nexttext": "\nHere, the normalization of the quadratic term has been chosen so that\n$m_\\phi^0=m_H^0$ at tree level.\nIn our analysis, we retain the Yukawa couplings only for the top and bottom\nquarks. \nThe contributions due to the Yukawa couplings of the other fermions may be\nsafely neglected;\nthose fermions practically only contribute through their interactions with the\ngauge bosons.\nIn addition to the parameters in Eq.~(\\ref{ms_param}), one may also consider\nthe $\\overline{\\mathrm{MS}}$ masses,\n\n", "itemtype": "equation", "pos": 7747, "prevtext": "\nwhere $g_s(\\mu)$ is the strong gauge coupling, $g(\\mu)$ and $g^\\prime(\\mu)$ are\nthe EW gauge couplings, $y_t(\\mu)$ and $y_b(\\mu)$ are Yukawa couplings\nof the top and bottom quarks, $\\lambda(\\mu)$ is the scalar self coupling, and\nthe vacuum expectation value $v(\\mu)=\\sqrt{m_\\phi^2(\\mu)/(2\\lambda(\\mu))}$ is\ndefined through $\\lambda(\\mu)$ and the Higgs mass parameter $m_\\phi(\\mu)$,\nwhich both appear in the scalar potential,\n\n", "index": 3, "text": "\\begin{equation}\n  \\label{eq:potential}\n  V(\\phi) = -\\frac{m_\\phi^2}{2}\\phi^\\dagger\\phi + \\lambda(\\phi^\\dagger\\phi)^2.  \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E2.m1\" class=\"ltx_Math\" alttext=\"V(\\phi)=-\\frac{m_{\\phi}^{2}}{2}\\phi^{\\dagger}\\phi+\\lambda(\\phi^{\\dagger}\\phi)^%&#10;{2}.\" display=\"block\"><mrow><mrow><mrow><mi>V</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03d5</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mrow><mo>-</mo><mrow><mfrac><msubsup><mi>m</mi><mi>\u03d5</mi><mn>2</mn></msubsup><mn>2</mn></mfrac><mo>\u2062</mo><msup><mi>\u03d5</mi><mo>\u2020</mo></msup><mo>\u2062</mo><mi>\u03d5</mi></mrow></mrow><mo>+</mo><mrow><mi>\u03bb</mi><mo>\u2062</mo><msup><mrow><mo stretchy=\"false\">(</mo><mrow><msup><mi>\u03d5</mi><mo>\u2020</mo></msup><mo>\u2062</mo><mi>\u03d5</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.08143.tex", "nexttext": "\nIt is well known that, to preserve the gauge independence of the\n$\\overline{\\mathrm{MS}}$ masses in Eq.~(\\ref{ms_masses}), one has to\nsystematically include the tadpole contributions (see, e.g., the detailed\ndiscussions in Refs.~\\cite{Fleischer:1980ub,Hempfling:1994ar,Kniehl:2004hfa,\nJegerlehner:2012kn,Kniehl:2014yia,Kniehl:2015nwa}).\n\nWe first introduce the matching relations, which provide the initial conditions\nfor the RG differential equations.\nThese relations define the $\\overline{\\mathrm{MS}}$ parameters at some\nlow-energy scale $\\mu_0$ in terms of appropriate input parameters.\nSpecifically, our choice of input parameters is\n\n", "itemtype": "equation", "pos": 8370, "prevtext": "\nHere, the normalization of the quadratic term has been chosen so that\n$m_\\phi^0=m_H^0$ at tree level.\nIn our analysis, we retain the Yukawa couplings only for the top and bottom\nquarks. \nThe contributions due to the Yukawa couplings of the other fermions may be\nsafely neglected;\nthose fermions practically only contribute through their interactions with the\ngauge bosons.\nIn addition to the parameters in Eq.~(\\ref{ms_param}), one may also consider\nthe $\\overline{\\mathrm{MS}}$ masses,\n\n", "index": 5, "text": "\\begin{equation}\n\\label{ms_masses}\n   m_W(\\mu), m_Z(\\mu), m_H(\\mu), m_t(\\mu), m_b(\\mu).\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E3.m1\" class=\"ltx_Math\" alttext=\"m_{W}(\\mu),m_{Z}(\\mu),m_{H}(\\mu),m_{t}(\\mu),m_{b}(\\mu).\" display=\"block\"><mrow><mrow><mrow><msub><mi>m</mi><mi>W</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><msub><mi>m</mi><mi>Z</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><msub><mi>m</mi><mi>H</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><msub><mi>m</mi><mi>t</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><msub><mi>m</mi><mi>b</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.08143.tex", "nexttext": "\nwhere $\\alpha_s(\\mu)=g_s^2(\\mu)/(4\\pi)$ is the $\\overline{\\mathrm{MS}}$\nstrong-coupling constant, $G_F$ is Fermi's constant, and $M_W$, $M_Z$, $M_H$,\n$M_t$, and $M_b$ are the pole masses of the corresponding particles.\nAt $\\mu=M_Z$, $n_f=5$ quark flavors are considered active. \n\nIt is also useful to introduce the $\\overline{\\mathrm{MS}}$ electromagnetic\ngauge coupling via \\cite{Kniehl:2015nwa}\n\n", "itemtype": "equation", "pos": 9112, "prevtext": "\nIt is well known that, to preserve the gauge independence of the\n$\\overline{\\mathrm{MS}}$ masses in Eq.~(\\ref{ms_masses}), one has to\nsystematically include the tadpole contributions (see, e.g., the detailed\ndiscussions in Refs.~\\cite{Fleischer:1980ub,Hempfling:1994ar,Kniehl:2004hfa,\nJegerlehner:2012kn,Kniehl:2014yia,Kniehl:2015nwa}).\n\nWe first introduce the matching relations, which provide the initial conditions\nfor the RG differential equations.\nThese relations define the $\\overline{\\mathrm{MS}}$ parameters at some\nlow-energy scale $\\mu_0$ in terms of appropriate input parameters.\nSpecifically, our choice of input parameters is\n\n", "index": 7, "text": "\\begin{equation}\n  \\label{eq:brinput}\n\\alpha_s(M_Z),G_F,M_W,M_Z,M_H,M_t,M_b,\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E4.m1\" class=\"ltx_Math\" alttext=\"\\alpha_{s}(M_{Z}),G_{F},M_{W},M_{Z},M_{H},M_{t},M_{b},\" display=\"block\"><mrow><mrow><mrow><msub><mi>\u03b1</mi><mi>s</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>M</mi><mi>Z</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><msub><mi>G</mi><mi>F</mi></msub><mo>,</mo><msub><mi>M</mi><mi>W</mi></msub><mo>,</mo><msub><mi>M</mi><mi>Z</mi></msub><mo>,</mo><msub><mi>M</mi><mi>H</mi></msub><mo>,</mo><msub><mi>M</mi><mi>t</mi></msub><mo>,</mo><msub><mi>M</mi><mi>b</mi></msub></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.08143.tex", "nexttext": " \nwhich in turn defines the $\\overline{\\mathrm{MS}}$ fine-structure constant as\n\n", "itemtype": "equation", "pos": -1, "prevtext": "\nwhere $\\alpha_s(\\mu)=g_s^2(\\mu)/(4\\pi)$ is the $\\overline{\\mathrm{MS}}$\nstrong-coupling constant, $G_F$ is Fermi's constant, and $M_W$, $M_Z$, $M_H$,\n$M_t$, and $M_b$ are the pole masses of the corresponding particles.\nAt $\\mu=M_Z$, $n_f=5$ quark flavors are considered active. \n\nIt is also useful to introduce the $\\overline{\\mathrm{MS}}$ electromagnetic\ngauge coupling via \\cite{Kniehl:2015nwa}\n\n", "index": 9, "text": "\\begin{equation}\n\\label{eq:e}\n  \\frac{1}{e^2(\\mu)} = \\frac{1}{g^2(\\mu)} + \\frac{1}{g^{\\prime2}(\\mu)},\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E5.m1\" class=\"ltx_Math\" alttext=\"\\frac{1}{e^{2}(\\mu)}=\\frac{1}{g^{2}(\\mu)}+\\frac{1}{g^{\\prime 2}(\\mu)},\" display=\"block\"><mrow><mrow><mfrac><mn>1</mn><mrow><msup><mi>e</mi><mn>2</mn></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mfrac><mo>=</mo><mrow><mfrac><mn>1</mn><mrow><msup><mi>g</mi><mn>2</mn></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mfrac><mo>+</mo><mfrac><mn>1</mn><mrow><msup><mi>g</mi><mrow><mi mathsize=\"142%\" mathvariant=\"normal\">\u2032</mi><mo>\u2063</mo><mn>2</mn></mrow></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mfrac></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.08143.tex", "nexttext": " \n\nIf the input in terms of the OS parameters in Eq.~(\\ref{eq:brinput}) is given,\nthen the $\\overline{\\mathrm{MS}}$ couplings can be obtained at the \nmatching scale $\\mu_0$.\nThe corresponding matching relations are parametrized as\n\\begin{eqnarray}\n  g^2(\\mu_0) &=& 2^{5/2} G_F M_W^2 [ 1 + \\delta_W(\\mu_0) ],\n\\nonumber\n\\\\\n  g^2(\\mu_0) + g^{\\prime2}(\\mu_0) &=& 2^{5/2} G_F M_Z^2 [ 1 + \\delta_Z(\\mu_0) ],\n\\nonumber\n\\\\\n  \\lambda(\\mu_0) &=& 2^{-1/2} G_F M_H^2 [ 1 + \\delta_H(\\mu_0) ],\n\\nonumber\n\\\\\n  y_f(\\mu_0) &=& 2^{3/4} G_F^{1/2} M_f [ 1 + \\delta_f(\\mu_0) ],\n\\label{eq:tc}\n\\end{eqnarray}\nwhere $f=t,b$.\nIn Eq.~(\\ref{eq:tc}), $\\delta_x(\\mu)$ are complicated functions of the OS\nparameters in Eq.~(\\ref{eq:brinput}) and $\\mu_0$, which may be expanded as\nperturbation series,\n\n", "itemtype": "equation", "pos": -1, "prevtext": " \nwhich in turn defines the $\\overline{\\mathrm{MS}}$ fine-structure constant as\n\n", "index": 11, "text": "\\begin{equation}\n\\label{eq:a_mu}\n  \\alpha(\\mu) = \\frac{e^2(\\mu)}{4\\pi}.\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E6.m1\" class=\"ltx_Math\" alttext=\"\\alpha(\\mu)=\\frac{e^{2}(\\mu)}{4\\pi}.\" display=\"block\"><mrow><mrow><mrow><mi>\u03b1</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mn>2</mn></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mn>4</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow></mfrac></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.08143.tex", "nexttext": "\nThe expansion coefficients $Y^{i,j}_x(\\mu)$ are generally available for\n$i,j=1,2$, which corresponds to two-loop matching.\nBeyond that, the pure QCD corrections\\footnote{\nIn the bosonic cases $x=W,Z,H$, the pure QCD contributions vanish identically,\n$Y^{0,j}_x(\\mu)=0$.}\nare known through four loops and are given by $Y^{0,3}_f(\\mu)$ and\n$Y^{0,4}_f(\\mu)$.\n\nIn addition to Eq.~(\\ref{eq:tc}) for the couplings, we also present the\nmatching relations for the masses, which we write as\n\\begin{eqnarray}\n  m_B^2(\\mu_0) &=& M_B^2 [1 + \\Delta_B(\\mu_0)],\n  \\qquad B=W,Z,H,\n\\nonumber\\\\\n  m_f(\\mu_0) &=& M_f [1 + \\Delta_f(\\mu_0)],\n  \\qquad f=t,b,\n  \\label{eq:m}\n\\end{eqnarray}\nfor the bosons and fermions, respectively.\nThe functions $\\Delta_x(\\mu)$ may also be expanded in perturbation series,\n\n", "itemtype": "equation", "pos": 10654, "prevtext": " \n\nIf the input in terms of the OS parameters in Eq.~(\\ref{eq:brinput}) is given,\nthen the $\\overline{\\mathrm{MS}}$ couplings can be obtained at the \nmatching scale $\\mu_0$.\nThe corresponding matching relations are parametrized as\n\\begin{eqnarray}\n  g^2(\\mu_0) &=& 2^{5/2} G_F M_W^2 [ 1 + \\delta_W(\\mu_0) ],\n\\nonumber\n\\\\\n  g^2(\\mu_0) + g^{\\prime2}(\\mu_0) &=& 2^{5/2} G_F M_Z^2 [ 1 + \\delta_Z(\\mu_0) ],\n\\nonumber\n\\\\\n  \\lambda(\\mu_0) &=& 2^{-1/2} G_F M_H^2 [ 1 + \\delta_H(\\mu_0) ],\n\\nonumber\n\\\\\n  y_f(\\mu_0) &=& 2^{3/4} G_F^{1/2} M_f [ 1 + \\delta_f(\\mu_0) ],\n\\label{eq:tc}\n\\end{eqnarray}\nwhere $f=t,b$.\nIn Eq.~(\\ref{eq:tc}), $\\delta_x(\\mu)$ are complicated functions of the OS\nparameters in Eq.~(\\ref{eq:brinput}) and $\\mu_0$, which may be expanded as\nperturbation series,\n\n", "index": 13, "text": "\\begin{equation}\n  \\label{eq:deltax}\n  \\delta_x(\\mu) = \\sum_{i,j} \\left(\\frac{\\alpha(\\mu)}{4\\pi}\\right)^i\n                   \\left(\\frac{\\alpha_s(\\mu)}{4\\pi}\\right)^j Y^{i,j}_x(\\mu).\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E7.m1\" class=\"ltx_Math\" alttext=\"\\delta_{x}(\\mu)=\\sum_{i,j}\\left(\\frac{\\alpha(\\mu)}{4\\pi}\\right)^{i}\\left(\\frac%&#10;{\\alpha_{s}(\\mu)}{4\\pi}\\right)^{j}Y^{i,j}_{x}(\\mu).\" display=\"block\"><mrow><mrow><mrow><msub><mi>\u03b4</mi><mi>x</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>,</mo><mi>j</mi></mrow></munder><mrow><msup><mrow><mo>(</mo><mfrac><mrow><mi>\u03b1</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mn>4</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow></mfrac><mo>)</mo></mrow><mi>i</mi></msup><mo>\u2062</mo><msup><mrow><mo>(</mo><mfrac><mrow><msub><mi>\u03b1</mi><mi>s</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mn>4</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow></mfrac><mo>)</mo></mrow><mi>j</mi></msup><mo>\u2062</mo><msubsup><mi>Y</mi><mi>x</mi><mrow><mi>i</mi><mo>,</mo><mi>j</mi></mrow></msubsup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.08143.tex", "nexttext": "\nThe comments made below Eq.~(\\ref{eq:deltax}) also apply to\nEq.~(\\ref{eq:mpertfer}).\n\nThe pure QCD corrections to $m_t(\\mu)$ and $y_t(\\mu)$ are evaluated according\nto Eq.~(59) in Ref.~\\cite{Kniehl:2015nwa} with $n_l=5$ massless quarks and\n$n_h=1$ massive quark.\nFor the pure QCD corrections to $m_b(\\mu)$ and $y_b(\\mu)$, to take into account\ndiagrams with top-quark insertions, we treat the four lightest quarks as\nmassless, but keep both the top and bottom quarks massive through two loops.\nThe corresponding analytic formula reads \\cite{Gray:1990yh,Bekavac:2007tk}:\n\\begin{eqnarray}\n  \\label{eq:topInBottomQCD}\n  \n                        \\delta_{\\rm QCD}(\\mu) &=&\n                        \n                        \n                        \n                                                \\frac{\\alpha_s}{4\\pi}\\left(-\\frac{16}{3} - 4l_{\\mu M_b}\\right)\n                                                \n                                                \n                                                \n                                                + \\left(\\frac{\\alpha_s}{4\\pi}\\right)^2\\left\\{\n                                                -\\frac{3305}{18}\n                                                -\\frac{64\\zeta_2}{3}\n                                                +\\frac{8 \\zeta_3}{3}\n                                                \\right. \\nonumber\\\\\n                      &&{}-\\frac{32 \\zeta_2}{3}\\ln 2\n + n_h \\left(\\frac{143}{9}-\\frac{32 \\zeta_2}{3}\\right)\n                        + n_l\\left(\\frac{71}{9}+\\frac{16\n                        \\zeta_2}{3}\\right)\\nonumber\\\\ \n                      &&{} + \\frac{n_m}{ 9 t^4}\\left[72 t^2 + 71 t^4 - 48 t^2\n                        H_{0}(t) + 48(1 + t + t^3 + t^4)\n                        H_{-1, 0}(t) \\right.\\nonumber\\\\\n                      &&{}- \\left. 48 H_{1,0}(t) - 96 t^4 H_{0, 0}(t) + \n                        48 t (1 + t^2 - t^3) H_{1, 0}(t)\\right] \\nonumber\\\\\n                      \n                      \n                      \n                      &&{}+l_{\\mu M_b}\\left[-\\frac{314}{3} + \\frac{52}{9}(n_h+n_l+n_m)\\right]\\nonumber\\\\\n                      \n                      \n                      \n                      &&{}+\\left.l_{\\mu M_b}^2\\left[\n                        -14+\\frac{4}{3}(n_h+n_l+n_m)\n                        \\right]\n                        \\right\\},\n\\end{eqnarray}\nwhere $n_l=4$, $n_h=1$, $n_m=1$ refers to the massive bottom quark, $t=M_b/M_t$,\n$l_{\\mu M_b}=\\ln(\\mu^2/M_b^2)$, and\n\\begin{eqnarray}\n  H_{0}(t)   & =& \\ln t,\\qquad\n             H_{-1,0}(t)  = \\ln t \\ln(1 + t) + {\\mathop{\\mathrm{Li}}\\nolimits}_2(-t),\\nonumber\\\\\n  H_{0,0}(t)  & =& \\frac{\\ln^2t}{2},\\qquad\n              H_{1,0}(t)  = -\\ln t\\ln(1 - t) - {\\mathop{\\mathrm{Li}}\\nolimits}_2(t)\\nonumber\\\\\n\\end{eqnarray}\nare harmonic polylogarithms as introduced in Ref.~\\cite{Remiddi:1999ew}.\n\nFinally, also the relations inverse to Eq.~(\\ref{eq:m}), which express the pole\nmasses in terms of the $\\overline{\\mathrm{MS}}$ parameters, may be of\ninterest \\cite{Jegerlehner:2001fb,Jegerlehner:2002em,Martin:2014cxa},\n\\begin{eqnarray}\nM_b^2 &=& m_B^2(\\mu_0) \\left[1 + \\overline{\\Delta}_B(\\mu_0) \\right],\n\\nonumber\\\\\nM_f &=& m_f(\\mu_0) \\left[1 + \\overline{\\Delta}_f(\\mu_0) \\right].\n\\label{eq:mos}\n\\end{eqnarray}\nThe functions $\\overline{\\Delta}_x(\\mu)$ are parametrized similarly to\nEq.~(\\ref{eq:mpertfer}), with expansion coefficients\n$\\overline{X}^{i,j}_x(\\mu)$.\nThey are included in our \\texttt{C++} program library as well.\n\nThe running of the $\\overline{\\mathrm{MS}}$ parameters in Eqs.~(\\ref{ms_param}) and\n(\\ref{ms_masses}) is governed by the RG equations,\n\\begin{eqnarray}\n\\label{eq:RG1}\n  \\mu^2\\frac{dx}{d\\mu^2} &=& \\beta_x,\\qquad x=g_s,g,g^\\prime,y_t,y_b,\\lambda,\n\\\\\n\\label{eq:RG2}\n  \\mu^2\\frac{d\\ln x}{d\\mu^2} &=& \\gamma_x,\\qquad x=m_W,m_Z,m_H,m_t,m_b,\n\\end{eqnarray}\nwith the respective $\\beta$ functions $\\beta_x$ and mass anomalous dimensions\n$\\gamma_x$.\nGiven the values of the parameters $x(\\mu_0)$ at some initial scale $\\mu_0$,\nEqs.~(\\ref{eq:RG1}) and (\\ref{eq:RG2}) allow us to find their values at some\nhigh scale $\\mu$.\nSince $\\beta_x$ and $\\gamma_x$ are in turn functions of the $\\overline{\\mathrm{MS}}$ parameters in\nEq.~(\\ref{ms_param}), the RG equations form a system of nonlinear differential\nequations to be solved simultaneously.\nThe functions $\\beta_x$ and $\\gamma_x$ have been known through four loops in\nQCD for a long time\n\\cite{vanRitbergen:1997va,Chetyrkin:1997dh,Vermaseren:1997fq,Chetyrkin:2004mf,\nCzakon:2004bu}\nand have recently been computed through three loops in the full SM\n\\cite{Mihaila:2012fm,Chetyrkin:2012rz,Mihaila:2012pz,Bednyakov:2012rb,\nBednyakov:2012en,Chetyrkin:2013wya,Bednyakov:2013eba,Bednyakov:2013cpa}.\n\n\\section{\\texttt{C++} library \\texttt{mr}}\n\\label{sec:c++-interface}\n\nThe \\rm program library provides the following ingredients:\n\\begin{itemize}\n\\item evaluation of the coefficients $Y_x^{i,j}(\\mu)$ and $X_x^{i,j}(\\mu)$ in\nEqs.~(\\ref{eq:deltax}) and (\\ref{eq:mpertfer}), respectively, for given input\nvalues of the OS parameters in Eq.~(\\ref{eq:brinput}) and, inversely, of the\ncoefficients $\\bar{X}_x^{i,j}(\\mu)$ for the given input values of the\n$\\overline{\\mathrm{MS}}$ parameters in Eqs.~(\\ref{ms_param}) and\n(\\ref{ms_masses}),\n\\item evaluation of the $\\overline{\\mathrm{MS}}$ couplings and masses according\nto Eqs.~(\\ref{eq:tc}) and (\\ref{eq:m}), respectively, as well as evaluation of\nthe inverse relations in Eq.~(\\ref{eq:mos}),\n\\item evolution of the $\\overline{\\mathrm{MS}}$ parameters in the scale $\\mu$\nusing the RG equations in Eqs.~(\\ref{eq:RG1}) and (\\ref{eq:RG2}).\n\\end{itemize}\n\nFirst, in order to use the \\texttt{C++} interface, one has to include the\ncorresponding header file. \nAll parts of the program library are placed in the namespace \\texttt{mr}:\n\\begin{lstlisting}\n  #include \"mr.hpp\"\n  using namespace mr;\n\\end{lstlisting}\n\n\\subsection{Input parameters}\n\\label{sec:input}\n\nBefore evaluating the coefficients $X_x^{i,j}(\\mu)$ and $Y_x^{i,j}(\\mu)$, the\ninput parameter class must be created.\nIf we wish to use the OS parameters as input, we have to use the class\n\\texttt{OSinput} with a constructor taking as arguments the five pole masses\n$M_b$, $M_W$, $M_Z$, $M_H$, and $M_t$ (in GeV):\n\\begin{lstlisting}\n  //           Mb     MW       MZ       MH      Mt\n  OSinput oi(4.4, 80.385, 91.1876, 125.7, 173.2);\n\\end{lstlisting}\nFor the user's convenience, we have predefined sets of input parameters from\ndifferent editions of the Review of Particle Physics by the Particle Data Group\n(PDG) tabulated in enums named \\texttt{pdg20xx}, where \\texttt{20xx} denotes\nthe year of the edition.\nFor example, we may construct an object using the OS input from the 2014 issue\nas:\n\\begin{lstlisting}\n  OSinput oi(pdg2014::Mb, pdg2014::MW, pdg2014::MZ, pdg2014::MH, pdg2014::Mt);\n\\end{lstlisting}\nFor a detailed description of the \\texttt{OSinput} class methods, see\n\\ref{sec:class-osinput}.\n\nIf we are interested in the inverse relations, defining the pole masses in\nterms of the $\\overline{\\mathrm{MS}}$ parameters, we have to use the class\n\\texttt{MSinput}. \nIt constructs an object from the $\\overline{\\mathrm{MS}}$ masses (in GeV)\n(for a detailed description, see \\ref{sec:class-MSinput}):\n\\begin{lstlisting}\n  //                          mb      mW       mZ       mH      mt\n  mi = MSinput::fromMasses(4.4, 80.385, 91.1876, 125.7, 173.2);\n\\end{lstlisting}\nor from the $\\overline{\\mathrm{MS}}$ coupling constants:\n\\begin{lstlisting}\n  //                        g1      g2        yb        yt      lambda\n  mi = MSinput::fromCouplings(4.4, 80.385, 91.1876, 125.7, 173.2);\n\\end{lstlisting}\n\n\n\n\\subsection{Evaluation of coefficients $X_x^{i,j}(\\mu)$ and $Y_x^{i,j}(\\mu)$}\n\nHaving at hand the \\lstinline!OSinput! class instance, we may construct\ninstances of classes providing the $\\overline{\\mathrm{MS}}$ masses and\ncouplings for given input values of the pole masses:\n\\begin{lstlisting}\nbb<OS>    db(oi, oi.MMt());\nWW<OS>    dW(oi, oi.MMt());\nZZ<OS>    dZ(oi, oi.MMt());\nHH<OS>    dH(oi, oi.MMt());\ntt<OS>    dt(oi, oi.MMt());\n\\end{lstlisting}\nHere, the second parameter is the square of the matching scale $\\mu_0$;\nin the previous example, we have used $\\mu_0^2=M_t^2$.\nFor the $b$, $W$, $Z$, $H$, and $t$ initialization \\texttt{bb<OS>}, etc., this\nmeans that we calculate the $\\overline{\\mathrm{MS}}$ parameters in terms of the\nOS ones.\n\nWhen we wish to calculate the inverse relations in Eq.~(\\ref{eq:mos}), we may\nspecify the input values of the $\\overline{\\mathrm{MS}}$ masses as:\n\\begin{lstlisting}\nMSinput mi(mb, mW, mZ, mH, mt);\n\\end{lstlisting}\nIn contrast to the OS masses, which are denoted by uppercase letters,\n$\\overline{\\mathrm{MS}}$ masses are denoted by lowercase letters.\nThe input parameters \\texttt{mb}, \\texttt{mW}, \\texttt{mZ}, \\texttt{mH}, and\n\\texttt{mt} implicitly dependent on the scale $\\mu$.\nWhen the coefficients $\\bar{X}_x^{i,j}(\\mu)$ are to be calculated from the\n$\\overline{\\mathrm{MS}}$ masses, the scale $\\mu$ at which the latter are\ndefined has to be specified:\n\\begin{lstlisting}\nbb<MS> xb(mi, mi.mmt());\nWW<MS> xW(mi, mi.mmt());\nZZ<MS> xZ(mi, mi.mmt());\nHH<MS> xH(mi, mi.mmt());\ntt<MS> xt(mi, mi.mmt());\n\\end{lstlisting}\nNote that the scale $\\mu$ is common to all the $\\overline{\\mathrm{MS}}$ masses.\nHere, we have chosen $\\mu^2=m_t^2(\\mu)$.\n\nFor each type of particle and set of input parameters, the construction of the\nclass instances \\texttt{db}, \\texttt{dW}, \\texttt{dZ}, \\texttt{dH}, and\n\\texttt{dt} or \\texttt{xb}, \\texttt{xW}, \\texttt{xZ}, \\texttt{xH}, and\n\\texttt{xt} is the most time-consuming operation.\nAt this step, the prototypes of all master integrals are evaluated for the\npredefined values in the input masses.\n\nAfter initialization, the expansion coefficients in Eqs.~(\\ref{eq:deltax}) and\n(\\ref{eq:mpertfer}) become available for each particle $x$.\nOne may refer to the coefficients $X_x^{i,j}(\\mu)$ and $Y_x^{i,j}(\\mu)$ through\nthe following methods:\n\\begin{lstlisting}\nlong double <particle>::x(size_t a_order, size_t as_order)\nlong double <particle>::y(size_t a_order, size_t as_order)\n\\end{lstlisting}\nAlternatively the calls \\texttt{xij()} or \\texttt{yij()} are also available,\nwhere $i$ and $j$ are integers.\nFor example, the call \\texttt{dZ.x(1,1)} is equivalent to \\texttt{dZ.x11()},\nand the call \\texttt{dt.y(0,3)} is equivalent to \\texttt{dt.y03()}, and so on.\n\n\n\n\n\n\\subsection{Evaluation of corrections to $\\overline{\\textrm{MS}}$ coupling\nconstants and masses}\n\\label{sec:p2ms}\n\nFor the evaluation of the $\\overline{\\mathrm{MS}}$ parameters from\nEqs.~(\\ref{eq:tc}) and (\\ref{eq:m}) as implemented in our code, $\\alpha_s(\\mu)$\nand $\\alpha(\\mu)$ have to be supplied at the chosen scale $\\mu$.\n\nLet us first consider $\\alpha_s(\\mu)$.\nWe implemented a routine for the evolution of $\\alpha_s(\\mu)$ to the desired\nscale $\\mu$, starting from some initial scale $\\mu_0$ and the initial value\n$\\alpha_s(\\mu_0)$, which is $\\alpha_s(M_Z)$ by default.\nSometimes, however, it is of interest to perform the matching at some different\nscale $\\mu_0$.\nIf $\\mu_0\\geq M_t$, the corresponding decoupling at the top-quark threshold\n$M_t$ has to be taken into account. \nThis is implemented in our code through order $O(\\alpha_s^3)$\n\\cite{Chetyrkin:1997sg,Chetyrkin:1997un}.\n\nIn the following example, we perform the evolution of $\\alpha_s(\\mu)$ from the\ninitial PDG value at $\\mu_0=M_Z$ up to the scale $\\mu=1000$~GeV crossing the\ntop-quark threshold:\n\\begin{lstlisting}\n  // Initial scale is oi.MZ() 4-loop running\n  AlphaS aS(oi, pdg2014::asMZ, 4);\n  // Crossing Mt threshold\n  std::cout << aS(1000) << std::endl;\n\\end{lstlisting}\n\nLet us now turn to $\\alpha(\\mu)$.\nIn our approach, it is defined through Eqs.~(\\ref{eq:e}) and (\\ref{eq:a_mu}).\nIf we introduce $G_F$ as an additional input parameter, we may express\n$\\alpha(\\mu)$ as \\cite{Kniehl:2015nwa}\n\\begin{eqnarray}\n\\label{alphamu}\n  \\alpha(\\mu) = \\frac{\\sqrt{2}G_F M_W^2}{\\pi}\n    [ 1 + \\delta_W(\\mu) ] \\left[ 1 - \\frac{M_W^2}{M_Z^2}\\,\n \\frac{1 + \\delta_W(\\mu)}{1 + \\delta_Z(\\mu)}\n     \\right].                                                                   \n\\end{eqnarray}\nSince $\\delta_Z(\\mu)$ and $\\delta_W(\\mu)$ depend on $\\alpha(\\mu)$,\nEq.~(\\ref{alphamu}) only provides an implicit definition of $\\alpha(\\mu)$.\nThe \\texttt{mr} program library provides two different classes,\n\\texttt{AlphaSolve} and \\texttt{AlphaGF}, to obtain $\\alpha(\\mu)$ (see\n\\ref{sec:class-p2ms}).\nClass \\texttt{AlphaSolve} uses a numerical solution of Eq.~(\\ref{alphamu}),\nwhile class \\texttt{AlphaGF} uses a perturbative reexpansion thereof.\n\nClass \\texttt{P2MS} allows us to evaluate all the $\\overline{\\mathrm{MS}}$\ncouplings and masses at a chosen matching scale $\\mu_0$.\nTo use it, object \\texttt{OSinput} has to be constructed first, by one of the\nmethods described in Section~\\ref{sec:input}.\nOne also has to create the $\\alpha_s(\\mu)$ object \\texttt{AlphaS} as described\nabove. \n\nHere is an example of defining two sets of $\\overline{\\mathrm{MS}}$ parameters,\none with $\\mu_0=M_Z$ and the other one with $\\mu_0=M_t$, using the same set of\nOS input parameters:\n\\begin{lstlisting}\n// Input: Pole masses and Fermi constant in OS scheme\nOSinput oi(pdg2014::Mb, pdg2014::MW, pdg2014::MZ, pdg2014::MH, pdg2014::Mt);\n// $\\overline{\\mathrm{MS}}$ QCD coupling for as(Mt) from as(MZ)\nAlphaS as(oi);\n// Set of all $\\overline{\\mathrm{MS}}$ parameters at scale Mt\nP2MS pMSmt(oi,pdg2014::Gf, as(oi.Mt()), oi.Mt(), order::all);\n// Set of all $\\overline{\\mathrm{MS}}$ parameters at scale MZ\nP2MS pMSmZ(oi,pdg2014::Gf, as(oi.MZ()), oi.MZ(), order::all);\n\\end{lstlisting}\nThe arguments in the constructor of \\texttt{P2MS} include the \\texttt{OSinput}\nobject, the value of $G_F$, the value of $\\alpha_s(\\mu_0)$, and the scale\n$\\mu_0$.\nThe last argument, \\texttt{order}, is a mask indicating the orders to be\nincluded in Eqs.~ (\\ref{eq:deltax}) and (\\ref{eq:mpertfer}) (see classes\n\\texttt{AlphaSolve} and \\texttt{AlphaGF}).\n\n\\subsection{RG evolution}\n\nFor the evolution of the $\\overline{\\mathrm{MS}}$ couplings from the initial\nscale $\\mu_0$ up to the final scale $\\mu$, we implemented in our code the full\nthree-loop results for the SM $\\beta$ functions.\nThe pure QCD corrections to $\\alpha_s(\\mu)$ at four loops\n\\cite{vanRitbergen:1997va,Czakon:2004bu,Bednyakov:2015ooa} and to $y_t(\\mu)$ and\n$y_b(\\mu)$ at four \\cite{Chetyrkin:1997dh,Vermaseren:1997fq,Chetyrkin:2004mf}\nand five \\cite{Baikov:2014qja} loops are also included.\nUsing these $\\beta$ functions, we may construct the system of coupled\ndifferential equations, which can be solved numerically.\nFor its numerical solution, we use the Cash--Karp modification of the\nRunge--Kutta method with adaptive grid step as implemented in the\nexternal routine \\texttt{OdeInt} \\cite{2011AIPC.1389.1586A}.\n\nInstead of $g^\\prime(\\mu)$, the rescaled constant\n\\begin{eqnarray}\n\\label{eq:g1}\n   g_1(\\mu) = \\sqrt{\\frac{3}{5}} g^\\prime(\\mu),\n\\end{eqnarray}\nwhich corresponds to the normalization familiar from grand unified theories\n(GUTs), is sometimes used in the literature.\nFollowing this tradition, we also use $g_1(\\mu)$ rather than $g^\\prime(\\mu)$ in\nour code.\nFor the purpose of the evolution, it is convenient to introduce the following\n$\\overline{\\mathrm{MS}}$ coupling constants related to the\n$\\overline{\\mathrm{MS}}$ parameters in Eq.~(\\ref{ms_param}):\n\\begin{eqnarray}\na_1(\\mu)&=&\\frac{5}{3}\\,\\frac{g^{\\prime2}(\\mu)}{16\\pi^2},\\qquad\na_2(\\mu)=\\frac{g^2(\\mu)}{16\\pi^2},\\qquad\na_s(\\mu)=\\frac{g_s^2(\\mu)}{16\\pi^2},\\nonumber\\\\ \na_t(\\mu)&=&\\frac{y_t^2(\\mu)}{16\\pi^2},\\qquad\na_b(\\mu)=\\frac{y_b^2(\\mu)}{16\\pi^2},\\qquad\na_\\tau(\\mu)=\\frac{y_\\tau^2(\\mu)}{16\\pi^2},\\nonumber\\\\\na_\\lambda(\\mu)&=&\\frac{\\lambda(\\mu)}{16\\pi^2},\n\\label{eq:a-couplings}\n\\end{eqnarray}\nwhere we have chosen the GUT normalization for $a_1(\\mu)$ and introduced the\nYukawa coupling $y_\\tau(\\mu)$ of the $\\tau$ lepton.\nThen, Eq.~(\\ref{eq:RG1}) becomes the system of the seven coupled differential\nequations describing the RG evolution of the $\\overline{\\mathrm{MS}}$ coupling\nconstants in Eq.~(\\ref{eq:a-couplings}), \n\\begin{eqnarray}\n\\partial_t a_1&=&\\beta_{a_1}(\\mathbf{a}),\\qquad\n\\partial_t a_2=\\beta_{a_2}(\\mathbf{a}),\\qquad\n\\partial_t a_s=\\beta_{a_s}(\\mathbf{a}),\\nonumber\\\\\n\\partial_t a_t&=&\\beta_{a_t}(\\mathbf{a}),\\qquad\n\\partial_t a_b=\\beta_{a_b}(\\mathbf{a}),\\qquad\n\\partial_t a_\\tau=\\beta_{a_\\tau}(\\mathbf{a}),\\nonumber\\\\\n\\partial_t a_\\lambda&=&\\beta_{a_\\lambda}(\\mathbf{a}),\n\\label{eq:rge-7eq}\n\\end{eqnarray}\nwhere $\\mathbf{a}$ is a seven-component vector accommodating all the relevant\n$\\overline{\\mathrm{MS}}$ coupling constants in the SM, \n$\\mathbf{a}=\\{a_1,a_2,a_s,a_t,a_b,a_\\tau,a_\\lambda\\}$,\nand $\\partial_t$ means differentiation with respect to $t=\\ln\\mu^2$.\nThe evolution of $m_\\phi(\\mu)$ and $v(\\mu)$ is controlled by the two\nadditional differential equations,\n\n", "itemtype": "equation", "pos": 11637, "prevtext": "\nThe expansion coefficients $Y^{i,j}_x(\\mu)$ are generally available for\n$i,j=1,2$, which corresponds to two-loop matching.\nBeyond that, the pure QCD corrections\\footnote{\nIn the bosonic cases $x=W,Z,H$, the pure QCD contributions vanish identically,\n$Y^{0,j}_x(\\mu)=0$.}\nare known through four loops and are given by $Y^{0,3}_f(\\mu)$ and\n$Y^{0,4}_f(\\mu)$.\n\nIn addition to Eq.~(\\ref{eq:tc}) for the couplings, we also present the\nmatching relations for the masses, which we write as\n\\begin{eqnarray}\n  m_B^2(\\mu_0) &=& M_B^2 [1 + \\Delta_B(\\mu_0)],\n  \\qquad B=W,Z,H,\n\\nonumber\\\\\n  m_f(\\mu_0) &=& M_f [1 + \\Delta_f(\\mu_0)],\n  \\qquad f=t,b,\n  \\label{eq:m}\n\\end{eqnarray}\nfor the bosons and fermions, respectively.\nThe functions $\\Delta_x(\\mu)$ may also be expanded in perturbation series,\n\n", "index": 15, "text": "\\begin{equation}\n  \\label{eq:mpertfer}\n  \\Delta_x(\\mu) = \\sum_{i,j} \\left(\\frac{\\alpha(\\mu)}{4\\pi}\\right)^i\n                   \\left(\\frac{\\alpha_s(\\mu)}{4\\pi}\\right)^j X^{i,j}_x(\\mu).\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E8.m1\" class=\"ltx_Math\" alttext=\"\\Delta_{x}(\\mu)=\\sum_{i,j}\\left(\\frac{\\alpha(\\mu)}{4\\pi}\\right)^{i}\\left(\\frac%&#10;{\\alpha_{s}(\\mu)}{4\\pi}\\right)^{j}X^{i,j}_{x}(\\mu).\" display=\"block\"><mrow><mrow><mrow><msub><mi mathvariant=\"normal\">\u0394</mi><mi>x</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>,</mo><mi>j</mi></mrow></munder><mrow><msup><mrow><mo>(</mo><mfrac><mrow><mi>\u03b1</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mn>4</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow></mfrac><mo>)</mo></mrow><mi>i</mi></msup><mo>\u2062</mo><msup><mrow><mo>(</mo><mfrac><mrow><msub><mi>\u03b1</mi><mi>s</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mn>4</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow></mfrac><mo>)</mo></mrow><mi>j</mi></msup><mo>\u2062</mo><msubsup><mi>X</mi><mi>x</mi><mrow><mi>i</mi><mo>,</mo><mi>j</mi></mrow></msubsup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03bc</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.08143.tex", "nexttext": "\nwith\n  \n", "itemtype": "equation", "pos": 28626, "prevtext": "\nThe comments made below Eq.~(\\ref{eq:deltax}) also apply to\nEq.~(\\ref{eq:mpertfer}).\n\nThe pure QCD corrections to $m_t(\\mu)$ and $y_t(\\mu)$ are evaluated according\nto Eq.~(59) in Ref.~\\cite{Kniehl:2015nwa} with $n_l=5$ massless quarks and\n$n_h=1$ massive quark.\nFor the pure QCD corrections to $m_b(\\mu)$ and $y_b(\\mu)$, to take into account\ndiagrams with top-quark insertions, we treat the four lightest quarks as\nmassless, but keep both the top and bottom quarks massive through two loops.\nThe corresponding analytic formula reads \\cite{Gray:1990yh,Bekavac:2007tk}:\n\\begin{eqnarray}\n  \\label{eq:topInBottomQCD}\n  \n                        \\delta_{\\rm QCD}(\\mu) &=&\n                        \n                        \n                        \n                                                \\frac{\\alpha_s}{4\\pi}\\left(-\\frac{16}{3} - 4l_{\\mu M_b}\\right)\n                                                \n                                                \n                                                \n                                                + \\left(\\frac{\\alpha_s}{4\\pi}\\right)^2\\left\\{\n                                                -\\frac{3305}{18}\n                                                -\\frac{64\\zeta_2}{3}\n                                                +\\frac{8 \\zeta_3}{3}\n                                                \\right. \\nonumber\\\\\n                      &&{}-\\frac{32 \\zeta_2}{3}\\ln 2\n + n_h \\left(\\frac{143}{9}-\\frac{32 \\zeta_2}{3}\\right)\n                        + n_l\\left(\\frac{71}{9}+\\frac{16\n                        \\zeta_2}{3}\\right)\\nonumber\\\\ \n                      &&{} + \\frac{n_m}{ 9 t^4}\\left[72 t^2 + 71 t^4 - 48 t^2\n                        H_{0}(t) + 48(1 + t + t^3 + t^4)\n                        H_{-1, 0}(t) \\right.\\nonumber\\\\\n                      &&{}- \\left. 48 H_{1,0}(t) - 96 t^4 H_{0, 0}(t) + \n                        48 t (1 + t^2 - t^3) H_{1, 0}(t)\\right] \\nonumber\\\\\n                      \n                      \n                      \n                      &&{}+l_{\\mu M_b}\\left[-\\frac{314}{3} + \\frac{52}{9}(n_h+n_l+n_m)\\right]\\nonumber\\\\\n                      \n                      \n                      \n                      &&{}+\\left.l_{\\mu M_b}^2\\left[\n                        -14+\\frac{4}{3}(n_h+n_l+n_m)\n                        \\right]\n                        \\right\\},\n\\end{eqnarray}\nwhere $n_l=4$, $n_h=1$, $n_m=1$ refers to the massive bottom quark, $t=M_b/M_t$,\n$l_{\\mu M_b}=\\ln(\\mu^2/M_b^2)$, and\n\\begin{eqnarray}\n  H_{0}(t)   & =& \\ln t,\\qquad\n             H_{-1,0}(t)  = \\ln t \\ln(1 + t) + {\\mathop{\\mathrm{Li}}\\nolimits}_2(-t),\\nonumber\\\\\n  H_{0,0}(t)  & =& \\frac{\\ln^2t}{2},\\qquad\n              H_{1,0}(t)  = -\\ln t\\ln(1 - t) - {\\mathop{\\mathrm{Li}}\\nolimits}_2(t)\\nonumber\\\\\n\\end{eqnarray}\nare harmonic polylogarithms as introduced in Ref.~\\cite{Remiddi:1999ew}.\n\nFinally, also the relations inverse to Eq.~(\\ref{eq:m}), which express the pole\nmasses in terms of the $\\overline{\\mathrm{MS}}$ parameters, may be of\ninterest \\cite{Jegerlehner:2001fb,Jegerlehner:2002em,Martin:2014cxa},\n\\begin{eqnarray}\nM_b^2 &=& m_B^2(\\mu_0) \\left[1 + \\overline{\\Delta}_B(\\mu_0) \\right],\n\\nonumber\\\\\nM_f &=& m_f(\\mu_0) \\left[1 + \\overline{\\Delta}_f(\\mu_0) \\right].\n\\label{eq:mos}\n\\end{eqnarray}\nThe functions $\\overline{\\Delta}_x(\\mu)$ are parametrized similarly to\nEq.~(\\ref{eq:mpertfer}), with expansion coefficients\n$\\overline{X}^{i,j}_x(\\mu)$.\nThey are included in our \\texttt{C++} program library as well.\n\nThe running of the $\\overline{\\mathrm{MS}}$ parameters in Eqs.~(\\ref{ms_param}) and\n(\\ref{ms_masses}) is governed by the RG equations,\n\\begin{eqnarray}\n\\label{eq:RG1}\n  \\mu^2\\frac{dx}{d\\mu^2} &=& \\beta_x,\\qquad x=g_s,g,g^\\prime,y_t,y_b,\\lambda,\n\\\\\n\\label{eq:RG2}\n  \\mu^2\\frac{d\\ln x}{d\\mu^2} &=& \\gamma_x,\\qquad x=m_W,m_Z,m_H,m_t,m_b,\n\\end{eqnarray}\nwith the respective $\\beta$ functions $\\beta_x$ and mass anomalous dimensions\n$\\gamma_x$.\nGiven the values of the parameters $x(\\mu_0)$ at some initial scale $\\mu_0$,\nEqs.~(\\ref{eq:RG1}) and (\\ref{eq:RG2}) allow us to find their values at some\nhigh scale $\\mu$.\nSince $\\beta_x$ and $\\gamma_x$ are in turn functions of the $\\overline{\\mathrm{MS}}$ parameters in\nEq.~(\\ref{ms_param}), the RG equations form a system of nonlinear differential\nequations to be solved simultaneously.\nThe functions $\\beta_x$ and $\\gamma_x$ have been known through four loops in\nQCD for a long time\n\\cite{vanRitbergen:1997va,Chetyrkin:1997dh,Vermaseren:1997fq,Chetyrkin:2004mf,\nCzakon:2004bu}\nand have recently been computed through three loops in the full SM\n\\cite{Mihaila:2012fm,Chetyrkin:2012rz,Mihaila:2012pz,Bednyakov:2012rb,\nBednyakov:2012en,Chetyrkin:2013wya,Bednyakov:2013eba,Bednyakov:2013cpa}.\n\n\\section{\\texttt{C++} library \\texttt{mr}}\n\\label{sec:c++-interface}\n\nThe \\rm program library provides the following ingredients:\n\\begin{itemize}\n\\item evaluation of the coefficients $Y_x^{i,j}(\\mu)$ and $X_x^{i,j}(\\mu)$ in\nEqs.~(\\ref{eq:deltax}) and (\\ref{eq:mpertfer}), respectively, for given input\nvalues of the OS parameters in Eq.~(\\ref{eq:brinput}) and, inversely, of the\ncoefficients $\\bar{X}_x^{i,j}(\\mu)$ for the given input values of the\n$\\overline{\\mathrm{MS}}$ parameters in Eqs.~(\\ref{ms_param}) and\n(\\ref{ms_masses}),\n\\item evaluation of the $\\overline{\\mathrm{MS}}$ couplings and masses according\nto Eqs.~(\\ref{eq:tc}) and (\\ref{eq:m}), respectively, as well as evaluation of\nthe inverse relations in Eq.~(\\ref{eq:mos}),\n\\item evolution of the $\\overline{\\mathrm{MS}}$ parameters in the scale $\\mu$\nusing the RG equations in Eqs.~(\\ref{eq:RG1}) and (\\ref{eq:RG2}).\n\\end{itemize}\n\nFirst, in order to use the \\texttt{C++} interface, one has to include the\ncorresponding header file. \nAll parts of the program library are placed in the namespace \\texttt{mr}:\n\\begin{lstlisting}\n  #include \"mr.hpp\"\n  using namespace mr;\n\\end{lstlisting}\n\n\\subsection{Input parameters}\n\\label{sec:input}\n\nBefore evaluating the coefficients $X_x^{i,j}(\\mu)$ and $Y_x^{i,j}(\\mu)$, the\ninput parameter class must be created.\nIf we wish to use the OS parameters as input, we have to use the class\n\\texttt{OSinput} with a constructor taking as arguments the five pole masses\n$M_b$, $M_W$, $M_Z$, $M_H$, and $M_t$ (in GeV):\n\\begin{lstlisting}\n  //           Mb     MW       MZ       MH      Mt\n  OSinput oi(4.4, 80.385, 91.1876, 125.7, 173.2);\n\\end{lstlisting}\nFor the user's convenience, we have predefined sets of input parameters from\ndifferent editions of the Review of Particle Physics by the Particle Data Group\n(PDG) tabulated in enums named \\texttt{pdg20xx}, where \\texttt{20xx} denotes\nthe year of the edition.\nFor example, we may construct an object using the OS input from the 2014 issue\nas:\n\\begin{lstlisting}\n  OSinput oi(pdg2014::Mb, pdg2014::MW, pdg2014::MZ, pdg2014::MH, pdg2014::Mt);\n\\end{lstlisting}\nFor a detailed description of the \\texttt{OSinput} class methods, see\n\\ref{sec:class-osinput}.\n\nIf we are interested in the inverse relations, defining the pole masses in\nterms of the $\\overline{\\mathrm{MS}}$ parameters, we have to use the class\n\\texttt{MSinput}. \nIt constructs an object from the $\\overline{\\mathrm{MS}}$ masses (in GeV)\n(for a detailed description, see \\ref{sec:class-MSinput}):\n\\begin{lstlisting}\n  //                          mb      mW       mZ       mH      mt\n  mi = MSinput::fromMasses(4.4, 80.385, 91.1876, 125.7, 173.2);\n\\end{lstlisting}\nor from the $\\overline{\\mathrm{MS}}$ coupling constants:\n\\begin{lstlisting}\n  //                        g1      g2        yb        yt      lambda\n  mi = MSinput::fromCouplings(4.4, 80.385, 91.1876, 125.7, 173.2);\n\\end{lstlisting}\n\n\n\n\\subsection{Evaluation of coefficients $X_x^{i,j}(\\mu)$ and $Y_x^{i,j}(\\mu)$}\n\nHaving at hand the \\lstinline!OSinput! class instance, we may construct\ninstances of classes providing the $\\overline{\\mathrm{MS}}$ masses and\ncouplings for given input values of the pole masses:\n\\begin{lstlisting}\nbb<OS>    db(oi, oi.MMt());\nWW<OS>    dW(oi, oi.MMt());\nZZ<OS>    dZ(oi, oi.MMt());\nHH<OS>    dH(oi, oi.MMt());\ntt<OS>    dt(oi, oi.MMt());\n\\end{lstlisting}\nHere, the second parameter is the square of the matching scale $\\mu_0$;\nin the previous example, we have used $\\mu_0^2=M_t^2$.\nFor the $b$, $W$, $Z$, $H$, and $t$ initialization \\texttt{bb<OS>}, etc., this\nmeans that we calculate the $\\overline{\\mathrm{MS}}$ parameters in terms of the\nOS ones.\n\nWhen we wish to calculate the inverse relations in Eq.~(\\ref{eq:mos}), we may\nspecify the input values of the $\\overline{\\mathrm{MS}}$ masses as:\n\\begin{lstlisting}\nMSinput mi(mb, mW, mZ, mH, mt);\n\\end{lstlisting}\nIn contrast to the OS masses, which are denoted by uppercase letters,\n$\\overline{\\mathrm{MS}}$ masses are denoted by lowercase letters.\nThe input parameters \\texttt{mb}, \\texttt{mW}, \\texttt{mZ}, \\texttt{mH}, and\n\\texttt{mt} implicitly dependent on the scale $\\mu$.\nWhen the coefficients $\\bar{X}_x^{i,j}(\\mu)$ are to be calculated from the\n$\\overline{\\mathrm{MS}}$ masses, the scale $\\mu$ at which the latter are\ndefined has to be specified:\n\\begin{lstlisting}\nbb<MS> xb(mi, mi.mmt());\nWW<MS> xW(mi, mi.mmt());\nZZ<MS> xZ(mi, mi.mmt());\nHH<MS> xH(mi, mi.mmt());\ntt<MS> xt(mi, mi.mmt());\n\\end{lstlisting}\nNote that the scale $\\mu$ is common to all the $\\overline{\\mathrm{MS}}$ masses.\nHere, we have chosen $\\mu^2=m_t^2(\\mu)$.\n\nFor each type of particle and set of input parameters, the construction of the\nclass instances \\texttt{db}, \\texttt{dW}, \\texttt{dZ}, \\texttt{dH}, and\n\\texttt{dt} or \\texttt{xb}, \\texttt{xW}, \\texttt{xZ}, \\texttt{xH}, and\n\\texttt{xt} is the most time-consuming operation.\nAt this step, the prototypes of all master integrals are evaluated for the\npredefined values in the input masses.\n\nAfter initialization, the expansion coefficients in Eqs.~(\\ref{eq:deltax}) and\n(\\ref{eq:mpertfer}) become available for each particle $x$.\nOne may refer to the coefficients $X_x^{i,j}(\\mu)$ and $Y_x^{i,j}(\\mu)$ through\nthe following methods:\n\\begin{lstlisting}\nlong double <particle>::x(size_t a_order, size_t as_order)\nlong double <particle>::y(size_t a_order, size_t as_order)\n\\end{lstlisting}\nAlternatively the calls \\texttt{xij()} or \\texttt{yij()} are also available,\nwhere $i$ and $j$ are integers.\nFor example, the call \\texttt{dZ.x(1,1)} is equivalent to \\texttt{dZ.x11()},\nand the call \\texttt{dt.y(0,3)} is equivalent to \\texttt{dt.y03()}, and so on.\n\n\n\n\n\n\\subsection{Evaluation of corrections to $\\overline{\\textrm{MS}}$ coupling\nconstants and masses}\n\\label{sec:p2ms}\n\nFor the evaluation of the $\\overline{\\mathrm{MS}}$ parameters from\nEqs.~(\\ref{eq:tc}) and (\\ref{eq:m}) as implemented in our code, $\\alpha_s(\\mu)$\nand $\\alpha(\\mu)$ have to be supplied at the chosen scale $\\mu$.\n\nLet us first consider $\\alpha_s(\\mu)$.\nWe implemented a routine for the evolution of $\\alpha_s(\\mu)$ to the desired\nscale $\\mu$, starting from some initial scale $\\mu_0$ and the initial value\n$\\alpha_s(\\mu_0)$, which is $\\alpha_s(M_Z)$ by default.\nSometimes, however, it is of interest to perform the matching at some different\nscale $\\mu_0$.\nIf $\\mu_0\\geq M_t$, the corresponding decoupling at the top-quark threshold\n$M_t$ has to be taken into account. \nThis is implemented in our code through order $O(\\alpha_s^3)$\n\\cite{Chetyrkin:1997sg,Chetyrkin:1997un}.\n\nIn the following example, we perform the evolution of $\\alpha_s(\\mu)$ from the\ninitial PDG value at $\\mu_0=M_Z$ up to the scale $\\mu=1000$~GeV crossing the\ntop-quark threshold:\n\\begin{lstlisting}\n  // Initial scale is oi.MZ() 4-loop running\n  AlphaS aS(oi, pdg2014::asMZ, 4);\n  // Crossing Mt threshold\n  std::cout << aS(1000) << std::endl;\n\\end{lstlisting}\n\nLet us now turn to $\\alpha(\\mu)$.\nIn our approach, it is defined through Eqs.~(\\ref{eq:e}) and (\\ref{eq:a_mu}).\nIf we introduce $G_F$ as an additional input parameter, we may express\n$\\alpha(\\mu)$ as \\cite{Kniehl:2015nwa}\n\\begin{eqnarray}\n\\label{alphamu}\n  \\alpha(\\mu) = \\frac{\\sqrt{2}G_F M_W^2}{\\pi}\n    [ 1 + \\delta_W(\\mu) ] \\left[ 1 - \\frac{M_W^2}{M_Z^2}\\,\n \\frac{1 + \\delta_W(\\mu)}{1 + \\delta_Z(\\mu)}\n     \\right].                                                                   \n\\end{eqnarray}\nSince $\\delta_Z(\\mu)$ and $\\delta_W(\\mu)$ depend on $\\alpha(\\mu)$,\nEq.~(\\ref{alphamu}) only provides an implicit definition of $\\alpha(\\mu)$.\nThe \\texttt{mr} program library provides two different classes,\n\\texttt{AlphaSolve} and \\texttt{AlphaGF}, to obtain $\\alpha(\\mu)$ (see\n\\ref{sec:class-p2ms}).\nClass \\texttt{AlphaSolve} uses a numerical solution of Eq.~(\\ref{alphamu}),\nwhile class \\texttt{AlphaGF} uses a perturbative reexpansion thereof.\n\nClass \\texttt{P2MS} allows us to evaluate all the $\\overline{\\mathrm{MS}}$\ncouplings and masses at a chosen matching scale $\\mu_0$.\nTo use it, object \\texttt{OSinput} has to be constructed first, by one of the\nmethods described in Section~\\ref{sec:input}.\nOne also has to create the $\\alpha_s(\\mu)$ object \\texttt{AlphaS} as described\nabove. \n\nHere is an example of defining two sets of $\\overline{\\mathrm{MS}}$ parameters,\none with $\\mu_0=M_Z$ and the other one with $\\mu_0=M_t$, using the same set of\nOS input parameters:\n\\begin{lstlisting}\n// Input: Pole masses and Fermi constant in OS scheme\nOSinput oi(pdg2014::Mb, pdg2014::MW, pdg2014::MZ, pdg2014::MH, pdg2014::Mt);\n// $\\overline{\\mathrm{MS}}$ QCD coupling for as(Mt) from as(MZ)\nAlphaS as(oi);\n// Set of all $\\overline{\\mathrm{MS}}$ parameters at scale Mt\nP2MS pMSmt(oi,pdg2014::Gf, as(oi.Mt()), oi.Mt(), order::all);\n// Set of all $\\overline{\\mathrm{MS}}$ parameters at scale MZ\nP2MS pMSmZ(oi,pdg2014::Gf, as(oi.MZ()), oi.MZ(), order::all);\n\\end{lstlisting}\nThe arguments in the constructor of \\texttt{P2MS} include the \\texttt{OSinput}\nobject, the value of $G_F$, the value of $\\alpha_s(\\mu_0)$, and the scale\n$\\mu_0$.\nThe last argument, \\texttt{order}, is a mask indicating the orders to be\nincluded in Eqs.~ (\\ref{eq:deltax}) and (\\ref{eq:mpertfer}) (see classes\n\\texttt{AlphaSolve} and \\texttt{AlphaGF}).\n\n\\subsection{RG evolution}\n\nFor the evolution of the $\\overline{\\mathrm{MS}}$ couplings from the initial\nscale $\\mu_0$ up to the final scale $\\mu$, we implemented in our code the full\nthree-loop results for the SM $\\beta$ functions.\nThe pure QCD corrections to $\\alpha_s(\\mu)$ at four loops\n\\cite{vanRitbergen:1997va,Czakon:2004bu,Bednyakov:2015ooa} and to $y_t(\\mu)$ and\n$y_b(\\mu)$ at four \\cite{Chetyrkin:1997dh,Vermaseren:1997fq,Chetyrkin:2004mf}\nand five \\cite{Baikov:2014qja} loops are also included.\nUsing these $\\beta$ functions, we may construct the system of coupled\ndifferential equations, which can be solved numerically.\nFor its numerical solution, we use the Cash--Karp modification of the\nRunge--Kutta method with adaptive grid step as implemented in the\nexternal routine \\texttt{OdeInt} \\cite{2011AIPC.1389.1586A}.\n\nInstead of $g^\\prime(\\mu)$, the rescaled constant\n\\begin{eqnarray}\n\\label{eq:g1}\n   g_1(\\mu) = \\sqrt{\\frac{3}{5}} g^\\prime(\\mu),\n\\end{eqnarray}\nwhich corresponds to the normalization familiar from grand unified theories\n(GUTs), is sometimes used in the literature.\nFollowing this tradition, we also use $g_1(\\mu)$ rather than $g^\\prime(\\mu)$ in\nour code.\nFor the purpose of the evolution, it is convenient to introduce the following\n$\\overline{\\mathrm{MS}}$ coupling constants related to the\n$\\overline{\\mathrm{MS}}$ parameters in Eq.~(\\ref{ms_param}):\n\\begin{eqnarray}\na_1(\\mu)&=&\\frac{5}{3}\\,\\frac{g^{\\prime2}(\\mu)}{16\\pi^2},\\qquad\na_2(\\mu)=\\frac{g^2(\\mu)}{16\\pi^2},\\qquad\na_s(\\mu)=\\frac{g_s^2(\\mu)}{16\\pi^2},\\nonumber\\\\ \na_t(\\mu)&=&\\frac{y_t^2(\\mu)}{16\\pi^2},\\qquad\na_b(\\mu)=\\frac{y_b^2(\\mu)}{16\\pi^2},\\qquad\na_\\tau(\\mu)=\\frac{y_\\tau^2(\\mu)}{16\\pi^2},\\nonumber\\\\\na_\\lambda(\\mu)&=&\\frac{\\lambda(\\mu)}{16\\pi^2},\n\\label{eq:a-couplings}\n\\end{eqnarray}\nwhere we have chosen the GUT normalization for $a_1(\\mu)$ and introduced the\nYukawa coupling $y_\\tau(\\mu)$ of the $\\tau$ lepton.\nThen, Eq.~(\\ref{eq:RG1}) becomes the system of the seven coupled differential\nequations describing the RG evolution of the $\\overline{\\mathrm{MS}}$ coupling\nconstants in Eq.~(\\ref{eq:a-couplings}), \n\\begin{eqnarray}\n\\partial_t a_1&=&\\beta_{a_1}(\\mathbf{a}),\\qquad\n\\partial_t a_2=\\beta_{a_2}(\\mathbf{a}),\\qquad\n\\partial_t a_s=\\beta_{a_s}(\\mathbf{a}),\\nonumber\\\\\n\\partial_t a_t&=&\\beta_{a_t}(\\mathbf{a}),\\qquad\n\\partial_t a_b=\\beta_{a_b}(\\mathbf{a}),\\qquad\n\\partial_t a_\\tau=\\beta_{a_\\tau}(\\mathbf{a}),\\nonumber\\\\\n\\partial_t a_\\lambda&=&\\beta_{a_\\lambda}(\\mathbf{a}),\n\\label{eq:rge-7eq}\n\\end{eqnarray}\nwhere $\\mathbf{a}$ is a seven-component vector accommodating all the relevant\n$\\overline{\\mathrm{MS}}$ coupling constants in the SM, \n$\\mathbf{a}=\\{a_1,a_2,a_s,a_t,a_b,a_\\tau,a_\\lambda\\}$,\nand $\\partial_t$ means differentiation with respect to $t=\\ln\\mu^2$.\nThe evolution of $m_\\phi(\\mu)$ and $v(\\mu)$ is controlled by the two\nadditional differential equations,\n\n", "index": 17, "text": "\\begin{equation}\n  \\partial_t m_\\phi=\\beta_{m_\\phi}(\\mathbf{a}),\\qquad\n  \\partial_t v  =\\beta_{v}(\\mathbf{a}),\n\\label{eq:rge-9eq}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E9.m1\" class=\"ltx_Math\" alttext=\"\\partial_{t}m_{\\phi}=\\beta_{m_{\\phi}}(\\mathbf{a}),\\qquad\\partial_{t}v=\\beta_{v%&#10;}(\\mathbf{a}),\" display=\"block\"><mrow><mrow><mrow><mrow><msub><mo>\u2202</mo><mi>t</mi></msub><mo>\u2061</mo><msub><mi>m</mi><mi>\u03d5</mi></msub></mrow><mo>=</mo><mrow><msub><mi>\u03b2</mi><msub><mi>m</mi><mi>\u03d5</mi></msub></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc1a</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo rspace=\"22.5pt\">,</mo><mrow><mrow><msub><mo>\u2202</mo><mi>t</mi></msub><mo>\u2061</mo><mi>v</mi></mrow><mo>=</mo><mrow><msub><mi>\u03b2</mi><mi>v</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udc1a</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.08143.tex", "nexttext": "\nwhere we have adopted the definitions of $\\gamma_{m_\\phi^2}$ and $\\gamma_v$ from\nRefs.~\\cite{Bednyakov:2013eba,Bednyakov:2013cpa}, respectively.\nThe RG evolution of the $\\overline{\\mathrm{MS}}$ coupling constants according\nto Eq.~(\\ref{eq:rge-7eq}) is implemented in class \\texttt{CouplingsSM} and the\nextension by the RG evolution of the two additional $\\overline{\\mathrm{MS}}$\nmass parameters according to Eq.~(\\ref{eq:rge-9eq}) in class\n\\texttt{ParametersSM}.\nBoth of them are template classes.\nUsing template parameters as \\texttt{<a1,a2,as,at,ab,atau,alam,mphi,vev>}, it\nis possible to specify the orders of the $\\beta$ functions used for the\nsolution of the differential equations.\n\nThe following example uses three-loop $\\beta$ functions for the EW gauge\ncouplings and parameters, and four-loop $\\beta$ functions for the strong and\nYukawa couplings, and the negative value \\texttt{-1} at the sixth template\nparameter position means that the coupling $y_\\tau(\\mu)$ is completely\neliminated from the SM:\n\\begin{lstlisting}\n  ParametersSM<3,3,4,4,4,-1,3,3,3> \n              p(a1, a2, as, at, ab, atau, lam, mphi, vev, NG)\n\\end{lstlisting}\nIf we are just interested in the solution of the coupled system of differential\nequations describing the evolution of the $\\overline{\\mathrm{MS}}$ coupling\nconstants in Eq.~(\\ref{eq:rge-7eq}), we may use the short form:\n\\begin{lstlisting}\n  CouplingsSM<3,3,4,4,4,-1,3> \n              p(a1, a2, as, at, ab, atau, lam, NG)\n\\end{lstlisting}\nIf the object \\texttt{P2MS} has already been constructed, as described in\nSection~\\ref{sec:p2ms} and \\ref{sec:class-p2ms}, it is possible to\ncreate a solver using: \n\\begin{lstlisting}\n  CouplingsSM<3,3,4,4,4,-1,3> p(p2ms, NG)\n\\end{lstlisting}\nHere, \\texttt{p2ms} is the previously constructed object of type \\texttt{P2MS}.\nIn all these examples, \\texttt{mu0} is the initial scale (in GeV) for the RG\nevolution, and \\texttt{NG} is the number of fermion generations in the SM, with\ndefault value $\\mbox{\\tt NG}{}=3$.\n\nThe actual RG evolution proceeds when \\texttt{operator()} is called for one of\nthe above-mentioned classes.\nCorrespondingly, a seven-component vector containing the values of the\n$\\overline{\\mathrm{MS}}$ coupling constants or a nine-component vector\ncontaining also the two $\\overline{\\mathrm{MS}}$ mass parameters is returned.\nIf, for example, we are interested in $m_{\\phi}(\\mu)$ at the scale\n$\\mu=1000$~GeV, the following sequence of commands has to be entered:\n\\begin{lstlisting}\n  SMCouplings ai = p(1000);\n  // using enum couplings for more readable indexing\n  std::cout << ai[couplings::mphi] << std::endl;\n  // using numerical index, starting from 0\n  std::cout << ai[7] << std::endl;\n\\end{lstlisting}\nWe refer to \\ref{sec:methods-rge} for further details.\n\n\\section{\\texttt{Mathematica} interface}\n\\label{sec:math-interf}\n\nIt is possible to compile a \\texttt{Mathematica} interface to the \\texttt{mr}\nprogram library.\nIf the \\texttt{Mathematica} installation path is unusual, the path to the\ndevelopment utils \\texttt{mprep} and \\texttt{mcc} has to be specified at the\nconfiguration step, e.g., as:\n\\begin{lstlisting}[language=bash]\n  ./configure --with-mcc-path=<MATHDIR>/<ARCH>/CompilerAdditions\n\\end{lstlisting}\nHere, \\texttt{<MATHDIR>/<ARCH>/CompilerAdditions} is a path to the directory\ncontaining the \\texttt{mprep} and \\texttt{mcc} utils.\n\nWhen the \\texttt{Mathematica} interface is successfully compiled, it is\npossible to load it into \\texttt{Mathematica}.\nIf the \\texttt{mr} mathlink executable is placed in the same directory and, for\nexample, we wish to calculate $m_W^2(\\mu)/M_W^2$ at scale $\\mu=M_t$, then a\ntypical session is:\n\\begin{lstlisting}[language=Mathematica]\n  Install[\"mr\"];\n  (*      Mb   MW   MZ   MH   MT   mu *)\n  mmWMMW[4.4, 80, 91, 125, 173, 173]  \n\\end{lstlisting}\nThe output, where the user has to supply the values of the\n$\\overline{\\mathrm{MS}}$ coupling constants at scale $\\mu$, \\texttt{aEW[mu]}\nand \\texttt{aQCD[mu]}, then reads:\n\\begin{lstlisting}[language=Mathematica]\n  {\n    1 + 185.3545315192623037 aEW[173] \n      +  563.188663413438646 aEW[173] aQCD[173]\n      - 19207.76644304067414 aEW[173]^2   \n  }\n\\end{lstlisting}\nAlternatively, if we are just interested in the set of coefficients, the\ncommand: \n\\begin{lstlisting}[language=Mathematica]\n  Install[\"mr\"];\n  (*  Mb   MW   MZ   MH   MT   mu *)\n  Xt[4.4, 80, 91, 125, 173, 173]  \n\\end{lstlisting}\nreturns a substitution list for the top-quark coefficients\n$\\mbox{\\tt yT}=Y_t^{i,j}(\\mu)$ in Eq.~(\\ref{eq:deltax})\nand $\\mbox{\\tt xt}=X_t^{i,j}(\\mu)$ in Eq.~(\\ref{eq:mpertfer}):\n\\begin{lstlisting}[language=Mathematica]\n  {\n    xt[1, 0] -> 108.36879199119430404, \n    yT[1, 0] -> 2.1032409021919717513,\n    xt[1, 1] -> -412.09726673991774271, \n    yT[1, 1] -> -79.271276023543769118, \n    xt[2, 0] -> -13725.00152946124629, \n    yT[2, 0] -> 685.749556148969868\n  }\n\\end{lstlisting}\nThese functions, supplied with the \\texttt{Mathematica} expressions for the SM\n$\\beta$ functions, which are available, for example, as ancillary files to the\narXiv versions of\nRefs.~\\cite{Bednyakov:2012rb,Bednyakov:2012en,Bednyakov:2013eba},\nare sufficient for the analysis.\n\n\n\n\\section{Example programs}\n\\label{sec:typical-examples}\n\nWe supply example programs with the code of the \\texttt{mr} program library.\nFor the compilation of the user's program using the \\texttt{mr} program\nlibrary, one has to type:\\\\\n\\lstinline[language=bash]!g++ -o userprog 'pkg-config --cflags --libs mr'  userprog.cpp!\\\\\nA complete example is presented in \\ref{sec:example}.\n\n\\section{Conclusion}\n\\label{sec:conclusion}\n\nWe presented the \\texttt{C++} program library \\texttt{mr} with a\n\\texttt{Mathematica} interface for the evaluation of the\n$\\overline{\\mathrm{MS}}$ couplings of the SM including the full set of two-loop\nthreshold corrections and their three-loop evolution with high numerical\nprecision.\nThe source code including examples is available from the URL\\break\n\\url{http://apik.github.io/mr/}.\nA development version of this program library has already been used for the\nanalysis of the EW vacuum stability in the SM \\cite{Bednyakov:2015sca}.\n\n\\section{Acknowledgments}\n\\label{sec:acknowledgments}\n\nWe thank A.~V.~Bednyakov for useful discussions and for testing our program\nlibrary.\nThis work was supported in part by the German Federal Ministry for Education\nand Research BMBF through Grant No.\\ 05H15GUCC1, by the German Research\nFoundation DFG through the Collaborative Research Centre No.\\ SFB~676\n{\\it Particles, Strings and the Early Universe: the Structure of Matter and\nSpace-Time}, by the Heisenberg--Landau Programme, and by the Dynasty\nFoundation.\n\n\\newpage\n\n\\appendix\n\n\\section{Methods needed for OS mass input}\n\\label{sec:a}\n\n\\subsection{Class \\texttt{OSinput}}\n\\label{sec:class-osinput}\n\nThis class includes the following methods:\n\\begin{itemize}\n\\item \n\\lstinline!OSinput(long double Mb, MW, MZ, MH, Mt) !\\\\\nas the class constructor,\n\\item \\lstinline!long double MMb(), MMW(), MMZ(), MMH(), MMt() !\\\\\nto get the squared masses $M_b^2$, $M_W^2$, $M_Z^2$, $M_H^2$, and $M_t^2$,\n\\item \\lstinline!long double Mb(), MW(), MZ(), MH(), Mt() !\\\\\nto get the masses $M_b$, $M_W$, $M_Z$, $M_H$, and $M_t$,\n\\item\\lstinline!OSinput setMb(long double), setMW(), setMZ(), setMH(), setMt() !\\\\\nto reset the values of the masses $M_b$, $M_W$, $M_Z$, $M_H$, and $M_t$ in the\nOS input already initialized,\n\\item\\lstinline!long double CW(), SW(), CCW(), SSW() !\\\\\nto get the trigonometric functions \n$\\cos\\theta_w$, $\\sin\\theta_w$, $\\cos^2\\theta_w$, and $\\sin^2\\theta_w$ of the\nweak mixing angle $\\theta_w$.\n\\end{itemize}\n\n\\subsection{Classes \\texttt{bb<OS>}, \\texttt{WW<OS>}, \\texttt{ZZ<OS>},\n\\texttt{HH<OS>}, and \\texttt{tt<OS>}}\n\\label{sec:class-xx-OS}\n\nThe results for the coefficients $Y_x^{i,j}(\\mu)$ and $X_x^{i,j}(\\mu)$ in\nEqs.~(\\ref{eq:deltax}) and (\\ref{eq:mpertfer}), respectively, are organized as\nfollows:\n\n", "itemtype": "equation", "pos": 28778, "prevtext": "\nwith\n  \n", "index": 19, "text": "\\begin{equation}\n    \\label{eq:bm-def}\n    \\beta_{m_\\phi}=\\frac{dm_\\phi}{d\\ln\\mu^2}=\\frac{m_\\phi}{2}\\gamma_{m_\\phi^2},\\qquad\n    \\beta_v=\\frac{dv}{d\\ln\\mu^2}=v\\gamma_v,\n  \\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E10.m1\" class=\"ltx_Math\" alttext=\"\\beta_{m_{\\phi}}=\\frac{dm_{\\phi}}{d\\ln\\mu^{2}}=\\frac{m_{\\phi}}{2}\\gamma_{m_{%&#10;\\phi}^{2}},\\qquad\\beta_{v}=\\frac{dv}{d\\ln\\mu^{2}}=v\\gamma_{v},\" display=\"block\"><mrow><mrow><mrow><msub><mi>\u03b2</mi><msub><mi>m</mi><mi>\u03d5</mi></msub></msub><mo>=</mo><mfrac><mrow><mi>d</mi><mo>\u2062</mo><msub><mi>m</mi><mi>\u03d5</mi></msub></mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mi>ln</mi><mo>\u2061</mo><msup><mi>\u03bc</mi><mn>2</mn></msup></mrow></mrow></mfrac><mo>=</mo><mrow><mfrac><msub><mi>m</mi><mi>\u03d5</mi></msub><mn>2</mn></mfrac><mo>\u2062</mo><msub><mi>\u03b3</mi><msubsup><mi>m</mi><mi>\u03d5</mi><mn>2</mn></msubsup></msub></mrow></mrow><mo rspace=\"22.5pt\">,</mo><mrow><msub><mi>\u03b2</mi><mi>v</mi></msub><mo>=</mo><mfrac><mrow><mi>d</mi><mo>\u2062</mo><mi>v</mi></mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mi>ln</mi><mo>\u2061</mo><msup><mi>\u03bc</mi><mn>2</mn></msup></mrow></mrow></mfrac><mo>=</mo><mrow><mi>v</mi><mo>\u2062</mo><msub><mi>\u03b3</mi><mi>v</mi></msub></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.08143.tex", "nexttext": "\nand similarly for $Y_x^{i,j}(\\mu)$, where \\texttt{nL} and \\texttt{nH} are the\nnumbers of massless and massive fermion generations, respectively, and\n\\texttt{boson} is a tag for the purely bosonic contributions.\nThis splitting allows for the extraction of the individual contributions from\nthe full results.\nThe default values, corresponding to the case of the SM, read\n$\\mbox{\\tt nL}{}=2$, $\\mbox{\\tt nH}{}=1$, and $\\mbox{\\tt boson}{}=1$.\nThe pure QCD corrections to $m_t(\\mu)$ and $y_t(\\mu)$ are evaluated using\nEq.~(59) in Ref.~\\cite{Kniehl:2015nwa} with $n_l=2\\,\\mbox{\\tt NL}{}+1$ and\n$n_h={}\\mbox{\\tt NH}$ and those to $m_b(\\mu)$ and $y_b(\\mu)$\nusing Eq.~(\\ref{eq:topInBottomQCD}) with $n_l=2\\,\\mbox{\\tt NL}$ and\n$n_h=n_m={}\\mbox{\\tt NH}$.\n\nThe following methods are available:\n\\begin{itemize}\n\\item \\lstinline!long double x01(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x02(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x03(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x04(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the pure QCD corrections to $m_f(\\mu)$ with $f=t,b$ (classes\n\\texttt{tt<OS>} and \\texttt{bb<OS>}),\n\\item \\lstinline!long double y01(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double y02(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double y03(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double y04(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the pure QCD corrections to $y_f(\\mu)$ with $f=t,b$ (classes\n\\texttt{tt<OS>} and \\texttt{bb<OS>}),\n\\item \\lstinline!long double x10(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x11(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x20(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the corrections of orders $\\mathcal{O}(\\alpha)$,\n$\\mathcal{O}(\\alpha\\alpha_s)$, and $\\mathcal{O}(\\alpha^2)$, respectively, to\n$m_B(\\mu)$ with $B=W,Z,H$ and $m_f(\\mu)$ with $f=t,b$,\n\\item \\lstinline!long double y10(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double y11(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double y20(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the corrections of orders $\\mathcal{O}(\\alpha)$,\n$\\mathcal{O}(\\alpha\\alpha_s)$, and $\\mathcal{O}(\\alpha^2)$, respectively, to\n$\\delta_f(\\mu)$ with $x=W,Z,H,t,b$,\n\\item \\lstinline!long double xgl10(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double xgl11(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double xgl20(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the corrections of orders $\\mathcal{O}(\\alpha)$,\n$\\mathcal{O}(\\alpha\\alpha_s)$, and $\\mathcal{O}(\\alpha^2)$, respectively, in\nthe gaugeless limit to $m_B(\\mu)$ with $B=W,Z,H$ and $m_f(\\mu)$ with $f=t,b$,\nand\n\\item \\lstinline!long double ygl10(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double ygl11(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double ygl20(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the corrections of orders $\\mathcal{O}(\\alpha)$,\n$\\mathcal{O}(\\alpha\\alpha_s)$, and $\\mathcal{O}(\\alpha^2)$, respectively,\nin the gaugeless limit to $\\delta_x(\\mu)$ with $x=W,Z,H,t,b$.\n\\end{itemize}\n\nInstead of using \\texttt{xij(...)}, one can also use the notation\n\\texttt{x(i,j,...)}.\nFor that, the following additional methods are available:\n\\begin{itemize}\n\\item \\lstinline!long double x(size_t apow, size_t aspow, size_t nL = 2, size_t nH = 1, size_t boson = 1) !\n\\item \\lstinline!long double y(size_t apow, size_t aspow, size_t nL = 2, size_t nH = 1, size_t boson = 1) !\n\\item \\lstinline!long double xgl(size_t apow, size_t aspow, size_t nL = 2, size_t nH = 1, size_t boson = 1) !\n\\item \\lstinline!long double ygl(size_t apow, size_t aspow, size_t nL = 2, size_t nH = 1, size_t boson = 1) !\n\\end{itemize}\n\n\\subsection{Class \\texttt{P2MS}}\n\\label{sec:class-p2ms}\n\nThis is the main class to obtain the $\\overline{\\mathrm{MS}}$ parameters in\nterms of the OS input.\nLet us first consider $\\alpha(\\mu)$, which is defined through $G_F$.\nUsing fixed values of $G_F$ and $\\alpha_s(M_Z)$ together with\n\\lstinline!OSinput!, we may find $\\alpha(\\mu)$ as the numerical solution of\nEq.~(\\ref{alphamu}):\n\\begin{lstlisting}\n    AlphaSolve(const OSinput & in_, double tol_ = 10e-9, \n                const long double & Gf0_ = pdg2014::Gf, \n                const long double & as_ = pdg2014::asMZ, \n                unsigned order_ = \n                order::x01|order::x10|order::x02|\n                order::x11|order::x20|order::x03)\n\\end{lstlisting}\nAlternatively, we may solve Eq.~(\\ref{alphamu}) perturbatively, which gives\nanother definition of $\\alpha(\\mu)$ at fixed order:\n\\begin{lstlisting}\n    AlphaGF(const OSinput & in_, double tol_ = 10e-9, \n            const long double & Gf0_ = pdg2014::Gf, \n            const long double & as_ = pdg2014::asMZ,\n            unsigned order_ = \n            order::x01|order::x10|order::x02|\n            order::x11|order::x20|order::x03)\n\\end{lstlisting}\nIn the above methods, the argument \\lstinline!order! is a bit mask with\npredefined values to enable or disable the corrections of given orders.\nThe tolerance parameter \\lstinline!tol_! controls the accuracy of numerical\nsolution.\n\nNow we turn to the \\texttt{P2MS} object, the declaration of which is:\n\\begin{lstlisting}:\n  P2MS<AlphaT>::P2MS(const OSinput & oi_, const long double & Gf_,\n                       const long double &  as_,\n                       const long double & mu_, \n                       unsigned ord_)\n\\end{lstlisting}\nHere, \\texttt{AlphaT} is one of possible types of solution,\n\\texttt{AlphaSolve} or \\texttt{AlphaGF}, at scale $\\mu$.\n\nIn the following, we use the following notations for the\n$\\overline{\\mathrm{MS}}$ couplings:\n$g_1(\\mu)$ as defined in Eq.~(\\ref{eq:g1}), $g_2(\\mu)\\equiv g(\\mu)$, and\nsimilarly for the squares of the couplings, $a_1(\\mu)$ and $a_2(\\mu)$.\nThe available methods of the \\texttt{P2SM} class include the following:\n\\begin{itemize}\n\\item \\lstinline!long double a1(), a2(), as(), at(), ab(), alam()!\\\\\nto get $a_1(\\mu)$, $a_2(\\mu)$, $a_s(\\mu)$, $a_t(\\mu)$, $a_b(\\mu)$, and\n$a_\\lambda(\\mu)$,\n\\item \\lstinline!long double g1(), g2(), gs(), yt(), yb(), lam()!\\\\\nto get $g_1(\\mu)$, $g(\\mu)$, $g_s(\\mu)$, $y_t(\\mu)$, $y_b(\\mu)$, and\n$\\lambda(\\mu)$,\n\\item \\lstinline!long double mphi(), vev()!\\\\\nto get $m_\\phi(\\mu)$ and $v(\\mu)$,\n\\item \\lstinline!MSinput getMSpar()!\\\\\nto construct \\texttt{MSinput} at scale $\\mu$ as explained\nin \\ref{sec:class-MSinput},\n\\item \\lstinline!SMCouplings runningCouplings()!\\\\\nto get the vector \\texttt{\\{g1,g2,gs,yt,yb,ytau,lam,mphi,vev\\}}, with the\ncorrection to $y_\\tau(\\mu)$ being always zero, and\n\\item \\lstinline!SMCouplings ai()!\\\\\nto get the vector \\texttt{\\{a1,a2,as,at,ab,atau,alam,mphi,vev\\}}, with the\ncorrection to $a_\\tau(\\mu)$ being always zero.\n\\end{itemize}\n\n\\section{Methods needed for $\\overline{\\mathrm{MS}}$ parameter input}\n\\label{sec:b}\n\n\n\n\\subsection{Class \\texttt{MSinput}}\n\\label{sec:class-MSinput}\n\nHere, we explain the methods of the classes needed if the initial input is\ngiven in terms of $\\overline{\\mathrm{MS}}$ masses or couplings.\nTo highlight the difference in the construction between masses and couplings,\nwe do not use constructors, but special functions which return carefully\nconstructed objects:\n\\begin{itemize}\n\\item \n  \\begin{lstlisting}\n    MSinput fromMasses(long double mb, long double mW, \n                         long double mZ, long double mH, \n                         long double mt)\n  \\end{lstlisting}\nfor the construction from the set of $\\overline{\\mathrm{MS}}$ masses,\n\\item\n  \\begin{lstlisting}\n    MSinput fromCouplings(long double g1, long double g2,\n                             long double yb, long double yt, \n                             long double lam, long double mphi, \n                             long double scale) \n  \\end{lstlisting}\nfor the construction from the set of $\\overline{\\mathrm{MS}}$ couplings and the\nfixing of $\\mu_0$.\n\\end{itemize}  \n\n\\subsection{Classes \\texttt{bb<MS>}, \\texttt{WW<MS>}, \\texttt{ZZ<MS>},\n\\texttt{HH<MS>}, and \\texttt{tt<MS>}}\n\nHere, we explain the methods for the calculation of the QCD and EW corrections\ndefined in Eq.~(\\ref{eq:m}):\n\\begin{itemize}\n\\item \\lstinline!long double x01(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x02(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x03(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x04(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the pure QCD corrections to $m_f(\\mu)$ with $f=t,b$ (classes\n\\texttt{tt<MS>} and \\texttt{bb<MS>}),\n\\item \\lstinline!long double x10(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x11(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x20(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the corrections of orders $\\mathcal{O}(\\alpha)$,\n$\\mathcal{O}(\\alpha\\alpha_s)$, and $\\mathcal{O}(\\alpha^2)$, respectively, to\n$m_B(\\mu)$ with $B=W,Z,H$ and $m_f(\\mu)$ with $f=t,b$.\n\\end{itemize}\n\n\\section{Methods needed for RG evolution}\n\\label{sec:methods-rge}\n\nEach $\\beta$ function is expressed in the form\n\n", "itemtype": "equation", "pos": 36854, "prevtext": "\nwhere we have adopted the definitions of $\\gamma_{m_\\phi^2}$ and $\\gamma_v$ from\nRefs.~\\cite{Bednyakov:2013eba,Bednyakov:2013cpa}, respectively.\nThe RG evolution of the $\\overline{\\mathrm{MS}}$ coupling constants according\nto Eq.~(\\ref{eq:rge-7eq}) is implemented in class \\texttt{CouplingsSM} and the\nextension by the RG evolution of the two additional $\\overline{\\mathrm{MS}}$\nmass parameters according to Eq.~(\\ref{eq:rge-9eq}) in class\n\\texttt{ParametersSM}.\nBoth of them are template classes.\nUsing template parameters as \\texttt{<a1,a2,as,at,ab,atau,alam,mphi,vev>}, it\nis possible to specify the orders of the $\\beta$ functions used for the\nsolution of the differential equations.\n\nThe following example uses three-loop $\\beta$ functions for the EW gauge\ncouplings and parameters, and four-loop $\\beta$ functions for the strong and\nYukawa couplings, and the negative value \\texttt{-1} at the sixth template\nparameter position means that the coupling $y_\\tau(\\mu)$ is completely\neliminated from the SM:\n\\begin{lstlisting}\n  ParametersSM<3,3,4,4,4,-1,3,3,3> \n              p(a1, a2, as, at, ab, atau, lam, mphi, vev, NG)\n\\end{lstlisting}\nIf we are just interested in the solution of the coupled system of differential\nequations describing the evolution of the $\\overline{\\mathrm{MS}}$ coupling\nconstants in Eq.~(\\ref{eq:rge-7eq}), we may use the short form:\n\\begin{lstlisting}\n  CouplingsSM<3,3,4,4,4,-1,3> \n              p(a1, a2, as, at, ab, atau, lam, NG)\n\\end{lstlisting}\nIf the object \\texttt{P2MS} has already been constructed, as described in\nSection~\\ref{sec:p2ms} and \\ref{sec:class-p2ms}, it is possible to\ncreate a solver using: \n\\begin{lstlisting}\n  CouplingsSM<3,3,4,4,4,-1,3> p(p2ms, NG)\n\\end{lstlisting}\nHere, \\texttt{p2ms} is the previously constructed object of type \\texttt{P2MS}.\nIn all these examples, \\texttt{mu0} is the initial scale (in GeV) for the RG\nevolution, and \\texttt{NG} is the number of fermion generations in the SM, with\ndefault value $\\mbox{\\tt NG}{}=3$.\n\nThe actual RG evolution proceeds when \\texttt{operator()} is called for one of\nthe above-mentioned classes.\nCorrespondingly, a seven-component vector containing the values of the\n$\\overline{\\mathrm{MS}}$ coupling constants or a nine-component vector\ncontaining also the two $\\overline{\\mathrm{MS}}$ mass parameters is returned.\nIf, for example, we are interested in $m_{\\phi}(\\mu)$ at the scale\n$\\mu=1000$~GeV, the following sequence of commands has to be entered:\n\\begin{lstlisting}\n  SMCouplings ai = p(1000);\n  // using enum couplings for more readable indexing\n  std::cout << ai[couplings::mphi] << std::endl;\n  // using numerical index, starting from 0\n  std::cout << ai[7] << std::endl;\n\\end{lstlisting}\nWe refer to \\ref{sec:methods-rge} for further details.\n\n\\section{\\texttt{Mathematica} interface}\n\\label{sec:math-interf}\n\nIt is possible to compile a \\texttt{Mathematica} interface to the \\texttt{mr}\nprogram library.\nIf the \\texttt{Mathematica} installation path is unusual, the path to the\ndevelopment utils \\texttt{mprep} and \\texttt{mcc} has to be specified at the\nconfiguration step, e.g., as:\n\\begin{lstlisting}[language=bash]\n  ./configure --with-mcc-path=<MATHDIR>/<ARCH>/CompilerAdditions\n\\end{lstlisting}\nHere, \\texttt{<MATHDIR>/<ARCH>/CompilerAdditions} is a path to the directory\ncontaining the \\texttt{mprep} and \\texttt{mcc} utils.\n\nWhen the \\texttt{Mathematica} interface is successfully compiled, it is\npossible to load it into \\texttt{Mathematica}.\nIf the \\texttt{mr} mathlink executable is placed in the same directory and, for\nexample, we wish to calculate $m_W^2(\\mu)/M_W^2$ at scale $\\mu=M_t$, then a\ntypical session is:\n\\begin{lstlisting}[language=Mathematica]\n  Install[\"mr\"];\n  (*      Mb   MW   MZ   MH   MT   mu *)\n  mmWMMW[4.4, 80, 91, 125, 173, 173]  \n\\end{lstlisting}\nThe output, where the user has to supply the values of the\n$\\overline{\\mathrm{MS}}$ coupling constants at scale $\\mu$, \\texttt{aEW[mu]}\nand \\texttt{aQCD[mu]}, then reads:\n\\begin{lstlisting}[language=Mathematica]\n  {\n    1 + 185.3545315192623037 aEW[173] \n      +  563.188663413438646 aEW[173] aQCD[173]\n      - 19207.76644304067414 aEW[173]^2   \n  }\n\\end{lstlisting}\nAlternatively, if we are just interested in the set of coefficients, the\ncommand: \n\\begin{lstlisting}[language=Mathematica]\n  Install[\"mr\"];\n  (*  Mb   MW   MZ   MH   MT   mu *)\n  Xt[4.4, 80, 91, 125, 173, 173]  \n\\end{lstlisting}\nreturns a substitution list for the top-quark coefficients\n$\\mbox{\\tt yT}=Y_t^{i,j}(\\mu)$ in Eq.~(\\ref{eq:deltax})\nand $\\mbox{\\tt xt}=X_t^{i,j}(\\mu)$ in Eq.~(\\ref{eq:mpertfer}):\n\\begin{lstlisting}[language=Mathematica]\n  {\n    xt[1, 0] -> 108.36879199119430404, \n    yT[1, 0] -> 2.1032409021919717513,\n    xt[1, 1] -> -412.09726673991774271, \n    yT[1, 1] -> -79.271276023543769118, \n    xt[2, 0] -> -13725.00152946124629, \n    yT[2, 0] -> 685.749556148969868\n  }\n\\end{lstlisting}\nThese functions, supplied with the \\texttt{Mathematica} expressions for the SM\n$\\beta$ functions, which are available, for example, as ancillary files to the\narXiv versions of\nRefs.~\\cite{Bednyakov:2012rb,Bednyakov:2012en,Bednyakov:2013eba},\nare sufficient for the analysis.\n\n\n\n\\section{Example programs}\n\\label{sec:typical-examples}\n\nWe supply example programs with the code of the \\texttt{mr} program library.\nFor the compilation of the user's program using the \\texttt{mr} program\nlibrary, one has to type:\\\\\n\\lstinline[language=bash]!g++ -o userprog 'pkg-config --cflags --libs mr'  userprog.cpp!\\\\\nA complete example is presented in \\ref{sec:example}.\n\n\\section{Conclusion}\n\\label{sec:conclusion}\n\nWe presented the \\texttt{C++} program library \\texttt{mr} with a\n\\texttt{Mathematica} interface for the evaluation of the\n$\\overline{\\mathrm{MS}}$ couplings of the SM including the full set of two-loop\nthreshold corrections and their three-loop evolution with high numerical\nprecision.\nThe source code including examples is available from the URL\\break\n\\url{http://apik.github.io/mr/}.\nA development version of this program library has already been used for the\nanalysis of the EW vacuum stability in the SM \\cite{Bednyakov:2015sca}.\n\n\\section{Acknowledgments}\n\\label{sec:acknowledgments}\n\nWe thank A.~V.~Bednyakov for useful discussions and for testing our program\nlibrary.\nThis work was supported in part by the German Federal Ministry for Education\nand Research BMBF through Grant No.\\ 05H15GUCC1, by the German Research\nFoundation DFG through the Collaborative Research Centre No.\\ SFB~676\n{\\it Particles, Strings and the Early Universe: the Structure of Matter and\nSpace-Time}, by the Heisenberg--Landau Programme, and by the Dynasty\nFoundation.\n\n\\newpage\n\n\\appendix\n\n\\section{Methods needed for OS mass input}\n\\label{sec:a}\n\n\\subsection{Class \\texttt{OSinput}}\n\\label{sec:class-osinput}\n\nThis class includes the following methods:\n\\begin{itemize}\n\\item \n\\lstinline!OSinput(long double Mb, MW, MZ, MH, Mt) !\\\\\nas the class constructor,\n\\item \\lstinline!long double MMb(), MMW(), MMZ(), MMH(), MMt() !\\\\\nto get the squared masses $M_b^2$, $M_W^2$, $M_Z^2$, $M_H^2$, and $M_t^2$,\n\\item \\lstinline!long double Mb(), MW(), MZ(), MH(), Mt() !\\\\\nto get the masses $M_b$, $M_W$, $M_Z$, $M_H$, and $M_t$,\n\\item\\lstinline!OSinput setMb(long double), setMW(), setMZ(), setMH(), setMt() !\\\\\nto reset the values of the masses $M_b$, $M_W$, $M_Z$, $M_H$, and $M_t$ in the\nOS input already initialized,\n\\item\\lstinline!long double CW(), SW(), CCW(), SSW() !\\\\\nto get the trigonometric functions \n$\\cos\\theta_w$, $\\sin\\theta_w$, $\\cos^2\\theta_w$, and $\\sin^2\\theta_w$ of the\nweak mixing angle $\\theta_w$.\n\\end{itemize}\n\n\\subsection{Classes \\texttt{bb<OS>}, \\texttt{WW<OS>}, \\texttt{ZZ<OS>},\n\\texttt{HH<OS>}, and \\texttt{tt<OS>}}\n\\label{sec:class-xx-OS}\n\nThe results for the coefficients $Y_x^{i,j}(\\mu)$ and $X_x^{i,j}(\\mu)$ in\nEqs.~(\\ref{eq:deltax}) and (\\ref{eq:mpertfer}), respectively, are organized as\nfollows:\n\n", "index": 21, "text": "\\begin{equation}\n  \\label{eq:boson-def}\n  X^{i,j}= \\mbox{\\tt nL}\\cdot X_L + \\mbox{\\tt nH}\\cdot X_H \n+ \\mbox{\\tt boson}\\cdot X_B,\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E11.m1\" class=\"ltx_Math\" alttext=\"X^{i,j}=\\mbox{\\tt nL}\\cdot X_{L}+\\mbox{\\tt nH}\\cdot X_{H}+\\mbox{\\tt boson}%&#10;\\cdot X_{B},\" display=\"block\"><mrow><mrow><msup><mi>X</mi><mrow><mi>i</mi><mo>,</mo><mi>j</mi></mrow></msup><mo>=</mo><mrow><mrow><mtext>\ud835\ude97\ud835\ude7b</mtext><mo>\u22c5</mo><msub><mi>X</mi><mi>L</mi></msub></mrow><mo>+</mo><mrow><mtext>\ud835\ude97\ud835\ude77</mtext><mo>\u22c5</mo><msub><mi>X</mi><mi>H</mi></msub></mrow><mo>+</mo><mrow><mtext>\ud835\ude8b\ud835\ude98\ud835\ude9c\ud835\ude98\ud835\ude97</mtext><mo>\u22c5</mo><msub><mi>X</mi><mi>B</mi></msub></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.08143.tex", "nexttext": "\nwhere $l$ is a cutoff with respect to the loop order. \nIt is possible to fix $l$ for each $\\beta$ function separately using template\nparameters:\n\\begin{lstlisting}\n    template < int pocoa1, int pocoa2, int pocoas, \n                int pocoat, int pocoab, int pocoatau, \n                int pocolam > \n  \\end{lstlisting}\nTo eliminate a coupling constant from the theory, one may assign a negative\nvalue to the respective parameter.\nFor example, the pure QCD $\\beta$ function at one loop is referred to as:\n\\begin{lstlisting}\n  CouplingsSM<-1,-1,1,-1,-1,-1,-1>\n\\end{lstlisting}\nThe constructor of the appropriate object from the $\\overline{\\mathrm{MS}}$\ncoupling constants at the initial scale $\\mu_0$ for \\texttt{NG} fermion\ngenerations reads:\n  \\begin{lstlisting}\n    CouplingsSM(double a1, double a2, double as, \n                  double at, double ab, double atau, \n                  double lam,\n                  double mu0_, size_t NG_ = 3)\n  \\end{lstlisting}\nHere, we have used the input values of the $\\overline{\\mathrm{MS}}$ coupling\nconstants defined in Eq.~(\\ref{eq:a-couplings}). \nThe analogous constructor that also includes $m_{\\phi}(\\mu)$ and $v(\\mu)$ reads:\n  \\begin{lstlisting}\n    ParametersSM(double a1, double a2, double as, \n                   double at, double ab, double atau, \n                   double lam, double mphi, double vev, \n                   double mu0_, size_t NG_ = 3)\n  \\end{lstlisting}\nThe constructor of the appropriate object from the \\texttt{P2MS} object\n(see\\break \\ref{sec:class-p2ms}) reads:\n  \\begin{lstlisting}\n    ParametersSM(const P2MS<T>& pi, size_t NG_ = 3)\n  \\end{lstlisting}\nThe operator \\texttt{()} is used for the evolution up to the final scale $\\mu$:\n  \\begin{lstlisting}\n    SMCouplings operator()(long double mu)\n  \\end{lstlisting}\nThis method is implemented for both classes, \\texttt{CouplingsSM} and\n\\texttt{ParametersSM}, and returns the lists\n$\\{a_1(\\mu),a_2(\\mu),a_s(\\mu),a_t(\\mu),a_b(\\mu),a_\\tau(\\mu),a_\\lambda(\\mu)\\}$\nand\\break\n$\\{a_1(\\mu),a_2(\\mu),a_s(\\mu),a_t(\\mu),a_b(\\mu),a_\\tau(\\mu),a_\\lambda(\\mu),\nm_\\phi(\\mu),v(\\mu)\\}$, respectively, at the final scale $\\mu$.\nThe operator:\n  \\begin{lstlisting}\n    SMCouplings AandB(long double mu)\n  \\end{lstlisting}\nreturns two lists of length nine with the values of the seven \n$\\overline{\\mathrm{MS}}$ coupling constants and the two additional\n$\\overline{\\mathrm{MS}}$ mass parameters together with their $\\beta$\nfunctions at the final scale $\\mu$.\nThese $\\beta$ functions are defined in Eqs.~(\\ref{eq:rge-7eq}) and\n(\\ref{eq:rge-9eq}).\n\n\\section{Complete example}\n\\label{sec:example}\n\nHere, we present an example program, which calculates the\n$\\overline{\\mathrm{MS}}$  coupling constants at the initial scale $\\mu_0=M_t$\nfor given input values of the pole masses and evolves them up to the final\nscale $\\mu$.\nWe use three-loop RG evolution for the gauge couplings, the top Yukawa\ncoupling, and the Higgs self-coupling, and set the tau Yukawa coupling to zero\neverywhere.\n\\begin{lstlisting}\n// Example of Pole masses and Gf conversion to\n// set of running couplings, running Higgs mass\n// term and running vev in MS scheme\n\n#include \"mr.hpp\"\n\nint main (int argc, char *argv[])\n{\n  try\n    {\n      loglevel = logINFO;\n      \n      // Input: Pole masses and Fermi constant in OS scheme\n      OSinput oi(pdg2014::Mb, pdg2014::MW, pdg2014::MZ, pdg2014::MH, pdg2014::Mt);\n\n      // Running QCD coupling for as(Mt) from as(MZ)\n      AlphaS as(oi);\n\n      // Set of all running parameters at scale Mt\n      P2MS<AlphaSolve> pMSmt(oi,pdg2014::Gf, as(oi.Mt()), oi.Mt(), order::all);\n      \n      // Initial values for running, input from pole masses\n      ParametersSM<3,3,3,3,3,-1,3,3,0> avP2MS(pMSmt);\n      \n      std::cout << std::setprecision(3);\n      \n      for (size_t muPow = 3; muPow <= 20; muPow++)\n        {\n\n          SMCouplings av = avP2MS(pow(10,2*muPow));\n          \n          std::cout << \" log10(mu) = \" << muPow \n                    << \" a1   = \" << av[couplings::g1]\n                    << \" a2   = \" << av[couplings::g2]\n                    << \" a3   = \" << av[couplings::gs]\n                    << \" at   = \" << av[couplings::yt]\n                    << \" ab   = \" << av[couplings::yb]\n                    << \" atau = \" << av[couplings::ytau]\n                    << \" alam = \" << av[couplings::lam]\n                    << \" mphi = \" << av[couplings::mphi]\n                    << \" vev  = \" << av[couplings::vev] << std::endl;\n        }            \n    }\n  catch (std::exception &p) \n    {\n      std::cerr << p.what() << std::endl;\n      return 1;\n    }\n  \n  return 0;\n}\n\\end{lstlisting}\n\n\n\n\n\\bibliographystyle{elsarticle-num}\n\\bibliography{mrcpc}\n\\newpage\n\n\n", "itemtype": "equation", "pos": 46381, "prevtext": "\nand similarly for $Y_x^{i,j}(\\mu)$, where \\texttt{nL} and \\texttt{nH} are the\nnumbers of massless and massive fermion generations, respectively, and\n\\texttt{boson} is a tag for the purely bosonic contributions.\nThis splitting allows for the extraction of the individual contributions from\nthe full results.\nThe default values, corresponding to the case of the SM, read\n$\\mbox{\\tt nL}{}=2$, $\\mbox{\\tt nH}{}=1$, and $\\mbox{\\tt boson}{}=1$.\nThe pure QCD corrections to $m_t(\\mu)$ and $y_t(\\mu)$ are evaluated using\nEq.~(59) in Ref.~\\cite{Kniehl:2015nwa} with $n_l=2\\,\\mbox{\\tt NL}{}+1$ and\n$n_h={}\\mbox{\\tt NH}$ and those to $m_b(\\mu)$ and $y_b(\\mu)$\nusing Eq.~(\\ref{eq:topInBottomQCD}) with $n_l=2\\,\\mbox{\\tt NL}$ and\n$n_h=n_m={}\\mbox{\\tt NH}$.\n\nThe following methods are available:\n\\begin{itemize}\n\\item \\lstinline!long double x01(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x02(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x03(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x04(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the pure QCD corrections to $m_f(\\mu)$ with $f=t,b$ (classes\n\\texttt{tt<OS>} and \\texttt{bb<OS>}),\n\\item \\lstinline!long double y01(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double y02(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double y03(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double y04(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the pure QCD corrections to $y_f(\\mu)$ with $f=t,b$ (classes\n\\texttt{tt<OS>} and \\texttt{bb<OS>}),\n\\item \\lstinline!long double x10(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x11(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x20(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the corrections of orders $\\mathcal{O}(\\alpha)$,\n$\\mathcal{O}(\\alpha\\alpha_s)$, and $\\mathcal{O}(\\alpha^2)$, respectively, to\n$m_B(\\mu)$ with $B=W,Z,H$ and $m_f(\\mu)$ with $f=t,b$,\n\\item \\lstinline!long double y10(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double y11(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double y20(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the corrections of orders $\\mathcal{O}(\\alpha)$,\n$\\mathcal{O}(\\alpha\\alpha_s)$, and $\\mathcal{O}(\\alpha^2)$, respectively, to\n$\\delta_f(\\mu)$ with $x=W,Z,H,t,b$,\n\\item \\lstinline!long double xgl10(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double xgl11(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double xgl20(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the corrections of orders $\\mathcal{O}(\\alpha)$,\n$\\mathcal{O}(\\alpha\\alpha_s)$, and $\\mathcal{O}(\\alpha^2)$, respectively, in\nthe gaugeless limit to $m_B(\\mu)$ with $B=W,Z,H$ and $m_f(\\mu)$ with $f=t,b$,\nand\n\\item \\lstinline!long double ygl10(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double ygl11(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double ygl20(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the corrections of orders $\\mathcal{O}(\\alpha)$,\n$\\mathcal{O}(\\alpha\\alpha_s)$, and $\\mathcal{O}(\\alpha^2)$, respectively,\nin the gaugeless limit to $\\delta_x(\\mu)$ with $x=W,Z,H,t,b$.\n\\end{itemize}\n\nInstead of using \\texttt{xij(...)}, one can also use the notation\n\\texttt{x(i,j,...)}.\nFor that, the following additional methods are available:\n\\begin{itemize}\n\\item \\lstinline!long double x(size_t apow, size_t aspow, size_t nL = 2, size_t nH = 1, size_t boson = 1) !\n\\item \\lstinline!long double y(size_t apow, size_t aspow, size_t nL = 2, size_t nH = 1, size_t boson = 1) !\n\\item \\lstinline!long double xgl(size_t apow, size_t aspow, size_t nL = 2, size_t nH = 1, size_t boson = 1) !\n\\item \\lstinline!long double ygl(size_t apow, size_t aspow, size_t nL = 2, size_t nH = 1, size_t boson = 1) !\n\\end{itemize}\n\n\\subsection{Class \\texttt{P2MS}}\n\\label{sec:class-p2ms}\n\nThis is the main class to obtain the $\\overline{\\mathrm{MS}}$ parameters in\nterms of the OS input.\nLet us first consider $\\alpha(\\mu)$, which is defined through $G_F$.\nUsing fixed values of $G_F$ and $\\alpha_s(M_Z)$ together with\n\\lstinline!OSinput!, we may find $\\alpha(\\mu)$ as the numerical solution of\nEq.~(\\ref{alphamu}):\n\\begin{lstlisting}\n    AlphaSolve(const OSinput & in_, double tol_ = 10e-9, \n                const long double & Gf0_ = pdg2014::Gf, \n                const long double & as_ = pdg2014::asMZ, \n                unsigned order_ = \n                order::x01|order::x10|order::x02|\n                order::x11|order::x20|order::x03)\n\\end{lstlisting}\nAlternatively, we may solve Eq.~(\\ref{alphamu}) perturbatively, which gives\nanother definition of $\\alpha(\\mu)$ at fixed order:\n\\begin{lstlisting}\n    AlphaGF(const OSinput & in_, double tol_ = 10e-9, \n            const long double & Gf0_ = pdg2014::Gf, \n            const long double & as_ = pdg2014::asMZ,\n            unsigned order_ = \n            order::x01|order::x10|order::x02|\n            order::x11|order::x20|order::x03)\n\\end{lstlisting}\nIn the above methods, the argument \\lstinline!order! is a bit mask with\npredefined values to enable or disable the corrections of given orders.\nThe tolerance parameter \\lstinline!tol_! controls the accuracy of numerical\nsolution.\n\nNow we turn to the \\texttt{P2MS} object, the declaration of which is:\n\\begin{lstlisting}:\n  P2MS<AlphaT>::P2MS(const OSinput & oi_, const long double & Gf_,\n                       const long double &  as_,\n                       const long double & mu_, \n                       unsigned ord_)\n\\end{lstlisting}\nHere, \\texttt{AlphaT} is one of possible types of solution,\n\\texttt{AlphaSolve} or \\texttt{AlphaGF}, at scale $\\mu$.\n\nIn the following, we use the following notations for the\n$\\overline{\\mathrm{MS}}$ couplings:\n$g_1(\\mu)$ as defined in Eq.~(\\ref{eq:g1}), $g_2(\\mu)\\equiv g(\\mu)$, and\nsimilarly for the squares of the couplings, $a_1(\\mu)$ and $a_2(\\mu)$.\nThe available methods of the \\texttt{P2SM} class include the following:\n\\begin{itemize}\n\\item \\lstinline!long double a1(), a2(), as(), at(), ab(), alam()!\\\\\nto get $a_1(\\mu)$, $a_2(\\mu)$, $a_s(\\mu)$, $a_t(\\mu)$, $a_b(\\mu)$, and\n$a_\\lambda(\\mu)$,\n\\item \\lstinline!long double g1(), g2(), gs(), yt(), yb(), lam()!\\\\\nto get $g_1(\\mu)$, $g(\\mu)$, $g_s(\\mu)$, $y_t(\\mu)$, $y_b(\\mu)$, and\n$\\lambda(\\mu)$,\n\\item \\lstinline!long double mphi(), vev()!\\\\\nto get $m_\\phi(\\mu)$ and $v(\\mu)$,\n\\item \\lstinline!MSinput getMSpar()!\\\\\nto construct \\texttt{MSinput} at scale $\\mu$ as explained\nin \\ref{sec:class-MSinput},\n\\item \\lstinline!SMCouplings runningCouplings()!\\\\\nto get the vector \\texttt{\\{g1,g2,gs,yt,yb,ytau,lam,mphi,vev\\}}, with the\ncorrection to $y_\\tau(\\mu)$ being always zero, and\n\\item \\lstinline!SMCouplings ai()!\\\\\nto get the vector \\texttt{\\{a1,a2,as,at,ab,atau,alam,mphi,vev\\}}, with the\ncorrection to $a_\\tau(\\mu)$ being always zero.\n\\end{itemize}\n\n\\section{Methods needed for $\\overline{\\mathrm{MS}}$ parameter input}\n\\label{sec:b}\n\n\n\n\\subsection{Class \\texttt{MSinput}}\n\\label{sec:class-MSinput}\n\nHere, we explain the methods of the classes needed if the initial input is\ngiven in terms of $\\overline{\\mathrm{MS}}$ masses or couplings.\nTo highlight the difference in the construction between masses and couplings,\nwe do not use constructors, but special functions which return carefully\nconstructed objects:\n\\begin{itemize}\n\\item \n  \\begin{lstlisting}\n    MSinput fromMasses(long double mb, long double mW, \n                         long double mZ, long double mH, \n                         long double mt)\n  \\end{lstlisting}\nfor the construction from the set of $\\overline{\\mathrm{MS}}$ masses,\n\\item\n  \\begin{lstlisting}\n    MSinput fromCouplings(long double g1, long double g2,\n                             long double yb, long double yt, \n                             long double lam, long double mphi, \n                             long double scale) \n  \\end{lstlisting}\nfor the construction from the set of $\\overline{\\mathrm{MS}}$ couplings and the\nfixing of $\\mu_0$.\n\\end{itemize}  \n\n\\subsection{Classes \\texttt{bb<MS>}, \\texttt{WW<MS>}, \\texttt{ZZ<MS>},\n\\texttt{HH<MS>}, and \\texttt{tt<MS>}}\n\nHere, we explain the methods for the calculation of the QCD and EW corrections\ndefined in Eq.~(\\ref{eq:m}):\n\\begin{itemize}\n\\item \\lstinline!long double x01(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x02(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x03(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x04(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the pure QCD corrections to $m_f(\\mu)$ with $f=t,b$ (classes\n\\texttt{tt<MS>} and \\texttt{bb<MS>}),\n\\item \\lstinline!long double x10(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x11(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\n  \\lstinline!long double x20(size_t nL = 2, size_t nH = 1, size_t boson=1) !\\\\\nfor the corrections of orders $\\mathcal{O}(\\alpha)$,\n$\\mathcal{O}(\\alpha\\alpha_s)$, and $\\mathcal{O}(\\alpha^2)$, respectively, to\n$m_B(\\mu)$ with $B=W,Z,H$ and $m_f(\\mu)$ with $f=t,b$.\n\\end{itemize}\n\n\\section{Methods needed for RG evolution}\n\\label{sec:methods-rge}\n\nEach $\\beta$ function is expressed in the form\n\n", "index": 23, "text": "\\begin{equation}\n  \\label{eq:beta-form}\n  \\beta_i^{(l)}=\\sum\\limits_{j_1,\\ldots,\\j_7=0}^{j_1+\\cdots+j_7\\le\n    l+1}a_1^{j_1}\\cdots a_7^{j_1}C(j_1,\\ldots,j_7),\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E12.m1\" class=\"ltx_Math\" alttext=\"\\beta_{i}^{(l)}=\\sum\\limits_{j_{1},\\ldots,\\j_{7}=0}^{j_{1}+\\cdots+j_{7}\\leq l+%&#10;1}a_{1}^{j_{1}}\\cdots a_{7}^{j_{1}}C(j_{1},\\ldots,j_{7}),\" display=\"block\"><mrow><mrow><msubsup><mi>\u03b2</mi><mi>i</mi><mrow><mo stretchy=\"false\">(</mo><mi>l</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo>=</mo><mrow><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mrow><msub><mi>j</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>\u0237</mi><mn>7</mn></msub></mrow><mo>=</mo><mn>0</mn></mrow><mrow><mrow><msub><mi>j</mi><mn>1</mn></msub><mo>+</mo><mi mathvariant=\"normal\">\u22ef</mi><mo>+</mo><msub><mi>j</mi><mn>7</mn></msub></mrow><mo>\u2264</mo><mrow><mi>l</mi><mo>+</mo><mn>1</mn></mrow></mrow></munderover><mrow><msubsup><mi>a</mi><mn>1</mn><msub><mi>j</mi><mn>1</mn></msub></msubsup><mo>\u2062</mo><mi mathvariant=\"normal\">\u22ef</mi><mo>\u2062</mo><msubsup><mi>a</mi><mn>7</mn><msub><mi>j</mi><mn>1</mn></msub></msubsup><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>j</mi><mn>1</mn></msub><mo>,</mo><mi mathvariant=\"normal\">\u2026</mi><mo>,</mo><msub><mi>j</mi><mn>7</mn></msub><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}]