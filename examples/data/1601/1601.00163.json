[{"file": "1601.00163.tex", "nexttext": "\nThe largest\nroot of the function $f(x)=1-\\sum_{i=1}^l x^{-a_i}$ is called the \\emph{branching factor} of the recurrence relation.\nLet $\\alpha$ be the maximum branching factor among all branching factors in the algorithm.\nThe size of the search tree that represents the branching process of the algorithm applied to\nan instance with parameter $k$ is  given by $O(\\alpha^k)$.\nMore details about the analysis and how to solve recurrences\ncan be found in the monograph~\\cite{Fomin:book}.\n\n\n\n\n\\section{The idea and organization of the algorithm}\nOur purpose is to design a branch-and-search algorithm for the $d$-bounded-degree vertex deletion problem such\nthat the branching factor of each recurrence relation with respective to the parameter $k$ is at most $d+1$.\n\\refl{base1} provides a simple branching rule: for a vertex $d$ of degree $\\geq d+1$, branching\nby either  including $v$ or each set of $d(v)-d$ neighbors of $v$ to the solution set.\nWe will show that when $d(v)\\geq d+2$, this simple branching operation is good enough to get a branching factor $\\leq d+1$ for each $d\\geq 2$ (See Step 1 in Section~\\ref{sec_alg}). Thus, we can use this operation to deal with vertices of degree $\\geq d+2$.\n\\refl{base1} for a degree-($d+1$) vertex $v$ can be interpreted as: at least one vertex in $N(v)$ is in a $d$-deletion set. This branching operation will only get a branching factor of $d+2$ for this case.\nBut when there is a proper domination in a degree-($d+1$) graph, we still can branch with branching factor $d+1$, since\nwe can ignore one branch by \\refl{domination} and \\refl{domination2}. The detailed analysis is given in Step 2 in Section~\\ref{sec_alg}.\nWhen the graph is of maximum degree $d+1$ and has no proper domination, we need to use more structural properties.\n\n\n\n\n\n\nTo find a $d$-deletion set in a degree-$(d+1)$ graph is equivalent to find a vertex subset intersecting $N[v]$\nfor each degree-($d+1$) vertex $v$.\nIf there are some vertices in $N[v_1]\\cap N[v_2]$ for two degree-$(d+1)$ vertices $v_1$ and $v_2$, some information\nmay be useful for us to design a good branching rule.\nNote that for two adjacent degree-$(d+1)$ vertices $v_1$ and $v_2$, there are at least two vertices in the intersection\nof $N[v_1]$ and $N[v_2]$. \\refl{domi3} guarantees that each degree-$(d+1)$ vertex has two degree-$(d+1)$ neighbors if a degree-$(d+1)$ graph has no proper domination.\nSo we will focus on adjacent degree-$(d+1)$ vertices.\n\nWe define three relations between two degree-($d+1$) vertices.  A pair of adjacent degree-($d+1$) vertices is a \\emph{good pair} if they have at least one\nand at most $d-2$ common neighbors. A pair of adjacent degree-($d+1$) vertices is a \\emph{close pair} if they have exactly $d-1$ common neighbors.\nA pair of nonadjacent degree-($d+1$) vertices is a \\emph{similar pair} if they have the same neighbor set.\nWe have a good branching rule to deal with good pairs. See Step 3 in Section~\\ref{sec_alg}.\nAfter dealing with all good pairs, for any pair of adjacent degree-($d+1$) vertices, either it is a close pair or the two vertices have no common neighbor.\nWe do not have a simple branching rule with branching factor $d+1$ for these two cases.\nThen we change to consider three adjacent  degree-($d+1$) vertices.\n\nLet $v_1, v_2$ and $v_3$ be three degree-($d+1$) vertices such that $v_2$ is adjacent to $v_1$ and $v_3$. We find that the hardest case is that exact one pair of vertices in $\\{v_1,v_2,v_3\\}$\nis a close or similar pair, for which we still can not get a branching factor $\\leq d+1$. We call this case a \\emph{bad case}. If no pair of vertices in $\\{v_1,v_2,v_3\\}$\nis a close or similar pair, we call $\\{v_1,v_2,v_3\\}$ a \\emph{proper triple} of degree-($d+1$) vertices.\nOur idea is to avoid bad cases and only branch on proper triples.\n\nConsider  four degree-($d+1$) vertices  $v_1, v_2, v_3$ and $v_4$ such that there is an edge between $v_i$ and $v_{i+1}$ for $i=1,2,3$.\nIf at most one pair of vertices in $\\{v_1,v_2,v_3, v_4\\}$\nis a close or similar pair, then at least one of $\\{v_1,v_2,v_3\\}$ and $\\{v_2,v_3, v_4\\}$ will be a proper triple.\nThus the only left cases are that at least two pairs of vertices in $\\{v_1,v_2,v_3, v_4\\}$\nare close or similar pairs.\nLuckily, we find good branching rules to deal with them.\nWhen both of $\\{v_1,v_2\\}$ and $\\{v_2, v_3\\}$\nare close pairs, $\\{v_1,v_2,v_3\\}$ is called a \\emph{close triple}. See Figure~\\ref{three}(a) for an illustration of close triple. Our algorithm deals with close triples in Step 4 in Section~\\ref{sec_alg}.\nWhen both of $\\{v_1,v_2\\}$ and $\\{v_3, v_4\\}$\nare close pairs, $\\{v_1,v_2,v_3,v_4\\}$ is called a \\emph{type-I close quadruple}. See Figure~\\ref{three}(b) for an illustration of type-I close quadruple. Our algorithm deals with type-I close quadruples in Step 5 in Section~\\ref{sec_alg}.\nWhen both of $\\{v_1,v_3\\}$ and $\\{v_2, v_4\\}$\nare similar pairs, $\\{v_1,v_2,v_3,v_4\\}$ is called a \\emph{type-II close quadruple}. See Figure~\\ref{three}(c) for an illustration of type-II close quadruple. Our algorithm deals with type-II close quadruples in Step 6 in Section~\\ref{sec_alg}.\nWhen $\\{v_1,v_2,v_3,v_4\\}$ has one close pair and one similar pair, we can see there is always a close triple in it.\nTherefore, we have considered all possible cases.\nThe last step of our algorithm is then to deal with proper triples.\n\n\\begin{figure}\n  \\centering\n  \n  \\includegraphics[width=0.8\\textwidth]{three.eps}\\\\\n  \\caption{Illustrations of some structures}\\label{three}\n\\end{figure}\n\n\n\\section{The algorithm and its analysis}\\label{sec_alg}\n\n\n\n\nWe are ready to describe the whole algorithm. Our algorithm works for any $d\\geq 0$ but can only achieve\nthe running time bound of $O^*((d+1)^k)$ for each $d\\geq 3$.\nOur algorithm is a recursive algorithm containing seven major steps, each of which will branch on the current instance into several sub-instances and invoke the algorithm itself on each sub-instance. Next, we describe these steps. When we introduce one step, we assume that all pervious steps can not be applied anymore.\nFor the purpose of presentation, we will analyze the correctness and running time of each step after describing it.\n\n\\medskip\n\\noindent \\textbf{Step~1} (\\textbf{Vertices of degree $\\geq d+2$})\n\nIf there is a vertex $v$ of degree $\\geq d+2$ in the graph, we branch on $v$ into $1+ {{d(v)}\\choose{d(v)-d}}$\nbranches according to \\refl{base1} by either  including $v$ or each set of $d(v)-d$ neighbors of $v$ to the solution set.\n\n\n\n\nIn the branch where $v$ is included to the solution set, we delete $v$ from the graph and decrease the parameter $k$ by 1.\nIn the branch where a set $N'\\subseteq N(V)$ of $d(v)-d$ neighbors of $v$ are included to the solution set, we delete $N'$ from\nthe graph and decrease the parameter $k$ by $d(v)-d$. For this operation, we get a recurrence relation\n\\eqn{e_step1}{\nC(k)\\leq C(k-1) + {{d(v)}\\choose{d(v)-d}}\\cdot C(k-(d(v)-d)).\n}\nLet $\\gamma$ denote the branching factor of \\refe{e_step1}.\n\n\\lem{l1}{If $d(v)-d\\geq 2$, the branching factor $\\gamma$ of \\refe{e_step1} satisfies that\n\\eqn{e_le1}\n{\\gamma \\leq \\frac{{1 + \\sqrt {2{d^2} + 6d + 5} }}{2}.}\n}\n\\pf{Let $\\gamma_d= \\frac{{1 + \\sqrt {2{d^2} + 6d + 5} }}{2}$. To prove \\refl{l1}, we will prove that\n$C(k)=O(\\gamma_d^k)$ by using the  substitution method.\nFirst of all, directed computation shows that for any $d(v)\\geq d+2$ and $d\\geq 0$ it holds that\n${{d(v)}\\choose {d(v) - d}}\n\\gamma _d^{k - (d(v) - d)}   \\le  {{d(v)}\\choose {d(v) - d-1}}\n\\gamma _d^{k - (d(v) - d - 1)}  $:\n\n", "itemtype": "equation", "pos": 9843, "prevtext": "\n\n\\maketitle\n\n\\begin{abstract}\nThe $d$-bounded-degree vertex deletion problem, to delete at most $k$ vertices in a given graph to make\nthe maximum degree of the remaining graph at most $d$, finds applications in computational biology, social network analysis and some others. It can be regarded as a special case of the $(d+2)$-hitting set problem and generates the famous vertex cover problem. The $d$-bounded-degree vertex deletion problem is NP-hard for each fixed $d\\geq 0$.\nIn terms of parameterized complexity, the problem parameterized by $k$ is W[2]-hard for unbounded $d$ and fixed-parameter tractable for each fixed $d\\geq 0$.\n\nPreviously, (randomized) parameterized algorithms for this problem with running time bound $O^*((d+1)^k)$ are only known for $d\\leq2$.\nIn this paper, we give a uniform parameterized algorithm deterministically solving this problem in $O^*((d+1)^k)$ time for each $d\\geq 3$.\nNote that it is an open problem whether the $d'$-hitting set problem can be solved in $O^*((d'-1)^k)$ time for $d'\\geq 3$.\nOur result answers this challenging open problem affirmatively for a special case.\nFurthermore, our algorithm also gets a running time bound of $O^*(3.0645^k)$ for the case that $d=2$, improving the previous deterministic bound of $O^*(3.24^k)$.  \n\n\n \\vspace*{5mm} \\noindent {\\bf Key words.} \\ \\\nParameterized algorithms, Graph algorithms, Bounded-degree vertex deletion, Hitting set\n\\end{abstract}\n\n\\section{Introduction}\n\nThe $d$-bounded-degree vertex deletion problem is a natural generation of the famous vertex cover problem, which is one of the best studied problems in combinatorial optimization.\nAn application of the $d$-bounded-degree vertex deletion problem  in computational biology is addressed by Fellows et. al.~\\cite{FG:gNT}: A clique-centric approach in the analysis of genetic networks based on micro-array data\ncan be modeled as the $d$-bounded-degree vertex deletion problem.\nIn fact, its ``dual problem''-- the $s$-plex problem was introduced\nin 1978 by Seidman and Foster~\\cite{SF:plex} and it becomes an important problem in social network analysis now~\\cite{BBH:plex}.\n\nThe $d$-bounded-degree vertex deletion problem is also extensively studied in theory, especially in parameterized complexity.\nIt has been shown that the problem parameterized by the size $k$ of the deletion set is W[2]-hard for unbounded $d$ and fixed-parameter tractable for each fixed $d\\geq 0$~\\cite{FG:gNT}.\nBetzler et. al.~\\cite{BBNU:treewidth} also studied the parameterized complexity of the problem with respect to  the treewidth $tw$ of the graph. The problem is FPT with parameters $k$\nand $tw$ and W[2]-hard with only parameter $tw$.\nFellows et. al.~\\cite{FG:gNT} generated the NT-theorem for the vertex cover problem to the $d$-bounded-degree vertex deletion problem, which can imply a linear vertex kernel for\nthe problem with $d=0, 1$ and a polynomial vertex kernel for each fixed $d\\geq 2$. A linear vertex kernel for the case that $d=2$ was developed in~\\cite{CF:copath}.\nRecently,  a refined generation of the NT-theorem was proved~\\cite{X:gNT}, which can get a linear vertex kernel for each fixed $d\\geq 0$.\n\n\nIn terms of parameterized algorithms, the case that $d=0$, i.e., the vertex cover problem,  can be solved in $O^*(1.2738^k)$ time now~\\cite{CKX:VC}.\nWhen $d=1$, the problem is  known as the $P_3$ vertex cover problem. Tu~\\cite{tu:p3vc} gave an $O^*(2^k)$-time algorithm and the running time bound was improved to $O^*(1.882^k)$ by Wu recently~\\cite{wu:p3}.\nWhen $d=2$, the problem is  known as the co-path/cycle problem. For this problem, there is an $O^*(3.24^k)$-time deterministic algorithm~\\cite{CF:copath} and an $O^*(3^k)$-time randomized algorithm~\\cite{feng:co-path}.\n For $d\\geq 3$, a simple branch-and-reduce algorithm that tries all $d+2$ possibilities for a $(d+1)$-star in the graph gets the running time bound of $O^*((d+2)^k)$.\n\nIn fact, the $d$-bounded-degree vertex deletion problem can be regarded as a special case of\nthe $(d+2)$-hitting set problem and the latter problem has been extensively studied in parameterized algorithms~\\cite{NR:3HS,fernau:3HS,fernau:WHS,fernau:HS}.\nFor a graph $G$, we regard each vertex in the graph as an element and each $(d+1)$-star as a set of size $d+2$\n(a vertex of degree $d_0>d$ will form $d_0 \\choose d+1$ sets). Then the $d$-bounded-degree vertex deletion problem in $G$ becomes an instance of the $(d+2)$-hitting set problem.\nThere are several parameterized algorithms for the $d'$-hitting set problem running in $O^*((d'-1+c)^k)$ time~\\cite{NR:3HS,fernau:HS}, where $0<c<1$ is a function of $d'^{-1}$.\nIt leaves as an interesting open problem whether the $d'$-hitting set problem can be solved in $O^*((d'-1)^k)$ time. Note that it is marked in \\cite{fernau:HS} that ``$(d'-1)^k$ seems an unsurpassable lower bound''. By using fastest algorithms for the $(d+2)$-hitting set problem, we can\nget an algorithm with running time bound of $O^*((d+1+c_0)^k)$ with $0<c_0<1$ for each fixed $d$.\n\nIn this paper, we design a uniform algorithm for the $d$-bounded-degree vertex deletion problem, which achieves the running time bound of $O^*((d+1)^k)$ for each $d\\geq 3$.\nAlthough our problem is a special case of the $(d+2)$-hitting set problem, the above bound is not easy to reach. We need a very careful analysis and some good graph structural properties.\nIt is also worthy to mention that our algorithm also works on the case that $d=2$ and runs in $O^*(3.096^k)$ time, improving the previous deterministic bound of  $O^*(3.24^k)$~\\cite{CF:copath} and comparable with the previous\nnondeterministic bound of $O^*(3^k)$~\\cite{feng:co-path}.\n\n\n\\section{Preliminaries}\n\n\\label{sec_Pre}\n\nLet $G=(V,E)$ be a simple undirected graph, and $X\\subseteq V$ be a subset of vertices.\nThe subgraph induced by $X$ is denoted by $G[X]$, and $G[V\\setminus X]$ is written as $G\\setminus X$.\nWe may simply use $v$ to denote the set $\\{v\\}$ of a single vertex $v$.\nLet\n$N(X)$ denote the set of {\\em neighbors} of $X$, i.e.,\nthe vertices in $V\\setminus X$ adjacent to a vertex $x\\in X$,\nand denote $N(X)\\cup X$ by $N[X]$.\nThe \\emph{degree} $d(v)$ of a vertex $v$ is defined to be $|N(v)|$.\nA graph of maximum degree $p$ is also called a \\emph{degree-$p$ graph}.\nFor  an integer $q\\geq 1$, a star with $q+1$ vertices is called a  {\\em $q$-star}.\nA set $S$ of vertices is called a \\emph{$d$-deletion set} of a graph $G$, if $G\\setminus S$ has maximum degree at most $d$.\nIn our problem, we want to find a $d$-deletion set of size at most $k$  in a graph. Formally, our problem is defined as following.\n\n\\noindent\\rule{\\linewidth}{0.2mm}\n\\textsc{$d$-Bounded-Degree Vertex Deletion}\\\\\n\\textbf{Instance:} A graph $G=(V,E)$ and two nonnegative integers $d$ and $k$. \\\\\n\n\\textbf{Question:} To decide whether there is a subset $S\\subseteq V$ of vertices such that $|S| \\leq k$\nand the induced graph $G[V\\setminus S]$ has maximum degree at most $d$.\\\\\n\\rule{\\linewidth}{0.2mm}\n\nIn the above definition, $S$ is also called a \\emph{solution set}.\n\n\n\\subsection{Some basic properties}\n\nThe following lemmas are basic structural properties used to design branching rules in our algorithms.\n\n\\lem{base1}{Let $v$ be a vertex of degree $\\geq d+1$ in a graph $G$. Any $d$-deletion set contains either $v$ or $d(v)-d$ neighbors of $v$.\n}\n\nA vertex $v$ \\emph{dominates} a vertex $u$ if all vertices of degree $\\geq d+1$ in $N[u]$ are also in $N[v]$. Note that in this definition, we do not require $N[u]\\subseteq N[v]$.\n\n\\lem{domination}{If a vertex $v$ of degree $\\geq d+1$ dominates a neighbor $u$ of it, then there is a minimum $d$-deletion set containing at least one vertex in $N[v]\\setminus \\{u\\}$.\n}\n\\pf{Since $v$ is of degree $\\geq d+1$, any $d$-deletion set $S$ contains at least one vertex in $N[v]$.\nAssume that $S$ contains only $u$ in $N[v]$. We can see that $S'=S\\cup\\{v\\}\\setminus \\{u\\}$ is still a  $d$-deletion set and $|S'|\\leq |S|$.\nThus, the lemma holds.\n}\n\n\n\\lem{domination2}{If a vertex $u$ dominates a vertex $v$ of degree $\\geq d+1$, then there is a minimum $d$-deletion set containing at least one neighbor of $v$.\n}\n\\pf{ Since $u$ dominates $v$ and $v$ is of degree $\\geq d+1$, we know that $u$ is a neighbor of $v$.\nAny $d$-deletion set $S$ contains at least one vertex in $N[v]$ since it is of degree $\\geq d+1$.\nAssume that $S\\cap N[v]=\\{v\\}$. We can see that $S'=S\\cup\\{u\\}\\setminus \\{v\\}$ is a  $d$-deletion set\ncontaining a neighbor of $v$ and $|S'|\\leq |S|$.\nThus, the lemma holds.\n}\n\n\n\nIf there is a vertex of degree $\\geq d+1$ dominating a neighbor of it or being dominated by another vertex, we say that the graph has a \\emph{proper domination}.\nNote that if a vertex $u$ of degree $\\geq d+1$ has at most one neighbor $v$ of degree $\\geq d+1$, then $u$ is dominated by $v$ and then there is a proper domination. In fact we have:\n\\lem{domi3}{\nIf a graph has no proper domination, then each vertex of degree $\\geq d+1$ in it has at least two nonadjacent neighbors of\ndegree $\\geq d+1$.}\n\n\\subsection{Branch-and-search algorithms}\nOur algorithm is a typical branch-and-search algorithm.\nIn our algorithm, we search a solution for an instance by recursively\n branching on the current\ninstance into several smaller instances until the instances become trivial instances.\nEach simple branching operation creates a recurrence relation.\nAssume that the branching operation branches on an instance with parameter $k$  into $l$ branches such that\nin the $i$-th branch the parameter decreases by\nat least $a_i$. Let $C(k)$ denote the worst size of the search tree to search a solution to any instance with parameter $k$. We get a recurrence relation \\footnote{In fact, we may simply write a recurrence relation as $C(k)\\leq  C(k-a_1)+C(k-a_2)+\\cdots +C(k-a_l)$. This difference will only affect a constant behind $O$ in the finial running time.}\n\n", "index": 1, "text": "$$C(k)\\leq  C(k-a_1)+C(k-a_2)+\\cdots +C(k-a_l)+1.$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"C(k)\\leq C(k-a_{1})+C(k-a_{2})+\\cdots+C(k-a_{l})+1.\" display=\"block\"><mrow><mrow><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><msub><mi>a</mi><mn>1</mn></msub></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><msub><mi>a</mi><mn>2</mn></msub></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mi mathvariant=\"normal\">\u22ef</mi><mo>+</mo><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><msub><mi>a</mi><mi>l</mi></msub></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mn>1</mn></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.00163.tex", "nexttext": "\n\nAssume that for some constant $c>0$ it holds that $C(k')<c\\gamma_d^{k'}$ for all $k'< k$. We show that it also holds for $k'=k$:\n \n", "itemtype": "equation", "pos": 17408, "prevtext": "\nThe largest\nroot of the function $f(x)=1-\\sum_{i=1}^l x^{-a_i}$ is called the \\emph{branching factor} of the recurrence relation.\nLet $\\alpha$ be the maximum branching factor among all branching factors in the algorithm.\nThe size of the search tree that represents the branching process of the algorithm applied to\nan instance with parameter $k$ is  given by $O(\\alpha^k)$.\nMore details about the analysis and how to solve recurrences\ncan be found in the monograph~\\cite{Fomin:book}.\n\n\n\n\n\\section{The idea and organization of the algorithm}\nOur purpose is to design a branch-and-search algorithm for the $d$-bounded-degree vertex deletion problem such\nthat the branching factor of each recurrence relation with respective to the parameter $k$ is at most $d+1$.\n\\refl{base1} provides a simple branching rule: for a vertex $d$ of degree $\\geq d+1$, branching\nby either  including $v$ or each set of $d(v)-d$ neighbors of $v$ to the solution set.\nWe will show that when $d(v)\\geq d+2$, this simple branching operation is good enough to get a branching factor $\\leq d+1$ for each $d\\geq 2$ (See Step 1 in Section~\\ref{sec_alg}). Thus, we can use this operation to deal with vertices of degree $\\geq d+2$.\n\\refl{base1} for a degree-($d+1$) vertex $v$ can be interpreted as: at least one vertex in $N(v)$ is in a $d$-deletion set. This branching operation will only get a branching factor of $d+2$ for this case.\nBut when there is a proper domination in a degree-($d+1$) graph, we still can branch with branching factor $d+1$, since\nwe can ignore one branch by \\refl{domination} and \\refl{domination2}. The detailed analysis is given in Step 2 in Section~\\ref{sec_alg}.\nWhen the graph is of maximum degree $d+1$ and has no proper domination, we need to use more structural properties.\n\n\n\n\n\n\nTo find a $d$-deletion set in a degree-$(d+1)$ graph is equivalent to find a vertex subset intersecting $N[v]$\nfor each degree-($d+1$) vertex $v$.\nIf there are some vertices in $N[v_1]\\cap N[v_2]$ for two degree-$(d+1)$ vertices $v_1$ and $v_2$, some information\nmay be useful for us to design a good branching rule.\nNote that for two adjacent degree-$(d+1)$ vertices $v_1$ and $v_2$, there are at least two vertices in the intersection\nof $N[v_1]$ and $N[v_2]$. \\refl{domi3} guarantees that each degree-$(d+1)$ vertex has two degree-$(d+1)$ neighbors if a degree-$(d+1)$ graph has no proper domination.\nSo we will focus on adjacent degree-$(d+1)$ vertices.\n\nWe define three relations between two degree-($d+1$) vertices.  A pair of adjacent degree-($d+1$) vertices is a \\emph{good pair} if they have at least one\nand at most $d-2$ common neighbors. A pair of adjacent degree-($d+1$) vertices is a \\emph{close pair} if they have exactly $d-1$ common neighbors.\nA pair of nonadjacent degree-($d+1$) vertices is a \\emph{similar pair} if they have the same neighbor set.\nWe have a good branching rule to deal with good pairs. See Step 3 in Section~\\ref{sec_alg}.\nAfter dealing with all good pairs, for any pair of adjacent degree-($d+1$) vertices, either it is a close pair or the two vertices have no common neighbor.\nWe do not have a simple branching rule with branching factor $d+1$ for these two cases.\nThen we change to consider three adjacent  degree-($d+1$) vertices.\n\nLet $v_1, v_2$ and $v_3$ be three degree-($d+1$) vertices such that $v_2$ is adjacent to $v_1$ and $v_3$. We find that the hardest case is that exact one pair of vertices in $\\{v_1,v_2,v_3\\}$\nis a close or similar pair, for which we still can not get a branching factor $\\leq d+1$. We call this case a \\emph{bad case}. If no pair of vertices in $\\{v_1,v_2,v_3\\}$\nis a close or similar pair, we call $\\{v_1,v_2,v_3\\}$ a \\emph{proper triple} of degree-($d+1$) vertices.\nOur idea is to avoid bad cases and only branch on proper triples.\n\nConsider  four degree-($d+1$) vertices  $v_1, v_2, v_3$ and $v_4$ such that there is an edge between $v_i$ and $v_{i+1}$ for $i=1,2,3$.\nIf at most one pair of vertices in $\\{v_1,v_2,v_3, v_4\\}$\nis a close or similar pair, then at least one of $\\{v_1,v_2,v_3\\}$ and $\\{v_2,v_3, v_4\\}$ will be a proper triple.\nThus the only left cases are that at least two pairs of vertices in $\\{v_1,v_2,v_3, v_4\\}$\nare close or similar pairs.\nLuckily, we find good branching rules to deal with them.\nWhen both of $\\{v_1,v_2\\}$ and $\\{v_2, v_3\\}$\nare close pairs, $\\{v_1,v_2,v_3\\}$ is called a \\emph{close triple}. See Figure~\\ref{three}(a) for an illustration of close triple. Our algorithm deals with close triples in Step 4 in Section~\\ref{sec_alg}.\nWhen both of $\\{v_1,v_2\\}$ and $\\{v_3, v_4\\}$\nare close pairs, $\\{v_1,v_2,v_3,v_4\\}$ is called a \\emph{type-I close quadruple}. See Figure~\\ref{three}(b) for an illustration of type-I close quadruple. Our algorithm deals with type-I close quadruples in Step 5 in Section~\\ref{sec_alg}.\nWhen both of $\\{v_1,v_3\\}$ and $\\{v_2, v_4\\}$\nare similar pairs, $\\{v_1,v_2,v_3,v_4\\}$ is called a \\emph{type-II close quadruple}. See Figure~\\ref{three}(c) for an illustration of type-II close quadruple. Our algorithm deals with type-II close quadruples in Step 6 in Section~\\ref{sec_alg}.\nWhen $\\{v_1,v_2,v_3,v_4\\}$ has one close pair and one similar pair, we can see there is always a close triple in it.\nTherefore, we have considered all possible cases.\nThe last step of our algorithm is then to deal with proper triples.\n\n\\begin{figure}\n  \\centering\n  \n  \\includegraphics[width=0.8\\textwidth]{three.eps}\\\\\n  \\caption{Illustrations of some structures}\\label{three}\n\\end{figure}\n\n\n\\section{The algorithm and its analysis}\\label{sec_alg}\n\n\n\n\nWe are ready to describe the whole algorithm. Our algorithm works for any $d\\geq 0$ but can only achieve\nthe running time bound of $O^*((d+1)^k)$ for each $d\\geq 3$.\nOur algorithm is a recursive algorithm containing seven major steps, each of which will branch on the current instance into several sub-instances and invoke the algorithm itself on each sub-instance. Next, we describe these steps. When we introduce one step, we assume that all pervious steps can not be applied anymore.\nFor the purpose of presentation, we will analyze the correctness and running time of each step after describing it.\n\n\\medskip\n\\noindent \\textbf{Step~1} (\\textbf{Vertices of degree $\\geq d+2$})\n\nIf there is a vertex $v$ of degree $\\geq d+2$ in the graph, we branch on $v$ into $1+ {{d(v)}\\choose{d(v)-d}}$\nbranches according to \\refl{base1} by either  including $v$ or each set of $d(v)-d$ neighbors of $v$ to the solution set.\n\n\n\n\nIn the branch where $v$ is included to the solution set, we delete $v$ from the graph and decrease the parameter $k$ by 1.\nIn the branch where a set $N'\\subseteq N(V)$ of $d(v)-d$ neighbors of $v$ are included to the solution set, we delete $N'$ from\nthe graph and decrease the parameter $k$ by $d(v)-d$. For this operation, we get a recurrence relation\n\\eqn{e_step1}{\nC(k)\\leq C(k-1) + {{d(v)}\\choose{d(v)-d}}\\cdot C(k-(d(v)-d)).\n}\nLet $\\gamma$ denote the branching factor of \\refe{e_step1}.\n\n\\lem{l1}{If $d(v)-d\\geq 2$, the branching factor $\\gamma$ of \\refe{e_step1} satisfies that\n\\eqn{e_le1}\n{\\gamma \\leq \\frac{{1 + \\sqrt {2{d^2} + 6d + 5} }}{2}.}\n}\n\\pf{Let $\\gamma_d= \\frac{{1 + \\sqrt {2{d^2} + 6d + 5} }}{2}$. To prove \\refl{l1}, we will prove that\n$C(k)=O(\\gamma_d^k)$ by using the  substitution method.\nFirst of all, directed computation shows that for any $d(v)\\geq d+2$ and $d\\geq 0$ it holds that\n${{d(v)}\\choose {d(v) - d}}\n\\gamma _d^{k - (d(v) - d)}   \\le  {{d(v)}\\choose {d(v) - d-1}}\n\\gamma _d^{k - (d(v) - d - 1)}  $:\n\n", "index": 3, "text": "\n\\[\n\\begin{array}{*{20}l}\n   {} & ~~~&{{{d(v)}\\choose {d(v) - d}}\\gamma _d^{k - (d(v) - d)} }  \\le   {   {{d(v)}\\choose {d(v) - d-1}} \\gamma _d^{k - (d(v) - d - 1)} }  \\\\\n    \\Leftrightarrow  & ~~~&{\\frac{{d(v)!}}{{(d(v) - d)!d!}}\\gamma _d^{k - (d(v) - d)} }   \\le  {\\frac{{d(v)!}}{{(d(v) - d - 1)!(d + 1)!}}\\gamma _d^{k - (d(v) - d - 1)} }  \\\\\n    \\Leftrightarrow  & ~~~&{\\frac{1}{{d(v) - d}}} \\le  {\\frac{{\\gamma _d }}{{d + 1}}}  \\\\\n    \\Leftrightarrow  & ~~~&{\\frac{{d + 1}}{{d(v) - d}}}   \\le  {\\frac{{1 + \\sqrt {2d^2  + 6d + 5} }}{2}}  \\\\\n    \\Leftarrow  & ~~~&{\\frac{{d + 1}}{2}}   \\le   {\\frac{{1 + \\sqrt {2d^2  + 6d + 5} }}{2}}  ~~~~~~~~~~\\mbox{(By $d(v)\\geq d+2$)}\\\\\n    \\Leftrightarrow  & ~~~&d   \\le   {\\sqrt {2d^2  + 6d + 5} }.  \\\\\n\\end{array}\n\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"\\begin{array}[]{*{20}l}&amp;&amp;{{{d(v)}\\choose{d(v)-d}}\\gamma_{d}^{k-(d(v)-d)}}\\leq{%&#10;{{d(v)}\\choose{d(v)-d-1}}\\gamma_{d}^{k-(d(v)-d-1)}}\\\\&#10;\\Leftrightarrow&amp;&amp;{\\frac{{d(v)!}}{{(d(v)-d)!d!}}\\gamma_{d}^{k-(d(v)-d)}}\\leq{%&#10;\\frac{{d(v)!}}{{(d(v)-d-1)!(d+1)!}}\\gamma_{d}^{k-(d(v)-d-1)}}\\\\&#10;\\Leftrightarrow&amp;&amp;{\\frac{1}{{d(v)-d}}}\\leq{\\frac{{\\gamma_{d}}}{{d+1}}}\\\\&#10;\\Leftrightarrow&amp;&amp;{\\frac{{d+1}}{{d(v)-d}}}\\leq{\\frac{{1+\\sqrt{2d^{2}+6d+5}}}{2}%&#10;}\\\\&#10;\\Leftarrow&amp;&amp;{\\frac{{d+1}}{2}}\\leq{\\frac{{1+\\sqrt{2d^{2}+6d+5}}}{2}}~{}~{}~{}~{%&#10;}~{}~{}~{}~{}~{}~{}\\mbox{(By $d(v)\\geq d+2$)}\\\\&#10;\\Leftrightarrow&amp;&amp;d\\leq{\\sqrt{2d^{2}+6d+5}}.\\\\&#10;\\end{array}\" display=\"block\"><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd/><mtd/><mtd columnalign=\"left\"><mrow><mrow><mrow><mo>(</mo><mfrac linethickness=\"0pt\"><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi></mrow></mfrac><mo>)</mo></mrow><mo>\u2062</mo><msubsup><mi>\u03b3</mi><mi>d</mi><mrow><mi>k</mi><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></msubsup></mrow><mo>\u2264</mo><mrow><mrow><mo>(</mo><mfrac linethickness=\"0pt\"><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi><mo>-</mo><mn>1</mn></mrow></mfrac><mo>)</mo></mrow><mo>\u2062</mo><msubsup><mi>\u03b3</mi><mi>d</mi><mrow><mi>k</mi><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></msubsup></mrow></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd columnalign=\"left\"><mo>\u21d4</mo></mtd><mtd/><mtd columnalign=\"left\"><mrow><mrow><mfrac><mrow><mi>d</mi><mo>\u2062</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow></mrow><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow><mo>\u2062</mo><mrow><mi>d</mi><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow></mrow></mfrac><mo>\u2062</mo><msubsup><mi>\u03b3</mi><mi>d</mi><mrow><mi>k</mi><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></msubsup></mrow><mo>\u2264</mo><mrow><mfrac><mrow><mi>d</mi><mo>\u2062</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow></mrow><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow><mo>\u2062</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow></mrow></mfrac><mo>\u2062</mo><msubsup><mi>\u03b3</mi><mi>d</mi><mrow><mi>k</mi><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></msubsup></mrow></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd columnalign=\"left\"><mo>\u21d4</mo></mtd><mtd/><mtd columnalign=\"left\"><mrow><mfrac><mn>1</mn><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi></mrow></mfrac><mo>\u2264</mo><mfrac><msub><mi>\u03b3</mi><mi>d</mi></msub><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd columnalign=\"left\"><mo>\u21d4</mo></mtd><mtd/><mtd columnalign=\"left\"><mrow><mfrac><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi></mrow></mfrac><mo>\u2264</mo><mfrac><mrow><mn>1</mn><mo>+</mo><msqrt><mrow><mrow><mn>2</mn><mo>\u2062</mo><msup><mi>d</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>6</mn><mo>\u2062</mo><mi>d</mi></mrow><mo>+</mo><mn>5</mn></mrow></msqrt></mrow><mn>2</mn></mfrac></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd columnalign=\"left\"><mo>\u21d0</mo></mtd><mtd/><mtd columnalign=\"left\"><mrow><mfrac><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo>\u2264</mo><mrow><mfrac><mrow><mn>1</mn><mo>+</mo><msqrt><mrow><mrow><mn>2</mn><mo>\u2062</mo><msup><mi>d</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>6</mn><mo>\u2062</mo><mi>d</mi></mrow><mo>+</mo><mn>5</mn></mrow></msqrt></mrow><mn>2</mn></mfrac><mo separator=\"true\">\u2003\u2003\u2003\u2005</mo><mrow><mtext>(By\u00a0</mtext><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2265</mo><mrow><mi>d</mi><mo>+</mo><mn>2</mn></mrow></mrow><mtext>)</mtext></mrow></mrow></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd columnalign=\"left\"><mo>\u21d4</mo></mtd><mtd/><mtd columnalign=\"left\"><mrow><mrow><mi>d</mi><mo>\u2264</mo><msqrt><mrow><mrow><mn>2</mn><mo>\u2062</mo><msup><mi>d</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>6</mn><mo>\u2062</mo><mi>d</mi></mrow><mo>+</mo><mn>5</mn></mrow></msqrt></mrow><mo>.</mo></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr></mtable></math>", "type": "latex"}, {"file": "1601.00163.tex", "nexttext": "\n\n}\n\nSome concrete upper bounds of $\\gamma$ are listed in Table~\\ref{table0}. In fact, it is easy to verify that $\\gamma \\leq d+1$ for $d\\geq 2$.\n\n\\begin{table}[h]\\centering\n \\caption{The value of $\\gamma$}\n \\begin{center} \\footnotesize\n \\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|}\\hline\n & $d=0$& $d=1$ & $d=2$& $d=3$ & $d=4$ & $d=5$& $d=10$ & $d=50$ & $d=100$\\\\ \\hline\n $\\gamma$& 1.6181& $2.3028$ & $3$& $3.7016$ & $4.4052$ & $5.1098$& $8.6395$ & $36.9177$ & $72.2722$   \\\\ \\hline\n \\end{tabular}\n\\end{center}\n\\label{table0}\n\\end{table}\n\nAfter Step~1, the graph has maximum degree $d+1$.\n\n\\medskip\n\\noindent \\textbf{Step~2} (\\textbf{Proper dominations})\n\nIf a vertex $v$ of degree $\\geq d+1$  is dominated by a vertex $u$ (or dominates a neighbor $u$ of it),\nwe branch on $v$ into $d(v)$\nbranches by including each vertex in  $N(v)$ (or $N[v]\\setminus \\{u\\}$) to the solution set.\nThe correctness of this step is based on \\refl{domination} and \\refl{domination2}.\n\nIn each branch, a vertex is included to the solution set and $k$ decreases by 1.\nVertex $v$ is of degree $d+1$ since the graph has maximum degree at most $d+1$ after Step~1.\nWe get a recurrence relation\n\n", "itemtype": "equation", "pos": 18299, "prevtext": "\n\nAssume that for some constant $c>0$ it holds that $C(k')<c\\gamma_d^{k'}$ for all $k'< k$. We show that it also holds for $k'=k$:\n \n", "index": 5, "text": "\\[\n\\begin{array}{*{20}l}\n   C(k) &\\leq & C(k-1) + {{d(v)}\\choose{d(v)-d}}\\cdot C(k-(d(v)-d))&\\\\\n   & \\leq & c\\cdot \\gamma_d^{k-1}+{{d(v)}\\choose{d(v)-d}}\\cdot c\\cdot \\gamma_d^{k-(d(v)-d)}& \\mbox{(By the assumption)}\\\\\n   &\\leq &c\\cdot \\gamma_d^{k-1}+{{d+2}\\choose{2}}\\cdot c\\cdot \\gamma_d^{k-2} &\\mbox{(By the above inequality)}\\\\\n   & =& c \\gamma_d^{k-2}(\\gamma_d+ {{d+2}\\choose{2}})&\\\\\n   &=& c\\gamma_d^{k}.& \\mbox{(By $\\gamma_d= \\frac{{1 + \\sqrt {2{d^2} + 6d + 5} }}{2}$)}\\\\\n\\end{array}\n\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"\\begin{array}[]{*{20}l}C(k)&amp;\\leq&amp;C(k-1)+{{d(v)}\\choose{d(v)-d}}\\cdot C(k-(d(v)%&#10;-d))&amp;\\\\&#10;&amp;\\leq&amp;c\\cdot\\gamma_{d}^{k-1}+{{d(v)}\\choose{d(v)-d}}\\cdot c\\cdot\\gamma_{d}^{k-%&#10;(d(v)-d)}&amp;\\mbox{(By the assumption)}\\\\&#10;&amp;\\leq&amp;c\\cdot\\gamma_{d}^{k-1}+{{d+2}\\choose{2}}\\cdot c\\cdot\\gamma_{d}^{k-2}&amp;%&#10;\\mbox{(By the above inequality)}\\\\&#10;&amp;=&amp;c\\gamma_{d}^{k-2}(\\gamma_{d}+{{d+2}\\choose{2}})&amp;\\\\&#10;&amp;=&amp;c\\gamma_{d}^{k}.&amp;\\mbox{(By $\\gamma_{d}=\\frac{{1+\\sqrt{2{d^{2}}+6d+5}}}{2}$)%&#10;}\\\\&#10;\\end{array}\" display=\"block\"><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mtd><mtd columnalign=\"left\"><mo>\u2264</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mrow><mrow><mo>(</mo><mfrac linethickness=\"0pt\"><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi></mrow></mfrac><mo>)</mo></mrow><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mo>\u2264</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mi>c</mi><mo>\u22c5</mo><msubsup><mi>\u03b3</mi><mi>d</mi><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow></msubsup></mrow><mo>+</mo><mrow><mrow><mo>(</mo><mfrac linethickness=\"0pt\"><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi></mrow></mfrac><mo>)</mo></mrow><mo>\u22c5</mo><mi>c</mi><mo>\u22c5</mo><msubsup><mi>\u03b3</mi><mi>d</mi><mrow><mi>k</mi><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>d</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></msubsup></mrow></mrow></mtd><mtd columnalign=\"left\"><mtext>(By the assumption)</mtext></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mo>\u2264</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mi>c</mi><mo>\u22c5</mo><msubsup><mi>\u03b3</mi><mi>d</mi><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow></msubsup></mrow><mo>+</mo><mrow><mrow><mo>(</mo><mfrac linethickness=\"0pt\"><mrow><mi>d</mi><mo>+</mo><mn>2</mn></mrow><mn>2</mn></mfrac><mo>)</mo></mrow><mo>\u22c5</mo><mi>c</mi><mo>\u22c5</mo><msubsup><mi>\u03b3</mi><mi>d</mi><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow></msubsup></mrow></mrow></mtd><mtd columnalign=\"left\"><mtext>(By the above inequality)</mtext></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mo>=</mo></mtd><mtd columnalign=\"left\"><mrow><mi>c</mi><mo>\u2062</mo><msubsup><mi>\u03b3</mi><mi>d</mi><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow></msubsup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>\u03b3</mi><mi>d</mi></msub><mo>+</mo><mrow><mo>(</mo><mfrac linethickness=\"0pt\"><mrow><mi>d</mi><mo>+</mo><mn>2</mn></mrow><mn>2</mn></mfrac><mo>)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mo>=</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mi>c</mi><mo>\u2062</mo><msubsup><mi>\u03b3</mi><mi>d</mi><mi>k</mi></msubsup></mrow><mo>.</mo></mrow></mtd><mtd columnalign=\"left\"><mrow><mtext>(By\u00a0</mtext><mrow><msub><mi>\u03b3</mi><mi>d</mi></msub><mo>=</mo><mstyle displaystyle=\"false\"><mfrac><mrow><mn>1</mn><mo>+</mo><msqrt><mrow><mrow><mn>2</mn><mo>\u2062</mo><msup><mi>d</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>6</mn><mo>\u2062</mo><mi>d</mi></mrow><mo>+</mo><mn>5</mn></mrow></msqrt></mrow><mn>2</mn></mfrac></mstyle></mrow><mtext>)</mtext></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr></mtable></math>", "type": "latex"}, {"file": "1601.00163.tex", "nexttext": "\nthe branching factor of which is $d+1$.\n\n\n\\medskip\n\\noindent \\textbf{Step~3} (\\textbf{Good pairs of degree-($d+1$) vertices})\n\nRecall that a pair of adjacent degree-($d+1$) vertices is a \\emph{good pair} if they have at least one\nand at most $d-2$ common neighbors.\nwe use the following branching rule to deal with a good pair $\\{v_1,v_2\\}$.\nLet $N^+=(N(v_1)\\cap N(v_2))\\cup \\{v_1,v_2\\}$, $N_1=N(v_1)\\setminus N^+$ and $N_2=N(v_2)\\setminus N^+$.\nAssume that $v_1$ and $v_2$ have $x$ common neighbors.\nNote that for any  $d$-degree deletion set $S'$, if $S'$ does not contain any vertex in $N^+$, then $S'$\ncontains at least one vertex in $N_1$ and one vertex in $N_2$.\nWe branch into $|N^+|+|N_1||N_2|=(x+2)+(d-x)^2$ branches. In the first $|N^+|$ branches each vertex in  $N^+$\nis included to the solution set; and in the last $|N_1||N_2|$ branches each pair of vertices in $N_1$ and $N_2$ are\nincluded to the solution set. In each branch, if $z$ vertices are included to the solution set, then the parameter $k$ in this branch decreases by $z$.\n This branching operation gives a recurrence relation\n", "itemtype": "equation", "pos": 19955, "prevtext": "\n\n}\n\nSome concrete upper bounds of $\\gamma$ are listed in Table~\\ref{table0}. In fact, it is easy to verify that $\\gamma \\leq d+1$ for $d\\geq 2$.\n\n\\begin{table}[h]\\centering\n \\caption{The value of $\\gamma$}\n \\begin{center} \\footnotesize\n \\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|}\\hline\n & $d=0$& $d=1$ & $d=2$& $d=3$ & $d=4$ & $d=5$& $d=10$ & $d=50$ & $d=100$\\\\ \\hline\n $\\gamma$& 1.6181& $2.3028$ & $3$& $3.7016$ & $4.4052$ & $5.1098$& $8.6395$ & $36.9177$ & $72.2722$   \\\\ \\hline\n \\end{tabular}\n\\end{center}\n\\label{table0}\n\\end{table}\n\nAfter Step~1, the graph has maximum degree $d+1$.\n\n\\medskip\n\\noindent \\textbf{Step~2} (\\textbf{Proper dominations})\n\nIf a vertex $v$ of degree $\\geq d+1$  is dominated by a vertex $u$ (or dominates a neighbor $u$ of it),\nwe branch on $v$ into $d(v)$\nbranches by including each vertex in  $N(v)$ (or $N[v]\\setminus \\{u\\}$) to the solution set.\nThe correctness of this step is based on \\refl{domination} and \\refl{domination2}.\n\nIn each branch, a vertex is included to the solution set and $k$ decreases by 1.\nVertex $v$ is of degree $d+1$ since the graph has maximum degree at most $d+1$ after Step~1.\nWe get a recurrence relation\n\n", "index": 7, "text": "\n\\[C(k)\\leq d(v)\\cdot C(k-1)= (d+1)\\cdot C(k-1),\n\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex4.m1\" class=\"ltx_Math\" alttext=\"C(k)\\leq d(v)\\cdot C(k-1)=(d+1)\\cdot C(k-1),\" display=\"block\"><mrow><mrow><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.00163.tex", "nexttext": "\nthe branching factor of which is\n", "itemtype": "equation", "pos": 21107, "prevtext": "\nthe branching factor of which is $d+1$.\n\n\n\\medskip\n\\noindent \\textbf{Step~3} (\\textbf{Good pairs of degree-($d+1$) vertices})\n\nRecall that a pair of adjacent degree-($d+1$) vertices is a \\emph{good pair} if they have at least one\nand at most $d-2$ common neighbors.\nwe use the following branching rule to deal with a good pair $\\{v_1,v_2\\}$.\nLet $N^+=(N(v_1)\\cap N(v_2))\\cup \\{v_1,v_2\\}$, $N_1=N(v_1)\\setminus N^+$ and $N_2=N(v_2)\\setminus N^+$.\nAssume that $v_1$ and $v_2$ have $x$ common neighbors.\nNote that for any  $d$-degree deletion set $S'$, if $S'$ does not contain any vertex in $N^+$, then $S'$\ncontains at least one vertex in $N_1$ and one vertex in $N_2$.\nWe branch into $|N^+|+|N_1||N_2|=(x+2)+(d-x)^2$ branches. In the first $|N^+|$ branches each vertex in  $N^+$\nis included to the solution set; and in the last $|N_1||N_2|$ branches each pair of vertices in $N_1$ and $N_2$ are\nincluded to the solution set. In each branch, if $z$ vertices are included to the solution set, then the parameter $k$ in this branch decreases by $z$.\n This branching operation gives a recurrence relation\n", "index": 9, "text": "\n\\[\nC(k) \\leq (x+2)\\cdot C(k-1)+ (d-x)^2\\cdot C(k-2),\n\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m1\" class=\"ltx_Math\" alttext=\"C(k)\\leq(x+2)\\cdot C(k-1)+(d-x)^{2}\\cdot C(k-2),\" display=\"block\"><mrow><mrow><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>x</mi><mo>+</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mrow><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mi>x</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.00163.tex", "nexttext": "\nIt is easy to verify that when $1\\leq x \\leq d-2$, the branching factor is at most $d+1$.\n\n\\medskip\n\\noindent \\textbf{Step~4} (\\textbf{Close triples of degree-($d+1$) vertices})\n\nRecall that a pair of adjacent degree-($d+1$) vertices is a \\emph{close pair} if they have exactly $d-1$ common neighbors.\nThe formal definition of close triple is that: the set of three degree-($d+1$) vertices $v_1, v_2$ and $v_3$ is called a \\emph{close triple} if $\\{v_1,v_2\\}$ and $\\{v_2, v_3\\}$\nare two close pairs and $v_1$ and $v_3$ are not adjacent.\nAccording to the definition of close triples, we can see that $N(v_1)\\cap N(v_2)\\cap N(v_3)=N(v_2)\\setminus\\{v_1,v_3\\}$.\nFor a close triple $\\{v_1,v_2,v_3\\}$, we observe the following.\nVertex $v_1$ (resp., $v_3$) is adjacent to a degree -$(d+1)$ vertex $v_0\\not\\in N[v_2]$ (resp., $v_4\\not\\in N[v_2]$) by \\refl{domi3}.\nLet $N^-_2=N[v_2]\\setminus\\{v_1,v_3\\}$.\nFor any $d$-degree deletion set $S'$, if $S\\cap N^-_2=\\emptyset$, then $S'$ contains either $v_1$ and a vertex in $\\{v_3,v_4\\}$ (since $S'$ must contain a vertex in $N[v_2]$ and a vertex in $N[v_3]$) or $v_3$ and a vertex in\n$\\{v_0,v_1\\}$ (since $S'$ must contain a vertex in $N[v_2]$ and a vertex in $N[v_1]$). Then we can branch\nby either including each vertex in $N^-_2$ to the solution set or including each of $\\{v_1,v_3\\}$, $\\{v_1,v_4\\}$\nand $\\{v_0,v_3\\}$ to the solution set. This branching operation gives a recurrence relation\n", "itemtype": "equation", "pos": 21196, "prevtext": "\nthe branching factor of which is\n", "index": 11, "text": "\n\\[\\frac{1}{2}\\left( {2 + x + \\sqrt {5{x^2} - 8dx + 4{d^2} + 4x + 4} } \\right).\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m1\" class=\"ltx_Math\" alttext=\"\\frac{1}{2}\\left({2+x+\\sqrt{5{x^{2}}-8dx+4{d^{2}}+4x+4}}\\right).\" display=\"block\"><mrow><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>\u2062</mo><mrow><mo>(</mo><mrow><mn>2</mn><mo>+</mo><mi>x</mi><mo>+</mo><msqrt><mrow><mrow><mrow><mn>5</mn><mo>\u2062</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><mo>-</mo><mrow><mn>8</mn><mo>\u2062</mo><mi>d</mi><mo>\u2062</mo><mi>x</mi></mrow></mrow><mo>+</mo><mrow><mn>4</mn><mo>\u2062</mo><msup><mi>d</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>4</mn><mo>\u2062</mo><mi>x</mi></mrow><mo>+</mo><mn>4</mn></mrow></msqrt></mrow><mo>)</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.00163.tex", "nexttext": "\nthe branching factor of which is\n", "itemtype": "equation", "pos": 22709, "prevtext": "\nIt is easy to verify that when $1\\leq x \\leq d-2$, the branching factor is at most $d+1$.\n\n\\medskip\n\\noindent \\textbf{Step~4} (\\textbf{Close triples of degree-($d+1$) vertices})\n\nRecall that a pair of adjacent degree-($d+1$) vertices is a \\emph{close pair} if they have exactly $d-1$ common neighbors.\nThe formal definition of close triple is that: the set of three degree-($d+1$) vertices $v_1, v_2$ and $v_3$ is called a \\emph{close triple} if $\\{v_1,v_2\\}$ and $\\{v_2, v_3\\}$\nare two close pairs and $v_1$ and $v_3$ are not adjacent.\nAccording to the definition of close triples, we can see that $N(v_1)\\cap N(v_2)\\cap N(v_3)=N(v_2)\\setminus\\{v_1,v_3\\}$.\nFor a close triple $\\{v_1,v_2,v_3\\}$, we observe the following.\nVertex $v_1$ (resp., $v_3$) is adjacent to a degree -$(d+1)$ vertex $v_0\\not\\in N[v_2]$ (resp., $v_4\\not\\in N[v_2]$) by \\refl{domi3}.\nLet $N^-_2=N[v_2]\\setminus\\{v_1,v_3\\}$.\nFor any $d$-degree deletion set $S'$, if $S\\cap N^-_2=\\emptyset$, then $S'$ contains either $v_1$ and a vertex in $\\{v_3,v_4\\}$ (since $S'$ must contain a vertex in $N[v_2]$ and a vertex in $N[v_3]$) or $v_3$ and a vertex in\n$\\{v_0,v_1\\}$ (since $S'$ must contain a vertex in $N[v_2]$ and a vertex in $N[v_1]$). Then we can branch\nby either including each vertex in $N^-_2$ to the solution set or including each of $\\{v_1,v_3\\}$, $\\{v_1,v_4\\}$\nand $\\{v_0,v_3\\}$ to the solution set. This branching operation gives a recurrence relation\n", "index": 13, "text": "\n\\[\nC(k) \\leq (d-1)\\cdot C(k-1)+ 3\\cdot C(k-2),\n\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m1\" class=\"ltx_Math\" alttext=\"C(k)\\leq(d-1)\\cdot C(k-1)+3\\cdot C(k-2),\" display=\"block\"><mrow><mrow><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mrow><mn>3</mn><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.00163.tex", "nexttext": "\nIt is easy to verify that when $d\\geq 2$, the branching factor is less than $d+1$.\n\n\n\n\\medskip\n\\noindent \\textbf{Step~5} (\\textbf{Type-I close quadruples of degree-($d+1$) vertices})\n\nA set of four degree-($d+1$) vertices $\\{v_1,v_2,v_3,v_4\\}$ is called a \\emph{type-I close quadruple} if\n $\\{v_1,v_2,v_3,v_4\\}$ induces a cycle or a path of 4 vertices, and\n $\\{v_1,v_2\\}$ and $\\{v_3,v_4\\}$ are two close pairs.\nLet $N_{12}^-=N(v_1)\\cap N(v_2)$ and $N_{34}^-=N(v_3)\\cap N(v_4)$.\nWhen the graph has no proper dominations, good pairs or close triples, it holds that\n$N_{12}^- \\cap N_{34}^-=\\emptyset$.\n\nLet $S'$ be an arbitrary $d$-degree deletion set.\n Our branching rule for type-I close quadruples is different for the cases whether  $\\{v_1,v_2,v_3,v_4\\}$ induces  a cycle or a path.\n\n\\textbf{Case 1.} $\\{v_1,v_2,v_3,v_4\\}$ induces a cycle of 4 vertices:\nWe consider the following different subcases.\n\n\\textbf{Case 1.1.}  $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\emptyset$: Then $S'\\cap N_{12}^-\\neq \\emptyset$ and $S'\\cap N_{34}^-\\neq \\emptyset$.\nFor this case, we included each pair of vertices in $N_{13}^-$ and $N_{24}^-$ to the solution set to create $|N_{12}^-||N_{34}^-|=(d-1)^2$ branches, each of which decreases $k$ by 2.\n\n\\textbf{Case 1.2.} $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_1\\}$ or $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_2\\}$: Then $S'\\cap  N_{34}^-\\neq \\emptyset$,\notherwise no vertex in $N[v_3]$ or $N[v_4]$  would be in $S'$ and then $S'$ would not be a $d$-degree deletion set.\nFurthermore, if $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_2\\}$, then $S'\\setminus \\{v_2\\}\\cup\\{v_1\\}$ is still a $d$-degree deletion set of the same size, since $N[v_2]\\setminus N[v_1]=\\{v_3\\}$, $v_3$ is adjacent to all vertices in $N_{34}^-$\nand $S'\\cap  N_{34}^-\\neq \\emptyset$.\nSo for this case, we include $\\{v_1,x\\}$ to  the solution set for each $x\\in N_{34}^-$ to create $|N_{34}^-|=d-1$ branches, each of which decreases $k$ by 2.\n\n\n\\textbf{Case 1.3.} $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_3\\}$ or $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_4\\}$: Then $S'\\cap  N_{12}^-\\neq \\emptyset$. For the same reason, we\ninclude $\\{v_3,x\\}$ to  the solution set for each $x\\in N_{12}^-$ to create $|N_{12}^-|=d-1$ branches, each of which decreases $k$ by 2.\n\n\\textbf{Case 1.4.} $|S'\\cap \\{v_1,v_2,v_3,v_4\\}|\\geq 2$: Then $S'\\setminus \\{v_1,v_2,v_3,v_4\\}\\cup \\{v_1,v_3\\}$ is a $d$-degree deletion set of size not greater than that of $S'$, since $N[\\{v_1,v_2,v_3,v_4\\}]\\subseteq N[\\{v_1,v_3\\}]$.\nFor this case, we can simply include $\\{v_1,v_3\\}$ to the solution set.\n\nThe branching operation gives a recurrence relation\n\\eqn{4-1-1}{\n\\begin{array}{*{20}{l}}\n{C(k)}& \\le &{{{(d - 1)}^2}\\cdot C(k - 2)}+ (d - 1)\\cdot C(k - 2) + (d - 1)\\cdot C(k - 2) +C(k - 2)\\\\\n{}& = &{d^2\\cdot C(k - 2),}\n\\end{array}}\n\n\n\nthe branching factor of which is $d<d+1$.\n\n\n\\textbf{Case 2.} $\\{v_1,v_2,v_3,v_4\\}$ induces a path of 4 vertices:\nLet $\\{v_0\\}=N(v_1)\\setminus N[v_2]$ and $\\{v_5\\}=N(v_4)\\setminus N[v_3]$, where it is possible that $v_0=v_5$.\nWe observe the following different cases.\n\n\n\\textbf{Case 2.1.} $S'$ does not contain any vertex in $N_{12}^- \\cup N_{34}^-$:\nThen $S'$ contains at least one vertex in $\\{v_0,v_1,v_2\\}$ and at least one vertex in $\\{v_3,v_4,v_5\\}$,\nsince $S'$ must contain at least one vertex in $N[v_1]$ and at least one vertex in $N[v_4]$.\nIf $|S'\\cap \\{v_1,v_2,v_3,v_4\\}|\\geq 2$, then $S''=S'\\setminus \\{v_1,v_2,v_3,v_4\\} \\cup\\{v_1,v_4\\}$ is still a $d$-degree deletion set with $|S''|\\leq |S'|$, since\n$N[\\{v_1,v_2,v_3,v_4\\}]\\subseteq N[\\{v_1,v_4\\}]$. Otherwise, it holds either $S'\\cap \\{v_0,v_1,v_2\\}=\\{v_0\\}$ or\n $S'\\cap \\{v_3,v_4,v_5\\}=\\{v_5\\}$.\nIf $S'\\cap \\{v_0,v_1,v_2\\}=\\{v_0\\}$, then $v_3\\in S'$ since $S'$ must contain at least one vertex in $N[v_2]$.\nIf $S'\\cap \\{v_3,v_4,v_5\\}=\\{v_5\\}$, then $v_2\\in S'$ since $S'$ must contain at least one vertex in $N[v_3]$.\nSo for this case, we conclude that there is a solution contains\none of $\\{v_1,v_4\\}$, $\\{v_0,v_3\\}$ and $\\{v_2,v_5\\}$.\nIn our algorithm, we generate three branches by including each of $\\{v_1,v_4\\}$, $\\{v_0,v_3\\}$ and  $\\{v_2,v_5\\}$ to the solution set. In each of the three branches, the parameter $k$ decreases by $2$.\n\n\\textbf{Case 2.2.} $S'$ does not contain any vertex in $N_{12}^-$ but contain some vertex in $N_{34}^-$:\nSince $S'\\cap N[v_1]\\neq \\emptyset$, we know that $S'$ contains at least one vertex in $\\{v_0,v_1,v_2\\}$.\nIf $v_2\\in S'$, then $S''=S'\\setminus \\{v_2\\} \\cup\\{v_1\\}$ is still a $d$-degree deletion set. The reason relies on that\n$N[v_2]\\setminus N[v_1]=\\{v_3\\}$, $v_3$ is adjacent to each vertex in $N_{34}^-$, and $S''$\ncontains at least one vertex in $N_{34}^-$. So for this case, there is a solution contains one vertex in $\\{v_0,v_1\\}$.\nIn our algorithm, we create $2|N_{34}^-|=2(d-1)$ branches by including to the solution each pair of vertices $x$ and $y$ such that $x\\in\\{v_0,v_1\\}$ and\n$y\\in N_{34}^-$. In each of the $2(d-1)$ branches, the parameter $k$ decreases by $2$.\n\n\\textbf{Case 2.3.} $S'$ does not contain any vertex in $N_{34}^-$ but contain some vertex in $N_{12}^-$:\nFor the same reason in Case~2, there is a  solution contains one vertex in $\\{v_4,v_5\\}$.\nIn our algorithm, we create $2|N_{12}^-|=2(d-1)$ branches by including to the solution each pair of vertices $x$ and $y$ such that $x\\in\\{v_4,v_5\\}$ and\n$y\\in N_{12}^-$. In each of the $2(d-1)$ branches, the parameter $k$ decreases by $2$.\n\n\\textbf{Case 2.4.} $S'$ contains some vertex in $N_{12}^-$ and some vertex in $N_{34}^-$: For this case,\nOur algorithm simply generates $|N_{12}^-||N_{34}^-|=(d-1)^2$ branches by including to the solution each pair of vertices $x$ and $y$ such that $x\\in N_{12}^-$ and\n$y\\in N_{34}^-$. In each of the $(d-1)^2$ branches, the parameter $k$ decreases by $2$.\n\nThe above branching operation gives a recurrence relation\n\n", "itemtype": "equation", "pos": 22792, "prevtext": "\nthe branching factor of which is\n", "index": 15, "text": "\n\\[\\frac{1}{2}\\left( {d-1 + \\sqrt {{d^2} - 4d + 13} } \\right).\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex8.m1\" class=\"ltx_Math\" alttext=\"\\frac{1}{2}\\left({d-1+\\sqrt{{d^{2}}-4d+13}}\\right).\" display=\"block\"><mrow><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>\u2062</mo><mrow><mo>(</mo><mrow><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo>+</mo><msqrt><mrow><mrow><msup><mi>d</mi><mn>2</mn></msup><mo>-</mo><mrow><mn>4</mn><mo>\u2062</mo><mi>d</mi></mrow></mrow><mo>+</mo><mn>13</mn></mrow></msqrt></mrow><mo>)</mo></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.00163.tex", "nexttext": "\nthe branching factor of which is $\\sqrt {d(d+2)}< d+1$.\n\n\n\n\\medskip\n\\noindent \\textbf{Step~6} (\\textbf{Type-II close quadruples of degree-($d+1$) vertices})\n\n\nTwo nonadjacent degree-($d+1$) vertices are \\emph{similar} if they have the same neighbor set.\nA set of four degree-($d+1$) vertices $\\{v_1,v_2,v_3,v_4\\}$ is called a \\emph{type-II close quadruple}\n\n\n\nif $\\{v_1,v_3\\}$ and $\\{v_2,v_4\\}$ are two similar pairs and there is an edge between $v_i$ and $v_{i+1}$ for $i=1,2,3$.\nNote that there must be an edge between $v_1$ and $v_4$ since $\\{v_1,v_3\\}$ is a similar pair.\nSo as a type-II close quadruple, $\\{v_1,v_2,v_3,v_4\\}$ always induces a cycle of 4 vertices.\n\n\nLet $\\{v_1,v_2,v_3,v_4\\}$ be a  type-II close quadruple. We use $N_{13}^-$ to denote $N(v_1)\\setminus\\{v_2,v_4\\}$ and\n$N_{24}^-$ to denote $N(v_2)\\setminus\\{v_1,v_3\\}$.\nNote that it holds $N_{13}^-\\cap N_{24}^-=\\emptyset$, if we assume that there is no good pairs or close triples.\nLet $S'$ be a  $d$-degree deletion set.\n\n\n\n\nWe consider the following different subcases.\n\n\\textbf{Case 1.}  $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\emptyset$: Then $S'\\cap N_{13}^-\\neq \\emptyset$ and $S'\\cap N_{24}^-\\neq \\emptyset$.\nFor this case, we included each pair of vertices in $N_{13}^-$ and $N_{24}^-$ to the solution set to create $|N_{13}^-||N_{24}^-|=(d-1)^2$ branches, each of which decreases $k$ by 2.\n\n\\textbf{Case 2.} $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_1\\}$ or $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_3\\}$: Then $S'\\cap  N_{13}^-\\neq \\emptyset$,\notherwise $S'$ would not be a $d$-degree deletion set since no vertex in $N[v_3]$ or $N[v_1]$  is in $S'$.\nFurthermore, if $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_3\\}$, then $S'\\setminus \\{v_3\\}\\cup\\{v_1\\}$ is still a $d$-degree deletion set of the same size.\nSo for this case, we include $\\{v_1,x\\}$ to  the solution set for each $x\\in N_{13}^-$ to create $|N_{13}^-|=d-1$ branches, each of which decreases $k$ by 2.\n\n\n\\textbf{Case 3.} $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_2\\}$ or $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_4\\}$: Then $S'\\cap  N_{24}^-\\neq \\emptyset$. For the same reason, we\ninclude $\\{v_2,x\\}$ to  the solution set for each $x\\in N_{24}^-$ to create $|N_{24}^-|=d-1$ branches, each of which decreases $k$ by 2.\n\n\\textbf{Case 4.} $|S'\\cap \\{v_1,v_2,v_3,v_4\\}|\\geq 2$: Then $S'\\setminus \\{v_1,v_2,v_3,v_4\\}\\cup \\{v_1,v_2\\}$ is a $d$-degree deletion set of size not greater than $S'$, since $N[\\{v_1,v_2,v_3,v_4\\}]\\subseteq N[\\{v_1,v_2\\}]$.\nFor this case, we can simply include $\\{v_1,v_2\\}$ to the solution set.\n\nThe branching operation gives a recurrence relation\n", "itemtype": "equation", "pos": 28644, "prevtext": "\nIt is easy to verify that when $d\\geq 2$, the branching factor is less than $d+1$.\n\n\n\n\\medskip\n\\noindent \\textbf{Step~5} (\\textbf{Type-I close quadruples of degree-($d+1$) vertices})\n\nA set of four degree-($d+1$) vertices $\\{v_1,v_2,v_3,v_4\\}$ is called a \\emph{type-I close quadruple} if\n $\\{v_1,v_2,v_3,v_4\\}$ induces a cycle or a path of 4 vertices, and\n $\\{v_1,v_2\\}$ and $\\{v_3,v_4\\}$ are two close pairs.\nLet $N_{12}^-=N(v_1)\\cap N(v_2)$ and $N_{34}^-=N(v_3)\\cap N(v_4)$.\nWhen the graph has no proper dominations, good pairs or close triples, it holds that\n$N_{12}^- \\cap N_{34}^-=\\emptyset$.\n\nLet $S'$ be an arbitrary $d$-degree deletion set.\n Our branching rule for type-I close quadruples is different for the cases whether  $\\{v_1,v_2,v_3,v_4\\}$ induces  a cycle or a path.\n\n\\textbf{Case 1.} $\\{v_1,v_2,v_3,v_4\\}$ induces a cycle of 4 vertices:\nWe consider the following different subcases.\n\n\\textbf{Case 1.1.}  $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\emptyset$: Then $S'\\cap N_{12}^-\\neq \\emptyset$ and $S'\\cap N_{34}^-\\neq \\emptyset$.\nFor this case, we included each pair of vertices in $N_{13}^-$ and $N_{24}^-$ to the solution set to create $|N_{12}^-||N_{34}^-|=(d-1)^2$ branches, each of which decreases $k$ by 2.\n\n\\textbf{Case 1.2.} $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_1\\}$ or $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_2\\}$: Then $S'\\cap  N_{34}^-\\neq \\emptyset$,\notherwise no vertex in $N[v_3]$ or $N[v_4]$  would be in $S'$ and then $S'$ would not be a $d$-degree deletion set.\nFurthermore, if $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_2\\}$, then $S'\\setminus \\{v_2\\}\\cup\\{v_1\\}$ is still a $d$-degree deletion set of the same size, since $N[v_2]\\setminus N[v_1]=\\{v_3\\}$, $v_3$ is adjacent to all vertices in $N_{34}^-$\nand $S'\\cap  N_{34}^-\\neq \\emptyset$.\nSo for this case, we include $\\{v_1,x\\}$ to  the solution set for each $x\\in N_{34}^-$ to create $|N_{34}^-|=d-1$ branches, each of which decreases $k$ by 2.\n\n\n\\textbf{Case 1.3.} $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_3\\}$ or $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_4\\}$: Then $S'\\cap  N_{12}^-\\neq \\emptyset$. For the same reason, we\ninclude $\\{v_3,x\\}$ to  the solution set for each $x\\in N_{12}^-$ to create $|N_{12}^-|=d-1$ branches, each of which decreases $k$ by 2.\n\n\\textbf{Case 1.4.} $|S'\\cap \\{v_1,v_2,v_3,v_4\\}|\\geq 2$: Then $S'\\setminus \\{v_1,v_2,v_3,v_4\\}\\cup \\{v_1,v_3\\}$ is a $d$-degree deletion set of size not greater than that of $S'$, since $N[\\{v_1,v_2,v_3,v_4\\}]\\subseteq N[\\{v_1,v_3\\}]$.\nFor this case, we can simply include $\\{v_1,v_3\\}$ to the solution set.\n\nThe branching operation gives a recurrence relation\n\\eqn{4-1-1}{\n\\begin{array}{*{20}{l}}\n{C(k)}& \\le &{{{(d - 1)}^2}\\cdot C(k - 2)}+ (d - 1)\\cdot C(k - 2) + (d - 1)\\cdot C(k - 2) +C(k - 2)\\\\\n{}& = &{d^2\\cdot C(k - 2),}\n\\end{array}}\n\n\n\nthe branching factor of which is $d<d+1$.\n\n\n\\textbf{Case 2.} $\\{v_1,v_2,v_3,v_4\\}$ induces a path of 4 vertices:\nLet $\\{v_0\\}=N(v_1)\\setminus N[v_2]$ and $\\{v_5\\}=N(v_4)\\setminus N[v_3]$, where it is possible that $v_0=v_5$.\nWe observe the following different cases.\n\n\n\\textbf{Case 2.1.} $S'$ does not contain any vertex in $N_{12}^- \\cup N_{34}^-$:\nThen $S'$ contains at least one vertex in $\\{v_0,v_1,v_2\\}$ and at least one vertex in $\\{v_3,v_4,v_5\\}$,\nsince $S'$ must contain at least one vertex in $N[v_1]$ and at least one vertex in $N[v_4]$.\nIf $|S'\\cap \\{v_1,v_2,v_3,v_4\\}|\\geq 2$, then $S''=S'\\setminus \\{v_1,v_2,v_3,v_4\\} \\cup\\{v_1,v_4\\}$ is still a $d$-degree deletion set with $|S''|\\leq |S'|$, since\n$N[\\{v_1,v_2,v_3,v_4\\}]\\subseteq N[\\{v_1,v_4\\}]$. Otherwise, it holds either $S'\\cap \\{v_0,v_1,v_2\\}=\\{v_0\\}$ or\n $S'\\cap \\{v_3,v_4,v_5\\}=\\{v_5\\}$.\nIf $S'\\cap \\{v_0,v_1,v_2\\}=\\{v_0\\}$, then $v_3\\in S'$ since $S'$ must contain at least one vertex in $N[v_2]$.\nIf $S'\\cap \\{v_3,v_4,v_5\\}=\\{v_5\\}$, then $v_2\\in S'$ since $S'$ must contain at least one vertex in $N[v_3]$.\nSo for this case, we conclude that there is a solution contains\none of $\\{v_1,v_4\\}$, $\\{v_0,v_3\\}$ and $\\{v_2,v_5\\}$.\nIn our algorithm, we generate three branches by including each of $\\{v_1,v_4\\}$, $\\{v_0,v_3\\}$ and  $\\{v_2,v_5\\}$ to the solution set. In each of the three branches, the parameter $k$ decreases by $2$.\n\n\\textbf{Case 2.2.} $S'$ does not contain any vertex in $N_{12}^-$ but contain some vertex in $N_{34}^-$:\nSince $S'\\cap N[v_1]\\neq \\emptyset$, we know that $S'$ contains at least one vertex in $\\{v_0,v_1,v_2\\}$.\nIf $v_2\\in S'$, then $S''=S'\\setminus \\{v_2\\} \\cup\\{v_1\\}$ is still a $d$-degree deletion set. The reason relies on that\n$N[v_2]\\setminus N[v_1]=\\{v_3\\}$, $v_3$ is adjacent to each vertex in $N_{34}^-$, and $S''$\ncontains at least one vertex in $N_{34}^-$. So for this case, there is a solution contains one vertex in $\\{v_0,v_1\\}$.\nIn our algorithm, we create $2|N_{34}^-|=2(d-1)$ branches by including to the solution each pair of vertices $x$ and $y$ such that $x\\in\\{v_0,v_1\\}$ and\n$y\\in N_{34}^-$. In each of the $2(d-1)$ branches, the parameter $k$ decreases by $2$.\n\n\\textbf{Case 2.3.} $S'$ does not contain any vertex in $N_{34}^-$ but contain some vertex in $N_{12}^-$:\nFor the same reason in Case~2, there is a  solution contains one vertex in $\\{v_4,v_5\\}$.\nIn our algorithm, we create $2|N_{12}^-|=2(d-1)$ branches by including to the solution each pair of vertices $x$ and $y$ such that $x\\in\\{v_4,v_5\\}$ and\n$y\\in N_{12}^-$. In each of the $2(d-1)$ branches, the parameter $k$ decreases by $2$.\n\n\\textbf{Case 2.4.} $S'$ contains some vertex in $N_{12}^-$ and some vertex in $N_{34}^-$: For this case,\nOur algorithm simply generates $|N_{12}^-||N_{34}^-|=(d-1)^2$ branches by including to the solution each pair of vertices $x$ and $y$ such that $x\\in N_{12}^-$ and\n$y\\in N_{34}^-$. In each of the $(d-1)^2$ branches, the parameter $k$ decreases by $2$.\n\nThe above branching operation gives a recurrence relation\n\n", "index": 17, "text": "\n\\[\\begin{array}{*{20}{l}}\n{C(k)}& \\le &{3C(k - 2) + 2(d - 1)\\cdot C(k - 2) + 2(d - 1)\\cdot C(k - 2) + {{(d - 1)}^2}\\cdot C(k - 2)}\\\\\n{}& = &{d(d + 2)\\cdot C(k - 2),}\n\\end{array}\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex9.m1\" class=\"ltx_Math\" alttext=\"\\begin{array}[]{*{20}{l}}{C(k)}&amp;\\leq&amp;{3C(k-2)+2(d-1)\\cdot C(k-2)+2(d-1)\\cdot C%&#10;(k-2)+{{(d-1)}^{2}}\\cdot C(k-2)}\\\\&#10;&amp;=&amp;{d(d+2)\\cdot C(k-2),}\\end{array}\" display=\"block\"><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mtd><mtd columnalign=\"left\"><mo>\u2264</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mn>3</mn><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mrow><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mrow><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mrow><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mo>=</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr></mtable></math>", "type": "latex"}, {"file": "1601.00163.tex", "nexttext": "\n\n\n\nthe branching factor of which is $d<d+1$.\n\n\n\\medskip\n\\noindent \\textbf{Step~7} (\\textbf{Proper triples of degree-($d+1$) vertices})\n\nA set of three degree-($d+1$) vertices $\\{v_1,v_2,v_3\\}$ is called a \\emph{proper triple} if\n$\\{v_1,v_2,v_3\\}$ induces a path and no pair of vertices in $\\{v_1,v_2,v_3\\}$ is close or similar.\n\n\\lem{triple}{Let $G$ be a graph of maximum degree $d+1$ for any integer $d>0$. If $G$ has no proper dominations, good pairs, close triples, type-I close quadruples or type-II close quadruples,\nthen $G$ has some proper triples.\n}\n\\pf{\nFirst of all, we show that the graph $G$ has two adjacent degree-$(d+1)$ vertices which are not a close pair.\nBy \\refl{domi3}, we know that each degree-$(d+1)$ vertex $v$ has at least two degree-$(d+1)$ neighbors $v'$ and $v''$. At least one of  $\\{v,v'\\}$ and $\\{v,v''\\}$\nis not a close pair otherwise  $\\{v,v',v''\\}$ would form a close triple.\n\nWe $v_2$ and $v_3$ be two adjacent degree-($d+1$) vertices which are not a close pair..\n By \\refl{domi3} again, we know that that $v_2$ is adjacent to a degree-($d+1$) vertex $v_1\\not\\in N[v_3]$ and\n$v_3$ is adjacent to a degree-($d+1$) vertex $v_4\\not\\in N[v_2]$.\n\n\nWe can see that either $\\{v_1,v_2,v_3\\}$ or $\\{v_2,v_3,v_4\\}$ is a good triple:\n\nCase 1. At least one of $\\{v_1,v_3\\}$ and $\\{v_2,v_4\\}$ is a similar pair: Then $\\{v_1,v_2,v_3, v_4\\}$ must induce\na cycle. For this case, if $\\{v_1,v_2\\}$ or $\\{v_3,v_4\\}$ is still a close pair, then there would be\na close triple; if both of $\\{v_1,v_3\\}$ and $\\{v_2,v_4\\}$ are similar pairs, then there would be a type-II close\nquadruple. So there is exact one of  $\\{v_1,v_3\\}$ and $\\{v_2,v_4\\}$ is a similar pair and no close pair, and then one of $\\{v_1,v_2,v_3\\}$ or $\\{v_2,v_3,v_4\\}$ is a good triple.\n\nCase 2. There is no similar pair in $\\{v_1,v_2,v_3, v_4\\}$. If both of $\\{v_1,v_2\\}$ and $\\{v_3,v_4\\}$ are close pairs,\nthen there would be a type-I close quadruple. So at most one of $\\{v_1,v_2\\}$ and $\\{v_3,v_4\\}$ is a close pair, and then one of $\\{v_1,v_2,v_3\\}$ or $\\{v_2,v_3,v_4\\}$ is a proper triple.\n}\n\n\\medskip\n\nFor a proper triple $\\{v_1,v_2,v_3\\}$  in a graph having none of dominated vertices, good pairs, close triples, type-I  close quadruples and type-II close quadruples, we have the following properties:\n$N(v_1)\\cap N(v_2)=\\emptyset$, $N(v_2)\\cap N(v_3)=\\emptyset$ and $1\\leq |N(v_1)\\cap N(v_3)|\\leq d$.\n\nLet $N_{13}^-=N(v_1)\\cap N(v_3)\\setminus \\{v_2\\}$, $N_1^-=N(v_1)\\setminus N(v_3)$, $N_3^-=N(v_3)\\setminus N(v_1)$, $N_2^-=N(v_2)\\setminus\\{v_1,v_3\\}$ and $x=|N_{13}^-|$.\nSince $\\{v_1,v_3\\}$ is not a similar pair, we know that $0\\leq x \\leq d-1$.\nLet $S'$ be a $d$-deletion set. To design our branching rule, we consider the following different cases.\n\n\\textbf{Case 1.} $v_2\\in S'$: We simply include $v_2$ to the solution set and the parameter $k$ decreases by 1. For all the remaining cases, we assume that $v_2\\not\\in S'$.\n\n\\textbf{Case 2.} $v_2\\not\\in S'$ and $v_1,v_3\\in S'$:  We simply include $v_1$ and $v_3$ to the solution set and the parameter $k$ decreases by 2.\n\n\\textbf{Case 3.} $v_1, v_2\\not\\in S'$ and $v_3\\in S'$: For the case, $S'\\cap (N(v_1)\\setminus \\{v_2\\}\\neq \\emptyset$. We create  $|N(v_1)\\setminus \\{v_2\\}|=d$ branches by include $v_3$ and each vertex\nin $N(v_1)\\setminus \\{v_2\\}$ to the solution set and the parameter $k$ in each branch decreases by 2.\n\n\\textbf{Case 4.} $v_2, v_3\\not\\in S'$ and $v_1\\in S'$: For the case, $S'\\cap (N(v_3)\\setminus \\{v_2\\}\\neq \\emptyset$. We create  $|N(v_3)\\setminus \\{v_2\\}|=d$ branches by include $v_1$ and each vertex\nin $N(v_3)\\setminus \\{v_2\\}$ to the solution set and the parameter $k$ in each branch decreases by 2.\n\n\\textbf{Case 5.} $v_1,v_2, v_3\\not\\in S'$: Then $S'$ must contains (i) a vertex in  $N_2^-$ and (ii)\neither a vertex in $N_{13}^-$ or two vertices from $N_1^-$ and $N_3^-$ respectively.\nOur algorithm generates $|N_2^-||N_{13}^-|+|N_2^-|||N_1^-||N_3^-|=(d-1)x+(d-1)(d-x)^2$ branches.\n\nEach of the first $(d-1)x$ branches includes a vertex in  $N_2^-$ and a vertex in $N_{13}^-$ to the solution set and the parameter $k$ decreases by 2.\nThe last  $(d-1)(d-x)^2$ branches are generated by including each triple $\\{w_1\\in N_2^-,w_2 \\in N_1^-,w_3\\in N_3^-\\}$ to the solution set, where the parameter $k$ decreases by 3.\n\nThe above branching operation gives a recurrence relation\n\\eqn{wer}{\n\\begin{array}{*{20}{l}}\n{C(k)}& \\le &{C(k - 1) + C(k-2)+d\\cdot C(k - 2) + d\\cdot C(k - 2) +} \\\\\n{}&  & (d - 1)x\\cdot C(k - 2) + (d - 1)(d-x)^2\\cdot C(k - 3)\\\\\n{}& = &{ C(k-1)+  ((2d+1)+(d - 1)x)\\cdot C(k - 2) + (d - 1)(d-x)^2\\cdot C(k - 3),}\n\\end{array}}\n\nwhere $0\\leq x \\leq d-1$.\n\n\n\\lem{factor2}{When $d\\geq 3$, the branching factor of \\refe{wer} is at most $d+1$ for each $0\\leq x \\leq d-1$.\n}\n\\pf{We will prove that\n$C(k)\\leq (d+1)^k$\nby using the  substitution method.\n\nAssume that it holds $C(k')\\leq (d+1)^{k'}$ for all $k'< k$. We show that it also holds for $k'=k$:\n \n", "itemtype": "equation", "pos": 31377, "prevtext": "\nthe branching factor of which is $\\sqrt {d(d+2)}< d+1$.\n\n\n\n\\medskip\n\\noindent \\textbf{Step~6} (\\textbf{Type-II close quadruples of degree-($d+1$) vertices})\n\n\nTwo nonadjacent degree-($d+1$) vertices are \\emph{similar} if they have the same neighbor set.\nA set of four degree-($d+1$) vertices $\\{v_1,v_2,v_3,v_4\\}$ is called a \\emph{type-II close quadruple}\n\n\n\nif $\\{v_1,v_3\\}$ and $\\{v_2,v_4\\}$ are two similar pairs and there is an edge between $v_i$ and $v_{i+1}$ for $i=1,2,3$.\nNote that there must be an edge between $v_1$ and $v_4$ since $\\{v_1,v_3\\}$ is a similar pair.\nSo as a type-II close quadruple, $\\{v_1,v_2,v_3,v_4\\}$ always induces a cycle of 4 vertices.\n\n\nLet $\\{v_1,v_2,v_3,v_4\\}$ be a  type-II close quadruple. We use $N_{13}^-$ to denote $N(v_1)\\setminus\\{v_2,v_4\\}$ and\n$N_{24}^-$ to denote $N(v_2)\\setminus\\{v_1,v_3\\}$.\nNote that it holds $N_{13}^-\\cap N_{24}^-=\\emptyset$, if we assume that there is no good pairs or close triples.\nLet $S'$ be a  $d$-degree deletion set.\n\n\n\n\nWe consider the following different subcases.\n\n\\textbf{Case 1.}  $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\emptyset$: Then $S'\\cap N_{13}^-\\neq \\emptyset$ and $S'\\cap N_{24}^-\\neq \\emptyset$.\nFor this case, we included each pair of vertices in $N_{13}^-$ and $N_{24}^-$ to the solution set to create $|N_{13}^-||N_{24}^-|=(d-1)^2$ branches, each of which decreases $k$ by 2.\n\n\\textbf{Case 2.} $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_1\\}$ or $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_3\\}$: Then $S'\\cap  N_{13}^-\\neq \\emptyset$,\notherwise $S'$ would not be a $d$-degree deletion set since no vertex in $N[v_3]$ or $N[v_1]$  is in $S'$.\nFurthermore, if $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_3\\}$, then $S'\\setminus \\{v_3\\}\\cup\\{v_1\\}$ is still a $d$-degree deletion set of the same size.\nSo for this case, we include $\\{v_1,x\\}$ to  the solution set for each $x\\in N_{13}^-$ to create $|N_{13}^-|=d-1$ branches, each of which decreases $k$ by 2.\n\n\n\\textbf{Case 3.} $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_2\\}$ or $S'\\cap \\{v_1,v_2,v_3,v_4\\}=\\{v_4\\}$: Then $S'\\cap  N_{24}^-\\neq \\emptyset$. For the same reason, we\ninclude $\\{v_2,x\\}$ to  the solution set for each $x\\in N_{24}^-$ to create $|N_{24}^-|=d-1$ branches, each of which decreases $k$ by 2.\n\n\\textbf{Case 4.} $|S'\\cap \\{v_1,v_2,v_3,v_4\\}|\\geq 2$: Then $S'\\setminus \\{v_1,v_2,v_3,v_4\\}\\cup \\{v_1,v_2\\}$ is a $d$-degree deletion set of size not greater than $S'$, since $N[\\{v_1,v_2,v_3,v_4\\}]\\subseteq N[\\{v_1,v_2\\}]$.\nFor this case, we can simply include $\\{v_1,v_2\\}$ to the solution set.\n\nThe branching operation gives a recurrence relation\n", "index": 19, "text": "\n\\[\\begin{array}{*{20}{l}}\n{C(k)}& \\le &{{{(d - 1)}^2}\\cdot C(k - 2)}+ (d - 1)\\cdot C(k - 2) + (d - 1)\\cdot C(k - 2) +C(k - 2)\\\\\n{}& = &{d^2\\cdot C(k - 2),}\n\\end{array}\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex10.m1\" class=\"ltx_Math\" alttext=\"\\begin{array}[]{*{20}{l}}{C(k)}&amp;\\leq&amp;{{{(d-1)}^{2}}\\cdot C(k-2)}+(d-1)\\cdot C(%&#10;k-2)+(d-1)\\cdot C(k-2)+C(k-2)\\\\&#10;&amp;=&amp;{d^{2}\\cdot C(k-2),}\\end{array}\" display=\"block\"><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mtd><mtd columnalign=\"left\"><mo>\u2264</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mrow><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mo>=</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mrow><msup><mi>d</mi><mn>2</mn></msup><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr></mtable></math>", "type": "latex"}, {"file": "1601.00163.tex", "nexttext": "\nDirected computation shows that for each $d\\geq3$ and $0\\leq x \\leq d-1$, it holds that $(d+1)^2 +  ((2d+1)+(d - 1)x)(d+1) + (d - 1)(d-x)^2\\leq (d+1)^3$.\nThen $C(k)\\leq (d+1)^{k}$.\n}\n\n\\subsection{The results}\n\\refl{triple} guarantees that when the graph has a vertex of degree $\\geq d+1$, one of the above seven steps can be applied.\nWhen $d\\geq 3$, the branching factor in each of the seven steps is at most $d+1$. Thus,\n\\thm{result}{The $d$-bounded-degree vertex deletion problem for each $d\\geq 3$ can be solved in $O^*((d+1)^k)$ time.}\n\nNote that all the seven steps of our algorithm work for $d=2$. In the first six steps, we still can get branching factors at most $d+1$ for $d=2$.\nIn Step~7, when $d=2$ and $x=d-1=1$, \\refe{wer} becomes\n", "itemtype": "equation", "pos": 36483, "prevtext": "\n\n\n\nthe branching factor of which is $d<d+1$.\n\n\n\\medskip\n\\noindent \\textbf{Step~7} (\\textbf{Proper triples of degree-($d+1$) vertices})\n\nA set of three degree-($d+1$) vertices $\\{v_1,v_2,v_3\\}$ is called a \\emph{proper triple} if\n$\\{v_1,v_2,v_3\\}$ induces a path and no pair of vertices in $\\{v_1,v_2,v_3\\}$ is close or similar.\n\n\\lem{triple}{Let $G$ be a graph of maximum degree $d+1$ for any integer $d>0$. If $G$ has no proper dominations, good pairs, close triples, type-I close quadruples or type-II close quadruples,\nthen $G$ has some proper triples.\n}\n\\pf{\nFirst of all, we show that the graph $G$ has two adjacent degree-$(d+1)$ vertices which are not a close pair.\nBy \\refl{domi3}, we know that each degree-$(d+1)$ vertex $v$ has at least two degree-$(d+1)$ neighbors $v'$ and $v''$. At least one of  $\\{v,v'\\}$ and $\\{v,v''\\}$\nis not a close pair otherwise  $\\{v,v',v''\\}$ would form a close triple.\n\nWe $v_2$ and $v_3$ be two adjacent degree-($d+1$) vertices which are not a close pair..\n By \\refl{domi3} again, we know that that $v_2$ is adjacent to a degree-($d+1$) vertex $v_1\\not\\in N[v_3]$ and\n$v_3$ is adjacent to a degree-($d+1$) vertex $v_4\\not\\in N[v_2]$.\n\n\nWe can see that either $\\{v_1,v_2,v_3\\}$ or $\\{v_2,v_3,v_4\\}$ is a good triple:\n\nCase 1. At least one of $\\{v_1,v_3\\}$ and $\\{v_2,v_4\\}$ is a similar pair: Then $\\{v_1,v_2,v_3, v_4\\}$ must induce\na cycle. For this case, if $\\{v_1,v_2\\}$ or $\\{v_3,v_4\\}$ is still a close pair, then there would be\na close triple; if both of $\\{v_1,v_3\\}$ and $\\{v_2,v_4\\}$ are similar pairs, then there would be a type-II close\nquadruple. So there is exact one of  $\\{v_1,v_3\\}$ and $\\{v_2,v_4\\}$ is a similar pair and no close pair, and then one of $\\{v_1,v_2,v_3\\}$ or $\\{v_2,v_3,v_4\\}$ is a good triple.\n\nCase 2. There is no similar pair in $\\{v_1,v_2,v_3, v_4\\}$. If both of $\\{v_1,v_2\\}$ and $\\{v_3,v_4\\}$ are close pairs,\nthen there would be a type-I close quadruple. So at most one of $\\{v_1,v_2\\}$ and $\\{v_3,v_4\\}$ is a close pair, and then one of $\\{v_1,v_2,v_3\\}$ or $\\{v_2,v_3,v_4\\}$ is a proper triple.\n}\n\n\\medskip\n\nFor a proper triple $\\{v_1,v_2,v_3\\}$  in a graph having none of dominated vertices, good pairs, close triples, type-I  close quadruples and type-II close quadruples, we have the following properties:\n$N(v_1)\\cap N(v_2)=\\emptyset$, $N(v_2)\\cap N(v_3)=\\emptyset$ and $1\\leq |N(v_1)\\cap N(v_3)|\\leq d$.\n\nLet $N_{13}^-=N(v_1)\\cap N(v_3)\\setminus \\{v_2\\}$, $N_1^-=N(v_1)\\setminus N(v_3)$, $N_3^-=N(v_3)\\setminus N(v_1)$, $N_2^-=N(v_2)\\setminus\\{v_1,v_3\\}$ and $x=|N_{13}^-|$.\nSince $\\{v_1,v_3\\}$ is not a similar pair, we know that $0\\leq x \\leq d-1$.\nLet $S'$ be a $d$-deletion set. To design our branching rule, we consider the following different cases.\n\n\\textbf{Case 1.} $v_2\\in S'$: We simply include $v_2$ to the solution set and the parameter $k$ decreases by 1. For all the remaining cases, we assume that $v_2\\not\\in S'$.\n\n\\textbf{Case 2.} $v_2\\not\\in S'$ and $v_1,v_3\\in S'$:  We simply include $v_1$ and $v_3$ to the solution set and the parameter $k$ decreases by 2.\n\n\\textbf{Case 3.} $v_1, v_2\\not\\in S'$ and $v_3\\in S'$: For the case, $S'\\cap (N(v_1)\\setminus \\{v_2\\}\\neq \\emptyset$. We create  $|N(v_1)\\setminus \\{v_2\\}|=d$ branches by include $v_3$ and each vertex\nin $N(v_1)\\setminus \\{v_2\\}$ to the solution set and the parameter $k$ in each branch decreases by 2.\n\n\\textbf{Case 4.} $v_2, v_3\\not\\in S'$ and $v_1\\in S'$: For the case, $S'\\cap (N(v_3)\\setminus \\{v_2\\}\\neq \\emptyset$. We create  $|N(v_3)\\setminus \\{v_2\\}|=d$ branches by include $v_1$ and each vertex\nin $N(v_3)\\setminus \\{v_2\\}$ to the solution set and the parameter $k$ in each branch decreases by 2.\n\n\\textbf{Case 5.} $v_1,v_2, v_3\\not\\in S'$: Then $S'$ must contains (i) a vertex in  $N_2^-$ and (ii)\neither a vertex in $N_{13}^-$ or two vertices from $N_1^-$ and $N_3^-$ respectively.\nOur algorithm generates $|N_2^-||N_{13}^-|+|N_2^-|||N_1^-||N_3^-|=(d-1)x+(d-1)(d-x)^2$ branches.\n\nEach of the first $(d-1)x$ branches includes a vertex in  $N_2^-$ and a vertex in $N_{13}^-$ to the solution set and the parameter $k$ decreases by 2.\nThe last  $(d-1)(d-x)^2$ branches are generated by including each triple $\\{w_1\\in N_2^-,w_2 \\in N_1^-,w_3\\in N_3^-\\}$ to the solution set, where the parameter $k$ decreases by 3.\n\nThe above branching operation gives a recurrence relation\n\\eqn{wer}{\n\\begin{array}{*{20}{l}}\n{C(k)}& \\le &{C(k - 1) + C(k-2)+d\\cdot C(k - 2) + d\\cdot C(k - 2) +} \\\\\n{}&  & (d - 1)x\\cdot C(k - 2) + (d - 1)(d-x)^2\\cdot C(k - 3)\\\\\n{}& = &{ C(k-1)+  ((2d+1)+(d - 1)x)\\cdot C(k - 2) + (d - 1)(d-x)^2\\cdot C(k - 3),}\n\\end{array}}\n\nwhere $0\\leq x \\leq d-1$.\n\n\n\\lem{factor2}{When $d\\geq 3$, the branching factor of \\refe{wer} is at most $d+1$ for each $0\\leq x \\leq d-1$.\n}\n\\pf{We will prove that\n$C(k)\\leq (d+1)^k$\nby using the  substitution method.\n\nAssume that it holds $C(k')\\leq (d+1)^{k'}$ for all $k'< k$. We show that it also holds for $k'=k$:\n \n", "index": 21, "text": "\\[\n\\begin{array}{*{20}l}\n   C(k) &\\leq & C(k-1)+  ((2d+1)+(d - 1)x)\\cdot C(k - 2) + (d - 1)(d-x)^2\\cdot C(k - 3)\\\\\n   & \\leq &  (d+1)^{k-1}+  ((2d+1)+(d - 1)x)\\cdot (d+1)^{k-2} + (d - 1)(d-x)^2\\cdot (d+1)^{k-3}   \\\\\n   & =& (d+1)^{k-3} ((d+1)^2 +  ((2d+1)+(d - 1)x)(d+1) + (d - 1)(d-x)^2). \\\\\n\\end{array}\n\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex11.m1\" class=\"ltx_Math\" alttext=\"\\begin{array}[]{*{20}l}C(k)&amp;\\leq&amp;C(k-1)+((2d+1)+(d-1)x)\\cdot C(k-2)+(d-1)(d-x)%&#10;^{2}\\cdot C(k-3)\\\\&#10;&amp;\\leq&amp;(d+1)^{k-1}+((2d+1)+(d-1)x)\\cdot(d+1)^{k-2}+(d-1)(d-x)^{2}\\cdot(d+1)^{k-%&#10;3}\\\\&#10;&amp;=&amp;(d+1)^{k-3}((d+1)^{2}+((2d+1)+(d-1)x)(d+1)+(d-1)(d-x)^{2}).\\\\&#10;\\end{array}\" display=\"block\"><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mtd><mtd columnalign=\"left\"><mo>\u2264</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>2</mn><mo>\u2062</mo><mi>d</mi></mrow><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>+</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mi>x</mi></mrow></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mi>x</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup></mrow><mo>\u22c5</mo><mi>C</mi></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>3</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mo>\u2264</mo></mtd><mtd columnalign=\"left\"><mrow><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow></msup><mo>+</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>2</mn><mo>\u2062</mo><mi>d</mi></mrow><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>+</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mi>x</mi></mrow></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u22c5</mo><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow></msup></mrow><mo>+</mo><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mi>x</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup></mrow><mo>\u22c5</mo><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mrow><mi>k</mi><mo>-</mo><mn>3</mn></mrow></msup></mrow></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mo>=</mo></mtd><mtd columnalign=\"left\"><mrow><mrow><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mrow><mi>k</mi><mo>-</mo><mn>3</mn></mrow></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup><mo>+</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>2</mn><mo>\u2062</mo><mi>d</mi></mrow><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>+</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mi>x</mi></mrow></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>-</mo><mi>x</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></msup></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>.</mo></mrow></mtd><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/><mtd/></mtr></mtable></math>", "type": "latex"}, {"file": "1601.00163.tex", "nexttext": "\nwhich has a branching factor of 3.0645. This is the biggest branching factor in the algorithm. Then\n\\thm{result}{The  co-path/cycle problem can be solved in $O^*(3.0645^k)$ time.}\nNote that previously the co-path/cycle problem could only be solved deterministically in $O^*(3.24^k)$ time~\\cite{CF:copath}.\n\n\\section{Concluding remarks}\nIn this paper, by studying the structural properties of graphs, we show that the $d$-bounded-degree vertex deletion problem\ncan be solved in $O^*((d+1)^k)$ time for each $d\\geq 3$. Our algorithm is the first nontrivial parameterized algorithm for\nthe $d$-bounded-degree vertex deletion problem with $d\\geq 3$.\n\nOur problem is a special case of the $(d+2)$-hitting set problem. It is still left as an open problem that whether the  $d'$-hitting set problem\ncan be solved in $O^*((d'-1)^k)$ time. Our result is a step toward to this interesting open problem. However, our method can not be extended to the $d'$-hitting set problem directly, since\nsome good graph structural properties do not hold in the general $d'$-hitting set problem.\n\n\n\\begin{thebibliography}{99}\n\n\\bibitem{BBH:plex}\nB. Balasundaram, S. Butenko, I.V. Hicks:\nClique relaxations in social\nnetwork analysis: The maximum k-plex problem.\nOperations Research\n59(1) (2011) 133--142.\n\n\n\\bibitem{BBNU:treewidth}\nN. Betzler, R. Bredereck, R. Niedermeier, J. Uhlmann:\nOn bounded-degree vertex deletion parameterized by treewidth,\nDiscrete Applied Mathematics\n160(1-2) (2012) 53--60.\n\n\\bibitem{CKX:VC}\nJ. Chen, I.A. Kanj, G. Xia:\nImproved upper bounds for vertex cover,\nTheoretical Computer Science 411 (2010) 3736--3756.\n\n\\bibitem{CF:copath}\nZ.-Z. Chen, M. Fellows, B. Fu, H. Jiang, Y. Liu, L. Wang, B. Zhu:\nA linear kernel for co-path/cycle packing,\nin: Proceedings of the 6th International Conference on Algorithmic Aspects in Information and Management (AAIM \u00a1\u00af10), LNCS 6124, Springer, (2010) 90--102.\n\n\n\\bibitem{FG:gNT}\nM. R. Fellows, J. Guo, H. Moser, and R. Niedermeier:\nA generalization of Nemhauser and Trotter's local optimization theorem.\nJournal of Computer and System Sciences 77(2011) 1141--1158.\n\n\\bibitem{feng:co-path}\nQ. Feng, J. Wang, S. Li, J. Chen:\nRandomized parameterized algorithms for $P_2$-Packing and Co-Path Packing problems. J. Comb. Optim. 29(1) (2015) 125--140.\n\n\\bibitem{fernau:3HS}\nH. Fernau:\nA top-down approach to search-trees: Improved algorithmics for 3-Hitting Set,\nAlgorithmica 57 (2010) 97--118.\n\n\\bibitem{fernau:WHS}\nH. Fernau:\nParameterized algorithms for d-HITTING SET: The weighted case,\nTheor. Comput. Sci. 411(16--18) (2010) 1698--1713.\n\n\\bibitem{fernau:HS}\nH. Fernau:\nParameterized algorithmics for d-Hitting Set,\nInternational Journal of Computer Mathematics 87(14) (2010) 3157--3174.\n\n\\bibitem{Fomin:book}\nFomin, F. V.  and Kratsch, D.:\nExact Exponential Algorithms, Springer (2010)\n\n\n\\bibitem{NR:3HS}\nR. Niedermeier and P. Rossmanith:\nAn efficient fixed-parameter algorithm for 3-Hitting Set,\nJ. Discrete Algorithms 1 (2003) 89--102.\n\n\n\\bibitem{SF:plex}\nS. B. Seidman and B. L. Foster:\nA graph-theoretic generalization of the clique concept.\nJournal of Mathematical Sociology\n6 (1978) 139--154.\n\n\\bibitem{tu:p3vc}\nJ. Tu: A fixed-parameter algorithm for the vertex cover P3 problem,\nInformation Processing Letters 115 (2015) 96--99.\n\n\\bibitem{wu:p3}\nB. Wu: A Measure and Conquer Approach for the Parameterized Bounded Degree-One Vertex Deletion,\nIn: COCOON 2015, LNCS 9198, (2015) 469--480.\n\n\\bibitem{X:gNT}\nM. Xiao:\nOn a generalization of Nemhauser and Trotter's local optimization theorem.\nIn: ISAAC 2015, LNCS 9472, (2015) 442--452.\n\n\n\\end{thebibliography}\n\n\n\n\n", "itemtype": "equation", "pos": 37534, "prevtext": "\nDirected computation shows that for each $d\\geq3$ and $0\\leq x \\leq d-1$, it holds that $(d+1)^2 +  ((2d+1)+(d - 1)x)(d+1) + (d - 1)(d-x)^2\\leq (d+1)^3$.\nThen $C(k)\\leq (d+1)^{k}$.\n}\n\n\\subsection{The results}\n\\refl{triple} guarantees that when the graph has a vertex of degree $\\geq d+1$, one of the above seven steps can be applied.\nWhen $d\\geq 3$, the branching factor in each of the seven steps is at most $d+1$. Thus,\n\\thm{result}{The $d$-bounded-degree vertex deletion problem for each $d\\geq 3$ can be solved in $O^*((d+1)^k)$ time.}\n\nNote that all the seven steps of our algorithm work for $d=2$. In the first six steps, we still can get branching factors at most $d+1$ for $d=2$.\nIn Step~7, when $d=2$ and $x=d-1=1$, \\refe{wer} becomes\n", "index": 23, "text": "\n\\[ C(k)\\leq C(k-1)+6C(k-2)+C(k-3),\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex12.m1\" class=\"ltx_Math\" alttext=\"C(k)\\leq C(k-1)+6C(k-2)+C(k-3),\" display=\"block\"><mrow><mrow><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mn>6</mn><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mi>C</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>-</mo><mn>3</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}]