[{"file": "1601.07798.tex", "nexttext": "\nfor our desired stretch factor $t$.\nFor any three\ndistinct points $p,q,r \\in {\\ensuremath {\\mathbb {{R}}}}^2$ such that\n$|rq| \\leq |pq|$ and $\\alpha = \\angle pqr$\nis between $0$ and $8\\pi /k$, we have\n $|pr| \\leq |pq| - |rq|/t$.\n\\end{lemma}\n\\begin{proof}\nBy the law of cosines and since $0\\le \\alpha \\le 8k/\\pi$ we have that\n\n", "itemtype": "equation", "pos": 27998, "prevtext": "\n\\maketitle\n\n\\begin{abstract}\nLet $P \\subset {\\ensuremath {\\mathbb {{R}}}}^2$ be a planar $n$-point set\nsuch that each point $p \\in P$ has an\n\\emph{associated radius} $r_p > 0$.\nThe \\emph{transmission graph} $G$ for $P$ is the\ndirected graph with vertex set\n$P$ such that for any $p, q \\in P$, there is\nan edge from $p$ to $q$ if and only if\n$d(p, q) \\leq r_p$.\n\nLet $t > 1$ be a constant. A \\emph{$t$-spanner} for $G$ is\na subgraph $H \\subseteq G$ with vertex set $P$ so that\nfor any two vertices $p,q \\in P$, we have\n$d_H(p, q) \\leq t d_G(p, q)$, where $d_H$ and\n$d_G$ denote the shortest path distance in $H$\nand $G$, respectively (with Euclidean edge lengths).\nWe show how to compute\na $t$-spanner for $G$ with $O(n)$ edges in\n$O(n (\\log n + \\log \\Psi))$ time, where $\\Psi$\nis the ratio of the largest and smallest radius of a point in $P$.\nUsing more advanced data structures, we obtain a\nconstruction that runs in $O(n \\log^6 n)$ time, independent\nof $\\Psi$.\n\nWe  give two applications for our spanners.\nFirst, we  show how to use our spanner\n to find a BFS\ntree from any given start vertex\nin $O(n \\log n)$ time (in addition to the time it takes to build\nthe spanner). Second, we\nshow how to use our spanner to extend a reachability oracle to\nanswer geometric reachability queries.\nIn a \\emph{geometric reachability query} we ask whether a\nvertex $p$ in $G$ can ``reach''\na target $q$ which is an arbitrary point the plane (rather\nthan restricted to be another vertex $q$ of $G$ in a\nstandard reachability query).\n Our spanner allows the reachability oracle  to\nanswer geometric reachability queries with an additive overhead\nof $O(\\log n\\log \\Psi)$ to\nthe query time and $O(n \\log \\Psi)$ to the space.\n\\end{abstract}\n\n\\section{Introduction}\nA common model for wireless sensor networks is the \\emph{unit-disk graph}:\neach sensor $p$ is modeled by a unit disk centered at $p$, and there\nis an edge between two sensors if and only if their disks\nintersect~\\cite{Clark90}.\nIntersection graphs of disks with arbitrary radii have also been\nused to model sensors with different\ntransmission strengths~\\cite[Chapter~4]{Boukerche08}.\nIntersection graphs of disks are undirected. However,\nfor some networks we may want a directed model. In such networks, a\nsensor $p$ that can transmit information to a sensor $q$ may not be\nable to  receive information from $q$. This motivated various\nresearchers to consider what  we call here\n\\textit{transmission graphs}\\cite{RickenbachEtAl09,PelegRoditty10}.\nA transmission graph $G$ is defined for\na set of points $P$ where\neach point $p \\in P$ has a (transmission) radius $r_p$ associated\nwith it.\nEach vertex of $G$ corresponds to a point of $P$, and there is\na directed  edge from $p$ to $q$ if and only if $q$ lies in the\ndisk $D(p)$ of radius $r_p$ around $p$.\nWe weight each edge $pq$ of $G$ by the distance between $p$\nand $q$, denoted by $|pq|$.\n\nAs many other kinds of geometric intersection graphs,\na transmission graph\nmay be dense and may contain $\\Theta(n^2)$ edges.\nThus, if one applies a standard graph algorithm, like breadth first search\n(BFS),\nto a dense transmission graph, it\nruns slowly, since it requires an explicit representation of all the edges in\nthe graph.\nFor some applications a sparse approximation of $G$ that\npreserves distances suffices.\nTherefore, given a transmission graph $G$, implicitly\nrepresented by a list of points and their associated radii,\nit is desirable to construct a sparse approximation of $G$ that\npreserves its\nconnectivity and proximity properties. We want to construct\nthis approximation efficiently, without generating an\nexplicit representation of $G$.\n\nFor any $t > 1$, a  subgraph $H$ of $G$ is a \\emph{$t$-spanner} for $G$ if\nthe distance between any pair of vertices $p$ and $q$ in $H$ is at most $t$\ntimes the distance  between  $p$ and $q$ in $G$,\ni.e., $d_H(p,q) \\le t\\cdot d_G(p,q)$ for any pair $p,q$\n(see \\cite{NarasimhanSmid07} for an overview of spanners for geometric graphs).\nF\\\"urer and Kasivisawnathan show how\nto compute a $t$-spanner\nfor unit- and general disk\ngraphs that are variations of the Yao graph \\cite{FuererKasiviswanathan12, Yao82}.\nPeleg and Roditty \\cite{PelegRoditty10} give a construction\nfor $t$-spanners in transmission graphs in any metric space with bounded\ndoubling\ndimension.\nWe continue these studies by giving\nan almost linear time algorithm that constructs a $t$-spanner\nof a transmission graph of a planar set of points\n ($P \\subset {\\ensuremath {\\mathbb {{R}}}}^2$) with respect to the Euclidean metric\n(i.e.\\ $|pq|$ is the Euclidean distance between $p$ and $q$).\n\n\nOur construction is also based on the \\emph{Yao\ngraph}\\cite{Yao82}.\nThe basic Yao graph is a $t$-spanner for the complete\ngraph defined by $n$ points\nin the plane (with Euclidean distances as the weights of the\nedges).\nTo determine the points adjacent to a particular\npoint $q$, we divide the plane by equally spaced rays\nemanating from $q$ and connect $q$ to its closest point in\neach wedge\n(the number of wedges increases as $t$ gets smaller).\nAdapting this construction to transmission graphs poses a severe\ncomputational difficulty, as\nwe want to consider, in each wedge, only the points $p$\nwith $q \\in D(p)$ and to pick the closest point to $q$ only\namong those.\nSince finding the exact closest point turns out to be difficult, we\nneed to relax this requirement in a subtle way,\nwithout hurting the approximation too much.\nThis makes it possible to construct the spanner efficiently.\n\nEven with a good $t$-spanner at hand,\nwe sometimes wish to obtain exact solutions for certain problems on disk graphs.\nWorking in this direction,\nCabello and Jej\\^ci\\^c gave an $O(n\\log n)$\ntime algorithm for\ncomputing a BFS tree in a unit-disk graph, rooted at any given\nvertex~\\cite{CabelloJejcic15}.\nFor this, they exploited the  special\nstructure of the Delaunay triangulation of the disk centers.\nWe show that our spanner admits similar properties for transmission graphs.\nAs a first application of our spanner,\nwe get an efficient algorithm to compute a BFS tree  in a transmission graph rooted at any given vertex.\n\nFor another application, we consider\n \\emph{reachability oracles}. A reachability oracle is a data structure that can answer\n\\emph{reachability queries}: given two\nvertices $s$ and $t$  determine if there is a\ndirected path from $s$ to $t$.\nThe quality of a reachability oracle\nis measured by its query time, its space requirement, and its preprocessing time.\nFor transmission graphs, we can ask for a more general\n\\emph{geometric} reachability query: given a vertex $s$ and \\emph{any} point $q \\in {\\ensuremath {\\mathbb {{R}}}}^2$, determine if\n there is vertex $t$ such that\nthere is a directed path from $s$ to $t$ in $G$, and $q$ lies in the\ndisk of $t$. We show how to extend\nany given reachability oracle to answer geometric queries with a\nsmall \\emph{additive} increase in space and query time.\n\n\\paragraph*{Our Contribution and the Organization of the Paper.}\nIn Section~\\ref{sec:spanners}, we show how to compute, for every fixed\n$t > 1$, a $t$-spanner $H$ of $G$. Our construction is quite\ngeneric and can be adapted to several situations.\nIn the simplest case, if the \\emph{spread} $\\Phi$\n(i.e., the ratio between the largest and the smallest distance in $P$)\nis bounded,\nwe can obtain a $t$-spanner in time $O(n(\\log n + \\log \\Phi))$\n(Section~\\ref{sec:spanner}).\nWith a little more work, we can weaken the assumption to\na bounded \\emph{radius ratio} $\\Psi$ (the ratio between the largest and\nsmallest radius in $P$), giving a running time of $O(n(\\log n + \\log \\Psi))$\n(Section~\\ref{sec:spannerPsi}).\nNote that a bound on $\\Phi$ implies a bound on $\\Psi$: let $d_{\\max}$ be the\nlargest distance and $d_{\\min}$ be the smallest distance between any pair\nof distinct points in $P$. We can set all radii larger than $d_{\\max}$ to\nbe $d_{\\max}$ and all radii smaller than $d_{\\min}$ to $d_{\\min}/2$. This does\nnot change the transmission graph and we have $\\Psi \\leq 2 \\Phi$.\nUsing even more advanced data structures, we can compute\na $t$-spanner in time $O(n \\log^6 n)$,\nwithout any dependence on $\\Phi$ or $\\Psi$ (Section~\\ref{sec:spannerChan}).\n\nIn Section~\\ref{sec:bfstree} we show how to\n adapt a result by Cabello and\nJej\\^ci\\^c~\\cite{CabelloJejcic15} to  compute a BFS-tree in a transmission graph, from any given vertex $p \\in P$,\nin $O(n \\log n)$ time, once we have the spanner ready.\n\nIn Section~\\ref{sec:oracles} we show how to\n use a spanner to extend a reachability oracle to answer\ngeometric reachability queries. Specifically, we show that any reachability oracle\nfor a transmission graph with radius ratio $\\Psi$, that requires $S(n)$ space, and\nanswers a query in\n$Q(n)$ time,  can be\nextended in $O(n \\log n \\log \\Psi)$ time, to an oracle\nthat\ncan answer geometric reachability queries,  requires\n$S(n) + O(n \\log \\Phi)$ space, and answers a query in $Q(n) + O(\\log n \\log \\Phi)$ time.\n\n\\section{Preliminaries and Notation}\n\\label{sec:prelims}\n\\begin{wrapfigure}{R}{0.4\\textwidth}\n\\vspace{-20pt}\n\\begin{center}\n\\includegraphics[scale=0.6]{grid}\n\\end{center}\n\\vspace{-20pt}\n\\caption{The grid (green) and two cells $\\sigma$ and $\\tau$.}\n\\label{fig:grid}\n\\end{wrapfigure}\nWe let $P \\subset {\\ensuremath {\\mathbb {{R}}}}^2$ denote a set of $n$ points in the plane. Each\npoint $p\\in P$ has a\n\\emph{radius} $r_p > 0$ associated with it.\nThe elements in $P$ are called \\emph{sites}.\nThe \\emph{spread} of $P$, $\\Phi$, is defined as\n$\\Phi = \\max_{p,q \\in P} |pq| / \\min_{p \\neq q \\in P} |pq|$, and\nthe \\emph{radius ratio} $\\Psi$ of $P$ is defined as\n$\\Psi = \\max_{p, q \\in P} (r_p / r_q)$. A simple\nvolume argument shows that $\\Phi = \\Omega(n^{1/2})$.\nFurthermore, as stated in the introduction, we can\nalways assume that $\\Psi \\leq 2\\Phi$.\nGiven a point $p \\in {\\ensuremath {\\mathbb {{R}}}}^2$ and a radius $r$, we denote by $D(p, r)$\nthe closed disk with center $p$ and radius $r$. If $p \\in P$, we\nuse $D(p)$ as a shorthand for $D(p, r_p)$. We write\n$C(p, r)$ for the boundary circle of $D(p, r)$.\n\n\nOur constructions make extensive use of planar grids. For $i \\in \\{0, 1,\n\\dots\\}$,\nwe define ${\\operatorname{\\mathcal{Q}}}_i$ to be the \\emph{grid at level $i$}. It consists of\naxis-parallel squares with diameter $2^i$ that partition the\nplane in grid-like fashion (the \\emph{cells}).\nWe write ${\\operatorname{diam}}(\\sigma)$ for the diameter of a grid cell $\\sigma$.\nEach grid ${\\operatorname{\\mathcal{Q}}}_i$ is aligned so that the origin lies at the corner of a cell.\nThe \\emph{distance} $d(\\sigma, \\tau)$ between two grid cells $\\sigma, \\tau$ is\nthe smallest distance between\nany pair of points in $\\sigma \\times \\tau$, see  Figure~\\ref{fig:grid}.\nWe assume that our model of computation allows us to find in constant time\nfor any given point the grid cell containing  it.\n\n\n\\section{Spanners for Directed Transmission Graphs}\n\\label{sec:spanners}\n\\subsection{Efficient Spanner Construction for a Set of Points with Bounded Spread}\n\\label{sec:spanner}\n\nFirst, we give a spanner construction for the transmission\ngraph whose running time\ndepends on the spread.\nLater, in Section~\\ref{sec:spannerPsi}, we will tune this\nconstruction so that the running time depends\non the radius ratio.\n The main result which we prove in this section is as follows.\n\n\n\n\\begin{theorem}\n\\label{thm:2dspannerSpread}\n  Let $G$ be the transmission graph for a set\n   $P$ of $n$ points in the plane\n  with spread $\\Phi$. For any fixed $t > 1$,\n  we can compute\n  a $t$-spanner for $G$ in  $O(n\\log \\Phi)$ time.\n  The construction needs  $O(n \\log \\Phi)$ space.\n\\end{theorem}\n\\begin{wrapfigure}{L}{0.46\\textwidth}\n\\includegraphics[scale=1.2]{yao-edges}\n\\centering\n\\caption{A cone $C_q$ (blue) at a site $q$. Since $q \\notin D(r)$, we pick the\nedge $pq$.}\n\\label{fig:yao-edges}\n\\end{wrapfigure}\nLet $\\rho$ be a ray originating\nfrom the origin and let $0 < \\alpha < 2\\pi$. A \\emph{cone} with \\emph{opening\nangle} $\\alpha$\nand \\emph{middle axis} $\\rho$ is the closed region\ncontaining $\\rho$ and bounded by the two rays obtained by rotating $\\rho$\nclockwise and counterclockwise by $\\alpha/2$.\n\nGiven a cone $C$ and a point $q \\in {\\ensuremath {\\mathbb {{R}}}}^2$, we write $C_q$ for the\ncopy of $C$ obtained by translating the origin to $q$. We call $q$\nthe \\emph{apex} of $C_q$.\nIdeally, our spanner should look as follows. Let ${\\mathcal C}$ be a set\nof $k$ cones with opening angles $2\\pi/k$\nthat partition the plane.\nFor each site $q \\in P$ and each cone $C \\in {\\mathcal C}$,\nwe pick\nthe site $p \\in P \\cap C_q$ with $q \\in D(p)$ that\nis closest to $q$ (see Figure~\\ref{fig:yao-edges}). We add the edge\n$pq$ to $H$. The resulting graph has\n$O(kn)$ edges. Using standard techniques, one can show that\n$H$ is a $t$-spanner, if $k$ is large\nenough as a function of $t$. This construction has been reported before and\nseems to be folklore~\\cite{Carmi14,PelegRoditty10}.\n\nUnfortunately, the standard algorithms for computing the Yao graph do not\nseem to adapt easily to our setting without a penalty in their running times~\\cite{ChangEtAl90}.\nThe problem is that for each site $q$ and each cone $C_q$, we need\nto search for a  nearest neighbor of $q$ only among those sites $p \\in C_q$ such that\n$q \\in D(p)$. This seems to be hard to do with\nthe standard approaches.\nThus, we modify the construction to search only for an \\emph{approximate} nearest neighbor of $q$ and argue\nthat picking an approximately shortest edge in each cone suffices to\nobtain a spanner.\n\nWe partition each cone $C_q$\ninto ``intervals''\nobtained by intersecting $C_q$ with annuli around $q$\nwhose inner and outer radii grow exponentially;\nsee Figure~\\ref{fig:discretized-cone}.\nThere can be only $O(\\log \\Phi)$ non-empty intervals.\nWe cover each such interval\nby $O(1)$ grid cells whose diameter is\n``small'' compared to the width of the interval.\nThis gives two useful properties.\n(i) We only need to consider edges from the  interval\nclosest to $q$ that contains sites with outgoing edges to $q$;\nall other edges to $q$ will be longer.\n(ii) If there are multiple edges from the same grid cell, their\nendpoints are close together, and it\nsuffices to consider only one of them.\n\n\\begin{figure}[htbp]\n \\centering\n \\includegraphics[scale=0.5]{discretized-cone}\n \\caption{A cone $C_q$ covered by discretized intervals. We only need\none of the edges $pq$, $rq$ for $H$.}\n \\label{fig:discretized-cone}\n\\end{figure}\n\nTo make this approach more concrete, we define a decomposition of $P$\ninto pairs of subsets of $P$ contained in certain grid cells.\nThese pairs represent a discretized version of the intervals\n(see Definition~\\ref{def:decomposition} below). This is motivated by another\nspanner construction based on the \\emph{well-separated pair decomposition}\n(WSPD).\nLet $c > 1$ be a parameter. A $c$-WSPD for $P$ is\na set of pairs $(A_i,B_i),\\dots, (A_m,B_m)$ such that $A_i,B_i \\subseteq\nP$, and\nfor each pair  $a,b$ of points of $P$ there is a single index $j$ such\nthat $a\\in A_j$ and $b\\in B_j$ or vice versa. Furthermore, for any\n$1 \\leq\ni \\leq m$\n we have that $c\\max\\{{\\operatorname{diam}}(A_i),{\\operatorname{diam}}(B_i)\\} \\leq d(A_i,B_i)$. Here ${\\operatorname{diam}}(A_i)$ is the diameter of $A_i$ and\n$d(A_i,B_i)$ is the\nminimum distance between any pair $a,b$ with $a \\in A_i$ and $b \\in B_i$.\nCallahan and Kosaraju show that there always exists a WSPD with $m=O(n)$ pairs\nwhich can be computed efficiently~\\cite{CallahanKo95}.\n\nIt is well known~\\cite{NarasimhanSmid07} that one can obtain a $t$-spanner\nfor the complete (undirected) Euclidean graph with vertex\nset $P$\nfrom a $c$-WSPD, for a large enough $c=c(t)$, by putting in the spanner an\nedge $ab$ for each pair $(A_i,B_i)$ in the WSPD, where $a$ is an arbitrary point in $A_i$ and\n$b$ is an arbitrary point in $B_i$.\nIt turns out that a similar approach works for transmission graphs. However,\nsince they are directed, we need to find for \\emph{each} site in $B_i$\nan incoming edge from a site in $A_i$, if such an edge exists, and vice versa.\nThis causes two difficulties: we cannot afford to check all possible edges in\n$A_i \\times B_i$, since this would lead to a quadratic running time, and we\ncannot control the indegree of a site $p$ since it may belong to many sets $A_i$ and $B_i$.\nWe address the second problem by taking only $O(1)$ edges into a particular site $q$, within each of the $k$\ncones of the Yao construction described above. For the first problem, we\nidentify in each $A_i$ a special subset  that ``covers'' all edges from a site in\n $A_i$ to a site in $B_i$, such that each\n  site appears\nin a constant number of such subsets.\n\nThe concrete implementation of this idea is captured by\nDefinition~\\ref{def:decomposition}. A pair $(A_i,B_i)$ corresponds to\nsets $P \\cap \\sigma$ and $P \\cap \\tau$ for two grid cell\n$\\sigma,\\tau$ that have the same diameter and that are well separated\n(Property~(i)). For a grid cell $\\tau$, we denote by $m_\\tau$ the site of largest radius in $P \\cap\n\\tau$ and we define a particular subset $R_\\tau\\subseteq P \\cap\n\\tau$ to be the set of sites  \\emph{assigned} to $\\tau$.\n Property~(ii) in Definition~\\ref{def:decomposition} guarantees that each edge $pq$ of $G$ with\n$q \\in \\sigma$ and $p \\in \\tau$\n  is either ``represented'' in\nthe decomposition by an edge originating in $m_\\tau$  or we have that $p\\in R_\\tau$.\nSpecifically, edges\n$pq$ with $q \\in P \\cap \\sigma$ and\n$p \\in P \\cap \\tau$  such that the disk $D(p)$ is\n``large'' relative to $|pq|$ are represented by the edge $m_{\\sigma}q$. This allows us\nto define the sets $R_\\sigma$ such that\neach site appears in $O(1)$ such sets, see Figure~\\ref{fig:decomposition}.\n\\begin{definition}\n\\label{def:decomposition}\nLet $c > 2$ and\nlet $G$ be the transmission graph of a planar point set $P$.\nA $c$\\emph{-separated annulus decomposition} for $G$ consists\nof a finite set  ${\\operatorname{\\mathcal{Q}}} \\subset \\bigcup_{i=0}^\\infty {\\operatorname{\\mathcal{Q}}}_i$ of \\emph{grid cells},\na symmetric \\emph{neighborhood relation} $N \\subseteq {\\operatorname{\\mathcal{Q}}} \\times {\\operatorname{\\mathcal{Q}}}$ between\nthese\ncells,\nand a subset of \\emph{assigned sites} $R_\\sigma \\subseteq P \\cap \\sigma$ for each\ngrid cell $\\sigma \\in {\\operatorname{\\mathcal{Q}}}$.\nA $c$\\emph{-separated annulus decomposition} for $G$ has the following properties:\n\\begin{enumerate}[(i)]\n\\item\nFor every $(\\sigma,\\tau)\\in N$, ${\\operatorname{diam}}(\\sigma) = {\\operatorname{diam}}(\\tau)$,\nand\n$d(\\sigma,\\tau) = \\gamma {\\operatorname{diam}}(\\sigma)$, for some $\\gamma \\in [c-2, 2c)$.\n\\item for every edge $pq$ of $G$, there is a\npair $(\\sigma,\\tau) \\in N$ with $q \\in \\sigma$, $p \\in \\tau$, and\neither $p \\in R_{\\tau}$ or $q \\in D(m_{\\tau})$.\n\\end{enumerate}\n\\end{definition}\nThe following fact is direct consequence of Definition~\\ref{def:decomposition}.\nFor each cell $\\sigma \\in {\\operatorname{\\mathcal{Q}}}$, we define its \\emph{neighborhood} as\n$N(\\sigma) = \\{\\tau \\mid (\\sigma, \\tau) \\in N\\}$.\n\\begin{lemma}\\label{lem:volume}\nFor each cell $\\sigma \\in {\\operatorname{\\mathcal{Q}}}$, we have\n$|N(\\sigma)| = O(c^2)$, and for each cell $\\tau \\in {\\operatorname{\\mathcal{Q}}}$ the number of cells\n$\\sigma \\in {\\operatorname{\\mathcal{Q}}}$ such that $\\tau \\in N(\\sigma)$ is $O(c^2)$.\n\\end{lemma}\n\n\\begin{proof}\nThis follows from Definition~\\ref{def:decomposition}(i) via a\nstandard volume argument.\n\\end{proof}\n\n\\begin{figure}[htb]\n\\centering\n\\begin{subfigure}[b]{0.4\\textwidth}\n\\centering\n\\includegraphics[width=0.7\\textwidth]{annulus-decomposition-1}\n  \\caption{By Property~(i) in Definition~\\ref{def:decomposition}\n $N(\\sigma)$ covers an annulus.}\n\\end{subfigure}\n\\begin{subfigure}[b]{0.53\\textwidth}\n\\centering\n\\includegraphics[width=0.7\\textwidth]{annulus-decomposition-2}\n  \\caption{Since $D(m_\\tau)$ (red) does not contain $q$, we need  to put $p$ in\n$R_\\tau$\nto cover the edge $pq$ (Property~(ii)).}\n\\end{subfigure}\n\\caption{Illustration of Definition~\\ref{def:decomposition}}\n\\label{fig:decomposition}\n\\end{figure}\nGiven this decomposition, we first present a simple (and rather inefficient)\nrule for picking incoming edges such that the resulting graph is a $t$-spanner.\nThen we explain how to compute the decomposition using\na \\emph{quadtree}. Finally, we exploit the quadtree\nto make the spanner construction efficient.\n\n\\paragraph*{Obtaining a Spanner.}\nLet $t > 1$ be the desired stretch.\nWe  pick a suitable separation\nparameter $c$ and a number of cones $k$ that depend on $t$, as specified later.\nLet $({\\operatorname{\\mathcal{Q}}}, N, R_\\sigma)$ be a $c$-separated annulus\ndecomposition for $G$.\nFor a cone $C \\in {\\mathcal C}$ and an integer $\\ell \\in {\\ensuremath {\\mathbb {{N}}}}$,\nwe define $C^\\ell$\nas the cone with the same middle axis as $C$\nbut with an opening angle $\\ell$ times larger than the opening angle of\n$C$.\nFor $\\sigma \\in {\\operatorname{\\mathcal{Q}}}$,\nlet $C_\\sigma$ be the copy of $C$ with\nthe center of $\\sigma$ as the apex.\n\nTo obtain a $t$-spanner $H \\subseteq G$,\nwe pick the incoming edges\nfor each site $q \\in P$ and each cone $C \\in {\\mathcal C}$\nas follows (see Algorithm~\\ref{alg:edgeselection}).\nWe consider the cells of ${\\operatorname{\\mathcal{Q}}}$ containing $q$ in increasing\norder of diameter. Let $\\sigma$ be one such cell containing $q$ that\nwe process. We traverse all neighboring cells $\\tau$ of $\\sigma$,\n that are contained in $C_\\sigma^2$.\nFor each such neighboring cell $\\tau$, we check if there exists a\nsite $r\\in R_\\tau \\cup \\{m_\\tau\\}$ that has an outgoing edge to $q$.\nIf such a site exists, we\nadd to $H$ an edge to $q$ from a single, arbitrary, such site $r$.\nAfter considering \\emph{all} neighbors $\\tau$ of $\\sigma$\nwe terminate the  processing\nof  $q$  and $C$ if we added at least one edge incoming to  $q$.\nIf we have not added any edge into $q$ while processing all neighbors $\\tau$\nof $\\sigma$ we continue\n  to the next largest\ncell containing $q$.  We use here\nthe extended cones $C_\\sigma^2$ (instead of the\ncone $C_q$) to gain certain\nflexibility that will be useful\nfor later extensions of Algorithm~\\ref{alg:edgeselection}.\n\n\n\\begin{algorithm}[htb]\n${\\operatorname{\\mathcal{Q}}}_q \\gets $ cells of ${\\operatorname{\\mathcal{Q}}}$ that contain $q$\\\\\nSort the cells in ${\\operatorname{\\mathcal{Q}}}_q$ in increasing order by diameter\\\\\nMake $q$ \\emph{active}\\\\\n\\While{$q$ \\textnormal{is active}}{\n  $\\sigma \\gets$ next largest cell in ${\\operatorname{\\mathcal{Q}}}_q$\\\\\n  \\ForEach{\\textnormal{cell }$\\tau \\in N(\\sigma)$ \\textnormal{that is\ncontained in} $C_\\sigma^2$}{\n  \\label{line:conetest}\n    \\If{\\textnormal{there is a} $r \\in R_{\\tau} \\cup \\{m_{\\tau} \\}$\n     \\textnormal{with} $q \\in D(r)$} {\n      \\label{line:edgeselection}\n      Take an arbitrary such $r$, add the edge $rq$ to $H$,\n      and set $q$ to \\emph{inactive}\n    }\n  }\n}\n\\caption{Selecting the incoming edges for $q$ and the cone $C$.}\n\\label{alg:edgeselection}\n\\end{algorithm}\n\n\nFor each cone $C \\in {\\mathcal C}$ and each site $q \\in P$ there is only one cell\n$\\sigma \\in {\\operatorname{\\mathcal{Q}}}_q$ that produces incoming edges for $q$.\nWe have $k$ cones and $|N(\\sigma)| = O(c^2)$ by Lemma~\\ref{lem:volume}, so\n$q$ has $O(c^2k)$ incoming edges.\nIt follows that the size of $H$ is $O(n)$ since\n $c$ and $k$ are constants.\n\nNext we show that $H$ is a $t$-spanner. For this,\nwe show that every edge $pq$ of $G$ is represented in $H$ by\nan approximate path.\nWe prove this by induction on the ranks of the\nedge lengths. This is done in a similar manner as for the standard Yao\ngraphs, but with a few twists that require three additional technical\nlemmas.\nLemma~\\ref{lem:centercone} deals with\nthe imprecision introduced by taking\nthe cone $C_\\sigma^2$ instead of $C_q$. It follows from this lemma that\nif $pq$ is contained in the cone $C_q$ then\nAlgorithm~\\ref{alg:edgeselection} picks at least one edge $rq$ with\n$r \\in C_q^4$.\nLemma~\\ref{lem:annulusDiameter} and Lemma~\\ref{lem:lengthofchosenedge}\nencapsulate geometric facts\nthat are used to bound the distance between\nthe endpoints $r$  and $p$ depending on whether $|rq|$ is\nlarger or smaller than $|pq|$.\nLemma~\\ref{lem:lengthofchosenedge} is due to Bose et\nal.~\\cite{BoseEtAl12} and for completeness we include their proof.\n\n\\begin{lemma}\n\\label{lem:centercone}\nLet $c > 3 + \\frac{2}{\\sin (\\pi /k)}$ and\nlet $\\ell \\in \\{1, \\dots, \\lfloor k/2 \\rfloor\\}$.\nConsider a cell $\\sigma \\in {\\operatorname{\\mathcal{Q}}}_i$ and a\ncone $C \\in {\\mathcal C}$.\nFix two points $q,s \\in \\sigma$.\nEvery cell $\\tau \\in {\\operatorname{\\mathcal{Q}}}_i$ with\n$d(\\sigma,\\tau) \\geq (c-2)2^i$ that intersects the cone $C^\\ell_q$ is contained\nin the cone $C_s^{2\\ell}$.\nIn particular, any point $p \\in C_q^\\ell$\nwith $|pq| \\geq (c-2)2^i$ lies in a cell that is fully contained in $C_s^{2\\ell}$.\n\\end{lemma}\n\\begin{proof}\nLet $x$ be a point in $\\tau \\cap C^{\\ell}_q$.\nBy assumption, $|xq| \\geq (c-2)2^i$.\nLet $D = D(x, 2^i)$ be the disk with center $x$ and radius $2^i$.\nThen, $\\tau \\subseteq D$. We  show that $C_s^{2\\ell}$ contains $D$\nand thus $\\tau$.\nSince $\\sigma$ has diameter $2^i$, and  $C_q^\\ell$ contains $x$,\nthe translated copy $C_s^\\ell$ must\n intersect $D$. If $D \\subset C_s^\\ell$, we are done.\nOtherwise, there is a boundary ray $\\rho$ of $C_s^\\ell$ that  intersects the\nboundary of $D$. Let $y$ be the first intersection of $\\rho$ with the boundary of $D$.\nSee Figure~\\ref{fig:cone-imprecision}.\n\nSince $s \\in \\sigma$ and $x \\in \\tau$,\nthe triangle inequality gives that $|ys| \\geq |xs| - |xy| \\geq  (c-3)2^i$.\nLet $\\rho'$ be the boundary ray of $C_s^{2\\ell}$ corresponding to $\\rho$ and let\n$y'$\nbe the orthogonal projection of $y$ onto $\\rho'$. Since\n$|ys| \\geq (c-3)2^i$ and since the angle between $\\rho$ and $\\rho'$ is\n$\\pi \\ell/k$, we get that $|yy'| \\geq (c-3)2^i\\sin( \\pi \\ell/k)$.\nIt follows that $|yy'| \\geq 2\\cdot\n2^i$\nfor $c > 3 + \\frac{2}{\\sin( \\pi \\ell/k)}$.\nThis holds for any  $\\ell \\in \\{1, \\dots, \\lfloor k/2 \\rfloor\\}$ if\n$c \\geq 3 + \\frac{2}{\\sin (\\pi/k)}$.\nThus, $\\tau \\subset D \\subset C_s^{2\\ell}$.\n\\end{proof}\n\\begin{figure}[htbp]\n \\centering\n \\includegraphics[scale=0.6]{cone-imprecision}\n \\caption{The boundary ray $\\rho$ of $C_s^\\ell$ intersects the boundary of $D$ in\n$y$.}\n \\label{fig:cone-imprecision}\n\\end{figure}\n\nLet $p$ be a site in $C_q$ such that $pq$ is an edge of $G$, and\n$p \\in \\tau \\in N(\\sigma)$ where $\\sigma$ is a cell containing $q$.\nThen by Lemma~\\ref{lem:centercone}, $\\tau$ is contained in $C_\\sigma^2$.\nIt follows that Algorithm~\\ref{alg:edgeselection} either finds an edge $rq$ before processing\n$\\sigma$, or finds an edge $rq$ with $r\\in \\tau$ while processing $\\sigma$.\nBy applying Lemma~\\ref{lem:centercone} again we get that $r \\in C_q^4$.\nThis fact is described in greater detail and is being used in the proof of Lemma \\ref{lem:shorteredge} below.\n\n\\begin{lemma}\\label{lem:annulusDiameter}\nLet $C \\in {\\mathcal C}$, and let $q \\in {\\ensuremath {\\mathbb {{R}}}}^2$.\nSuppose there are two points $p,r \\in C_q^4$\nwith $(c-2)2^i \\le |pq| \\le |rq| \\le (c+1)2^i$.\nThen $|pr| \\leq ((8\\pi/k)(c+1)+3)2^i$.\n\\end{lemma}\n\\begin{proof}\nThe points $p$ and $r$ lie in an annulus around $q$ with inner\nradius $(c-2)2^i$ and outer radius $(c + 1)2^i$.\nSince $p,r \\in C_q^4$, when going from $p$ to $r$, we must travel at most\n$(8\\pi/k) (c+1)2^i$ units along the circle around $q$ with\n$p$ on the boundary, then at most $3 \\cdot 2^i$ units\nradially towards $r$. Thus, $|pr| \\leq (8\\pi/k) (c+1)2^i + 3\\cdot 2^i$.\n\\end{proof}\n\n\\begin{figure}[htb]\n\\centering\n\\begin{subfigure}[t]{0.45\\textwidth}\n\\centering\n\\includegraphics[scale=0.7]{annulus-diameter}\n  \\caption{Lemma~\\ref{lem:annulusDiameter}. Two sites in an annulus are close to each other.}\n\\end{subfigure}\n\\begin{subfigure}[t]{0.45\\textwidth}\n\\centering\n\\includegraphics[scale=0.7]{lengthofchosenedge}\n  \\caption{Lemma~\\ref{lem:lengthofchosenedge}. If $\\alpha$ is small\nand $|rq| \\leq |pq|$, then\n$|pr| < |pq|$.}\n\\end{subfigure}\n\\end{figure}\n\n\n\\begin{lemma}[Lemma~10 in \\cite{BoseEtAl12}]\n\\label{lem:lengthofchosenedge}\nLet $k \\geq 25$ be large enough such that\n", "index": 1, "text": "\n\\[\n \\frac{1 + \\sqrt{2 - 2\\cos (8\\pi / k)}}{2\\cos (8\\pi/k) -1}\n  = 1 + \\Theta(1/k) \\leq t\n\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"\\frac{1+\\sqrt{2-2\\cos(8\\pi/k)}}{2\\cos(8\\pi/k)-1}=1+\\Theta(1/k)\\leq t\" display=\"block\"><mrow><mfrac><mrow><mn>1</mn><mo>+</mo><msqrt><mrow><mn>2</mn><mo>-</mo><mrow><mn>2</mn><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow></msqrt></mrow><mrow><mrow><mn>2</mn><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>-</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mrow><mn>1</mn><mo>+</mo><mrow><mi mathvariant=\"normal\">\u0398</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mn>1</mn><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>\u2264</mo><mi>t</mi></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nWe complete the proof by showing that under the assumptions of the lemma\n$\\frac{t^2 - 1}{t^2}|rq|^2 - \\frac{2(t\\cos (8\\pi/k)- 1)}{t}|pq|\\cdot|rq| \\le 0$.\nWe have that\n\n", "itemtype": "equation", "pos": 28416, "prevtext": "\nfor our desired stretch factor $t$.\nFor any three\ndistinct points $p,q,r \\in {\\ensuremath {\\mathbb {{R}}}}^2$ such that\n$|rq| \\leq |pq|$ and $\\alpha = \\angle pqr$\nis between $0$ and $8\\pi /k$, we have\n $|pr| \\leq |pq| - |rq|/t$.\n\\end{lemma}\n\\begin{proof}\nBy the law of cosines and since $0\\le \\alpha \\le 8k/\\pi$ we have that\n\n", "index": 3, "text": "\\begin{align*}\n|pr|^2 &= |pq|^2 + |rq|^2 -2|pq|\\cdot|rq|\\cos \\alpha\n\\leq\n|pq|^2 + |rq|^2 -2|pq|\\cdot|rq|\\cos (8\\pi/k)\n\\intertext{Introducing $t$ by adding and subtracting equal terms,  this is}\n&=\n|pq|^2 - \\frac{2}{t}\\,|pq|\\cdot|rq| + \\frac{1}{t^2}|rq|^2  +\n\\frac{t^2 - 1}{t^2}|rq|^2 - \\frac{2(t\\cos (8\\pi/k)- 1)}{t}|pq|\\cdot|rq| \\\\\n&=\n\\Bigl(|pq| - \\frac{|rq|}{t}\\Bigr)^2  +\n\\frac{t^2 - 1}{t^2}|rq|^2 - \\frac{2(t\\cos (8\\pi/k)- 1)}{t}|pq|\\cdot|rq|.\n\\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle|pr|^{2}\" display=\"inline\"><msup><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>r</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mn>2</mn></msup></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=|pq|^{2}+|rq|^{2}-2|pq|\\cdot|rq|\\cos\\alpha\\leq|pq|^{2}+|rq|^{2}-%&#10;2|pq|\\cdot|rq|\\cos(8\\pi/k)\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mrow><msup><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mn>2</mn></msup><mo>+</mo><msup><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mn>2</mn></msup></mrow><mo>-</mo><mrow><mrow><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>\u22c5</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mi>\u03b1</mi></mrow></mrow></mrow><mo>\u2264</mo><mrow><mrow><msup><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mn>2</mn></msup><mo>+</mo><msup><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mn>2</mn></msup></mrow><mo>-</mo><mrow><mrow><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>\u22c5</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"t\" display=\"inline\"><mi>t</mi></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex4.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=|pq|^{2}-\\frac{2}{t}\\,|pq|\\cdot|rq|+\\frac{1}{t^{2}}|rq|^{2}+%&#10;\\frac{t^{2}-1}{t^{2}}|rq|^{2}-\\frac{2(t\\cos(8\\pi/k)-1)}{t}|pq|\\cdot|rq|\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mrow><mrow><msup><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mn>2</mn></msup><mo>-</mo><mrow><mrow><mpadded width=\"+1.7pt\"><mstyle displaystyle=\"true\"><mfrac><mn>2</mn><mi>t</mi></mfrac></mstyle></mpadded><mo>\u2062</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>\u22c5</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow></mrow><mo>+</mo><mrow><mstyle displaystyle=\"true\"><mfrac><mn>1</mn><msup><mi>t</mi><mn>2</mn></msup></mfrac></mstyle><mo>\u2062</mo><msup><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mn>2</mn></msup></mrow><mo>+</mo><mrow><mstyle displaystyle=\"true\"><mfrac><mrow><msup><mi>t</mi><mn>2</mn></msup><mo>-</mo><mn>1</mn></mrow><msup><mi>t</mi><mn>2</mn></msup></mfrac></mstyle><mo>\u2062</mo><msup><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mn>2</mn></msup></mrow></mrow><mo>-</mo><mrow><mrow><mstyle displaystyle=\"true\"><mfrac><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>t</mi><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mi>t</mi></mfrac></mstyle><mo>\u2062</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>\u22c5</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\Bigl{(}|pq|-\\frac{|rq|}{t}\\Bigr{)}^{2}+\\frac{t^{2}-1}{t^{2}}|rq%&#10;|^{2}-\\frac{2(t\\cos(8\\pi/k)-1)}{t}|pq|\\cdot|rq|.\" display=\"inline\"><mrow><mrow><mi/><mo>=</mo><mrow><mrow><msup><mrow><mo maxsize=\"160%\" minsize=\"160%\">(</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mstyle displaystyle=\"true\"><mfrac><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mi>t</mi></mfrac></mstyle></mrow><mo maxsize=\"160%\" minsize=\"160%\">)</mo></mrow><mn>2</mn></msup><mo>+</mo><mrow><mstyle displaystyle=\"true\"><mfrac><mrow><msup><mi>t</mi><mn>2</mn></msup><mo>-</mo><mn>1</mn></mrow><msup><mi>t</mi><mn>2</mn></msup></mfrac></mstyle><mo>\u2062</mo><msup><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mn>2</mn></msup></mrow></mrow><mo>-</mo><mrow><mrow><mstyle displaystyle=\"true\"><mfrac><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>t</mi><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mi>t</mi></mfrac></mstyle><mo>\u2062</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>\u22c5</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nwhere the last inequality follows\nsince $|pq| \\geq |rq|$ and\n", "itemtype": "equation", "pos": 29044, "prevtext": "\nWe complete the proof by showing that under the assumptions of the lemma\n$\\frac{t^2 - 1}{t^2}|rq|^2 - \\frac{2(t\\cos (8\\pi/k)- 1)}{t}|pq|\\cdot|rq| \\le 0$.\nWe have that\n\n", "index": 5, "text": "\\begin{align*}\n\\frac{t^2 - 1}{t^2}|rq|^2 - \\frac{2(t\\cos (8\\pi/k)- 1)}{t}|pq|\\cdot|rq|\n&=\\frac{|rq|^2}{t^2}\\Bigl(t^2 - 1 - 2(t^2\\cos (8\\pi/k) - t)\\frac{|pq|}{|rq|}\\Bigr)\\\\\n&\\leq\n\\frac{|rq|^2}{t^2}\\Bigl(t^2 - 1 - 2(t^2\\cos (8\\pi/k) - t)\\Bigr),\n\\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\frac{t^{2}-1}{t^{2}}|rq|^{2}-\\frac{2(t\\cos(8\\pi/k)-1)}{t}|pq|%&#10;\\cdot|rq|\" display=\"inline\"><mrow><mrow><mstyle displaystyle=\"true\"><mfrac><mrow><msup><mi>t</mi><mn>2</mn></msup><mo>-</mo><mn>1</mn></mrow><msup><mi>t</mi><mn>2</mn></msup></mfrac></mstyle><mo>\u2062</mo><msup><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mn>2</mn></msup></mrow><mo>-</mo><mrow><mrow><mstyle displaystyle=\"true\"><mfrac><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>t</mi><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mi>t</mi></mfrac></mstyle><mo>\u2062</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>\u22c5</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\frac{|rq|^{2}}{t^{2}}\\Bigl{(}t^{2}-1-2(t^{2}\\cos(8\\pi/k)-t)%&#10;\\frac{|pq|}{|rq|}\\Bigr{)}\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mstyle displaystyle=\"true\"><mfrac><msup><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mn>2</mn></msup><msup><mi>t</mi><mn>2</mn></msup></mfrac></mstyle><mo>\u2062</mo><mrow><mo maxsize=\"160%\" minsize=\"160%\">(</mo><mrow><msup><mi>t</mi><mn>2</mn></msup><mo>-</mo><mn>1</mn><mo>-</mo><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><msup><mi>t</mi><mn>2</mn></msup><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>-</mo><mi>t</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mstyle displaystyle=\"true\"><mfrac><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mfrac></mstyle></mrow></mrow><mo maxsize=\"160%\" minsize=\"160%\">)</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle\\leq\\frac{|rq|^{2}}{t^{2}}\\Bigl{(}t^{2}-1-2(t^{2}\\cos(8\\pi/k)-t)%&#10;\\Bigr{)},\" display=\"inline\"><mrow><mrow><mi/><mo>\u2264</mo><mrow><mstyle displaystyle=\"true\"><mfrac><msup><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mn>2</mn></msup><msup><mi>t</mi><mn>2</mn></msup></mfrac></mstyle><mo>\u2062</mo><mrow><mo maxsize=\"160%\" minsize=\"160%\">(</mo><mrow><msup><mi>t</mi><mn>2</mn></msup><mo>-</mo><mn>1</mn><mo>-</mo><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><msup><mi>t</mi><mn>2</mn></msup><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>-</mo><mi>t</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo maxsize=\"160%\" minsize=\"160%\">)</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nso\n $t\\cos(8\\pi/k) \\geq 1$.\nNow we have that\n\n", "itemtype": "equation", "pos": 29360, "prevtext": "\nwhere the last inequality follows\nsince $|pq| \\geq |rq|$ and\n", "index": 7, "text": "\n\\[\nt\\ge  \\frac{1 + \\sqrt{2 - 2\\cos (8\\pi / k)}}{2\\cos (8\\pi/k) -1} \\ge \\frac{1}{2\\cos (8\\pi/k) -1} \\ge \\frac{1}{\\cos (8\\pi/k)} \\ ,\n\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex8.m1\" class=\"ltx_Math\" alttext=\"t\\geq\\frac{1+\\sqrt{2-2\\cos(8\\pi/k)}}{2\\cos(8\\pi/k)-1}\\geq\\frac{1}{2\\cos(8\\pi/k%&#10;)-1}\\geq\\frac{1}{\\cos(8\\pi/k)}\\ ,\" display=\"block\"><mrow><mrow><mi>t</mi><mo>\u2265</mo><mfrac><mrow><mn>1</mn><mo>+</mo><msqrt><mrow><mn>2</mn><mo>-</mo><mrow><mn>2</mn><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow></msqrt></mrow><mrow><mrow><mn>2</mn><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>-</mo><mn>1</mn></mrow></mfrac><mo>\u2265</mo><mfrac><mn>1</mn><mrow><mrow><mn>2</mn><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>-</mo><mn>1</mn></mrow></mfrac><mo>\u2265</mo><mpadded width=\"+5pt\"><mfrac><mn>1</mn><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mfrac></mpadded></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nif\n $\\cos(8\\pi/k) > 1/2$ and\n", "itemtype": "equation", "pos": 29540, "prevtext": "\nso\n $t\\cos(8\\pi/k) \\geq 1$.\nNow we have that\n\n", "index": 9, "text": "$$t^2 - 1 - 2(t^2\\cos (8\\pi/k) - t)\n= (1-2\\cos (8\\pi/k))t^2 + 2t - 1 \\le 0 $$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex9.m1\" class=\"ltx_Math\" alttext=\"t^{2}-1-2(t^{2}\\cos(8\\pi/k)-t)=(1-2\\cos(8\\pi/k))t^{2}+2t-1\\leq 0\" display=\"block\"><mrow><mrow><msup><mi>t</mi><mn>2</mn></msup><mo>-</mo><mn>1</mn><mo>-</mo><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><msup><mi>t</mi><mn>2</mn></msup><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>-</mo><mi>t</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>=</mo><mrow><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mn>1</mn><mo>-</mo><mrow><mn>2</mn><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msup><mi>t</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>2</mn><mo>\u2062</mo><mi>t</mi></mrow></mrow><mo>-</mo><mn>1</mn></mrow><mo>\u2264</mo><mn>0</mn></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nThe latter inequality holds by assumption and $\\cos(8 \\pi/k) > 1/2$ for $k \\geq 25$.\n\\end{proof}\n\n\nWe are now ready to bound the stretch of the spanner $H$. This is done in two\nsteps.\nIn the first step (Lemma \\ref{lem:shorteredge}) we prove that for any edge $pq$ of $G$\nwhich is not\n in\n$H$, there exists a shorter edge $rq$ in $H$,\nsuch that $r$ is ``close'' to $p$.\n This fact allows us to prove, via a fairly standard\ninductive argument, that $H$ is indeed a spanner of $G$.\n\n\\begin{lemma}\n\\label{lem:shorteredge}\nLet $c$ and $k$ be such that $c > 3 + \\frac{2}{\\sin (\\pi /k)}$ as\nrequired by\n Lemma \\ref{lem:centercone}, $k$ satisfies the\nconditions of Lemma \\ref{lem:lengthofchosenedge} and, in addition, $c \\geq 2 + \\frac{2t}{t-1}$ and $k \\ge \\frac{16\\pi t}{t-1}$.\nLet $pq$ be an edge of $G$. Then either $pq$ is in $H$ or there is an edge $rq$ in $H$ such that\n$|pr| \\leq |pq| - |rq|/t$.\n\\end{lemma}\n\\begin{proof}\nLet $N$ be the neighborhood relation of the\n$c$\\emph{-separated annulus decomposition} used by Algorithm~\\ref{alg:edgeselection}.\nLet $(\\sigma, \\tau) \\in N$ be a pair of neighboring\ncells satisfying  requirement (ii) of Definition~\\ref{def:decomposition} with respect to\n$pq$.\nIn particular we have that $q \\in \\sigma$ and $p \\in \\tau$.\nIf there is more than one such pair $(\\sigma, \\tau) \\in N$, we consider the pair with minimum diameter.\nLet ${\\operatorname{diam}}(\\sigma) = 2^i$, that is\n $\\sigma,\\tau \\in {\\operatorname{\\mathcal{Q}}}_i$.\n\nLet $C \\in {\\mathcal C}$ be the cone such that\n$p \\in C_q$.\nSince $p \\in C_q \\cap \\tau$ and since $d(\\sigma,\\tau) \\geq (c-2)2^i$,\nLemma~\\ref{lem:centercone} implies that $\\tau \\subset C_\\sigma^2$. Hence,\n$\\tau$ is considered for incoming edges for $q$\n(line~\\ref{line:conetest} in Algorithm~\\ref{alg:edgeselection}).\nWe split the rest of the proof into two cases.\n\n\\noindent\n\\textbf{Case 1:} $q$ remains active until $(\\sigma, \\tau)$\nis considered.\nRequirement (ii) of\nDefinition~\\ref{def:decomposition} guarantees that\nAlgorithm~\\ref{alg:edgeselection} finds\nan incoming edge $rq$ for $q$\nwith $r \\in \\tau$.\nIf $r = p$, we are done,  so\nsuppose that $r \\neq p$.\nSince ${\\operatorname{diam}}(\\sigma) = 2^i$ and $|rq| \\geq d(\\sigma,\\tau) \\geq (c-2)2^i$\nwe have\n\n", "itemtype": "equation", "pos": 29646, "prevtext": "\nif\n $\\cos(8\\pi/k) > 1/2$ and\n", "index": 11, "text": "\n\\[\n \\frac{1 + \\sqrt{2 - 2\\cos (8\\pi / k)}}{2\\cos (8\\pi/k) -1} \\leq t \\ .\n\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex10.m1\" class=\"ltx_Math\" alttext=\"\\frac{1+\\sqrt{2-2\\cos(8\\pi/k)}}{2\\cos(8\\pi/k)-1}\\leq t\\ .\" display=\"block\"><mrow><mrow><mfrac><mrow><mn>1</mn><mo>+</mo><msqrt><mrow><mn>2</mn><mo>-</mo><mrow><mn>2</mn><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow></msqrt></mrow><mrow><mrow><mn>2</mn><mo>\u2062</mo><mrow><mi>cos</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>-</mo><mn>1</mn></mrow></mfrac><mo>\u2264</mo><mpadded width=\"+5pt\"><mi>t</mi></mpadded></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nfor $c \\geq 2 + \\frac{2t}{t-1}$.\n\n\\begin{figure}[htb]\n\\centering\n\\begin{subfigure}[t]{0.45\\textwidth}\n\\centering\n\\includegraphics[scale=0.8]{shorteredge-1}\n  \\caption{Case 1: $p$ and $r$ are in the\nsame cell $\\sigma$.}\n\\end{subfigure}\n\\begin{subfigure}[t]{0.45\\textwidth}\n\\centering\n\\includegraphics[scale=0.8]{shorteredge-2}\n  \\caption{Case 2: $p$ and $r$ are in different cells with different levels\nbut in the same cone $C_q^4$.}\n\\end{subfigure}\n\\end{figure}\n\n\\noindent\n\\textbf{Case 2:} $q$ becomes inactive before $(\\sigma, \\tau)$\nis considered.\nThen Algorithm~\\ref{alg:edgeselection} has selected an edge $rq$\nwhile considering\na pair $(\\bar{\\sigma},\\bar{\\tau}) \\in N$ with $q \\in \\bar{\\sigma}$,\n$r \\in \\bar{\\tau}$ and ${\\operatorname{diam}}(\\bar{\\sigma}) \\leq 2^{i-1}$.\nWe now distinguish two subcases.\n\n\n\\textbf{Subcase 2a}  $|rq| \\geq |pq|$.\nFrom Property (i) of Definition~\\ref{def:decomposition} follows that\n$d(\\sigma,\\tau) \\ge (c-2)2^i$ and therefore $|pq| \\geq (c-2)2^i$.\nIt also follows from the same property that\n$d(\\bar{\\sigma},\\bar{\\tau}) \\le 2c2^{i-1}$, so\n$|rq| \\le 2c2^{i-1} + 2\\cdot 2^{i-1} = (c+1)2^i$.\nCombining these inequalities we obtain that\n$(c-2)2^i \\le |pq| \\le |rq| \\le   (c+1)2^i $\nand therefore\n$|pq| \\geq |rq| - 3\\cdot 2^i$.\nLemma~\\ref{lem:annulusDiameter}\nimplies that\n$|pr| \\leq ((8\\pi/k)(c+1)+3) 2^i$, and thus we have\n\n", "itemtype": "equation", "pos": 31948, "prevtext": "\nThe latter inequality holds by assumption and $\\cos(8 \\pi/k) > 1/2$ for $k \\geq 25$.\n\\end{proof}\n\n\nWe are now ready to bound the stretch of the spanner $H$. This is done in two\nsteps.\nIn the first step (Lemma \\ref{lem:shorteredge}) we prove that for any edge $pq$ of $G$\nwhich is not\n in\n$H$, there exists a shorter edge $rq$ in $H$,\nsuch that $r$ is ``close'' to $p$.\n This fact allows us to prove, via a fairly standard\ninductive argument, that $H$ is indeed a spanner of $G$.\n\n\\begin{lemma}\n\\label{lem:shorteredge}\nLet $c$ and $k$ be such that $c > 3 + \\frac{2}{\\sin (\\pi /k)}$ as\nrequired by\n Lemma \\ref{lem:centercone}, $k$ satisfies the\nconditions of Lemma \\ref{lem:lengthofchosenedge} and, in addition, $c \\geq 2 + \\frac{2t}{t-1}$ and $k \\ge \\frac{16\\pi t}{t-1}$.\nLet $pq$ be an edge of $G$. Then either $pq$ is in $H$ or there is an edge $rq$ in $H$ such that\n$|pr| \\leq |pq| - |rq|/t$.\n\\end{lemma}\n\\begin{proof}\nLet $N$ be the neighborhood relation of the\n$c$\\emph{-separated annulus decomposition} used by Algorithm~\\ref{alg:edgeselection}.\nLet $(\\sigma, \\tau) \\in N$ be a pair of neighboring\ncells satisfying  requirement (ii) of Definition~\\ref{def:decomposition} with respect to\n$pq$.\nIn particular we have that $q \\in \\sigma$ and $p \\in \\tau$.\nIf there is more than one such pair $(\\sigma, \\tau) \\in N$, we consider the pair with minimum diameter.\nLet ${\\operatorname{diam}}(\\sigma) = 2^i$, that is\n $\\sigma,\\tau \\in {\\operatorname{\\mathcal{Q}}}_i$.\n\nLet $C \\in {\\mathcal C}$ be the cone such that\n$p \\in C_q$.\nSince $p \\in C_q \\cap \\tau$ and since $d(\\sigma,\\tau) \\geq (c-2)2^i$,\nLemma~\\ref{lem:centercone} implies that $\\tau \\subset C_\\sigma^2$. Hence,\n$\\tau$ is considered for incoming edges for $q$\n(line~\\ref{line:conetest} in Algorithm~\\ref{alg:edgeselection}).\nWe split the rest of the proof into two cases.\n\n\\noindent\n\\textbf{Case 1:} $q$ remains active until $(\\sigma, \\tau)$\nis considered.\nRequirement (ii) of\nDefinition~\\ref{def:decomposition} guarantees that\nAlgorithm~\\ref{alg:edgeselection} finds\nan incoming edge $rq$ for $q$\nwith $r \\in \\tau$.\nIf $r = p$, we are done,  so\nsuppose that $r \\neq p$.\nSince ${\\operatorname{diam}}(\\sigma) = 2^i$ and $|rq| \\geq d(\\sigma,\\tau) \\geq (c-2)2^i$\nwe have\n\n", "index": 13, "text": "\\begin{align*}\n  |pr| & \\leq 2^i  = |pq| - (|pq| - 2^i) \\leq |pq| - (|rq| - 2\\cdot 2^i) \\\\\n  & \\leq |pq| - (|rq| - 2|rq|/(c-2)) \\leq |pq| - |rq|(1-2/(c-2)) \\leq |pq|\n-|rq|/t,\n\\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex11.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle|pr|\" display=\"inline\"><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>r</mi></mrow><mo stretchy=\"false\">|</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex11.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle\\leq 2^{i}=|pq|-(|pq|-2^{i})\\leq|pq|-(|rq|-2\\cdot 2^{i})\" display=\"inline\"><mrow><mi/><mo>\u2264</mo><msup><mn>2</mn><mi>i</mi></msup><mo>=</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><msup><mn>2</mn><mi>i</mi></msup></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mn>2</mn><mo>\u22c5</mo><msup><mn>2</mn><mi>i</mi></msup></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex12.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle\\leq|pq|-(|rq|-2|rq|/(c-2))\\leq|pq|-|rq|(1-2/(c-2))\\leq|pq|-|rq|/t,\" display=\"inline\"><mrow><mrow><mi/><mo>\u2264</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>/</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>c</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mn>1</mn><mo>-</mo><mrow><mn>2</mn><mo>/</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>c</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>\u2264</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>/</mo><mi>t</mi></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nThe  third inequality follows since\n$|pq| \\geq |rq| - 3\\cdot 2^i$ as we argued above, and  the\nfifth inequality follows since\n$2^i \\leq |rq|/(c-2)$. The last inequality holds for $c \\ge 5$ (which follows from our assumptions).\nNow we clearly have that\n", "itemtype": "equation", "pos": 33493, "prevtext": "\nfor $c \\geq 2 + \\frac{2t}{t-1}$.\n\n\\begin{figure}[htb]\n\\centering\n\\begin{subfigure}[t]{0.45\\textwidth}\n\\centering\n\\includegraphics[scale=0.8]{shorteredge-1}\n  \\caption{Case 1: $p$ and $r$ are in the\nsame cell $\\sigma$.}\n\\end{subfigure}\n\\begin{subfigure}[t]{0.45\\textwidth}\n\\centering\n\\includegraphics[scale=0.8]{shorteredge-2}\n  \\caption{Case 2: $p$ and $r$ are in different cells with different levels\nbut in the same cone $C_q^4$.}\n\\end{subfigure}\n\\end{figure}\n\n\\noindent\n\\textbf{Case 2:} $q$ becomes inactive before $(\\sigma, \\tau)$\nis considered.\nThen Algorithm~\\ref{alg:edgeselection} has selected an edge $rq$\nwhile considering\na pair $(\\bar{\\sigma},\\bar{\\tau}) \\in N$ with $q \\in \\bar{\\sigma}$,\n$r \\in \\bar{\\tau}$ and ${\\operatorname{diam}}(\\bar{\\sigma}) \\leq 2^{i-1}$.\nWe now distinguish two subcases.\n\n\n\\textbf{Subcase 2a}  $|rq| \\geq |pq|$.\nFrom Property (i) of Definition~\\ref{def:decomposition} follows that\n$d(\\sigma,\\tau) \\ge (c-2)2^i$ and therefore $|pq| \\geq (c-2)2^i$.\nIt also follows from the same property that\n$d(\\bar{\\sigma},\\bar{\\tau}) \\le 2c2^{i-1}$, so\n$|rq| \\le 2c2^{i-1} + 2\\cdot 2^{i-1} = (c+1)2^i$.\nCombining these inequalities we obtain that\n$(c-2)2^i \\le |pq| \\le |rq| \\le   (c+1)2^i $\nand therefore\n$|pq| \\geq |rq| - 3\\cdot 2^i$.\nLemma~\\ref{lem:annulusDiameter}\nimplies that\n$|pr| \\leq ((8\\pi/k)(c+1)+3) 2^i$, and thus we have\n\n", "index": 15, "text": "\\begin{align*}\n |pr| &\\leq ((8\\pi/k)(c+1)+3) 2^i \\\\\n  &\\leq  |pq| - |pq| + ((8\\pi/k)(c+1)+3) 2^i \\\\\n  &\\leq |pq| - \\bigl(|rq| - 3\\cdot2^i - ((8\\pi/k)(c+1)+3) 2^i\\bigr) \\\\\n  &\\leq |pq| - \\Bigl(|rq| - \\frac{(8\\pi(c+1)-6)2^i}{k}\\Bigr)\\\\\n  &\\leq |pq| - |rq|\\Bigl(1 - \\frac{(8\\pi(c+1)-6)}{k(c-2)}\\Bigr) \\\\\n &\\leq |pq| - |rq|\\Bigl(1 - \\frac{16\\pi}{k}\\Bigr) \\ .\n\\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex13.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle|pr|\" display=\"inline\"><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>r</mi></mrow><mo stretchy=\"false\">|</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex13.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle\\leq((8\\pi/k)(c+1)+3)2^{i}\" display=\"inline\"><mrow><mi/><mo>\u2264</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>c</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mn>3</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msup><mn>2</mn><mi>i</mi></msup></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex14.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle\\leq|pq|-|pq|+((8\\pi/k)(c+1)+3)2^{i}\" display=\"inline\"><mrow><mi/><mo>\u2264</mo><mrow><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>+</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>c</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mn>3</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msup><mn>2</mn><mi>i</mi></msup></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex15.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle\\leq|pq|-\\bigl{(}|rq|-3\\cdot 2^{i}-((8\\pi/k)(c+1)+3)2^{i}\\bigr{)}\" display=\"inline\"><mrow><mi/><mo>\u2264</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mo maxsize=\"120%\" minsize=\"120%\">(</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mn>3</mn><mo>\u22c5</mo><msup><mn>2</mn><mi>i</mi></msup></mrow><mo>-</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mo>/</mo><mi>k</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>c</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mn>3</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msup><mn>2</mn><mi>i</mi></msup></mrow></mrow><mo maxsize=\"120%\" minsize=\"120%\">)</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex16.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle\\leq|pq|-\\Bigl{(}|rq|-\\frac{(8\\pi(c+1)-6)2^{i}}{k}\\Bigr{)}\" display=\"inline\"><mrow><mi/><mo>\u2264</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mo maxsize=\"160%\" minsize=\"160%\">(</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mstyle displaystyle=\"true\"><mfrac><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>c</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mn>6</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msup><mn>2</mn><mi>i</mi></msup></mrow><mi>k</mi></mfrac></mstyle></mrow><mo maxsize=\"160%\" minsize=\"160%\">)</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex17.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle\\leq|pq|-|rq|\\Bigl{(}1-\\frac{(8\\pi(c+1)-6)}{k(c-2)}\\Bigr{)}\" display=\"inline\"><mrow><mi/><mo>\u2264</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>\u2062</mo><mrow><mo maxsize=\"160%\" minsize=\"160%\">(</mo><mrow><mn>1</mn><mo>-</mo><mstyle displaystyle=\"true\"><mfrac><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>8</mn><mo>\u2062</mo><mi>\u03c0</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>c</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mn>6</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mrow><mi>k</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>c</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mfrac></mstyle></mrow><mo maxsize=\"160%\" minsize=\"160%\">)</mo></mrow></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex18.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle\\leq|pq|-|rq|\\Bigl{(}1-\\frac{16\\pi}{k}\\Bigr{)}\\ .\" display=\"inline\"><mrow><mrow><mi/><mo>\u2264</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>\u2062</mo><mrow><mo maxsize=\"160%\" minsize=\"160%\">(</mo><mrow><mn>1</mn><mo>-</mo><mstyle displaystyle=\"true\"><mfrac><mrow><mn>16</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mi>k</mi></mfrac></mstyle></mrow><mo maxsize=\"160%\" minsize=\"160%\" rspace=\"7.5pt\">)</mo></mrow></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nfor $k \\ge \\frac{16\\pi t}{t-1}$.\n\n\\textbf{Subcase 2b}  $|rq| <|pq|$.\nBy assumption, we have $p \\in C_{q} \\subset C_q^4$.\nFurthermore, by applying Lemma~\\ref{lem:centercone} with\n the midpoint of $\\bar{\\sigma}$ as $q$, $r$ as $p$, and $q$ as $s$,\nin the statement of the lemma, we get that\n $r \\in C_q^4$.\nSince $p,r \\in C_q^4$ and since the opening angle of  $C_q^4$ is $8\\pi/k$, it follows from\nLemma~\\ref{lem:lengthofchosenedge} that\n$|pr| \\leq |pq| - |rq|/t$.\n\\end{proof}\n\n\n\n\n\\begin{lemma}\n \\label{lem:edgeapproximation}\nFor any $t > 1$, there are constants\n$c$ and $k$ such that $H$ is a $t$-spanner for the transmission graph\n$G$.\n\\end{lemma}\n\\begin{proof}\nWe pick the constants $c$ and $k$ so that Lemma \\ref{lem:shorteredge} holds.\nWe prove\n by induction on the indices of edges when ordered by their lengths,\n that for each  edge $pq$ of $G$,\nthere is a path from  $p$ to $q$ in $H$\nof length at most $t|pq|$.\nFor the base case, consider the shortest edge\n$pq$ in $G$.\nBy Lemma~\\ref{lem:shorteredge},\nif $pq$ is not in $H$ then  there is an edge $rq$ in $H$  such that\n $|pr| \\leq |pq| - |rq|/t$. Since $pq$ is an edge of $G$, it follows that $r_p \\geq |pq|$\nand therefore $pr$ must  also be an edge of $G$, and it is shorter than $pq$. This gives   a contradiction and therefore\n $pq$ must be  in $H$.\n\nFor the induction step, consider an edge\n$pq$ of $G$. If $pq$ is in $H$ we are done. Otherwise\nby Lemma~\\ref{lem:shorteredge} there is an edge $rq$ in $H$ such that\n $|pr| \\leq |pq| - |rq|/t$. As argued above, $pr$ is an edge of $G$ shorter than $|pq|$ so\nby the induction hypothesis, there is a path from $p$ to $r$ in $H$ of length\nno larger than $t|pr|$. It follows that\n\n", "itemtype": "equation", "pos": 34112, "prevtext": "\nThe  third inequality follows since\n$|pq| \\geq |rq| - 3\\cdot 2^i$ as we argued above, and  the\nfifth inequality follows since\n$2^i \\leq |rq|/(c-2)$. The last inequality holds for $c \\ge 5$ (which follows from our assumptions).\nNow we clearly have that\n", "index": 17, "text": "\n\\[\n|pq| - |rq|\\Bigl(1 - \\frac{16\\pi}{k}\\Bigr)\n\\leq |pq|-\n|rq|/t,\n\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex19.m1\" class=\"ltx_Math\" alttext=\"|pq|-|rq|\\Bigl{(}1-\\frac{16\\pi}{k}\\Bigr{)}\\leq|pq|-|rq|/t,\" display=\"block\"><mrow><mrow><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>\u2062</mo><mrow><mo maxsize=\"160%\" minsize=\"160%\">(</mo><mrow><mn>1</mn><mo>-</mo><mfrac><mrow><mn>16</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><mi>k</mi></mfrac></mrow><mo maxsize=\"160%\" minsize=\"160%\">)</mo></mrow></mrow></mrow><mo>\u2264</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>/</mo><mi>t</mi></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nas required.\n\\end{proof}\n\n\n\\paragraph*{Finding the Decomposition.}\nWe use a quadtree to define the cells of the decomposition. We recall that\na \\emph{quadtree}  is a rooted tree $T$ in which each\ninternal node has degree four.\nEach node $v$ of $T$ is associated with a cell $\\sigma_v$ of some grid\n${\\operatorname{\\mathcal{Q}}}_i$, $i\\geq 0$, and if $v$ is an internal node,\nthe cells associated with its children partition $\\sigma_v$ into four\ncongruent squares, each with diameter ${\\operatorname{diam}}(\\sigma_v)/2$.\nIf $\\sigma_v$ is from ${\\operatorname{\\mathcal{Q}}}_i$ then we say that $v$ is of \\emph{level} $i$.\nNote that all nodes of $T$ at the same distance from the root are of the same\nlevel.\n\nLet $c$ be the required  parameter for the annulus decomposition.\nWe scale $P$ such that the\nclosest pair in $P$ has distance $c$. (We use $P$  to denote also the scaled point set).\nLet $L$ be the smallest integer such that we can translate $P$ so that it fits in a\n single cell $\\sigma$ of  ${\\operatorname{\\mathcal{Q}}}_L$.\nSince $c$ is constant and $P$ has spread $\\Phi$,\nthe diameter of $P$ (after scaling) is $c\\Phi$ and therefore $L = O(\\log \\Phi)$.\nWe translate $P$ so that it fits in $\\sigma$ and we\n associate the root $r$ of our quadtree $T$ with this cell $\\sigma$, i.e.\\  $\\sigma_r = \\sigma$.\nBy the definition of a level, $r$ is of level $L$.\n\nWe continue constructing $T$ top down as follows.\nWe construct level $i-1$ of $T$, given level $i$, by splitting\nthe cell $\\sigma_v$ of each node $v$, whose cell $\\sigma_v$ is not empty,\ninto four\ncongruent squares, and associate each of these squares with a child of $v$.\nWe stop the construction of $T$ after generating the cells of level $0$. The scaling which we did to\n$P$\n ensures that each cell of a  leaf node at level $0$\ncontains at most one site.\n\nWe now set ${\\operatorname{\\mathcal{Q}}} = \\{ \\sigma_v \\mid v \\in T \\}$.\nWe define $N$ as the set of all pairs\n$(\\sigma_v,\\sigma_w) \\in {\\operatorname{\\mathcal{Q}}} \\times {\\operatorname{\\mathcal{Q}}}$ such that $v$ and $w$\nare at the same level in $T$ and\n$ d(\\sigma_v,\\sigma_w) \\in [c-2,2c) {\\operatorname{diam}}(\\sigma_v)$.\\footnote{We\ndenote the interval $[a{\\operatorname{diam}}(\\sigma_v),b{\\operatorname{diam}}(\\sigma_v))$ by\n$[a,b) {\\operatorname{diam}}(\\sigma_v)$.}\nFor $\\sigma \\in {\\operatorname{\\mathcal{Q}}}$, we define $R_{\\sigma}$ to be the set of all sites  $p \\in \\sigma \\cap P$\nwith  $ r_p \\in [c,2(c+1)){\\operatorname{diam}}(\\sigma_v)$.\n\n\\begin{lemma} \\label{lem:3.9}\n$({\\operatorname{\\mathcal{Q}}}, N, R_\\sigma)$\nis a $c$-separated annulus decomposition for $G$.\n\\end{lemma}\n\\begin{proof}\nProperty (i) of\nDefinition~\\ref{def:decomposition} follows by construction.\nTo prove that Property (ii) holds consider an edge\n$pq$ of $G$.\nLet $i$ be the integer such that  $|pq| \\in [c, 2c) 2^i$.\nLet $\\sigma, \\tau$ be the cells of ${\\operatorname{\\mathcal{Q}}}_i$\nwith $p \\in \\sigma$ and $q \\in \\tau$.\nBy construction,  $\\sigma$ and $\\tau$ are assigned to nodes\nof the quadtree and thus contained in ${\\operatorname{\\mathcal{Q}}}$.\nSince ${\\operatorname{diam}}(\\sigma) = {\\operatorname{diam}}(\\tau) = 2^i$, we have\n", "itemtype": "equation", "pos": 35867, "prevtext": "\nfor $k \\ge \\frac{16\\pi t}{t-1}$.\n\n\\textbf{Subcase 2b}  $|rq| <|pq|$.\nBy assumption, we have $p \\in C_{q} \\subset C_q^4$.\nFurthermore, by applying Lemma~\\ref{lem:centercone} with\n the midpoint of $\\bar{\\sigma}$ as $q$, $r$ as $p$, and $q$ as $s$,\nin the statement of the lemma, we get that\n $r \\in C_q^4$.\nSince $p,r \\in C_q^4$ and since the opening angle of  $C_q^4$ is $8\\pi/k$, it follows from\nLemma~\\ref{lem:lengthofchosenedge} that\n$|pr| \\leq |pq| - |rq|/t$.\n\\end{proof}\n\n\n\n\n\\begin{lemma}\n \\label{lem:edgeapproximation}\nFor any $t > 1$, there are constants\n$c$ and $k$ such that $H$ is a $t$-spanner for the transmission graph\n$G$.\n\\end{lemma}\n\\begin{proof}\nWe pick the constants $c$ and $k$ so that Lemma \\ref{lem:shorteredge} holds.\nWe prove\n by induction on the indices of edges when ordered by their lengths,\n that for each  edge $pq$ of $G$,\nthere is a path from  $p$ to $q$ in $H$\nof length at most $t|pq|$.\nFor the base case, consider the shortest edge\n$pq$ in $G$.\nBy Lemma~\\ref{lem:shorteredge},\nif $pq$ is not in $H$ then  there is an edge $rq$ in $H$  such that\n $|pr| \\leq |pq| - |rq|/t$. Since $pq$ is an edge of $G$, it follows that $r_p \\geq |pq|$\nand therefore $pr$ must  also be an edge of $G$, and it is shorter than $pq$. This gives   a contradiction and therefore\n $pq$ must be  in $H$.\n\nFor the induction step, consider an edge\n$pq$ of $G$. If $pq$ is in $H$ we are done. Otherwise\nby Lemma~\\ref{lem:shorteredge} there is an edge $rq$ in $H$ such that\n $|pr| \\leq |pq| - |rq|/t$. As argued above, $pr$ is an edge of $G$ shorter than $|pq|$ so\nby the induction hypothesis, there is a path from $p$ to $r$ in $H$ of length\nno larger than $t|pr|$. It follows that\n\n", "index": 19, "text": "\\begin{equation*}\n d_H(p,q) \\leq d_H(p,r) + |rq| \\leq t|pr| + |rq| \\leq  t(|pq| - |rq|/t) +\n|rq| \\leq t|pq|,\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex20.m1\" class=\"ltx_Math\" alttext=\"d_{H}(p,q)\\leq d_{H}(p,r)+|rq|\\leq t|pr|+|rq|\\leq t(|pq|-|rq|/t)+|rq|\\leq t|pq|,\" display=\"block\"><mrow><mrow><mrow><msub><mi>d</mi><mi>H</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mo>,</mo><mi>q</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mrow><msub><mi>d</mi><mi>H</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mo>,</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>\u2264</mo><mrow><mrow><mi>t</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>r</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>+</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>\u2264</mo><mrow><mrow><mi>t</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>/</mo><mi>t</mi></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>r</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>\u2264</mo><mrow><mi>t</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nand therefore $(\\sigma,\\tau) \\in N$\nby our definition of $N$.\nSince $pq$\nis an edge of $G$, it follows that $r_p \\geq |pq| \\geq c2^i$.\nIf $r_p < (c+1)2^{i+1}$, then $p \\in R_{\\sigma}$.\nOtherwise, $r_{m_{\\sigma}} \\geq r_p \\ge (c+1)2^{i+1}$,\nand $q \\in \\tau \\subset D(m_{\\sigma})$.\n\\end{proof}\n\n\n\\paragraph*{Computing the Edges of $H$.}\nWe find edges for each cone  $C \\in {\\mathcal C}$ separately as follows.\nFor each pair of neighboring cells $\\sigma$ and $\\tau\\in N(\\sigma)$ such that $\\tau$ is contained in\n$C_{\\sigma}^2$ we find\nall incoming edges to sites in $\\sigma$ from sites in $\\tau$ simultaneously.\nTo do this efficiently, we need to sort the sites in $\\sigma$ along the\n$x$ and $y$ directions. Therefore, we process the  cells\nbottom-up along $T$ in order of increasing levels. This way we can obtain a sorted list of the sites in each\ncell $\\sigma$ by merging the sorted lists of its children.\nSee Algorithm~\\ref{alg:efficientedgeselection}.\n\n\\begin{algorithm}[htb]\n\\For{$i=0,\\dots, L$} {\n  \\ForEach{$v \\in T$ \\emph{of level} $i$}{\n    $Q \\gets $ active sites in $\\sigma_v \\cap P$\\\\ \\tcp{preproccesing}\n    Sort $Q$ in $x$ and $y$-direction by merging the sorted lists of the\n     children of $v$\n    \\label{line:preproccesing}\n    \\ForEach{$\\tau \\in N(\\sigma_v)$ \\textnormal{contained in }\n$C_{\\sigma_v}^2$}{\n      $R \\gets R_{\\tau} \\cup \\{m_\\tau\\}$\\\\\n      \\tcp{edge selection}\n      For each site $q \\in Q$, find\n      a $r \\in R$ with $q \\in D(r)$,\n      if it exists; add the edge $rq$ to $H$\n\n      \\label{line:edgeselection2}\n    }\n    Set all $q \\in Q$ for which at least one\n    incoming edge was found to \\emph{inactive}\n  }\n}\n\\caption{Selecting the edges for $H$ for a fixed cone $C$.}\n\\label{alg:efficientedgeselection}\n\\end{algorithm}\n\nNote that the edges selected by\nAlgorithm~\\ref{alg:efficientedgeselection} have the same\nproperties as the edges selected by\nAlgorithm~\\ref{alg:edgeselection}.\nThus, by Lemma~\\ref{lem:edgeapproximation}, the\nresulting graph is a $t$-spanner.\nLet $Q$ be the set of active sites in $\\sigma_v$ when processing $v$.\nLet $\\tau \\in N(\\sigma_v)$ such that $\\tau$ is contained in $C_{\\sigma_v}^2$\nand let $R = R_{\\tau} \\cup \\{m_{\\tau}\\}$. Assume  $|Q|=n$ and $|R|=m$. To find the edges from sites in $R$ to\nsites in $Q$ efficiently, we use the fact that these sets of sites are separated by a line\nparallel to\neither the $x$- or the $y$-axis.\n\nAssume without loss of generality that $\\ell$ is the $x$-axis, the sites of $R$ are above\n$\\ell$ and the sites of $Q$ are below $\\ell$, and assume that  $Q$ is sorted along $\\ell$.\nFor each site $p\\in R$ we take the part of $D(p)$ which lies below $\\ell$ and compute the union of these\n``caps''.\n This  union  is bounded from\nabove by $\\ell$ and from below by the lower envelope of the arcs of the boundaries of the caps.\nThe complexity of the boundary of this union is $O(m)$ and it can be computed in $O(m\\log m)$ time~\\cite{AgarwalSharir96}. See Figure~\\ref{fig:lowerenvelope}.\n\nOnce we have computed this union we check for each $q\\in Q$\nwhether $q$ lies inside it.\nThis can be done by checking whether the intersection, $z$, of a vertical line through $q$ with the union is above or below $q$.\nIf $q$ is above $z$ then we add the edge $rq$ to $H$ where $r$ is the site such that $z\\in {\\partial} D(r)$.\nWe perform this computation for all sites in $Q$ together by a\n simple sweep in $x$-direction\nwhile traversing in parallel the lower envelope of the caps  and the sites of $Q$.\nThis clearly takes $O(m + n)$ time.\n\n\\begin{figure}[htb]\n \\centering\n\\includegraphics[scale=0.6]{lowerenvelope}\n\\caption{The lower envelope (orange), the sites $Q$ (red) and $R$\n(blue), and the sweepline (green).}\n\\label{fig:lowerenvelope}\n\\end{figure}\n\nWe thus proved the following  lemma.\n\\begin{lemma}\n\\label{lem:lowerenvelope}\nLet $Q$, $R$, and $\\ell$ be as\nabove with $|Q|=n$ and $|R|=m$.\nSuppose that $Q$ is sorted along $\\ell$ and that\n$\\ell$ separates $Q$ and $R$.\nWe can compute in $O(m \\log m + n)$ time for each $q \\in Q$ one\ndisk from $R$ that contains it, provided that such a disk exists.\n\\end{lemma}\n\n\\paragraph*{Analysis.}\nWe prove that\nAlgorithm~\\ref{alg:efficientedgeselection}\nruns in $O(n \\log \\Phi)$ time and uses\n$O(n \\log \\Phi)$ space. The\nrunning time is dominated by the edge selection step  described in\n Lemma~\\ref{lem:lowerenvelope}.\nWe  argue that each site participates in $O(1)$ edge selection steps\nas a disk center (in $R$) and in $O(\\log \\Phi)$\nedge selection steps as a vertex looking for incoming\nedges. From these observations (and the fact that\n$\\Phi = \\Omega(n^{1/2})$) the stated time bound essentially follows.\n\\begin{lemma}\n \\label{lem:runningtime}\nWe construct the spanner $H$ of the transmission graph $G$ in\n$O(n\\log \\Phi )$ time and space.\n\\end{lemma}\n\\begin{proof}\n The quadtree $T$ can be computed in\n $O(n \\log \\Phi)$ time and space \\cite{4M}, and within this time  bound we can also compute\n$N(\\sigma_v)$, $R_{\\sigma_v}$, and $m_{\\sigma_v}$ for\neach node $v \\in T$.\n\nMerging the sorted lists of the sites in $\\sigma_w$ for each child $w$ of $v$ to\nobtain the sorted list of the sites in $\\sigma_v$ (line~\\ref{line:preproccesing} in\nAlgorithm~\\ref{alg:efficientedgeselection}) takes time linear in the number of sites in\n$\\sigma_v$. Summing up over all nodes $v$ in a single level of $T$ we get that the total merging time per level is\n$O(n)$, and\n$O(n\\log \\Phi)$ for all levels.\n\nTo analyze the time taken by the edge selection steps\n(line~\\ref{line:edgeselection2} in\nAlgorithm~\\ref{alg:efficientedgeselection}),\nconsider a particular pair $(\\sigma, \\tau) \\in N$ for which\nthe algorithm runs the edge selection step.\nBy Lemma~\\ref{lem:lowerenvelope}, if we charge $m_{\\tau}$ by $O(1)$, each disk center in\n$R_{\\tau}$ by $O(\\log n)$ and each active site in $\\sigma \\cap P$ by $O(1)$ then the total charges\ncover the cost of the edge selection step for $(\\sigma, \\tau)$.\nThere are $O(n\\log \\Phi)$ nodes in  $T$ and therefore\n $O(n\\log \\Phi)$ cells $\\tau$ in ${\\operatorname{\\mathcal{Q}}}$.\nBy Lemma~\\ref{lem:volume} each such cell $\\tau$ participates\nin an edge selection step of  $O(c^2) = O(1)$ pairs. So the total charges to\nthe site $m_{\\tau}$ over all cells $\\tau$, is $O(n\\log \\Phi)$.\n\nBy construction, each $p \\in P$ is assigned to $O(1)$\nsets $R_{\\tau}$ and by Lemma~\\ref{lem:volume} each $\\tau$ participates\nin an edge selection steps of  $O(c^2) = O(1)$ pairs.\nIt follows that the total charges to a site $p$ from edge selections steps\nof pairs $(\\sigma, \\tau)$ such that $p\\in R_\\tau$ is $O(\\log n)$.\n\nFinally, each site is active for\n$O(c^2) = O(1)$ pairs in $N$ at each of  $O(\\log \\Phi)$ levels.\nSo the total charges to a site $p$ from\nedge selections steps\nof pairs $(\\sigma, \\tau)$ such that $p$ is active in $\\sigma \\cap P$ is\n$O( n \\log \\Phi)$. We conclude that the total running time of\nall edge selection steps\nis $O(n \\log n + n \\log \\Phi) = O(n \\log \\Phi)$,\nsince $\\log \\Phi = \\Omega(\\log n)$.\n\\end{proof}\n\nTheorem~\\ref{thm:2dspannerSpread} follows by combining\nLemmas~\\ref{lem:edgeapproximation} and~\\ref{lem:runningtime}.\n\n\n\\subsection{From Bounded Spread to Bounded Radius Ratio}\n\\label{sec:spannerPsi}\n\nLet $P\\subset {\\ensuremath {\\mathbb {{R}}}}^2$ be a set of sites with radius ratio $\\Psi$.\nWe extend our spanner construction\nfrom Section~\\ref{sec:spanner} such that the running time depends on $\\Psi$, the ratio between the largest\nto smallest radii, rather than\non the spread $\\Phi$.  This is\na more general result as we may assume that $\\Psi \\leq 2 \\Phi$ (see Section~\\ref{sec:prelims}).\nWe prove the following theorem.\n\\begin{theorem}\n\\label{thm:2dspanner}\n  Let $G$ be the transmission graph for a set $P$ of $n$ sites in the plane\n  with radius ratio $\\Psi$. For any fixed $t > 1$,\n  we can compute\n  a $t$-spanner for $G$ in  $O(n(\\log n + \\log \\Psi))$ time\n  and  $O(n \\log \\Psi)$ space.\n\\end{theorem}\nThe main observation which we use is that\nsites that are close together form a clique in $G$ and can be handled using\nclassic spanner constructions, while sites that are far away from each\nother belong to distinct components of $G$ and can be dealt\nwith independently.\n\nGiven $t$, we pick sufficiently large constants $k=k(t)$ and $c=c(t)$ as specified in Section~\\ref{sec:spanner}.\nWe scale the input such that the \\emph{smallest radius} is\n$c$. Let $M = c\\Psi$ be the largest radius after we did the scaling.\nFirst, we partition $P$ into sets that are far apart\nand can be handled separately.\n\n\\begin{lemma}\\label{lem:diamPartition}\n  We can\n  partition $P$ into sets $P_1, \\dots, P_\\ell$, such\n  that each set $P_i$ has diameter $O(n\\Psi)$ and\n   for any $i \\neq j$, no site of $P_i$ can\n  reach a site of $P_j$ in $G$. Computing the partition takes\n$O(n\\log n)$ time and $O(n)$ space.\n\\end{lemma}\n\n\\begin{proof}\nWe assign to each site $p \\in P$ an axis-parallel square\n$S_p$ that is centered at $p$ and has side-length $2M$.\nWe define the intersection graph $G_S$\nthat has a vertex for each site in $P$, and\n an edge between two vertices $p$ and $q$ if and\nonly if $S_p \\cap S_q \\neq \\emptyset$. ($G_S$ is undirected.)\n\nIf follows that if there\nis no (undirected) path from $p$ to $q$ in $G_S$, then there\nis no (directed) path from $p$ to $q$ in $G$.\nWe can compute the connected components of $G_S$ in $O(n \\log n)$\ntime by sweeping the plane using a binary search tree~\\cite{PreparataSh85}.\nLet $P_1, \\dots, P_\\ell$ be the vertex sets of these connected\ncomponents. By construction, each\nset of sites $P_i$ has diameter $O(nM)$ and\nfor any $i \\neq j$, no site in $P_i$ can reach a site in $P_j$\nin $G$.\n\\end{proof}\n\nBy Lemma~\\ref{lem:diamPartition},  we  may assume that the diameter of our\ninput set $P$ is $O(n\\Psi)$.\nWe compute a hierarchical decomposition\n$T$ for $P$ as in Section~\\ref{sec:spanner},\nwith a little twist as follows.\nWe\n translate $P$ so that it fits in a single grid cell $\\sigma$ of\ndiameter $O(n\\Psi)$.\nStarting from $\\sigma$, we recursively subdivide\neach non-empty cell  into\nfour congruent cells of half the\ndiameter.\nWe do not subdivide cells of level $0$ whose  diameter\nis $1$. We  partition all cells of a particular level in $O(n)$ time and\n$O(n)$ space.\n\n\nWe construct a quadforest $T$ such that the roots of its trees\ncorrespond to the non-empty cells of\n level $L = \\lceil \\log \\Psi\\rceil$ in our decomposition.\nEach internal node of $T$ corresponds to a non-empty cell obtained when subdividing the cell of its parent.\nIt suffices to store only the lowest $L$ levels,\nsince larger cells cannot contribute\nany edges to the spanner (as we will argue below). The forest  $T$ requires\n$O(n \\log \\Psi)$ space and we compute it in\n$O(n (\\log n + \\log \\Psi))$ time.\n\nWe cannot derive from $T$ a $c$-separated annulus\ndecomposition for $G$ as we did in Section~\\ref{sec:spanner}.\nIn particular a cell corresponding to a leaf of $T$ may now contain many sites\nthat are adjacent in $G$.\nFor edges induced by such pairs of sites we cannot satisfy Property (ii) of Definition~\\ref{def:decomposition}.\n\nWe can (and do) derive from $T$ a \\emph{partial $c$-separated\nannulus decomposition $({\\operatorname{\\mathcal{Q}}},N,R_\\sigma)$} exactly as described in\nSection \\ref{sec:spanner} before Lemma \\ref{lem:3.9}.\nThis decomposition satisfies Property (ii) of\nDefinition~\\ref{def:decomposition} for all edges\n$pq$ with $d(\\sigma,\\tau) \\ge (c-2)$, where $\\sigma$ and $\\tau$ are\n the level 0 cells of $T$ containing $q$ and $p$, respectively.\nThe proof that Property (ii) of Definition~\\ref{def:decomposition}\nholds for these edges is the same as the proof of Lemma\n\\ref{lem:3.9}.\n In particular,\nin the proof of Lemma \\ref{lem:3.9}, we argue that pairs of cells at level $i$\nguarantee Property (ii) of Definition~\\ref{def:decomposition} for edges of length in $[c,2c)2^i$.\nSince the edges of $G$ are of length at most\n$M = c\\Psi$,\nthe cells up to level $L = \\lceil \\log \\Psi\\rceil$ suffice to guarantee\nProperty (ii) of Definition~\\ref{def:decomposition} for all\nedges $pq$ with $d(\\sigma,\\tau) \\ge (c-2)$.\n\nWe mark all sites of $P$ as active, and we run\nAlgorithm~\\ref{alg:efficientedgeselection} of\nSection~\\ref{sec:spanner} using $T$ and the partial $c$-separated annulus\ndecomposition that we derived from it.\nThe resulting graph $H$ is not yet a $t$-spanner since\nthe decomposition  was only partial.\n\nTo make $H$ a spanner we add to it more edges that ``take care'' of the edges not\n``covered'' by the $c$-separated annulus\ndecomposition. We consider each pair of level $0$ cells $\\sigma$\nand $\\tau$ with\n$d(\\sigma, \\tau) < c-2$. The set of sites $Q=(P\\cap \\sigma) \\cup (P\\cap \\tau)$ form a clique, since the distance between\neach pair of sites in $Q$ is no larger than $c$.\nWe compute a Euclidean $t$-spanner\nfor $Q$ of size $O(|Q|)$ in $O(|Q| \\log |Q|)$ time~\\cite{NarasimhanSmid07} and\nfor each (undirected) edge $pq$ of this spanner we add $pq$ and $qp$  to $H$.\nAs each site $p \\in P$ participates in $O(c^2)$ such spanners,\nwe generate in total $O(n)$ edges in $O(n \\log n)$ time.\n\nWe now prove that $H$ is indeed a $t$-spanner. The proof is analogous to the proof\nof Lemma~\\ref{lem:edgeapproximation}.\n\n\\begin{lemma}\\label{lem:edgeapproximation_2}\nFor any $t > 1$, there are constants\n$c=c(t)$ and $k=k(t)$ such that $H$ is a $t$-spanner for the transmission graph\n$G$.\n\\end{lemma}\n\\begin{proof}\nBy construction, $H$ is a subgraph of $G$.\nLet $pq$ be an edge of $G$,\nand let $\\sigma$ and $\\tau$ be the level $0$ cells  with\n$q \\in \\sigma$ and $p \\in \\tau$.\nIf $d(\\sigma, \\tau) < c-2$,\nthen the Euclidean $t$-spanner for\n$\\sigma$ and $\\tau$ contains a path from $p$ to $q$\nof length at most $t|pq|$.\n\nFor the remaining edges, the lemma is proved by induction\non the rank of the edges when we sort them by length,  as in\nLemma~\\ref{lem:edgeapproximation}. The proof is almost\nverbatim as before; we only comment on the base case.\nLet $pq$ be the shortest edge in $G$.\nIf the endpoints $p$ and $q$ lie in\nlevel 0 cells whose distance is less than $c-2$, we have\nalready argued that $H$ contains\nan approximate path from $p$ to $q$. Otherwise, the same argument\nas in Lemma~\\ref{lem:edgeapproximation} applies, and the\nalgorithm includes $pq$ in $H$.\n\\end{proof}\n\nUsing Lemma~\\ref{lem:edgeapproximation_2},\nTheorem~\\ref{thm:2dspanner} follows just as Theorem~\\ref{thm:2dspannerSpread} in\nSection~\\ref{sec:spanner}. The analysis of the space and time\nrequired by our construction is\nexactly as in Lemma~\\ref{lem:runningtime}, but now $T$\nhas $O(\\log \\Psi)$ levels.\n\n\\subsection{Spanners for Unbounded Spread and Radius Ratio}\n\\label{sec:spannerChan}\n\nWe eliminate\nthe dependency of our bounds on the radius ratio\nat the expense of a more involved data structure and an additional\npolylogarithmic factor in the running time.\nGiven $P \\subset {\\ensuremath {\\mathbb {{R}}}}^2$ and the desired stretch factor $t > 1$, we choose\n  appropriate  parameters $c = c(t)$ and $k(t)$ as in Section \\ref{sec:spannerPsi} and\n rescale $P$ such that the distance between the closest pair of points in $P$ is\n $c + 2$.\n\nFirst, we compute a compressed quadtree $T$ for $P$.\nA \\emph{compressed quadtree} is a rooted tree in which each internal\nnode has degree $1$ or $4$. Each node $v$ is\nassociated with a cell $\\sigma_v$ of a grid ${\\operatorname{\\mathcal{Q}}}_i$.\nIf $v$ has degree $4$, then the  cells associated\nof its children partition $\\sigma_v$ into\n$4$ congruent squares of half the diameter, and\nat least two of them must be non-empty.\nIf $v$ has degree $1$, then the cell associated\nwith the only child $w$ of $v$ has diameter at most\n${\\operatorname{diam}}(v)/4$ and  $(\\sigma_v \\setminus \\sigma_w)\\cap P = \\emptyset$.\nEach internal node of $T$ contains at least two sites\nin its cell and each leaf at most one site.\nNote that, in contrast with (uncompressed)  quadtrees, the diameter of\n$\\sigma_v$ may be smaller than $2^{L-i}$, where $i$ is the the distance of $v$ to the root and\n$2^L$ is the diameter of the root.\nA compressed quadtree for $P$ with $O(n)$ nodes\ncan be computed in $O(n\\log n)$ time \\cite{HarPeled11}.\n\nTo simplify the notation in the rest of this section, we write ${\\operatorname{diam}}(v)$ instead of\n${\\operatorname{diam}}(\\sigma_v)$,  and for two nodes $v,w$, we\nwrite $d(v,w)$ for $d(\\sigma_v, \\sigma_w)$.\n\nOur approach is to use the algorithm from Section~\\ref{sec:spanner}\non the compressed quadtree $T$.\nThere are two problems with this: for one, the depth of\n$T$ may be linear, so  considering all sites for incoming\nedges at each level, as in Algorithm~\\ref{alg:efficientedgeselection} would be too expensive.\nInstead we use Chan's dynamic nearest neighbor data structure\nto quickly identify the relevant sites.\nIt has the following properties.\n\n\\begin{theorem}[Chan, Afshani and Chan, Chan and Tsakalidis~\\cite{AfshaniCh09,Chan10, ChanTsakalidis15}]\n\\label{thm:chandynamicNN}\nThere exists a dynamic data structure that maintains a planar point set $S$\nsuch that\n\\begin{enumerate}[(i)]\n\\item we can insert a point into $S$ in amortized time $O(\\log^3 n)$;\n\\item we can delete a point from $S$ in amortized time $O(\\log^6 n)$; and\n\\item given a query point $q$, we can find the nearest neighbor\n for $q$ in $S$ in worst-case time $O(\\log^2 n)$.\n\\end{enumerate}\nThe space requirement is $O(n)$.\n\\end{theorem}\n\nWe note that the history of Theorem~\\ref{thm:chandynamicNN} is \na bit comlicated: Chan's original paper~\\cite{Chan10} describes\na \\emph{randomized} data structure with $O(n \\log\\log n)$ space.\nAfshahni and Chan~\\cite{AfshaniCh09} describe a \\emph{randomized}\nthree-dimensional range reporting structure that improves the space\nto $O(n)$. Chan and Tsakalidis~\\cite{ChanTsakalidis15} show how\nto make both the dynamic nearest neighbor structure and the\nrange reporting structure deterministic, which gives the current\nform of Theorem~\\ref{thm:chandynamicNN}.\n\nThe second problem is to define an appropriate neighborhood\nrelation.\nAs in Section~\\ref{sec:spanner},\nthe neighborhood relation $N$ should consist of pairs $(\\sigma_v,\\sigma_w)$\nwhose nodes $v$ and $w$ have the same level in $T$ and\nsatisfy $d(v,w) \\in\n[c-2, 2c) {\\operatorname{diam}}(v)$.\nThe set $R_{\\sigma_v}$ should consist of all sites\nin $\\sigma_v \\cap P$ whose radius is in\n$[c-2, 2(c+1)){\\operatorname{diam}}(v)$, a slightly larger interval\nthan in the previous sections.\nTo make sure that $N$ and  $R_\\sigma$ fulfill\nDefinition~\\ref{def:decomposition}(ii),\nwe insert $O(n)$ additional nodes into $T$ so that\n${\\operatorname{\\mathcal{Q}}}$ contains the appropriate cells.\nTo find these nodes, we adapt the WSPD\nalgorithm of Callahan and Kosaraju \\cite{CallahanKo95}.\n\n\\begin{lemma}\n\\label{lem:augmentingwithwspd}\nGiven a constant $c > 5$, we can in $O(n \\log n)$ time insert $O(n)$ nodes into\n$T$ so that\n${\\operatorname{\\mathcal{Q}}} = \\{ \\sigma_v \\mid v \\in T\\}$ with $N$ and $R_{\\sigma}$ as above\nis a $c$-separated annulus decomposition for $G$. In the same time, we\ncan compute $N$ and all sets $R_{\\sigma}$.\n\\end{lemma}\n\n\\LinesNotNumbered\n\\begin{algorithm}[htbp]\n\ncall ${\\operatorname{wspd1}}(r)$ on the root of $T$\n\\newline\n\\nl ${\\operatorname{wspd1}}(v):$ \\\\\n\\nl \\If{$v$ \\textup{is a leaf}} {\n\\nl   \\Return $\\emptyset$ }\n\\nl \\Else{\n\\nl   Return the union of ${\\operatorname{wspd1}}(w)$ and ${\\operatorname{wspd2}}(\\{w_1,w_2\\})$ for all\n  children $w$ and pairs of distinct children $w_1,w_2$ of $v$\n}\n\\setcounter{AlgoLine}{0}\n\\nl ${\\operatorname{wspd2}}(\\{v,w\\}):$\n\\newline\n\\nl \\If{$d(v,w) \\geq c\\max \\{{\\operatorname{diam}}(v),{\\operatorname{diam}}(w)\\}$ } {\n\\nl   \\Return $\\{v,w\\}$\n}\n\\nl \\ElseIf{ ${\\operatorname{diam}}(v) \\leq {\\operatorname{diam}}(w)$}{\n\\nl  \\Return the union of ${\\operatorname{wspd2}}(\\{v,u\\})$ for all children\n  $u$ of $w$.\n}\n\\nl \\Else{\n\\nl\\Return the union of ${\\operatorname{wspd2}}(\\{u,w\\})$ for all children\n$u$ of $v$}\n\\caption{Computing a well-separated pair decomposition from a\ncompressed quadtree $T$}\n\\label{alg:wspd}\n\\end{algorithm}\n\n\\begin{proof}\nFirst, we run the usual algorithm for finding a $c$-well-separated\npair decomposition on $T$~\\cite{CallahanKo95};\nsee Algorithm~\\ref{alg:wspd} for pseudocode. It is well\nknown~\\cite{LofflerMu12} that the algorithm runs in $O(n)$ time and returns a\nset $W$ of $O(n)$\npairs $\\{v,w\\}$ of nodes in $T$ such that\n\\begin{enumerate}[(a)]\n\\item for each two distinct sites $p$, $q$,\n there is exactly one\n$\\{v,w\\} \\in W$ with $q \\in \\sigma_v$, $p \\in \\sigma_w$;\n\\item for each $\\{v,w\\} \\in W$, we have\n$c\\cdot \\max\\{{\\operatorname{diam}}(v), {\\operatorname{diam}}(w)\\} \\leq\nd(v, w)$;\n\\item for every call ${\\operatorname{wspd2}}(\\{v,w\\})$,\n$\\max\\{{\\operatorname{diam}}(v), {\\operatorname{diam}}(w)\\} \\leq\n\\min \\{{\\operatorname{diam}}(\\overline{v}), {\\operatorname{diam}}(\\overline{w})\\}$,\nwhere\n$\\overline{v}$, $\\overline{w}$ are the parents of $v$ and\n$w$ in $T$;\n\\end{enumerate}\n\nIn particular, note that since we scaled $P$ such that the closest\npair has distance $c +2$, (b) can be satisfied by\ncells from ${\\operatorname{\\mathcal{Q}}}_0$ or above.\nFor each pair $\\{v,w\\} \\in W$, we insert two nodes $v'$ and $w'$\ninto $T$ such that ${\\operatorname{diam}}(v') = {\\operatorname{diam}}(w')$\nand such that $d(v',w')$ is approximately $c\\cdot {\\operatorname{diam}}(v')$.\nSuppose that $\\{v,w\\}$ was generated through a call\nfrom $\\{v, \\overline{w}\\}$ in Algorithm~\\ref{alg:wspd}.\nSet $r = \\min\\{d(v,w)/c, {\\operatorname{diam}}(\\overline{w})\\}$,\nrounded down to the next power of $2$.\nFirst, observe that\n\n", "itemtype": "equation", "pos": 39137, "prevtext": "\nas required.\n\\end{proof}\n\n\n\\paragraph*{Finding the Decomposition.}\nWe use a quadtree to define the cells of the decomposition. We recall that\na \\emph{quadtree}  is a rooted tree $T$ in which each\ninternal node has degree four.\nEach node $v$ of $T$ is associated with a cell $\\sigma_v$ of some grid\n${\\operatorname{\\mathcal{Q}}}_i$, $i\\geq 0$, and if $v$ is an internal node,\nthe cells associated with its children partition $\\sigma_v$ into four\ncongruent squares, each with diameter ${\\operatorname{diam}}(\\sigma_v)/2$.\nIf $\\sigma_v$ is from ${\\operatorname{\\mathcal{Q}}}_i$ then we say that $v$ is of \\emph{level} $i$.\nNote that all nodes of $T$ at the same distance from the root are of the same\nlevel.\n\nLet $c$ be the required  parameter for the annulus decomposition.\nWe scale $P$ such that the\nclosest pair in $P$ has distance $c$. (We use $P$  to denote also the scaled point set).\nLet $L$ be the smallest integer such that we can translate $P$ so that it fits in a\n single cell $\\sigma$ of  ${\\operatorname{\\mathcal{Q}}}_L$.\nSince $c$ is constant and $P$ has spread $\\Phi$,\nthe diameter of $P$ (after scaling) is $c\\Phi$ and therefore $L = O(\\log \\Phi)$.\nWe translate $P$ so that it fits in $\\sigma$ and we\n associate the root $r$ of our quadtree $T$ with this cell $\\sigma$, i.e.\\  $\\sigma_r = \\sigma$.\nBy the definition of a level, $r$ is of level $L$.\n\nWe continue constructing $T$ top down as follows.\nWe construct level $i-1$ of $T$, given level $i$, by splitting\nthe cell $\\sigma_v$ of each node $v$, whose cell $\\sigma_v$ is not empty,\ninto four\ncongruent squares, and associate each of these squares with a child of $v$.\nWe stop the construction of $T$ after generating the cells of level $0$. The scaling which we did to\n$P$\n ensures that each cell of a  leaf node at level $0$\ncontains at most one site.\n\nWe now set ${\\operatorname{\\mathcal{Q}}} = \\{ \\sigma_v \\mid v \\in T \\}$.\nWe define $N$ as the set of all pairs\n$(\\sigma_v,\\sigma_w) \\in {\\operatorname{\\mathcal{Q}}} \\times {\\operatorname{\\mathcal{Q}}}$ such that $v$ and $w$\nare at the same level in $T$ and\n$ d(\\sigma_v,\\sigma_w) \\in [c-2,2c) {\\operatorname{diam}}(\\sigma_v)$.\\footnote{We\ndenote the interval $[a{\\operatorname{diam}}(\\sigma_v),b{\\operatorname{diam}}(\\sigma_v))$ by\n$[a,b) {\\operatorname{diam}}(\\sigma_v)$.}\nFor $\\sigma \\in {\\operatorname{\\mathcal{Q}}}$, we define $R_{\\sigma}$ to be the set of all sites  $p \\in \\sigma \\cap P$\nwith  $ r_p \\in [c,2(c+1)){\\operatorname{diam}}(\\sigma_v)$.\n\n\\begin{lemma} \\label{lem:3.9}\n$({\\operatorname{\\mathcal{Q}}}, N, R_\\sigma)$\nis a $c$-separated annulus decomposition for $G$.\n\\end{lemma}\n\\begin{proof}\nProperty (i) of\nDefinition~\\ref{def:decomposition} follows by construction.\nTo prove that Property (ii) holds consider an edge\n$pq$ of $G$.\nLet $i$ be the integer such that  $|pq| \\in [c, 2c) 2^i$.\nLet $\\sigma, \\tau$ be the cells of ${\\operatorname{\\mathcal{Q}}}_i$\nwith $p \\in \\sigma$ and $q \\in \\tau$.\nBy construction,  $\\sigma$ and $\\tau$ are assigned to nodes\nof the quadtree and thus contained in ${\\operatorname{\\mathcal{Q}}}$.\nSince ${\\operatorname{diam}}(\\sigma) = {\\operatorname{diam}}(\\tau) = 2^i$, we have\n", "index": 21, "text": "\n\\[\n  (c-2)2^i \\leq |pq| - 2 {\\operatorname{diam}}(\\sigma) \\leq d(\\sigma, \\tau) \\leq |pq| <\nc2^{i+1},\n\\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex21.m1\" class=\"ltx_Math\" alttext=\"(c-2)2^{i}\\leq|pq|-2{\\operatorname{diam}}(\\sigma)\\leq d(\\sigma,\\tau)\\leq|pq|&lt;c%&#10;2^{i+1},\" display=\"block\"><mrow><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>c</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msup><mn>2</mn><mi>i</mi></msup></mrow><mo>\u2264</mo><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo>diam</mo><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03c3</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow><mo>\u2264</mo><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03c3</mi><mo>,</mo><mi>\u03c4</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>p</mi><mo>\u2062</mo><mi>q</mi></mrow><mo stretchy=\"false\">|</mo></mrow><mo>&lt;</mo><mrow><mi>c</mi><mo>\u2062</mo><msup><mn>2</mn><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nbecause $r \\leq {\\operatorname{diam}}(\\overline{w})$ by definition and\n${\\operatorname{diam}}(\\overline{w}) \\leq {\\operatorname{diam}}(\\overline{v})$\nby (c) and\nour assumption that ${\\operatorname{wspd2}}(\\{v,\\overline{w}\\})$ was called.\nFurthermore, we have\n\n", "itemtype": "equation", "pos": 60631, "prevtext": "\nand therefore $(\\sigma,\\tau) \\in N$\nby our definition of $N$.\nSince $pq$\nis an edge of $G$, it follows that $r_p \\geq |pq| \\geq c2^i$.\nIf $r_p < (c+1)2^{i+1}$, then $p \\in R_{\\sigma}$.\nOtherwise, $r_{m_{\\sigma}} \\geq r_p \\ge (c+1)2^{i+1}$,\nand $q \\in \\tau \\subset D(m_{\\sigma})$.\n\\end{proof}\n\n\n\\paragraph*{Computing the Edges of $H$.}\nWe find edges for each cone  $C \\in {\\mathcal C}$ separately as follows.\nFor each pair of neighboring cells $\\sigma$ and $\\tau\\in N(\\sigma)$ such that $\\tau$ is contained in\n$C_{\\sigma}^2$ we find\nall incoming edges to sites in $\\sigma$ from sites in $\\tau$ simultaneously.\nTo do this efficiently, we need to sort the sites in $\\sigma$ along the\n$x$ and $y$ directions. Therefore, we process the  cells\nbottom-up along $T$ in order of increasing levels. This way we can obtain a sorted list of the sites in each\ncell $\\sigma$ by merging the sorted lists of its children.\nSee Algorithm~\\ref{alg:efficientedgeselection}.\n\n\\begin{algorithm}[htb]\n\\For{$i=0,\\dots, L$} {\n  \\ForEach{$v \\in T$ \\emph{of level} $i$}{\n    $Q \\gets $ active sites in $\\sigma_v \\cap P$\\\\ \\tcp{preproccesing}\n    Sort $Q$ in $x$ and $y$-direction by merging the sorted lists of the\n     children of $v$\n    \\label{line:preproccesing}\n    \\ForEach{$\\tau \\in N(\\sigma_v)$ \\textnormal{contained in }\n$C_{\\sigma_v}^2$}{\n      $R \\gets R_{\\tau} \\cup \\{m_\\tau\\}$\\\\\n      \\tcp{edge selection}\n      For each site $q \\in Q$, find\n      a $r \\in R$ with $q \\in D(r)$,\n      if it exists; add the edge $rq$ to $H$\n\n      \\label{line:edgeselection2}\n    }\n    Set all $q \\in Q$ for which at least one\n    incoming edge was found to \\emph{inactive}\n  }\n}\n\\caption{Selecting the edges for $H$ for a fixed cone $C$.}\n\\label{alg:efficientedgeselection}\n\\end{algorithm}\n\nNote that the edges selected by\nAlgorithm~\\ref{alg:efficientedgeselection} have the same\nproperties as the edges selected by\nAlgorithm~\\ref{alg:edgeselection}.\nThus, by Lemma~\\ref{lem:edgeapproximation}, the\nresulting graph is a $t$-spanner.\nLet $Q$ be the set of active sites in $\\sigma_v$ when processing $v$.\nLet $\\tau \\in N(\\sigma_v)$ such that $\\tau$ is contained in $C_{\\sigma_v}^2$\nand let $R = R_{\\tau} \\cup \\{m_{\\tau}\\}$. Assume  $|Q|=n$ and $|R|=m$. To find the edges from sites in $R$ to\nsites in $Q$ efficiently, we use the fact that these sets of sites are separated by a line\nparallel to\neither the $x$- or the $y$-axis.\n\nAssume without loss of generality that $\\ell$ is the $x$-axis, the sites of $R$ are above\n$\\ell$ and the sites of $Q$ are below $\\ell$, and assume that  $Q$ is sorted along $\\ell$.\nFor each site $p\\in R$ we take the part of $D(p)$ which lies below $\\ell$ and compute the union of these\n``caps''.\n This  union  is bounded from\nabove by $\\ell$ and from below by the lower envelope of the arcs of the boundaries of the caps.\nThe complexity of the boundary of this union is $O(m)$ and it can be computed in $O(m\\log m)$ time~\\cite{AgarwalSharir96}. See Figure~\\ref{fig:lowerenvelope}.\n\nOnce we have computed this union we check for each $q\\in Q$\nwhether $q$ lies inside it.\nThis can be done by checking whether the intersection, $z$, of a vertical line through $q$ with the union is above or below $q$.\nIf $q$ is above $z$ then we add the edge $rq$ to $H$ where $r$ is the site such that $z\\in {\\partial} D(r)$.\nWe perform this computation for all sites in $Q$ together by a\n simple sweep in $x$-direction\nwhile traversing in parallel the lower envelope of the caps  and the sites of $Q$.\nThis clearly takes $O(m + n)$ time.\n\n\\begin{figure}[htb]\n \\centering\n\\includegraphics[scale=0.6]{lowerenvelope}\n\\caption{The lower envelope (orange), the sites $Q$ (red) and $R$\n(blue), and the sweepline (green).}\n\\label{fig:lowerenvelope}\n\\end{figure}\n\nWe thus proved the following  lemma.\n\\begin{lemma}\n\\label{lem:lowerenvelope}\nLet $Q$, $R$, and $\\ell$ be as\nabove with $|Q|=n$ and $|R|=m$.\nSuppose that $Q$ is sorted along $\\ell$ and that\n$\\ell$ separates $Q$ and $R$.\nWe can compute in $O(m \\log m + n)$ time for each $q \\in Q$ one\ndisk from $R$ that contains it, provided that such a disk exists.\n\\end{lemma}\n\n\\paragraph*{Analysis.}\nWe prove that\nAlgorithm~\\ref{alg:efficientedgeselection}\nruns in $O(n \\log \\Phi)$ time and uses\n$O(n \\log \\Phi)$ space. The\nrunning time is dominated by the edge selection step  described in\n Lemma~\\ref{lem:lowerenvelope}.\nWe  argue that each site participates in $O(1)$ edge selection steps\nas a disk center (in $R$) and in $O(\\log \\Phi)$\nedge selection steps as a vertex looking for incoming\nedges. From these observations (and the fact that\n$\\Phi = \\Omega(n^{1/2})$) the stated time bound essentially follows.\n\\begin{lemma}\n \\label{lem:runningtime}\nWe construct the spanner $H$ of the transmission graph $G$ in\n$O(n\\log \\Phi )$ time and space.\n\\end{lemma}\n\\begin{proof}\n The quadtree $T$ can be computed in\n $O(n \\log \\Phi)$ time and space \\cite{4M}, and within this time  bound we can also compute\n$N(\\sigma_v)$, $R_{\\sigma_v}$, and $m_{\\sigma_v}$ for\neach node $v \\in T$.\n\nMerging the sorted lists of the sites in $\\sigma_w$ for each child $w$ of $v$ to\nobtain the sorted list of the sites in $\\sigma_v$ (line~\\ref{line:preproccesing} in\nAlgorithm~\\ref{alg:efficientedgeselection}) takes time linear in the number of sites in\n$\\sigma_v$. Summing up over all nodes $v$ in a single level of $T$ we get that the total merging time per level is\n$O(n)$, and\n$O(n\\log \\Phi)$ for all levels.\n\nTo analyze the time taken by the edge selection steps\n(line~\\ref{line:edgeselection2} in\nAlgorithm~\\ref{alg:efficientedgeselection}),\nconsider a particular pair $(\\sigma, \\tau) \\in N$ for which\nthe algorithm runs the edge selection step.\nBy Lemma~\\ref{lem:lowerenvelope}, if we charge $m_{\\tau}$ by $O(1)$, each disk center in\n$R_{\\tau}$ by $O(\\log n)$ and each active site in $\\sigma \\cap P$ by $O(1)$ then the total charges\ncover the cost of the edge selection step for $(\\sigma, \\tau)$.\nThere are $O(n\\log \\Phi)$ nodes in  $T$ and therefore\n $O(n\\log \\Phi)$ cells $\\tau$ in ${\\operatorname{\\mathcal{Q}}}$.\nBy Lemma~\\ref{lem:volume} each such cell $\\tau$ participates\nin an edge selection step of  $O(c^2) = O(1)$ pairs. So the total charges to\nthe site $m_{\\tau}$ over all cells $\\tau$, is $O(n\\log \\Phi)$.\n\nBy construction, each $p \\in P$ is assigned to $O(1)$\nsets $R_{\\tau}$ and by Lemma~\\ref{lem:volume} each $\\tau$ participates\nin an edge selection steps of  $O(c^2) = O(1)$ pairs.\nIt follows that the total charges to a site $p$ from edge selections steps\nof pairs $(\\sigma, \\tau)$ such that $p\\in R_\\tau$ is $O(\\log n)$.\n\nFinally, each site is active for\n$O(c^2) = O(1)$ pairs in $N$ at each of  $O(\\log \\Phi)$ levels.\nSo the total charges to a site $p$ from\nedge selections steps\nof pairs $(\\sigma, \\tau)$ such that $p$ is active in $\\sigma \\cap P$ is\n$O( n \\log \\Phi)$. We conclude that the total running time of\nall edge selection steps\nis $O(n \\log n + n \\log \\Phi) = O(n \\log \\Phi)$,\nsince $\\log \\Phi = \\Omega(\\log n)$.\n\\end{proof}\n\nTheorem~\\ref{thm:2dspannerSpread} follows by combining\nLemmas~\\ref{lem:edgeapproximation} and~\\ref{lem:runningtime}.\n\n\n\\subsection{From Bounded Spread to Bounded Radius Ratio}\n\\label{sec:spannerPsi}\n\nLet $P\\subset {\\ensuremath {\\mathbb {{R}}}}^2$ be a set of sites with radius ratio $\\Psi$.\nWe extend our spanner construction\nfrom Section~\\ref{sec:spanner} such that the running time depends on $\\Psi$, the ratio between the largest\nto smallest radii, rather than\non the spread $\\Phi$.  This is\na more general result as we may assume that $\\Psi \\leq 2 \\Phi$ (see Section~\\ref{sec:prelims}).\nWe prove the following theorem.\n\\begin{theorem}\n\\label{thm:2dspanner}\n  Let $G$ be the transmission graph for a set $P$ of $n$ sites in the plane\n  with radius ratio $\\Psi$. For any fixed $t > 1$,\n  we can compute\n  a $t$-spanner for $G$ in  $O(n(\\log n + \\log \\Psi))$ time\n  and  $O(n \\log \\Psi)$ space.\n\\end{theorem}\nThe main observation which we use is that\nsites that are close together form a clique in $G$ and can be handled using\nclassic spanner constructions, while sites that are far away from each\nother belong to distinct components of $G$ and can be dealt\nwith independently.\n\nGiven $t$, we pick sufficiently large constants $k=k(t)$ and $c=c(t)$ as specified in Section~\\ref{sec:spanner}.\nWe scale the input such that the \\emph{smallest radius} is\n$c$. Let $M = c\\Psi$ be the largest radius after we did the scaling.\nFirst, we partition $P$ into sets that are far apart\nand can be handled separately.\n\n\\begin{lemma}\\label{lem:diamPartition}\n  We can\n  partition $P$ into sets $P_1, \\dots, P_\\ell$, such\n  that each set $P_i$ has diameter $O(n\\Psi)$ and\n   for any $i \\neq j$, no site of $P_i$ can\n  reach a site of $P_j$ in $G$. Computing the partition takes\n$O(n\\log n)$ time and $O(n)$ space.\n\\end{lemma}\n\n\\begin{proof}\nWe assign to each site $p \\in P$ an axis-parallel square\n$S_p$ that is centered at $p$ and has side-length $2M$.\nWe define the intersection graph $G_S$\nthat has a vertex for each site in $P$, and\n an edge between two vertices $p$ and $q$ if and\nonly if $S_p \\cap S_q \\neq \\emptyset$. ($G_S$ is undirected.)\n\nIf follows that if there\nis no (undirected) path from $p$ to $q$ in $G_S$, then there\nis no (directed) path from $p$ to $q$ in $G$.\nWe can compute the connected components of $G_S$ in $O(n \\log n)$\ntime by sweeping the plane using a binary search tree~\\cite{PreparataSh85}.\nLet $P_1, \\dots, P_\\ell$ be the vertex sets of these connected\ncomponents. By construction, each\nset of sites $P_i$ has diameter $O(nM)$ and\nfor any $i \\neq j$, no site in $P_i$ can reach a site in $P_j$\nin $G$.\n\\end{proof}\n\nBy Lemma~\\ref{lem:diamPartition},  we  may assume that the diameter of our\ninput set $P$ is $O(n\\Psi)$.\nWe compute a hierarchical decomposition\n$T$ for $P$ as in Section~\\ref{sec:spanner},\nwith a little twist as follows.\nWe\n translate $P$ so that it fits in a single grid cell $\\sigma$ of\ndiameter $O(n\\Psi)$.\nStarting from $\\sigma$, we recursively subdivide\neach non-empty cell  into\nfour congruent cells of half the\ndiameter.\nWe do not subdivide cells of level $0$ whose  diameter\nis $1$. We  partition all cells of a particular level in $O(n)$ time and\n$O(n)$ space.\n\n\nWe construct a quadforest $T$ such that the roots of its trees\ncorrespond to the non-empty cells of\n level $L = \\lceil \\log \\Psi\\rceil$ in our decomposition.\nEach internal node of $T$ corresponds to a non-empty cell obtained when subdividing the cell of its parent.\nIt suffices to store only the lowest $L$ levels,\nsince larger cells cannot contribute\nany edges to the spanner (as we will argue below). The forest  $T$ requires\n$O(n \\log \\Psi)$ space and we compute it in\n$O(n (\\log n + \\log \\Psi))$ time.\n\nWe cannot derive from $T$ a $c$-separated annulus\ndecomposition for $G$ as we did in Section~\\ref{sec:spanner}.\nIn particular a cell corresponding to a leaf of $T$ may now contain many sites\nthat are adjacent in $G$.\nFor edges induced by such pairs of sites we cannot satisfy Property (ii) of Definition~\\ref{def:decomposition}.\n\nWe can (and do) derive from $T$ a \\emph{partial $c$-separated\nannulus decomposition $({\\operatorname{\\mathcal{Q}}},N,R_\\sigma)$} exactly as described in\nSection \\ref{sec:spanner} before Lemma \\ref{lem:3.9}.\nThis decomposition satisfies Property (ii) of\nDefinition~\\ref{def:decomposition} for all edges\n$pq$ with $d(\\sigma,\\tau) \\ge (c-2)$, where $\\sigma$ and $\\tau$ are\n the level 0 cells of $T$ containing $q$ and $p$, respectively.\nThe proof that Property (ii) of Definition~\\ref{def:decomposition}\nholds for these edges is the same as the proof of Lemma\n\\ref{lem:3.9}.\n In particular,\nin the proof of Lemma \\ref{lem:3.9}, we argue that pairs of cells at level $i$\nguarantee Property (ii) of Definition~\\ref{def:decomposition} for edges of length in $[c,2c)2^i$.\nSince the edges of $G$ are of length at most\n$M = c\\Psi$,\nthe cells up to level $L = \\lceil \\log \\Psi\\rceil$ suffice to guarantee\nProperty (ii) of Definition~\\ref{def:decomposition} for all\nedges $pq$ with $d(\\sigma,\\tau) \\ge (c-2)$.\n\nWe mark all sites of $P$ as active, and we run\nAlgorithm~\\ref{alg:efficientedgeselection} of\nSection~\\ref{sec:spanner} using $T$ and the partial $c$-separated annulus\ndecomposition that we derived from it.\nThe resulting graph $H$ is not yet a $t$-spanner since\nthe decomposition  was only partial.\n\nTo make $H$ a spanner we add to it more edges that ``take care'' of the edges not\n``covered'' by the $c$-separated annulus\ndecomposition. We consider each pair of level $0$ cells $\\sigma$\nand $\\tau$ with\n$d(\\sigma, \\tau) < c-2$. The set of sites $Q=(P\\cap \\sigma) \\cup (P\\cap \\tau)$ form a clique, since the distance between\neach pair of sites in $Q$ is no larger than $c$.\nWe compute a Euclidean $t$-spanner\nfor $Q$ of size $O(|Q|)$ in $O(|Q| \\log |Q|)$ time~\\cite{NarasimhanSmid07} and\nfor each (undirected) edge $pq$ of this spanner we add $pq$ and $qp$  to $H$.\nAs each site $p \\in P$ participates in $O(c^2)$ such spanners,\nwe generate in total $O(n)$ edges in $O(n \\log n)$ time.\n\nWe now prove that $H$ is indeed a $t$-spanner. The proof is analogous to the proof\nof Lemma~\\ref{lem:edgeapproximation}.\n\n\\begin{lemma}\\label{lem:edgeapproximation_2}\nFor any $t > 1$, there are constants\n$c=c(t)$ and $k=k(t)$ such that $H$ is a $t$-spanner for the transmission graph\n$G$.\n\\end{lemma}\n\\begin{proof}\nBy construction, $H$ is a subgraph of $G$.\nLet $pq$ be an edge of $G$,\nand let $\\sigma$ and $\\tau$ be the level $0$ cells  with\n$q \\in \\sigma$ and $p \\in \\tau$.\nIf $d(\\sigma, \\tau) < c-2$,\nthen the Euclidean $t$-spanner for\n$\\sigma$ and $\\tau$ contains a path from $p$ to $q$\nof length at most $t|pq|$.\n\nFor the remaining edges, the lemma is proved by induction\non the rank of the edges when we sort them by length,  as in\nLemma~\\ref{lem:edgeapproximation}. The proof is almost\nverbatim as before; we only comment on the base case.\nLet $pq$ be the shortest edge in $G$.\nIf the endpoints $p$ and $q$ lie in\nlevel 0 cells whose distance is less than $c-2$, we have\nalready argued that $H$ contains\nan approximate path from $p$ to $q$. Otherwise, the same argument\nas in Lemma~\\ref{lem:edgeapproximation} applies, and the\nalgorithm includes $pq$ in $H$.\n\\end{proof}\n\nUsing Lemma~\\ref{lem:edgeapproximation_2},\nTheorem~\\ref{thm:2dspanner} follows just as Theorem~\\ref{thm:2dspannerSpread} in\nSection~\\ref{sec:spanner}. The analysis of the space and time\nrequired by our construction is\nexactly as in Lemma~\\ref{lem:runningtime}, but now $T$\nhas $O(\\log \\Psi)$ levels.\n\n\\subsection{Spanners for Unbounded Spread and Radius Ratio}\n\\label{sec:spannerChan}\n\nWe eliminate\nthe dependency of our bounds on the radius ratio\nat the expense of a more involved data structure and an additional\npolylogarithmic factor in the running time.\nGiven $P \\subset {\\ensuremath {\\mathbb {{R}}}}^2$ and the desired stretch factor $t > 1$, we choose\n  appropriate  parameters $c = c(t)$ and $k(t)$ as in Section \\ref{sec:spannerPsi} and\n rescale $P$ such that the distance between the closest pair of points in $P$ is\n $c + 2$.\n\nFirst, we compute a compressed quadtree $T$ for $P$.\nA \\emph{compressed quadtree} is a rooted tree in which each internal\nnode has degree $1$ or $4$. Each node $v$ is\nassociated with a cell $\\sigma_v$ of a grid ${\\operatorname{\\mathcal{Q}}}_i$.\nIf $v$ has degree $4$, then the  cells associated\nof its children partition $\\sigma_v$ into\n$4$ congruent squares of half the diameter, and\nat least two of them must be non-empty.\nIf $v$ has degree $1$, then the cell associated\nwith the only child $w$ of $v$ has diameter at most\n${\\operatorname{diam}}(v)/4$ and  $(\\sigma_v \\setminus \\sigma_w)\\cap P = \\emptyset$.\nEach internal node of $T$ contains at least two sites\nin its cell and each leaf at most one site.\nNote that, in contrast with (uncompressed)  quadtrees, the diameter of\n$\\sigma_v$ may be smaller than $2^{L-i}$, where $i$ is the the distance of $v$ to the root and\n$2^L$ is the diameter of the root.\nA compressed quadtree for $P$ with $O(n)$ nodes\ncan be computed in $O(n\\log n)$ time \\cite{HarPeled11}.\n\nTo simplify the notation in the rest of this section, we write ${\\operatorname{diam}}(v)$ instead of\n${\\operatorname{diam}}(\\sigma_v)$,  and for two nodes $v,w$, we\nwrite $d(v,w)$ for $d(\\sigma_v, \\sigma_w)$.\n\nOur approach is to use the algorithm from Section~\\ref{sec:spanner}\non the compressed quadtree $T$.\nThere are two problems with this: for one, the depth of\n$T$ may be linear, so  considering all sites for incoming\nedges at each level, as in Algorithm~\\ref{alg:efficientedgeselection} would be too expensive.\nInstead we use Chan's dynamic nearest neighbor data structure\nto quickly identify the relevant sites.\nIt has the following properties.\n\n\\begin{theorem}[Chan, Afshani and Chan, Chan and Tsakalidis~\\cite{AfshaniCh09,Chan10, ChanTsakalidis15}]\n\\label{thm:chandynamicNN}\nThere exists a dynamic data structure that maintains a planar point set $S$\nsuch that\n\\begin{enumerate}[(i)]\n\\item we can insert a point into $S$ in amortized time $O(\\log^3 n)$;\n\\item we can delete a point from $S$ in amortized time $O(\\log^6 n)$; and\n\\item given a query point $q$, we can find the nearest neighbor\n for $q$ in $S$ in worst-case time $O(\\log^2 n)$.\n\\end{enumerate}\nThe space requirement is $O(n)$.\n\\end{theorem}\n\nWe note that the history of Theorem~\\ref{thm:chandynamicNN} is \na bit comlicated: Chan's original paper~\\cite{Chan10} describes\na \\emph{randomized} data structure with $O(n \\log\\log n)$ space.\nAfshahni and Chan~\\cite{AfshaniCh09} describe a \\emph{randomized}\nthree-dimensional range reporting structure that improves the space\nto $O(n)$. Chan and Tsakalidis~\\cite{ChanTsakalidis15} show how\nto make both the dynamic nearest neighbor structure and the\nrange reporting structure deterministic, which gives the current\nform of Theorem~\\ref{thm:chandynamicNN}.\n\nThe second problem is to define an appropriate neighborhood\nrelation.\nAs in Section~\\ref{sec:spanner},\nthe neighborhood relation $N$ should consist of pairs $(\\sigma_v,\\sigma_w)$\nwhose nodes $v$ and $w$ have the same level in $T$ and\nsatisfy $d(v,w) \\in\n[c-2, 2c) {\\operatorname{diam}}(v)$.\nThe set $R_{\\sigma_v}$ should consist of all sites\nin $\\sigma_v \\cap P$ whose radius is in\n$[c-2, 2(c+1)){\\operatorname{diam}}(v)$, a slightly larger interval\nthan in the previous sections.\nTo make sure that $N$ and  $R_\\sigma$ fulfill\nDefinition~\\ref{def:decomposition}(ii),\nwe insert $O(n)$ additional nodes into $T$ so that\n${\\operatorname{\\mathcal{Q}}}$ contains the appropriate cells.\nTo find these nodes, we adapt the WSPD\nalgorithm of Callahan and Kosaraju \\cite{CallahanKo95}.\n\n\\begin{lemma}\n\\label{lem:augmentingwithwspd}\nGiven a constant $c > 5$, we can in $O(n \\log n)$ time insert $O(n)$ nodes into\n$T$ so that\n${\\operatorname{\\mathcal{Q}}} = \\{ \\sigma_v \\mid v \\in T\\}$ with $N$ and $R_{\\sigma}$ as above\nis a $c$-separated annulus decomposition for $G$. In the same time, we\ncan compute $N$ and all sets $R_{\\sigma}$.\n\\end{lemma}\n\n\\LinesNotNumbered\n\\begin{algorithm}[htbp]\n\ncall ${\\operatorname{wspd1}}(r)$ on the root of $T$\n\\newline\n\\nl ${\\operatorname{wspd1}}(v):$ \\\\\n\\nl \\If{$v$ \\textup{is a leaf}} {\n\\nl   \\Return $\\emptyset$ }\n\\nl \\Else{\n\\nl   Return the union of ${\\operatorname{wspd1}}(w)$ and ${\\operatorname{wspd2}}(\\{w_1,w_2\\})$ for all\n  children $w$ and pairs of distinct children $w_1,w_2$ of $v$\n}\n\\setcounter{AlgoLine}{0}\n\\nl ${\\operatorname{wspd2}}(\\{v,w\\}):$\n\\newline\n\\nl \\If{$d(v,w) \\geq c\\max \\{{\\operatorname{diam}}(v),{\\operatorname{diam}}(w)\\}$ } {\n\\nl   \\Return $\\{v,w\\}$\n}\n\\nl \\ElseIf{ ${\\operatorname{diam}}(v) \\leq {\\operatorname{diam}}(w)$}{\n\\nl  \\Return the union of ${\\operatorname{wspd2}}(\\{v,u\\})$ for all children\n  $u$ of $w$.\n}\n\\nl \\Else{\n\\nl\\Return the union of ${\\operatorname{wspd2}}(\\{u,w\\})$ for all children\n$u$ of $v$}\n\\caption{Computing a well-separated pair decomposition from a\ncompressed quadtree $T$}\n\\label{alg:wspd}\n\\end{algorithm}\n\n\\begin{proof}\nFirst, we run the usual algorithm for finding a $c$-well-separated\npair decomposition on $T$~\\cite{CallahanKo95};\nsee Algorithm~\\ref{alg:wspd} for pseudocode. It is well\nknown~\\cite{LofflerMu12} that the algorithm runs in $O(n)$ time and returns a\nset $W$ of $O(n)$\npairs $\\{v,w\\}$ of nodes in $T$ such that\n\\begin{enumerate}[(a)]\n\\item for each two distinct sites $p$, $q$,\n there is exactly one\n$\\{v,w\\} \\in W$ with $q \\in \\sigma_v$, $p \\in \\sigma_w$;\n\\item for each $\\{v,w\\} \\in W$, we have\n$c\\cdot \\max\\{{\\operatorname{diam}}(v), {\\operatorname{diam}}(w)\\} \\leq\nd(v, w)$;\n\\item for every call ${\\operatorname{wspd2}}(\\{v,w\\})$,\n$\\max\\{{\\operatorname{diam}}(v), {\\operatorname{diam}}(w)\\} \\leq\n\\min \\{{\\operatorname{diam}}(\\overline{v}), {\\operatorname{diam}}(\\overline{w})\\}$,\nwhere\n$\\overline{v}$, $\\overline{w}$ are the parents of $v$ and\n$w$ in $T$;\n\\end{enumerate}\n\nIn particular, note that since we scaled $P$ such that the closest\npair has distance $c +2$, (b) can be satisfied by\ncells from ${\\operatorname{\\mathcal{Q}}}_0$ or above.\nFor each pair $\\{v,w\\} \\in W$, we insert two nodes $v'$ and $w'$\ninto $T$ such that ${\\operatorname{diam}}(v') = {\\operatorname{diam}}(w')$\nand such that $d(v',w')$ is approximately $c\\cdot {\\operatorname{diam}}(v')$.\nSuppose that $\\{v,w\\}$ was generated through a call\nfrom $\\{v, \\overline{w}\\}$ in Algorithm~\\ref{alg:wspd}.\nSet $r = \\min\\{d(v,w)/c, {\\operatorname{diam}}(\\overline{w})\\}$,\nrounded down to the next power of $2$.\nFirst, observe that\n\n", "index": 23, "text": "\\begin{equation}\\label{equ:r_ub}\n  r \\leq {\\operatorname{diam}}(\\overline{w}) \\leq {\\operatorname{diam}}(\\overline{v}),\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m1\" class=\"ltx_Math\" alttext=\"r\\leq{\\operatorname{diam}}(\\overline{w})\\leq{\\operatorname{diam}}(\\overline{v}),\" display=\"block\"><mrow><mrow><mi>r</mi><mo>\u2264</mo><mrow><mo>diam</mo><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>w</mi><mo>\u00af</mo></mover><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mo>diam</mo><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>v</mi><mo>\u00af</mo></mover><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nbecause ${\\operatorname{diam}}(v)$, ${\\operatorname{diam}}(w)$ are powers of two, so that\nif $r$ comes from ${\\operatorname{diam}}(\\overline{w})$,\n(\\ref{equ:r_lb}) holds by (c) and if $r$ comes from $d(v, w)/c$,\n(\\ref{equ:r_lb}) holds by (b).\nBy (\\ref{equ:r_ub}), (\\ref{equ:r_lb}), we can insert nodes $v', w'$ into $T$\nbetween $v$ and $\\overline{v}$ and between $w$ and $\\overline{w}$\nsuch that ${\\operatorname{diam}}(v') = {\\operatorname{diam}}(w') = r$ and such\nthat\n$\\sigma_v \\subseteq \\sigma_{v'} \\subseteq \\sigma_{\\overline{v}}$\nand\n$\\sigma_w \\subseteq \\sigma_{w'} \\subseteq \\sigma_{\\overline{w}}$.\nThe case that $\\{v, w\\}$ was generated through a call from\n$\\{\\overline{v}, w\\}$ is similar.\n\nTo insert all the new nodes into $T$ efficiently, we consider\neach parent-child pair $\\overline{v},v$ in $T$ and collect\nthe new nodes that were created between $\\overline{v}$ and $v$.\nWe insert them into $T$ between $\\overline{v}$ and $v$\nby decreasing diameter.\nIf the same cell appears several times, we merge the corresponding\nnodes. This takes $O(n \\log n )$ time.\nTo find the sets $R_{\\sigma}$, we consider each site $p \\in P$ and\n we identify\nthe nodes $v$ in $T$ with $p \\in R_{\\sigma_v}$\nin $O(\\log n)$ time: there are at most two integers $i$ with\n$r_p \\in [c-2, 2(c+1))2^i$ (if $c > 5$). For each such $i$, we find the\ncell $\\sigma \\in {\\operatorname{\\mathcal{Q}}}_i$ containing $p$. This takes $O(1)$ time. Next,\nwe determine whether $\\sigma$ appears in $T$. This needs $O(\\log n)$\ntime with an appropriate data structure.\nThus, the total time to find all sets $R_{\\sigma}$ is $O(n \\log n)$.\nIn the same way we can compute $N$ in time $O(n \\log n)$.\n\nWe now argue that this construction yields a $c$-separated annulus\ndecomposition for $P$.\nDefinition~\\ref{def:decomposition}(i) holds by construction.\nFor \\ref{def:decomposition}(ii), fix an edge $pq$ in $G$.\nSince $W$ is a $c$-WSPD, by (a) there\nis a pair $\\{v, w\\} \\in W$ with $q \\in \\sigma_v$ and $p \\in \\sigma_w$.\nSuppose that $\\{v, w\\}$ was generated by a call from\n$\\{v, \\overline{w}\\}$.\nThus, we have inserted nodes $v'$ and $w'$ into $T$ with\n$\\sigma_v \\subseteq \\sigma_{v'} \\subseteq \\sigma_{\\overline{v}}$,\n$\\sigma_w \\subseteq \\sigma_{w'} \\subseteq \\sigma_{\\overline{w}}$,\nand with ${\\operatorname{diam}}(v') = {\\operatorname{diam}}(w') = r$.\nHence, $q \\in \\sigma_{v'}$ and $p \\in \\sigma_{w'}$.\nWe claim that $(\\sigma_{v'},\\sigma_{w'}) \\in N$:\nfirst observe that\n\n", "itemtype": "equation", "pos": 61025, "prevtext": "\nbecause $r \\leq {\\operatorname{diam}}(\\overline{w})$ by definition and\n${\\operatorname{diam}}(\\overline{w}) \\leq {\\operatorname{diam}}(\\overline{v})$\nby (c) and\nour assumption that ${\\operatorname{wspd2}}(\\{v,\\overline{w}\\})$ was called.\nFurthermore, we have\n\n", "index": 25, "text": "\\begin{equation}\\label{equ:r_lb}\n  r \\geq \\max\\{{\\operatorname{diam}}(v), {\\operatorname{diam}}(w)\\},\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E2.m1\" class=\"ltx_Math\" alttext=\"r\\geq\\max\\{{\\operatorname{diam}}(v),{\\operatorname{diam}}(w)\\},\" display=\"block\"><mrow><mrow><mi>r</mi><mo>\u2265</mo><mrow><mi>max</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">{</mo><mrow><mo>diam</mo><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>,</mo><mrow><mo>diam</mo><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">}</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nsince $r \\leq d(v, w)/c$ by definition.\nSecond, if $r$ comes from $d(v,w)/c$,\nwe have $d(v,w)/2c < r \\leq d(v,w)/c$,\nso\n\n", "itemtype": "equation", "pos": 63577, "prevtext": "\nbecause ${\\operatorname{diam}}(v)$, ${\\operatorname{diam}}(w)$ are powers of two, so that\nif $r$ comes from ${\\operatorname{diam}}(\\overline{w})$,\n(\\ref{equ:r_lb}) holds by (c) and if $r$ comes from $d(v, w)/c$,\n(\\ref{equ:r_lb}) holds by (b).\nBy (\\ref{equ:r_ub}), (\\ref{equ:r_lb}), we can insert nodes $v', w'$ into $T$\nbetween $v$ and $\\overline{v}$ and between $w$ and $\\overline{w}$\nsuch that ${\\operatorname{diam}}(v') = {\\operatorname{diam}}(w') = r$ and such\nthat\n$\\sigma_v \\subseteq \\sigma_{v'} \\subseteq \\sigma_{\\overline{v}}$\nand\n$\\sigma_w \\subseteq \\sigma_{w'} \\subseteq \\sigma_{\\overline{w}}$.\nThe case that $\\{v, w\\}$ was generated through a call from\n$\\{\\overline{v}, w\\}$ is similar.\n\nTo insert all the new nodes into $T$ efficiently, we consider\neach parent-child pair $\\overline{v},v$ in $T$ and collect\nthe new nodes that were created between $\\overline{v}$ and $v$.\nWe insert them into $T$ between $\\overline{v}$ and $v$\nby decreasing diameter.\nIf the same cell appears several times, we merge the corresponding\nnodes. This takes $O(n \\log n )$ time.\nTo find the sets $R_{\\sigma}$, we consider each site $p \\in P$ and\n we identify\nthe nodes $v$ in $T$ with $p \\in R_{\\sigma_v}$\nin $O(\\log n)$ time: there are at most two integers $i$ with\n$r_p \\in [c-2, 2(c+1))2^i$ (if $c > 5$). For each such $i$, we find the\ncell $\\sigma \\in {\\operatorname{\\mathcal{Q}}}_i$ containing $p$. This takes $O(1)$ time. Next,\nwe determine whether $\\sigma$ appears in $T$. This needs $O(\\log n)$\ntime with an appropriate data structure.\nThus, the total time to find all sets $R_{\\sigma}$ is $O(n \\log n)$.\nIn the same way we can compute $N$ in time $O(n \\log n)$.\n\nWe now argue that this construction yields a $c$-separated annulus\ndecomposition for $P$.\nDefinition~\\ref{def:decomposition}(i) holds by construction.\nFor \\ref{def:decomposition}(ii), fix an edge $pq$ in $G$.\nSince $W$ is a $c$-WSPD, by (a) there\nis a pair $\\{v, w\\} \\in W$ with $q \\in \\sigma_v$ and $p \\in \\sigma_w$.\nSuppose that $\\{v, w\\}$ was generated by a call from\n$\\{v, \\overline{w}\\}$.\nThus, we have inserted nodes $v'$ and $w'$ into $T$ with\n$\\sigma_v \\subseteq \\sigma_{v'} \\subseteq \\sigma_{\\overline{v}}$,\n$\\sigma_w \\subseteq \\sigma_{w'} \\subseteq \\sigma_{\\overline{w}}$,\nand with ${\\operatorname{diam}}(v') = {\\operatorname{diam}}(w') = r$.\nHence, $q \\in \\sigma_{v'}$ and $p \\in \\sigma_{w'}$.\nWe claim that $(\\sigma_{v'},\\sigma_{w'}) \\in N$:\nfirst observe that\n\n", "index": 27, "text": "\\begin{equation}\\label{equ:dvw_lb}\n  d(v', w') \\geq d(v, w) - 2r \\geq cr - 2r = (c-2){\\operatorname{diam}}(v'),\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E3.m1\" class=\"ltx_Math\" alttext=\"d(v^{\\prime},w^{\\prime})\\geq d(v,w)-2r\\geq cr-2r=(c-2){\\operatorname{diam}}(v^%&#10;{\\prime}),\" display=\"block\"><mrow><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msup><mi>v</mi><mo>\u2032</mo></msup><mo>,</mo><msup><mi>w</mi><mo>\u2032</mo></msup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2265</mo><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo>,</mo><mi>w</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mrow><mn>2</mn><mo>\u2062</mo><mi>r</mi></mrow></mrow><mo>\u2265</mo><mrow><mrow><mi>c</mi><mo>\u2062</mo><mi>r</mi></mrow><mo>-</mo><mrow><mn>2</mn><mo>\u2062</mo><mi>r</mi></mrow></mrow><mo>=</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>c</mi><mo>-</mo><mn>2</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo>diam</mo><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><msup><mi>v</mi><mo>\u2032</mo></msup><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nIf $r = {\\operatorname{diam}}(\\overline{w})$, then\n\n", "itemtype": "equation", "pos": 63824, "prevtext": "\nsince $r \\leq d(v, w)/c$ by definition.\nSecond, if $r$ comes from $d(v,w)/c$,\nwe have $d(v,w)/2c < r \\leq d(v,w)/c$,\nso\n\n", "index": 29, "text": "\\begin{equation}\\label{equ:dvw_ub1}\n  d(v',w') \\leq d(v, w) \\leq 2c r.\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E4.m1\" class=\"ltx_Math\" alttext=\"d(v^{\\prime},w^{\\prime})\\leq d(v,w)\\leq 2cr.\" display=\"block\"><mrow><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msup><mi>v</mi><mo>\u2032</mo></msup><mo>,</mo><msup><mi>w</mi><mo>\u2032</mo></msup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo>,</mo><mi>w</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mn>2</mn><mo>\u2062</mo><mi>c</mi><mo>\u2062</mo><mi>r</mi></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.07798.tex", "nexttext": "\nbecause $\\{v, w\\}$ was generated through a call from\n$\\{v, \\overline{w}\\}$, so $\\{v, \\overline{w}\\}$ is not\nwell-separated, and because ${\\operatorname{diam}}(v)\n\\leq {\\operatorname{diam}}(\\overline{w})$ by (c).\nBy (\\ref{equ:dvw_lb}),(\\ref{equ:dvw_ub1}) and (\\ref{equ:dvw_ub2}),\nwe get $(\\sigma_{v'},\\sigma_{w'}) \\in N$.\nFinally, since $pq$ is an edge of $G$,\nwe have $r_p \\geq d(v',w') \\geq (c-2){\\operatorname{diam}}(w')$, by~(\\ref{equ:dvw_lb}).\nIf $r_p < (c+1){\\operatorname{diam}}(w')$, then $p \\in R_{\\sigma_{w'}}$.\nOtherwise let $m$ be the site in $\\sigma_{w'} \\cap P$ with the largest radius.\nThen, $r_m \\geq r_p \\geq (c+1){\\operatorname{diam}}(w')$, so $D(m)$ contains\n$\\sigma_{v'}$ and thus $q$. This establishes\nDefinition~\\ref{def:decomposition}(ii).\n\\end{proof}\n\n\n\\subparagraph*{Finding the Edges.}\nTo construct the spanner $H \\subseteq G$ for a\nstretch factor $t > 1$,\nwe choose appropriate constants $k = k(t)$ and\n$c = c(t)$.\nThe algorithm proceeds as follows: we scale $P$ such\nthat the closest pair has distance $c$, and we compute a compressed\nquadtree $T$ for $P$. To obtain a\n$c$-separated annulus decomposition\n$({\\operatorname{\\mathcal{Q}}}, N, R_{\\sigma})$ for $G$,\nwe augment $T$ with $O(n)$ nodes as in Lemma~\\ref{lem:augmentingwithwspd}.\nFor each leaf $v$ of $T$ with $\\sigma_v$ non-empty,\nwe create a dynamic nearest neighbor (NN)\ndata structure $S_v$ as in Theorem~\\ref{thm:chandynamicNN}.\nWe sort the cells of $T$ by increasing diameter.\nA site $p$ is called \\emph{active} if $p \\in S_v$\nfor some node $v$ in $T$.\nInitially, all sites of $P$ are active.\nFix a cone $C \\in {\\mathcal C}$.\nTo select the spanner edges for $C$,\nwe consider the nodes of $T$ in increasing order\nand perform two steps for each node $v$, similar to\nAlgorithm~\\ref{alg:efficientedgeselection} of\nSection~\\ref{sec:spanner}:\nlet $w$ be the child of $v$ such that $|S_w|$ is largest.\nTo get $S_v$,\nwe insert all active sites of the\nremaining children into $S_w$ (preproccesing).\nThen we use $S_v$ to do the edge selection for all $\\tau \\in N(\\sigma_v)$\ncontained in $C_{\\sigma_v}^2$; see\nAlgorithm~\\ref{alg:NNedgeselection}. We take a site\n$r \\in R = R_{\\tau} \\cup \\{m_{\\tau}\\}$ and repeatedly query $S_v$.\nLet $q$ be the result. If $rq$ constitutes an\nedge in $G$, we add $rq$ to $H$, delete\n$q$, and do another query with $r$.\nOtherwise, we continue with the next site of $R$,\nuntil all of $r$ is processed\n\n\\LinesNumbered\n\\begin{algorithm}[htb]\n\\tcp{preproccesing}\n\\label{line:NNpreproccesing}\n Let $w$ be the child of $v$ whose $S_w$\ncontains the most sites\\\\\nInsert all active sites of each child $w' \\neq w$ of $v$ into $S_w$\\\\\nSet $S_v \\gets S_w$\\\\\n\\ForEach{$\\tau \\in N(\\sigma_v)$ \\textnormal{contained in } $C_{\\sigma_v}^2$}{\n  \\ForEach{$r \\in R =  R_{\\tau} \\cup \\{m_{\\tau}\\}$}{\n    \\tcp{edge selection}\n    $q \\gets {\\operatorname{NN}}(v,r)$  \\tcp{query $S_v$ with $r$}\n    \\label{line:firstNNquery}\n    \\While{$q \\in D(r)$ \\textnormal{and} $q \\neq \\emptyset$}{\n    \\label{line:NNwhile}\n      add the edge $rq$ to $H$; delete $q$ from $S_v$; $q \\gets {\\operatorname{NN}}(v,r)$\n    }\n  }\n  reinsert all deleted sites into $S_v$\n}\ndelete all $q$ from $S_v$ for which at least one edge\n$rq$ was found\n\\caption{Selecting incoming edges for the sites of a node $v$ and\n a cone $C$.}\n\\label{alg:NNedgeselection}\n\\end{algorithm}\n\nNext, we analyze the running time.\n\\begin{lemma}\n \\label{lem:runninglog6n}\n Algorithm~\\ref{alg:NNedgeselection} has a total running time of\n$O(n\\log^6 n)$ and uses $O(n \\log\\log n)$ space.\n\\end{lemma}\n\\begin{proof}\nIt takes $O(n\\log n)$ to compute the compressed quadtree and to\nfind the neighboring pairs as in Lemma~\\ref{lem:augmentingwithwspd}.\nThe total time for creating and merging\nthe dynamic nearest neighbor structures\nis $O(n \\log^4 n)$: every time a site is inserted, the\nsize of the NN structure that contains it increases by a factor\nof at least two. Thus, each site is inserted $O(\\log n)$ times at an\namortized cost of $O(\\log^3 n)$.\n\nFor the edge selection,\nconsider two nodes $v$, $w$ in $T$ whose cells are neighbors.\nFor each site in $R = R_{\\sigma_w} \\cup m_{\\sigma_w}$,\nwe perform one nearest neighbor query\n(line~\\ref{line:firstNNquery}, Algorithm~\\ref{alg:NNedgeselection}).\nSince $T$ has $O(n)$ nodes,\nwe have $O(n)$ sites $m_{\\sigma_w}$. By construction,\neach site is assigned to $R_{\\sigma_w}$ for at most two nodes $w$.\nThus, since each cell has $O(c^2)$ neighbors by\nLemma~\\ref{lem:volume}  and Lemma~\\ref{lem:augmentingwithwspd},\nthe time spend for these queries is $O(n\\log n)$.\nFurthermore, for each edge we create in the while loop\nof line~\\ref{line:NNwhile},\nwe perform at most two deletions, one insertion and one\nadditional NN query in $v$.\nSince $H$ has $O(n)$ edges,\nthe total work is $O(n\\log^6 n)$.\nThe total size of the compressed quadtree and of\nthe associated data structures is $O(n)$. Furthermore,\na dynamic nearest neighbor structure with $m$ elements\nrequires $O(m \\log\\log m)$ space~\\cite{Chan10}.\nThus, since at any time each site lies in at most one\ndynamic nearest neighbor structure, the total space\nrequirement is $O(n \\log\\log n)$.\n\\end{proof}\n\nThe edges selected by Algorithm~\\ref{alg:NNedgeselection}  have the\nsame properties as the edges selected by Algorithm~\\ref{alg:edgeselection}.\nThus, by Lemma~\\ref{lem:edgeapproximation} we obtain a $t$-spanner $H$.\nTogether with Lemma~\\ref{lem:runninglog6n} this establishes the following\ntheorem.\n\n\\begin{theorem}\n\\label{thm:2dspannerNN}\n  Let $G$ be the transmission graph for a\n  $n$-point set $P \\subset {\\ensuremath {\\mathbb {{R}}}}^2$.\n  For any $t > 1$, we can compute\n  a $t$-spanner for $G$ in time $O(n\\log^6 n)$\n  and space $O(n)$.\n\\end{theorem}\n\n\n\n\n\\section{Applications}\nWe present two applications of our spanner construction: first, we use it to\nextract \\emph{exact} BFS trees from a transmission graph. Second,  we show how to extend\na given reachability  data structure for additional queries specific to transmission\ngraphs. Both applications rely on the \\emph{power diagram}, a weighted\nversion of the Voronoi Diagram.\nIt represents the union of a set of disks (e.g., the disks corresponding to a\nweighted $n$-point set $P \\subset {\\ensuremath {\\mathbb {{R}}}}^2$) as a planar subdivision.\nIt has construction time $O(n\\log n)$, complexity $O(n)$,\nand---augmented with a point location structure---it supports the\nfollowing query in time $O(\\log n)$: given a point $q$, find\na site in $P$ whose disk contains $q$, if it\nexists~\\cite{ImaiEtAl85,Kirckpatrick83}.\n\n\\subsection{From Spanners to BFS Trees}\\label{sec:bfstree}\n\nWe show how to compute the BFS tree in a transmission graph $G$\nfor a given root $s \\in P$ using the\nspanner constructions from the previous section.\nWe adapt a technique that\nCabello and Jej\\^ci\\^c developed for unit-disk\ngraphs~\\cite{CabelloJejcic15}.\nDenote by $d_h(s,p)$ the BFS distance (also known as hop distance)\nfrom $s$ to $p$ in $G$. For $i \\in \\mathbb{N}_0$\nlet $W_i \\subseteq P$ be the sites $p\\in P$ with $d_h(s,p) = i$.\nCabello and Jej\\^ci\\^c\nused the Delaunay triangulation (DT) to efficiently\nidentify $W_{i+1}$, given $W_0, \\dots, W_i$.\nOur $t$-spanner provides similar properties for transmission graphs as\nthe DT does for unit-disk graphs.\n\n\\begin{lemma}\n\\label{lem:bfspathinspanner}\nLet $t$ be small enough,  and\nlet $H$ be the $t$-spanner for $G$ as in\nTheorem~\\ref{thm:2dspannerSpread}, \\ref{thm:2dspanner} or~\\ref{thm:2dspannerNN}.\nLet $v \\in W_{i+1}$, for some $i \\geq 1$.\nThen, there is a site $u \\in W_i$ and a path\n$u = q_l,\\dots,q_1 = v$ in $H$ with $d_h(s,q_j) = i+1$ for $j = l-1, \\dots, 1$.\n\\end{lemma}\n\n\\begin{proof}\nWe focus on the spanner from Theorem~\\ref{thm:2dspanner}, since it has\nthe most complicated structure and subsumes all other cases.\n\nSince $v \\in W_{i+1}$, there is a $w \\in W_i$ with $v \\in\nD(w)$.\nIf $H$ contains the edge $wv$,\nthe claim follows by setting $u = w$ and $q_2, q_1 = u,v$.\nOtherwise, we construct the path backwards from $v$ (see\nFigure~\\ref{fig:bfspathinspanner}).\nSuppose we have already constructed a sequence\n$v = q_1, q_2, \\dots, q_k$\nof sites in $P$ such that\n(i) for $j = 1, \\dots, k-1$, $q_{j+1}q_j$ is an edge of\n$H$; (ii) for $j = 1, \\dots k$, we have $q_j \\in D(w)$ and\n$d_h(s, q_j) = i+1$; and\n(iii) for $j = 1, \\dots, k-1$, $|wq_{j+1}| < |wq_{j}|$.\nWe begin with the sequence $q_1 = v$, fulfilling the invariant.\n\n\\begin{figure}[htb]\n\\begin{center}\n\\includegraphics[scale=0.6]{bfspathinspanner}\n\\end{center}\n\n\\caption{The partial path constructed backwards from $v$. Setting $q_4=u$ will\ncomplete it.}\n\\label{fig:bfspathinspanner}\n\\end{figure}\nLet $c$ be the constant from the spanner construction of\nSection~\\ref{sec:spannerPsi}, and\nrecall that we scale $P$ such that the smallest radius is $c$.\nSuppose that we have $q_{1},\\dots, q_{k}$ and that $wq_k$\nis not an edge of $H$ (otherwise  we could finish by setting $u = w$).\nLet $\\sigma, \\tau \\in {\\operatorname{\\mathcal{Q}}}_0$ be the cells with $w \\in \\tau$ and\n$q_k \\in \\sigma$. We distinguish two cases, depending on\n$d(\\sigma,\\tau)$, and we either show how to find $u$\nto complete the path from $u$ to $v$ or how to choose $q_{k+1}$.\n\nCase 1: $d(\\sigma,\\tau) < c-2$.\nLet $Q = (P \\cap \\sigma) \\cup (P \\cap \\tau)$.\nWe have that  $w, q_k \\in Q$.\nThe algorithm of Section~\\ref{sec:spannerPsi}\nconstructs a Euclidean spanner for $Q$ and adds its edges to $H$.\nIn particular, there is a directed path $\\pi$ from $w$ to $q_k$\nthat uses\nonly sites of $Q$. By construction, all sites of $Q$ have pairwise\ndistance\nat most $c$. Thus, for each $p \\in Q$ we have $p \\in D(w)$ and\n$q_k \\in D(p)$,\nand therefore $i \\leq d_h(s,p) \\leq i+1$. Let $u$ be the last site of $\\pi$\nwith $d_h(s,u) = i$.\nTo obtain the desired path from $u$ to $v$\nwe take the subpath of $\\pi$ starting at $u$ and\nappend the partial path $q_k,\\dots,q_1=v$.\n\nCase 2: $d(\\sigma,\\tau) \\geq c-2$.\nSince $wq_k$ is not an edge of $H$, by Lemma~\\ref{lem:shorteredge}\nthere exists an edge\n$rq_k$ in $H$ with $|wr| < |wq_k|$. We\nset $q_{k+1} = r$.\nSince $q_k \\in D(w)$, we have $q_{k+1} \\in D(w)$\nand $i \\leq d_h(s,q_{k+1}) \\leq i+1$. If $d_h(s,q_k) = i$, we set\n$u = q_{k+1}$ and are done. Otherwise, $q_{k+1}$\nfulfills properties (i)--(iii).\n\nSince the distance to $w$ decreases in each step and\nsince $P$ is finite, this process eventually stops and\nyields the lemma.\n\\end{proof}\n\n\n\\LinesNumbered\n\\begin{algorithm}[hbt]\n$W_0 \\leftarrow \\{s\\}$; ${\\operatorname{d}}[s]=0$; $\\pi[s]=s$; $i = 0$;\nand, for $p \\in P \\setminus \\{s\\}$, ${\\operatorname{d}}[p] = \\infty$ and $\\pi[p] = {\\operatorname{NIL}}$\\\\\n\\While{$W_i \\neq \\emptyset$} {\n  compute power diagram with point location\n  structure ${\\operatorname{PD}}_i$ of $W_i$\\\\\n  queue $Q \\leftarrow W_i$\n  \\label{step:fillingQ} ; $W_{i+1} \\leftarrow \\emptyset$ \\\\\n  \\While{$Q \\neq \\emptyset$} {\n      $p\\gets \\text{dequeue}(Q)$\\\\\n      \\ForEach{\\textnormal{edge} $pq$ of $H$} {\n        \\label{step:forloop}\n        $u \\gets {\\operatorname{PD}}_i(q)$ \\tcp{query ${\\operatorname{PD}}_i$ with $q$}\n        \\label{step:querypd}\n        \\If{$q \\in D(u)$ \\textnormal{and} ${\\operatorname{d}}[q] = \\infty$} {\n          \\label{step:validvertices}\n          $\\text{enqueue}(Q,q)$; ${\\operatorname{d}}[q] = i+1$;\n          $\\pi[q] = u$; add $q$ to $W_{i+1}$\n          \\label{step:endif}\n        }\n      }\n  }\n   $i \\gets i+1$\n}\n\\caption{Computing the BFS tree for $G$ with root $s$ using the spanner $H$.}\n\\label{alg:bfstree}\n\\end{algorithm}\n\nThe BFS tree for $s$ is computed iteratively;\nsee Algorithm~\\ref{alg:bfstree} for pseudocode.\nInitially, we set $W_0 = \\{s\\}$.\nNow assume we computed everything up to $W_i$.\nBy Lemma~\\ref{lem:bfspathinspanner}, all sites in $W_{i+1}$\ncan be reached from $W_i$ in the subgraph of $H$\ninduced by $W_i \\cup W_{i+1}$.\nThus, we can compute  $W_{i+1}$ as follows:\nfor each $u \\in W_i$, start a BFS search in $H$ from $u$. Every time\nwe encounter a new vertex $q$, we check if it lies in\na disk around a site of $W_i$, but not in $W_i$.\nIf so, we add $q$ to $W_{i+1}$ and add the new neighbors of\n$q$ to the queue. Otherwise, we discard $q$ for now.\nTo test whether $q$ lies in a disk of $W_i$, we compute a power diagram for\n$W_i$ in time $O(|W_i|\\log |W_i|)$ and query it with $t$.\n\nEach edge $pq$ of $H$ is considered at most twice\nby Algorithm~\\ref{alg:bfstree}, and each time we query a power diagram with $q$\nin $O(\\log n)$ time. Since $H$ is sparse, the total time required is\n$O(n\\log n)$. This establishes the following theorem.\n\\begin{theorem}\n Let $G$ be the transmission graph of a planar $n$-point set $P \\subset {\\ensuremath {\\mathbb {{R}}}}^2$.\n Given a spanner $H$ for $G$ as in Theorem~\\ref{thm:2dspannerSpread},\n Theorem~\\ref{thm:2dspanner}, or Theorem~\\ref{thm:2dspannerNN}, we can\n compute in $O(n\\log n)$ additional time a BFS tree rooted at any given\n site $s \\in P$.\n\\end{theorem}\n\n\n\\subsection{Geometric Reachability Oracles}\n\\label{sec:oracles}\n\nLet $G$ be a directed graph. If there is a directed path from a vertex $s$\nto a vertex $t$ in $G$, we say $s$  \\emph{can reach} $t$ (in $G$).\nA \\emph{reachability oracle} for a graph $G$ is a data structure\nthat can answer efficiently for any given pair $s$, $t$ of vertices of $G$ whether $s$ can reach $t$.\nReachability oracles  have been studied\nextensively over the last decades (see, e.g.,~\\cite{Holm2014,Thorup04} and\nthe references therein).\n\nWhen $G$ is a transmission graphs\nwe are interested in\n a more\ngeneral type of reachability  query where the target $t$ is not necessarily a vertex of $G$,\nbut an arbitrary point in the plane. We say that a site $s$ can\nreach a point $t \\in {\\ensuremath {\\mathbb {{R}}}}^2$ if there is site $q$ in $G$ such that $t \\in D(q)$\nand such that $s$ can reach $q$ in $G$. We call a data structure that supports this type of\nqueries a \\emph{geometric reachability oracle}. We can use our\nspanner construction from Theorem~\\ref{thm:2dspanner} to extend any\nreachability oracle for a transmission graph to a geometric reachability oracle\nwith a small overhead in space and query time.\nMore precisely, we prove the following theorem.\n\\begin{theorem}\n\\label{thm:geometricreachability}\nLet $G$ be the transmission graph for a set $P$ of $n$ points in the plane with radius\nratio $\\Psi$. Given a reachability oracle for $G$ that requires $S(n)$ space and\nhas query time $Q(n)$, we can obtain in $O(n \\log n \\log \\Psi)$ time a\ngeometric reachability oracle that requires $S(n) + O(n \\log \\Psi)$ space and\ncan answer a query in $O(Q(n) + \\log n \\log \\Psi)$ time.\n\\end{theorem}\n\nGiven a query $s,t$ with a target $t \\in {\\ensuremath {\\mathbb {{R}}}}^2$, our strategy is to find a small\nsubset $Q \\subseteq P$  such that\nfor each $q \\in Q$,  $t\\in D(q)$, and $Q$ ``covers the space around $t$'' in the following\nsense. For any disk $D(p)$ such that  $t \\in D(p)$ there is a site $q\n\\in Q$ with $q \\in D(p)$. In particular the edge $pq$ is in $G$.\n\nSuch a set $Q$ satisfies that $s$ can reach $t$ if and only if $s$ can reach some site $q\\in Q$.\nOnce we have computed  $Q$ we\ndecide whether $s$ can reach $t$ by querying the\ngiven reachability oracle with $s,q$ for all $q \\in Q$.\nThe answer is positive if and only if it is positive for at least\none site $q \\in Q$.\n\nIn what follows, we construct a data\nstructure of size  $O(n \\log \\Psi )$ that allows to find such a set $Q$ of size $O(1)$ in  $O(\\log n\n\\log \\Psi)$ time. Theorem~\\ref{thm:geometricreachability} is then immediate.\n\n\\paragraph*{The Data Structure.}\nWe compute a $2$-spanner $H$ for $G$ as in Theorem~\\ref{thm:2dspanner}. Let $k$ (the number\nof cones) and $c$ (the separation parameter) be the\ntwo constants used by the construction of $H$, and recall that we scaled $P$\nsuch that\nthe smallest radius of a site in $P$ is $c$.\nLet $T$ be the quadforest used by the\nconstruction of $H$. The trees in  $T$ have depth $O(\\log \\Psi)$\nand each node $v \\in T$ corresponds\nto a grid cell $\\sigma_v$ from some grid ${\\operatorname{\\mathcal{Q}}}_i$, $i \\geq 0$. Our data structure\nis obtained by augmenting each node $v \\in T$\nby a power diagram ${\\operatorname{PD}}_{\\sigma_v}$ for the sites in\n$\\sigma_v \\cap P$, together with a point location data structure. This requires\n$O(|\\sigma_v \\cap P|)$ space and  $O(|\\sigma_v \\cap P|\\log |\\sigma_v \\cap P|)$\ntime~\\cite{ImaiEtAl85,Kirckpatrick83} for each $v$. Since any site of $P$ is in\n$O(\\log \\Psi)$ cells of $T$, we need $O(n \\log\\Psi)$ space and $O(n \\log n \\log\n\\Psi)$ time in total.\n\\begin{algorithm}[htb]\n$L \\gets $ depth of $T$\\\\\n\\For{$i=0,\\dots, L$} {\n  $\\sigma \\gets $ cell of ${\\operatorname{\\mathcal{Q}}}_i$ with $t \\in \\sigma$\\\\\n  \\ForEach{$\\tau \\in N(\\sigma)$ \\textnormal{contained in}\n$C_{\\sigma}^2$}{\n      $q \\gets {\\operatorname{PD}}_\\tau(t)$ \\tcp{query ${\\operatorname{PD}}_\\tau$ with $t$}\n      if $t \\in D(q)$, add $q$ to $Q$\n    }\n    Stop if at least one $q$ was added to $Q$\n}\n\\caption{Query Algorithm for a cone $C$ and a point $t$.}\n\\label{alg:querycoverset}\n\\end{algorithm}\n\n\\paragraph*{Performing a Query.}\nLet a query point $t \\in {\\ensuremath {\\mathbb {{R}}}}^2$ be given. Let $\\sigma$ be the cell in ${\\operatorname{\\mathcal{Q}}}_0$ that\ncontains $t$.\nTo find $Q$, we first go through all non-empty cells\n$\\tau \\in {\\operatorname{\\mathcal{Q}}}_0$ with $d(\\sigma,\\tau) \\leq c - 2$, and we take an arbitrary site\n$q \\in \\tau \\cap P$ with $t \\in D(q)$ and add it to $Q$, if such a site exists.\nFor this, we query ${\\operatorname{PD}}_\\tau$ with $t$.\nSecond, we go through all cones $C \\in {\\mathcal C}$, and we run\nAlgorithm~\\ref{alg:querycoverset} with $C$ and $t$ to find the remaining sites\nfor $Q$.\nAlgorithm~\\ref{alg:querycoverset} is similar to\nAlgorithms~\\ref{alg:edgeselection}~\\&~\\ref{alg:efficientedgeselection}, and\nit simulates inserting $t$ into the spanner: we go through the grids at all\nlevels of $T$, and we consider the cell\n$\\sigma$ that contains $t$. We find the neighborhood $N(\\sigma)$ of all\nrelevant non-empty cells in $T$ that are at the same level as $\\sigma$.\nThen we select\nsites that would form incoming edges for $t$ in the spanner. In particular, if\nwe consider the transmission graph where $t$ is added as a sink (i.e.,\nwith infinitesimally small radius),\nLemma~\\ref{lem:shorteredge} holds for the incoming edges of $t$.\nUsing this fact, we can prove\nthat our data structure has the desired properties.\n\\begin{lemma}\n\\label{lem:coverset}\nLet $P$ be a planar $n$-point set with radius ratio $\\Psi$. We can\nconstruct in $O(n\\log n \\log \\Psi)$ time a data structure that finds for any\ngiven query point $t \\in {\\ensuremath {\\mathbb {{R}}}}^2$ a set $Q \\subseteq P$ with $|Q|= O(1)$ such that\nfor any site $p \\in P$, if $t \\in D(p)$ we have that $D(p) \\cap Q \\neq\n\\emptyset$.\nThe query time is $O(\\log n \\log \\Psi)$ and the space requirement is $O(n\n\\log \\Psi)$.\n\\end{lemma}\n\n\\begin{proof}\nThe construction time and space requirement are immediate.\nFor the query time we use that $T$ has depth $O(\\log \\Psi)$\nand thus inserting $t$ and computing the new neighborhoods can be done in time\n$O(\\log n\\log \\Psi)$. Since querying the point location structure of a power diagram\nrequires $O(\\log n)$ time, the total query time is $O(\\log n \\log \\Psi)$.\n\nBy construction, $Q$ has size $O(1)$: in the first step, we add at most one\nsite for every cell with distance $c-2$ from $\\sigma$, and there are\n$O(c^2)$ such cells. In the second step, for each cone we only add sites for\none level of $T$. By Lemma~\\ref{lem:volume}, there are  $O(c^2)$ such sites.\n\nNow let $p \\in P$ be a site with $t \\in D(p)$. It remains to show that\n$D(p) \\cap Q \\neq \\emptyset$. If $p \\in Q$, we are done. If not, we let\n$\\sigma$ and $\\tau$ be the cells in ${\\operatorname{\\mathcal{Q}}}_0$ with $t \\in \\sigma$ and $p \\in\n\\tau$.\nIf $d(\\sigma,\\tau) \\leq c - 2$, there is a site $q \\in \\tau \\cap Q$.\nSince ${\\operatorname{diam}}(\\tau) = 1$ and $r_p \\geq c$, we have $q \\in D(p)$.\nIf $d(\\sigma,\\tau) > c-2$, we consider $pt$ as an edge that was not selected\nby Algorithm~\\ref{alg:querycoverset}. By Lemma~\\ref{lem:shorteredge}, there is\nan edge $qt$ with $q \\in Q$ and $|pq| < |pt|$. Since $t \\in D(p)$ we also\nhave $q \\in D(p)$. This finishes the proof.\n\\end{proof}\n\n\n\n\\section{Conclusion}\n\nWe have described the first construction of spanners for\ntransmissions graphs in near-linear time, and we have given several applications that demonstrate\nits usefulness. Our techniques are quite general, and we\nexpect that they will be applicable in similar settings.\nFor example, in ongoing work we consider how to extend our results\nto (undirected) disk intersection graphs. This would significantly improve\nthe bounds of F\\\"urer and Kasiviswanathan~\\cite{FuererKasiviswanathan12}.\n\nOur most general spanner construction requires quite heavy machinery,\nnamely a dynamic data structure for planar Euclidean nearest neighbors.\nIt remains an interesting question whether this data structure can be simplified\nor avoided completely for the spanner construction. In ongoing work,\nwe explore variants of dynamic nearest neighbors that may\nlead to improved theoretical and practical bounds.\n\nFinally, we believe that our work indicates that transmission graphs\nconstitute an interesting and fruitful model of geometric graphs\nworthy of further investigation. In a companion paper,\nwe consider several questions concerning reachability\nin transmission graphs. In particular, we describe several\nconstructions of reachability oracles for them (see Section~\\ref{sec:oracles}),\nproviding many opportunities to apply Theorem~\\ref{thm:geometricreachability}.\nAlso, in this context our spanner construction plays a crucial role\nin obtaining fast preprocessing algorithms.\n\n\\vspace{0.4em}\n\\noindent\n\\textbf{Acknowledgments.}\nWe like to thank Paz Carmi and G\\\"unter Rote for valuable comments.\nWe also thank the anonymous referees for their close reading of\nthe paper and for insightful suggestions, in particular for\npointing out the problem of geometric reachability queries as described in\nSection~\\ref{sec:oracles}.\n\n\\bibliographystyle{abbrv}\n\\bibliography{literature}\n\n", "itemtype": "equation", "pos": 63961, "prevtext": "\nIf $r = {\\operatorname{diam}}(\\overline{w})$, then\n\n", "index": 31, "text": "\\begin{equation}\\label{equ:dvw_ub2}\nd(v',w') \\leq d(v, \\overline{w}) + {\\operatorname{diam}}(\\overline{w}) \\leq\n(c + 1){\\operatorname{diam}}(\\overline{w}) \\leq  2cr,\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E5.m1\" class=\"ltx_Math\" alttext=\"d(v^{\\prime},w^{\\prime})\\leq d(v,\\overline{w})+{\\operatorname{diam}}(\\overline%&#10;{w})\\leq(c+1){\\operatorname{diam}}(\\overline{w})\\leq 2cr,\" display=\"block\"><mrow><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msup><mi>v</mi><mo>\u2032</mo></msup><mo>,</mo><msup><mi>w</mi><mo>\u2032</mo></msup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2264</mo><mrow><mrow><mi>d</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mo>,</mo><mover accent=\"true\"><mi>w</mi><mo>\u00af</mo></mover><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mo>diam</mo><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>w</mi><mo>\u00af</mo></mover><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>\u2264</mo><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mi>c</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo>diam</mo><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>w</mi><mo>\u00af</mo></mover><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>\u2264</mo><mrow><mn>2</mn><mo>\u2062</mo><mi>c</mi><mo>\u2062</mo><mi>r</mi></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}]