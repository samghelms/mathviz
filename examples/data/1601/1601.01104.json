[{"file": "1601.01104.tex", "nexttext": "\n\nThe variable $x_{p}$ represents the amount of flow pushed along the image\nunder $\\rho$ of the path $p$ for every $p \\in \\mathcal{P}$.\nThe goal is to maximize the total flow pushed along the images of all paths in\n$\\mathcal{P}$ subject to the constraints specifying that the sum of flows\npushed through any edge is at most $1$.\nThis linear program may exhibit an exponential number of variables, so let us\nconsider its dual program instead:\n\n", "itemtype": "equation", "pos": 22372, "prevtext": "\n\n\\LongVersion \n\\author{\nYuval Emek\n\\thanks{Computer Engineering and Networks Laboratory, ETH Zurich, Zurich,\nSwitzerland.\nE-mail: {\\tt yuval.emek@tik.ee.ethz.ch}.}\n\\and\nPierre Fraigniaud\n\\thanks{CNRS and University of Paris Diderot, France.\nE-mail: {\\tt pierref@liafa.jussieu.fr}.}\n\\and\nAmos Korman\n\\thanks{CNRS and University of Paris Diderot, France.\nE-mail: {\\tt amos.korman@liafa.jussieu.fr}.}\n\\and\nShay Kutten\n\\thanks{Information Systems Group, Faculty of IE\\&M, The Technion,\nHaifa, 32000 Israel. E-mail: {\\tt kutten@ie.technion.ac.il}.}\n\\and\nDavid Peleg\n\\thanks{\nDepartment of Computer Science and Applied Mathematics, The Weizmann\nInstitute of Science, Rehovot, 76100 Israel.\nE-mail: {\\tt david.peleg@weizmann.ac.il}.}\n}\n\\LongVersionEnd \n\n\\title{Notions of Connectivity in Overlay Networks\n\\thanks{Supported by a France-Israel cooperation grant\n(``Mutli-Computing'' project)\nfrom the France Ministry of Science and Israel Ministry of Science. Supported by the ANR projects DISPLEXITY and PROSE, and by the INRIA project GANG}\n}\n\n\n\n\\maketitle\n\n\\begin{abstract}\n``How well connected is the network?''\nThis is one of the most fundamental questions one would ask when facing\nthe challenge of designing a communication network.\nThree major notions of connectivity have been considered in the\nliterature, but in the context of traditional (single-layer) networks, they\nturn out to be equivalent.\nThis paper introduces a model for studying the three notions of connectivity\nin  {\\em multi-layer} networks.\nUsing this model, it is easy to demonstrate that in multi-layer networks the\nthree notions may differ dramatically.\nUnfortunately, in contrast to the single-layer case, where the values of the\nthree connectivity notions can be computed efficiently, it has been recently\nshown in the context of WDM networks (results that can be easily translated to\nour model) that the values of two of these notions of connectivity are hard to\ncompute or even approximate in multi-layer networks.\nThe current paper shed some positive light into the multi-layer connectivity\ntopic:\nwe show that the value of the third connectivity notion can be computed in\npolynomial time and develop an approximation for the construction of well\nconnected overlay networks.\n\\end{abstract}\n\n\n\n\n\n\n\\section{Introduction}\n\n\n\\subsection{Background and motivation}\n\n\nThe term ``connectivity'' in networks has more than one meaning,\nbut these meanings are equivalent in ``traditional'' networks.\nWhile the graph theoretic definition of connectivity refers to the ability to\nreach every node from every other node (a.k.a.\\ \\emph{$1$-connectivity}), the\nterm connectivity is often related also to the \\emph{survivability} of a\nnetwork, namely, the ability to preserve $1$-connectivity whenever some links\nfail.\\footnote{\nThe current paper does not deal with {\\em node} connectivity.\n}\nIn other words, a network $G$ is said to be $k$-{\\em connected} if it\nsatisfies the following ``connectivity property'' (CP):\n\n\\begin{description}\n\\item[(CP1)] $G$ remains connected whenever up to $k-1$ links are erased from\nit.\n\\end{description}\n\nHowever, there are also other meanings to connectivity.\nA network $G$ is also said to be $k$-{\\em connected} if it\nsatisfies the following  ``connectivity property'':\n\n\\begin{description}\n\\item[(CP2)] There exist $k$ pairwise {\\em link-disjoint paths} from $s$ to\n$t$ for every two nodes $s, t$ in $G$.\n\\end{description}\n\nThe equivalence of these two properties \\cite{Meng27} enables numerous\npractical applications.\nFor example, one of the applications of the existence of link-disjoint paths\n(Property (CP2)) is to ensure survivability (Property (CP1)).\nOften, a backup (link-disjoint) path is prepared in advance, and the traffic\nis diverted to the backup path whenever a link on the primary path fails.\nAn example is the backup path protection mechanism in SONET networks (see,\ne.g., \\cite{protection}).\n\nA third property capturing connectivity is based on the amount of flow that\ncan be shipped in the network between any source and any destination, defining\nthe capacity of a single link to be~$1$.\nIn other words, a network $G$ is said to be $k$-{\\em connected} if it\nsatisfies the following  ``connectivity property'':\n\n\\begin{description}\n\\item[(CP3)] It is possible to ship $k$ units of flow from $s$ to $t$ for\nevery two nodes $s, t$ in $G$.\n\\end{description}\n\nThis property too is equivalent to the first two \\cite{FF56}, and is also used\ntogether with them.\nFor example, routing some flow of information around congestion (which may be\npossible only if the network satisfies property (CP3) and thus can support\nthis additional flow) uses the second property, i.e., it relies on the\nexistence of multiple link-disjoint paths.\n\nCurrent networks, however, offer multi-layered structures which yield\nsignificant complications when dealing with the notion of connectivity.\nIn particular, the overlay/underlying network dichotomy plays a major role\nin modeling communication networks, and overlay networks such as peer-to-peer\n(P2P) networks, MPLS networks, IP/WDM networks, and SDH/SONET-WDM networks,\nall share the same overall structure:\nan \\emph{overlay} network $H$ is implemented on top of an \\emph{underlying}\nnetwork $G$.\nThis implementation can be abstracted as a \\emph{routing scheme} that maps\noverlay connections to underlying routes.\nWe comment that there are sometimes differences between such a mapping and the common notion of a routing scheme. Still, since the routing scheme often defines the mapping,\nwe shall term this mapping the\n\\emph{routing scheme}.\n\nOften, the underlying network itself is implemented on top of yet another\nnetwork, thus introducing a multi-layer hierarchy.\nTypically, the lower level underlying network is ``closer'' to the physical\nwires, whereas the higher level network is a traffic network in which edges\ncapture various kinds of connections, depending on the context.\nFor the sake of simplicity, we focus on a pair of consecutive layers $G$ and\n$H$.\nThis is sufficient to capture a large class of practical scenarios.\n\nThe current paper deals with what happens to the different connectivity\nproperties once we turn to the context of overlay networks.\nAs discussed later on, connectivity has been studied previously in the\n``overlay network'' world under the ``survivability'' interpretation (CP1),\nand it has been observed that, in this context, the connectivity parameter\nchanges, i.e., the connectivity of the overlay network may be different\nfrom that of the underlying network.\nLee et al.\\ \\cite{prev} demonstrated the significance of this difference by\nshowing that the survivability property is computationally hard and even hard\nto approximate in the multi-layer case.\nSince the three aforementioned connectivity parameters may differ in\nmulti-layer networks (see Section~\\ref{section:Model}), they also showed a\nsimilar result for the disjoint paths connectivity property.\n\nInterestingly, the motivation of Lee et al.\\ for addressing the disjoint paths\nconnectivity property was the issue of flow.\nOne of the contributions of the current paper is to directly address this\nissue, showing that in contrast to the previous two notions of connectivity,\nthe maximum flow supported by an overlay network can actually be computed in\npolynomial time.\n\nIn the specific context of survivability, there has been other papers that\nhave shown  that the issue of connectivity in an overlay network is different\nfrom that of connectivity in underlying networking.\nConsider, for example,\na situation where several overlay edges (representing connections)\nof $H$ pass over the same physical link.\nThen all these overlay edges may be disconnected as a result of a\nsingle hardware fault in that link, possibly disconnecting the overlay network.\nThe affected overlay links are said to {\\em share} the {\\em risk}\nof the failure of the underlying physical link, hence they are referred to\nin the literature as a \\emph{shared risk link group} (SRLG).\nAn SRLG-based model for overlay networks was extensively studied in recent\nyears;\\footnote{\nNote that a common underlying link is not the only possible shared risk;\noverlay links sharing a node may form a shared risk link group too.\n}\nsee, e.g., \\cite{intro-srlg} for a useful introduction to this notion and\n\\cite{cisco-srlg} for a discussion of this concept in the context of MPLS.\nThe SRLG model hides the actual structure of the underlying network, in the\nsense that many different underlying networks can yield the same sets of\nSRLG.\n(For certain purposes, this is an advantage of the model.)\nAn even more general notion is that of \\emph{Shared Risk Resource Group}\nHowever, sometimes this model abstracts away too much information,\nmaking certain computational goals (such as, e.g., flow computations)\nharder to achieve.\n\n\n\n\n\nIn contrast to the SRLG model, we present the alternative model of\n\\emph{deep connectivity}, which allows us to simultaneously consider all three\ncomponents: the overlay network, the underlying network, and the mapping (the\nrouting scheme).\nNote that all three should be considered:\nFor example, if the underlying network is not connected, then neither can the\noverlay network be.\nThe routing scheme also affects the connectivity properties as different\nrouting schemes may yield significantly different overlay link dependencies.\nIn some cases, routing is constrained to shortest paths, whereas in other\ncases it can be very different.\nIn \\emph{policy based} routing schemes (see, e.g. \\cite{CiscoPolicy}), for\nexample, some underlying edges are not allowed to be used for routing from $u$\nto $v$, which may cause the underlying path implementing the overlay link $(u,\nv)$ to be much longer than the shortest $(u, v)$-path.\n\n\n\\subsection{The deep connectivity model}\n\\label{section:Model}\n\n\nThe underlying network is modeled by a (simple, undirected, connected)\ngraph $G$ whose vertex set ${\\mathit{V}}(G)$ represents the network nodes,\nand whose edge set ${\\mathit{E}}(G)$ represents the communication links between them.\nSome nodes of the underlying network are designated as \\emph{peers};\nthe set of peers is denoted by ${\\mathcal{P}} \\subseteq {\\mathit{V}}(G)$.\nThe overlay network, modeled by a graph $H$, spans the peers, i.e.,\n${\\mathit{V}}(H) = {\\mathcal{P}}$ and ${\\mathit{E}}(H) \\subseteq {\\mathcal{P}} \\times {\\mathcal{P}}$;\n$H$ typically represents a ``virtual'' network, constructed on top of\nthe peers in the underlying communication network $G$.\n\nAn edge $(u, v)$ in the overlay graph $H$ may not directly correspond to an\nedge in the underlying graph $G$ (that is, ${\\mathit{E}}(H)$ is not necessarily a\nsubset of ${\\mathit{E}}(G)$).\nTherefore, communication over a $(u, v)$ edge in $H$ should\noften be routed along some multi-hop path connecting $u$ and $v$ in $G$.\nThis is the role of a \\emph{routing scheme} $\\rho : {\\mathcal{P}} \\times {\\mathcal{P}}\n\\rightarrow 2^{{\\mathit{E}}(G)}$ that maps each pair $(u, v)$ of peers to some\nsimple path $\\rho(u, v)$ connecting $u$ and $v$ in $G$.\nA message transmitted over the edge $(u, v)$ in $H$ is physically disseminated\nalong the path $\\rho(u, v)$ in $G$.\nWe then say that $(u, v)$ is \\emph{implemented} by $\\rho(u, v)$.\nFor the sake of simplicity, the routing scheme $\\rho$ is assumed to be\nsymmetric, i.e., $\\rho(u, v) = \\rho(v, u)$.\nMore involved cases do exist in reality:\nthe routing scheme may be asymmetric, or may map some overlay edge into\nmultiple routes;\nthe simple model given here suffices to show interesting differences between\nthe various connectivity measures.\n\nWhen a message is routed in $H$ from a peer $s \\in {\\mathcal{P}}$ to a\nnon-neighboring peer $t \\in {\\mathcal{P}}$ along some multi-hop path $\\pi = (x_0, x_1,\n\\dots, x_k)$ with $x_0 = s$, $x_k = t$, and $(x_i, x_{i + 1}) \\in E(H)$, it is\nphysically routed in $G$ along the concatenated path $\\rho(x_0, x_1) \\rho(x_1,\nx_2) \\cdots \\rho(x_{k - 1}, x_k)$.\nIn some cases, when the overlay graph $H$ is known, it will be convenient to\ndefine the routing scheme over the edges of $H$, rather than over all peer\npairs.\n\nThe notion of \\emph{deep connectivity} grasps the\nconnectivity in the overlay graph $H$, while taking into account its\nimplementation by the underlying paths in $G$.\nSpecifically, given two peers $s, t \\in {\\mathcal{P}}$, we are interested in three\ndifferent parameters, each capturing a specific type of connectivity.\nIn order to define these parameters, we extend the domain of $\\rho$ from\nvertex pairs in ${\\mathcal{P}} \\times {\\mathcal{P}}$ to collections of such pairs in the\nnatural manner, defining $\\rho(F) = \\bigcup_{(u, v) \\in F} \\rho(u, v)$ for\nevery $F \\subseteq {\\mathcal{P}} \\times {\\mathcal{P}}$.\nIn particular, given an $(s, t)$-path $\\pi$ in $H$, $\\rho(\\pi) = \\bigcup_{e\n\\in \\pi} \\rho(e)$ is the set of underlying edges used in the implementation of\nthe overlay edges along $\\pi$.\n\\begin{itemize}\n\n\\item\nThe \\emph{edge-removal deep connectivity} of $s$ and $t$ in $H$ with respect\nto $G$ and $\\rho$, denoted by ${\\mathrm{ERDC}}_{G, \\rho}(s, t, H)$, is defined as the size\nof the smallest subset $F \\subseteq {\\mathit{E}}(G)$ that intersects with\n$\\rho(\\pi)$ for every $(s, t)$-path $\\pi$ in $H$;\nnamely, the minimum number of underlying edges that should be removed in order\nto disconnect $s$ from $t$ in the overlay graph.\n\n\\item\nThe \\emph{path-disjoint deep connectivity} of $s$ and $t$ in $H$ with\nrespect to $G$ and $\\rho$, denoted by ${\\mathrm{PDDC}}_{G, \\rho}(s, t, H)$, is defined as\nthe size of the largest collection $C$ of $(s, t)$-paths in $H$ such that\n$\\rho(\\pi) \\cap \\rho(\\pi') = \\emptyset$ for every $\\pi, \\pi' \\in C$ with $\\pi\n\\neq \\pi'$, i.e., the maximum number of overlay paths connecting $s$ to $t$\nwhose underlying implementations are totally independent of each other.\n\n\\item\nThe \\emph{flow deep connectivity} of $s$ and $t$ in $H$ with respect to $G$\nand $\\rho$, denoted by ${\\mathrm{FDC}}_{G, \\rho}(s, t, H)$, is defined as the maximum\namount of flow\\footnote{\nIn the setting of undirected graphs, flow may be interpreted in two different\nways depending on whether two flows along the same edge in opposite directions\ncancel each other or add up.\nHere, we assume the latter interpretation which seems to be more natural in\nthe context of overlay networks.\n} that can be pushed from $s$ to $t$ in $G$ restricted to the\nimages under $\\rho$ of the $(s, t)$-paths in $H$, assuming that each edge in\n${\\mathit{E}}(G)$ has a unit capacity.\nIntuitively, if $s$ and $t$ are well connected, then it should be possible to\npush a large amount of flow between them.\n\n\\end{itemize}\n\n\\par\n\\noindent {\\bf Example:}\nTo illustrate the various definitions,\nconsider the underlying network $G$ depicted in Fig. \\ref{fig:conn-defs}(a),\nand the overlay network $H$ depicted in Fig. \\ref{fig:conn-defs}(b).\nThe routing scheme $\\rho$ assigns each of the 6 overlay edges adjacent to\nthe extreme $S$ and $T$ a simple route consisting of the edge itself.\nFor the remaining three overlay edges, the assigned routes are as follows:\n\\begin{eqnarray*}\n\\rho(U_1,U_4) & = & (U_1,M_1,M_2,U_2,U_3,U_4)\\\\\n\\rho(M_1,M_4) & = & (M_1,M_2,D_2,D_3,M_3,M_4)\\\\\n\\rho(D_1,D_4) & = & (D_1,D_2,D_3,U_3,U_4,D_4)~.\n\\end{eqnarray*}\nThe route $\\rho(M_1,M_4)$ is illustrated by the dashed line in\nFig. \\ref{fig:conn-defs}(a).\nNote that in the original (underlying) network $G$, the connectivity of the\nextreme nodes $S$ and $T$ is 3 under all three definitions. In contrast,\nthe values of the three connectivity parameters for the extreme nodes\n$S$ and $T$ in the overlay network $H$ under the routing scheme $\\rho$\nare as follows:\n\n\\begin{itemize}\n\\item\nThe edge-removal deep connectivity of $s$ and $t$ in $H$\nw.r.t. $G$ and $\\rho$ is ${\\mathrm{ERDC}}_{G, \\rho}(s, t, H)=2$.\n\\\\\nIndeed, disconnecting the underlying edge $(D_2,D_3)$\nplus any edge of the upper underlying route will disconnect $S$ from $T$.\n\\item\nThe path-disjoint deep connectivity of $s$ and $t$ in $H$\nw.r.t. $G$ and $\\rho$ is ${\\mathrm{PDDC}}_{G, \\rho}(s, t, H)=1$.\n\\\\\nIndeed, any two of the three overlay routes connecting $S$ and $T$\nshare an underlying edge.\n\\item\nThe \\emph{flow deep connectivity} of $s$ and $t$ in $H$\nw.r.t. $G$ and $\\rho$ is ${\\mathrm{FDC}}_{G, \\rho}(s, t, H) = 3/2$.\n\\\\\nThis is obtained by pushing 1/2 flow unit through each of the three\noverlay routes.\n\\end{itemize}\n\n\\begin{figure}\n\\begin{center}\n\\includegraphics[width=0.95\\linewidth]{conn-defs.pdf}\n\\end{center}\n\\caption{\\label{fig:conn-defs}\n(a) The underlying graph $G$.\n(b) The overlay network $H$.}\n\\vspace*{-.5cm}\n\\end{figure}\n\nFor each deep connectivity $(s, t)$-parameter $X_{G,\n\\rho}(s,t,H)$, we define the corresponding\n\\emph{all-pairs} variant $X_{G, \\rho}(H) = \\min_{s, t \\in {\\mathcal{P}}} X_{G,\n\\rho}(s, t, H)$.\nWhen $G$ and $\\rho$ are clear from the context, we may remove them from the\ncorresponding subscripts.\n\n\n\\subsection{Our contributions}\n\n\nOur model for overlay networks makes it convenient to explore the\ndiscrepancies between the different deep connectivity notions.\nClassical results from graph theory, e.g., the fundamental min-cut max-flow\ntheorem \\cite{FF56,EFS56} and Menger's theorem \\cite{Meng27} state that the\nthree connectivity parameters mentioned above are equivalent when a single\nlayer network is considered.\nPolynomial time algorithms that compute these parameters (in a single\nlayer network) were discovered early \\cite{FF56,Dini70,EK72} and have since\nbecome a staple of algorithms textbooks \\cite{CLRS09,KT05}.\nAs mentioned above, previous results \\cite{prev,CDPRV07}, when translated to\nour model, have shown that in multi-layer networks, two of the three\nconnectivity parameters are computationally hard and even hard to\napproximate.\nOur first technical contribution is to expand on these negative\nresults by showing that the the path-disjoint deep connectivity property\ncannot be approximated to any finite ratio when attention is restricted to\nsimple paths in the underlying graph.\n\nOn the positive side, we show that the flow deep connectivity parameters can\nbe computed in polynomial time (Section~\\ref{section:EfficientAlgorithmFDC}),\nthus addressing the motivation of \\cite{prev} for studying the disjoint paths\nproperty in overlay networks.\nThen, we address the issue of constructing a ``good'' overlay graph for a\ngiven underlying graph and routing scheme.\nAs opposed to the difficulty of approximating the value of the parameters, we\nshow that the related construction problem can sometimes be well\napproximated.\nSpecifically, in Section~\\ref{section:SparseOverlayGraphs}, we investigate the\nproblem of constructing $2$-edge removal deeply connected overlay graphs with\nas few as possible (overlay) edges.\nThis problem is shown to be NP-hard, but we show that a\nlogarithmic-approximation for it can be obtained in polynomial-time.\nWe also devise a 2-approximation algorithm for particular, yet natural,\ninstances of the problem.\n\n\n\\section{Hardness of approximation}\n\\label{section:HardnessApproximation}\n\n\nAs mentioned earlier, Lee et al.~\\cite{prev} established hardness of\napproximation results for the problems of computing the parameters ${\\mathrm{ERDC}}_{G,\n\\rho}(s, t, H)$, ${\\mathrm{PDDC}}_{G, \\rho}(s, t, H)$, and ${\\mathrm{ERDC}}_{G, \\rho}(H)$.\nFor completeness, we observe that the all-pairs variant ${\\mathrm{PDDC}}_{G, \\rho}(H)$\nof the path-disjoint deep connectivity parameter is also hard to approximate,\nestablishing the following theorem, which is essentially a corollary of\nTheorem~4 in \\cite{prev} combined with a result of H{\\aa}stad~\\cite{Hast99}.\n\n\\begin{theorem} \\label{theorem:HardnessAllPairsPDDC}\nUnless NP = ZPP, the problem of computing the parameter ${\\mathrm{PDDC}}_{G, \\rho}(H)$\ncannot be approximated to within a ratio of $|{\\mathit{E}}(H)|^{1 / 2 - \\epsilon}$\nfor any $\\epsilon > 0$.\n\\end{theorem}\n\nWe now turn to show that the following natural variants of the ${\\mathrm{PDDC}}$\nparameters cannot be approximated to within any finite ratio.\nLet ${\\mathrm{SPDDC}}_{G, \\rho}(s, t, H)$ denote the size of the largest collection $C$\nof $(s, t)$-paths in $H$ such that all paths $\\pi \\in C$ are implemented by\nsimple paths $\\rho(\\pi)$ in $G$ and $\\rho(\\pi) \\cap \\rho(\\pi') = \\emptyset$\nfor every $\\pi, \\pi' \\in C$ with $\\pi \\neq \\pi'$;\nlet ${\\mathrm{SPDDC}}_{G, \\rho}(H) = \\min_{s, t \\in {\\mathcal{P}}} {\\mathrm{SPDDC}}_{G, \\rho}(s, t, H)$.\nNote that these parameters are merely a restriction of the ${\\mathrm{PDDC}}$ parameters\nto simple paths (hence the name, which stands for \\emph{simple} path-disjoint\ndeep connectivity).\n\nThe inapproximability of the ${\\mathrm{SPDDC}}_{G, \\rho}(s, t, H)$ parameter is proved\nby reducing the set packing problem to the problem of distinguishing between\nthe case ${\\mathrm{SPDDC}}_{G, \\rho}(s, t, H) = 0$ and the case ${\\mathrm{SPDDC}}_{G, \\rho}(s, t,\nH) \\geq 1$.\nIn fact, the vertices $s, t \\in {\\mathit{V}}(H)$ that minimize ${\\mathrm{SPDDC}}_{G,\n\\rho}(s, t, H)$ in this reduction are known in advance, thus establishing the\nimpossibility of approximating the all-pairs parameter ${\\mathrm{SPDDC}}_{G, \\rho}(H)$\nas well.\nThe proofs of the following two theorems are deferred to\nAppendix~\\ref{appendix:Hardness}.\n\n\n\\begin{theorem} \\label{theorem:HardnessSPDDC}\nUnless P = NP, the problem of computing the parameter ${\\mathrm{SPDDC}}_{G, \\rho}(s,\nt, H)$ cannot be approximated to within any finite ratio.\n\\end{theorem}\n\n\\begin{theorem} \\label{theorem:HardnessAllPairsSPDDC}\nUnless P = NP, the problem of computing the parameter ${\\mathrm{SPDDC}}_{G, \\rho}(H)$\ncannot be approximated to within any finite ratio.\n\\end{theorem}\n\n\n\\section{Efficient algorithm for ${\\mathrm{FDC}}$}\n\\label{section:EfficientAlgorithmFDC}\n\n\nIn this section we develop a polynomial time algorithm that computes the\nflow deep connectivity parameter ${\\mathrm{FDC}}(s, t, H)$ (which clearly provides\nan efficient computation of the parameter ${\\mathrm{FDC}}(H)$ as well).\nConsider some underlying graph $G$, routing scheme $\\rho$, overlay graph $H$,\nand two vertices $s, t \\in {\\mathit{V}}(H)$.\nLet $\\mathcal{P}$ denote the collection of all simple $(s, t)$-paths in $H$.\nFor each path $p \\in \\mathcal{P}$ and for each edge $e \\in {\\mathit{E}}(G)$, let\n$\\psi(p, e)$ be the number of appearances of the edge $e$ along the image of\n$p$ under $\\rho$.\nWe begin by representing the parameter ${\\mathrm{FDC}}(s, t, H)$ as the outcome of the\nfollowing linear program:\n\n", "index": 1, "text": "$$\n\\begin{array}{llr}\n\\max & \\sum_{p \\in \\mathcal{P}} x_{p} \\quad \\text{s.t.} & \\\\\n& \\sum_{p \\in \\mathcal{P}} \\psi(p, e) \\cdot x_{p} \\leq 1 & \\forall e \\in\n{\\mathit{E}}(G) \\\\\n& x_{p} \\geq 0 & \\forall p \\in \\mathcal{P}\n\\end{array}\n$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"\\begin{array}[]{llr}\\max&amp;\\sum_{p\\in\\mathcal{P}}x_{p}\\quad\\text{s.t.}&amp;\\\\&#10;&amp;\\sum_{p\\in\\mathcal{P}}\\psi(p,e)\\cdot x_{p}\\leq 1&amp;\\forall e\\in{\\mathit{E}}(G)%&#10;\\\\&#10;&amp;x_{p}\\geq 0&amp;\\forall p\\in\\mathcal{P}\\end{array}\" display=\"block\"><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><mi>max</mi></mtd><mtd columnalign=\"left\"><mrow><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>p</mi><mo>\u2208</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcab</mi></mrow></munder><msub><mi>x</mi><mi>p</mi></msub></mrow><mo separator=\"true\">\u2003</mo><mtext>s.t.</mtext></mrow></mtd><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mrow><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>p</mi><mo>\u2208</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcab</mi></mrow></munder><mrow><mrow><mi>\u03c8</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mo>,</mo><mi>e</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><msub><mi>x</mi><mi>p</mi></msub></mrow></mrow><mo>\u2264</mo><mn>1</mn></mrow></mtd><mtd columnalign=\"right\"><mrow><mrow><mo>\u2200</mo><mi>e</mi></mrow><mo>\u2208</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mtd></mtr><mtr><mtd/><mtd columnalign=\"left\"><mrow><msub><mi>x</mi><mi>p</mi></msub><mo>\u2265</mo><mn>0</mn></mrow></mtd><mtd columnalign=\"right\"><mrow><mrow><mo>\u2200</mo><mi>p</mi></mrow><mo>\u2208</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcab</mi></mrow></mtd></mtr></mtable></math>", "type": "latex"}, {"file": "1601.01104.tex", "nexttext": "\n\nThe dual program can be interpreted as fractionally choosing as few as\npossible edges of $G$ so that the image under $\\rho$ of every path $p$ in\n$\\mathcal{P}$ traverses in total at least one edge.\nWe cannot solve the dual program directly as it may have an exponential\nnumber of constraints.\nFortunately, it admits an efficient separation oracle, hence it can be solved\nin polynomial time (see, e.g., \\cite{GLS93}).\n\nGiven some real vector $\\vec{y}$ indexed by the edges in ${\\mathit{E}}(G)$, our\nseparation oracle either returns a constraint which is violated by $\\vec{y}$\nor reports that all the constraints are satisfied and $\\vec{y}$ is a feasible\nsolution.\nRecall that a violated constraint corresponds to some path $p \\in \\mathcal{P}$\nsuch that $\\sum_{e \\in {\\mathit{E}}(G)} \\psi(p, e) \\cdot y_{e} < 1$.\nTherefore our goal is to design an efficient algorithm that finds such\na path $p \\in \\mathcal{P}$ if such a path exists.\n\nLet $w(e) = \\sum_{e' \\in \\rho(e)} y_{e'}$ for every edge $e \\in {\\mathit{E}}(H)$ and\nlet $H'$ be the weighted graph obtained by assigning weight $w(e)$ to each\nedge $e \\in {\\mathit{E}}(H)$.\nThe key observation in this context is that the (weighted) length of an\n$(s, t)$-path $p'$ in $H'$ equals exactly to $\\sum_{e \\in {\\mathit{E}}(G)} \\psi(p,\ne) \\cdot y_{e}$, where $p$ is the path in $H$ that corresponds to $p'$ in\n$H'$.\nTherefore, our separation oracle is implemented simply by finding a shortest\n$(s, t)$-path $p^{*}$ in $H'$:\nif the length of $p^{*}$ is smaller than $1$, then $p^{*}$ corresponds to a\nviolated constraint;\notherwise, the length of all $(s, t)$-paths in $H'$ is at least $1$, hence\n$\\vec{y}$ is a feasible solution.\nThis establishes the following theorem.\n\n\\begin{theorem} \\label{theorem:EfficientFDC}\nThe parameters ${\\mathrm{FDC}}_{G, \\rho}(s, t, H)$ and ${\\mathrm{FDC}}_{G, \\rho}(H)$ can be\ncomputed in polynomial time.\n\\end{theorem}\n\n\n\\section{Sparsest $2$-${\\mathrm{ERDC}}$ overlay graphs}\n\\label{section:SparseOverlayGraphs}\n\n\nIn this section we are interested in the following problem, referred to as the\n\\emph{sparsest $2$-${\\mathrm{ERDC}}$ overlay graph} problem:\ngiven an underlying graph $G$, a peer set ${\\mathcal{P}} \\subseteq {\\mathit{V}}(G)$, and\na routing scheme $\\rho : {\\mathcal{P}} \\times {\\mathcal{P}} \\rightarrow 2^{{\\mathit{E}}(G)}$,\nconstruct the sparsest overlay graph $H$ for ${\\mathcal{P}}$\n(in terms of number of overlay edges) satisfying ${\\mathrm{ERDC}}_{G, \\rho}(H) \\geq 2$.\nOf course, one has to make sure that such an overlay graph $H$ exists, so in\nthe context of the sparsest $2$-${\\mathrm{ERDC}}$ overlay graph problem we always assume\nthat ${\\mathrm{ERDC}}_{G, \\rho}(K_{{\\mathcal{P}}}) \\geq 2$, where $K_{{\\mathcal{P}}}$ is the complete graph\non ${\\mathcal{P}}$.\nThis means that a trivial solution with ${n}\\choose{2}$ edges, where $n =\n|{\\mathcal{P}}|$, always exists and the challenge is to construct a sparser one.\n\n\n\\subsection{Hardness}\n\n\nWe begin our treatment of this problem with a hardness result.\n\n\\begin{theorem} \\label{theorem:HardnessSparsestERDC}\nThe sparsest $2$-${\\mathrm{ERDC}}$ overlay graph problem is NP-hard.\n\\end{theorem}\n\n\\begin{proof}\nThe assertion is proved by a reduction from the \\emph{Hamiltonian path}\nproblem.\nConsider an $n$-vertex graph $G_0$ input to the Hamiltonian path problem.\nTransform it into an instance of the sparsest $2$-${\\mathrm{ERDC}}$ overlay graph\nproblem as follows:\nConstruct the underlying graph $G$ by setting ${\\mathit{V}}(G) = {\\mathit{V}}(G_0)\n\\cup \\{x, y\\}$ and ${\\mathit{E}}(G) = {\\mathit{E}}(G_0) \\cup \\{(x, y)\\} \\cup \\{ (v, x),\n(v, y) \\mid v \\in {\\mathit{V}}(G_0) \\}$ and let ${\\mathcal{P}} = {\\mathit{V}}(G_0)$.\nDefine the routing scheme $\\rho$ by setting\n\n", "itemtype": "equation", "pos": 23046, "prevtext": "\n\nThe variable $x_{p}$ represents the amount of flow pushed along the image\nunder $\\rho$ of the path $p$ for every $p \\in \\mathcal{P}$.\nThe goal is to maximize the total flow pushed along the images of all paths in\n$\\mathcal{P}$ subject to the constraints specifying that the sum of flows\npushed through any edge is at most $1$.\nThis linear program may exhibit an exponential number of variables, so let us\nconsider its dual program instead:\n\n", "index": 3, "text": "$$\n\\begin{array}{llr}\n\\min & \\sum_{e \\in {\\mathit{E}}(G)} y_{e} \\quad \\text{s.t.} & \\\\\n& \\sum_{e \\in {\\mathit{E}}(G)} \\psi(p, e) \\cdot y_{e} \\geq 1 & \\forall p \\in\n\\mathcal{P} \\\\\n& y_{e} \\geq 0 & \\forall e \\in {\\mathit{E}}(G)\n\\end{array}\n$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"\\begin{array}[]{llr}\\min&amp;\\sum_{e\\in{\\mathit{E}}(G)}y_{e}\\quad\\text{s.t.}&amp;\\\\&#10;&amp;\\sum_{e\\in{\\mathit{E}}(G)}\\psi(p,e)\\cdot y_{e}\\geq 1&amp;\\forall p\\in\\mathcal{P}%&#10;\\\\&#10;&amp;y_{e}\\geq 0&amp;\\forall e\\in{\\mathit{E}}(G)\\end{array}\" display=\"block\"><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><mi>min</mi></mtd><mtd columnalign=\"left\"><mrow><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>e</mi><mo>\u2208</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></munder><msub><mi>y</mi><mi>e</mi></msub></mrow><mo separator=\"true\">\u2003</mo><mtext>s.t.</mtext></mrow></mtd><mtd/></mtr><mtr><mtd/><mtd columnalign=\"left\"><mrow><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>e</mi><mo>\u2208</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></munder><mrow><mrow><mi>\u03c8</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mo>,</mo><mi>e</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><msub><mi>y</mi><mi>e</mi></msub></mrow></mrow><mo>\u2265</mo><mn>1</mn></mrow></mtd><mtd columnalign=\"right\"><mrow><mrow><mo>\u2200</mo><mi>p</mi></mrow><mo>\u2208</mo><mi class=\"ltx_font_mathcaligraphic\">\ud835\udcab</mi></mrow></mtd></mtr><mtr><mtd/><mtd columnalign=\"left\"><mrow><msub><mi>y</mi><mi>e</mi></msub><mo>\u2265</mo><mn>0</mn></mrow></mtd><mtd columnalign=\"right\"><mrow><mrow><mo>\u2200</mo><mi>e</mi></mrow><mo>\u2208</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mtd></mtr></mtable></math>", "type": "latex"}, {"file": "1601.01104.tex", "nexttext": "\nThis transformation is clearly polynomial in $n$.\n\nWe argue that $G_0$ admits a Hamiltonian path if and only if there exists an\noverlay graph $H$ for ${\\mathcal{P}}$ so that $|{\\mathit{E}}(H)| = n$ and ${\\mathrm{ERDC}}_{G,\n\\rho}(H) \\geq 2$.\nTo that end, suppose that $G_0$ admits a Hamiltonian path $\\pi$.\nIf $\\pi$ can be closed to a Hamiltonian cycle (in $G_0$), then take $H$ to be\nthis Hamiltonian cycle.\nOtherwise, take $H$ to be the cycle consisting of $\\pi$ and a virtual edge\nconnecting between $\\pi$'s endpoints.\nIn either case, $H$ clearly has $n$ edges and by the design of\n$\\rho$, $H$ satisfies ${\\mathrm{ERDC}}_{G, \\rho}(H) = 2$.\n\nConversely, if there exists an overlay graph $H$ for ${\\mathcal{P}}$ so that\n$|{\\mathit{E}}(H)| = n$ and ${\\mathrm{ERDC}}_{G, \\rho}(H) \\geq 2$, then $H$ must form a\nHamiltonian cycle $C$ in ${\\mathcal{P}} \\times {\\mathcal{P}}$.\nThis cycle can contain at most one virtual edge as otherwise, the removal of\n$(x, y)$ breaks two edges of $C$ which means that ${\\mathrm{ERDC}}_{G, \\rho}(H) < 2$.\nBy removing this virtual edge, we are left with a Hamiltonian path in $G_0$.\n\\end{proof}\n\n\n\\subsection{Constructing sparse $2$-${\\mathrm{ERDC}}$ overlay graphs}\n\n\nOn the positive side, we develop a polynomial time logarithmic approximation\nalgorithm for the sparsest $2$-${\\mathrm{ERDC}}$ overlay graph problem.\nOur algorithm proceeds in two stages:\nFirst, we take $T$ to be an arbitrary spanning tree of ${\\mathcal{P}} \\times\n{\\mathcal{P}}$.\nSubsequently, we aim towards (approximately) solving the following\noptimization problem, subsequently referred to as the \\emph{overlay\naugmentation} problem:\naugment $T$ with a minimum number of ${\\mathcal{P}} \\times {\\mathcal{P}}$ edges so that\nthe resulting overlay graph $H$ satisfies ${\\mathrm{ERDC}}_{G, \\rho}(H) \\geq 2$.\n\nWe will soon explain how we cope with this optimization problem, but first let\nus make the following observation.\nDenote the edges in $\\rho(T)$ by $\\rho(T) = \\{ e_1, \\dots, e_{\\ell} \\}$ and\nconsider some overlay graph $H$ such that ${\\mathit{E}}(H) \\supseteq T$ and some $1\n\\leq i \\leq \\ell$.\nLet $F_{i}(H)$ be the collection of connected components of the graph obtained\nfrom $H$ by removing all edges $e \\in {\\mathit{E}}(H)$ such that $e_i \\in \\rho(e)$.\nFix\n\n", "itemtype": "equation", "pos": 26995, "prevtext": "\n\nThe dual program can be interpreted as fractionally choosing as few as\npossible edges of $G$ so that the image under $\\rho$ of every path $p$ in\n$\\mathcal{P}$ traverses in total at least one edge.\nWe cannot solve the dual program directly as it may have an exponential\nnumber of constraints.\nFortunately, it admits an efficient separation oracle, hence it can be solved\nin polynomial time (see, e.g., \\cite{GLS93}).\n\nGiven some real vector $\\vec{y}$ indexed by the edges in ${\\mathit{E}}(G)$, our\nseparation oracle either returns a constraint which is violated by $\\vec{y}$\nor reports that all the constraints are satisfied and $\\vec{y}$ is a feasible\nsolution.\nRecall that a violated constraint corresponds to some path $p \\in \\mathcal{P}$\nsuch that $\\sum_{e \\in {\\mathit{E}}(G)} \\psi(p, e) \\cdot y_{e} < 1$.\nTherefore our goal is to design an efficient algorithm that finds such\na path $p \\in \\mathcal{P}$ if such a path exists.\n\nLet $w(e) = \\sum_{e' \\in \\rho(e)} y_{e'}$ for every edge $e \\in {\\mathit{E}}(H)$ and\nlet $H'$ be the weighted graph obtained by assigning weight $w(e)$ to each\nedge $e \\in {\\mathit{E}}(H)$.\nThe key observation in this context is that the (weighted) length of an\n$(s, t)$-path $p'$ in $H'$ equals exactly to $\\sum_{e \\in {\\mathit{E}}(G)} \\psi(p,\ne) \\cdot y_{e}$, where $p$ is the path in $H$ that corresponds to $p'$ in\n$H'$.\nTherefore, our separation oracle is implemented simply by finding a shortest\n$(s, t)$-path $p^{*}$ in $H'$:\nif the length of $p^{*}$ is smaller than $1$, then $p^{*}$ corresponds to a\nviolated constraint;\notherwise, the length of all $(s, t)$-paths in $H'$ is at least $1$, hence\n$\\vec{y}$ is a feasible solution.\nThis establishes the following theorem.\n\n\\begin{theorem} \\label{theorem:EfficientFDC}\nThe parameters ${\\mathrm{FDC}}_{G, \\rho}(s, t, H)$ and ${\\mathrm{FDC}}_{G, \\rho}(H)$ can be\ncomputed in polynomial time.\n\\end{theorem}\n\n\n\\section{Sparsest $2$-${\\mathrm{ERDC}}$ overlay graphs}\n\\label{section:SparseOverlayGraphs}\n\n\nIn this section we are interested in the following problem, referred to as the\n\\emph{sparsest $2$-${\\mathrm{ERDC}}$ overlay graph} problem:\ngiven an underlying graph $G$, a peer set ${\\mathcal{P}} \\subseteq {\\mathit{V}}(G)$, and\na routing scheme $\\rho : {\\mathcal{P}} \\times {\\mathcal{P}} \\rightarrow 2^{{\\mathit{E}}(G)}$,\nconstruct the sparsest overlay graph $H$ for ${\\mathcal{P}}$\n(in terms of number of overlay edges) satisfying ${\\mathrm{ERDC}}_{G, \\rho}(H) \\geq 2$.\nOf course, one has to make sure that such an overlay graph $H$ exists, so in\nthe context of the sparsest $2$-${\\mathrm{ERDC}}$ overlay graph problem we always assume\nthat ${\\mathrm{ERDC}}_{G, \\rho}(K_{{\\mathcal{P}}}) \\geq 2$, where $K_{{\\mathcal{P}}}$ is the complete graph\non ${\\mathcal{P}}$.\nThis means that a trivial solution with ${n}\\choose{2}$ edges, where $n =\n|{\\mathcal{P}}|$, always exists and the challenge is to construct a sparser one.\n\n\n\\subsection{Hardness}\n\n\nWe begin our treatment of this problem with a hardness result.\n\n\\begin{theorem} \\label{theorem:HardnessSparsestERDC}\nThe sparsest $2$-${\\mathrm{ERDC}}$ overlay graph problem is NP-hard.\n\\end{theorem}\n\n\\begin{proof}\nThe assertion is proved by a reduction from the \\emph{Hamiltonian path}\nproblem.\nConsider an $n$-vertex graph $G_0$ input to the Hamiltonian path problem.\nTransform it into an instance of the sparsest $2$-${\\mathrm{ERDC}}$ overlay graph\nproblem as follows:\nConstruct the underlying graph $G$ by setting ${\\mathit{V}}(G) = {\\mathit{V}}(G_0)\n\\cup \\{x, y\\}$ and ${\\mathit{E}}(G) = {\\mathit{E}}(G_0) \\cup \\{(x, y)\\} \\cup \\{ (v, x),\n(v, y) \\mid v \\in {\\mathit{V}}(G_0) \\}$ and let ${\\mathcal{P}} = {\\mathit{V}}(G_0)$.\nDefine the routing scheme $\\rho$ by setting\n\n", "index": 5, "text": "$$\n\\rho(u, v) =\n\\left\\{\n\\begin{array}{ll}\n(u, v) & \\text{ if } (u, v) \\in {\\mathit{E}}(G_0) \\\\\n(u, x, y, v) & \\text{ otherwise.}\n\\end{array}\n\\right.\n$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"\\rho(u,v)=\\left\\{\\begin{array}[]{ll}(u,v)&amp;\\text{ if }(u,v)\\in{\\mathit{E}}(G_{0%&#10;})\\\\&#10;(u,x,y,v)&amp;\\text{ otherwise.}\\end{array}\\right.\" display=\"block\"><mrow><mrow><mi>\u03c1</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mo>{</mo><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><mrow><mo stretchy=\"false\">(</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mtd><mtd columnalign=\"left\"><mrow><mrow><mtext>\u00a0if\u00a0</mtext><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2208</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>G</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mtd></mtr><mtr><mtd columnalign=\"left\"><mrow><mo stretchy=\"false\">(</mo><mi>u</mi><mo>,</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>,</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mtd><mtd columnalign=\"left\"><mtext>\u00a0otherwise.</mtext></mtd></mtr></mtable><mi/></mrow></mrow></math>", "type": "latex"}, {"file": "1601.01104.tex", "nexttext": "\nWe think of $\\kappa(H)$ as a measure of the distance of the overlay graph\n$H$ from being a feasible solution to the overlay augmentation problem (i.e.,\n${\\mathrm{ERDC}}(H) \\geq 2$).\n\n\\begin{observation*}\nAn overlay graph $H \\supseteq T$ satisfies ${\\mathrm{ERDC}}(H) \\geq 2$ if and only if\n$\\kappa(H) = 0$.\n\\end{observation*}\n\n\\begin{proof}\nIf ${\\mathrm{ERDC}}(H) \\geq 2$, then $F_{i}(H)$ must consist of a single connected\ncomponent for every $1 \\leq i \\leq \\ell$, thus $\\kappa(H) = 0$.\nConversely, if $\\kappa(H) = 0$, then necessarily $|F_{i}(H)| = 1$ for every $1\n\\leq i \\leq \\ell$, which means that $H$ does not disconnect by the removal of\nany edge $e_i \\in \\rho(T)$.\nIt is also clear that the removal of any edge in ${\\mathit{E}}(G) - \\rho(T)$ does\nnot disconnect $H$ as the tree $T$ remains intact.\nTherefore, ${\\mathrm{ERDC}}(H) \\geq 2$.\n\\end{proof}\n\nConsider some edge $e \\in ({\\mathcal{P}} \\times {\\mathcal{P}}) - {\\mathit{E}}(H)$ and let $H \\cup\n\\{e\\}$ denote the overlay graph obtained from $H$ by adding the edge $e$.\nBy the definition of the parameter $\\kappa$, we know that\n$\n\\Delta_{i}(e, H) = \\kappa_{i}(H) - \\kappa_{i}(H \\cup \\{e\\})\n$\nis either $0$ or $1$ for any $1 \\leq i \\leq \\ell$.\nFixing\n$\n\\Delta(e, H) = \\kappa(H) - \\kappa(H \\cup \\{e\\})\n$,\nwe observe that:\n$\\Delta(e, H) = \\sum_{i = 1}^{\\ell} \\Delta_{i}(e, H)$\nreferred to as Property $\\mathbf{(\\star)}$.\n\nWe are now ready to complete the description of our approximation algorithm.\nStarting from $H = T$, the algorithm gradually adds edges to $H$ as long as\n$\\kappa(H) > 0$ according to the following greedy rule.\nAt any intermediate step, we add to $H$ an edge $e \\in ({\\mathcal{P}} \\times {\\mathcal{P}})\n- {\\mathit{E}}(H)$ that yields the maximum $\\Delta(e, H)$.\nWhen $\\kappa(H)$ decreases to zero, the algorithm terminates (recall that this\nmeans that ${\\mathrm{ERDC}}(H) \\geq 2$).\n\nThe analysis of our approximation algorithm relies on the following\nproposition.\n\n\\begin{proposition} \\label{proposition:Submodularity}\nThe parameter $\\kappa$ can be computed in polynomial time.\nMoreover, for every two overlay graphs $H_1, H_2$ such that ${\\mathit{E}}(H_1)\n\\subseteq {\\mathit{E}}(H_2)$, we have\n\\begin{smallitemize}\n\\item[\\rm (1)]\n$\\kappa(H_1) \\geq \\kappa(H_2)$; and\n\\item[\\rm (2)]\n$\\Delta(e, H_1) \\geq \\Delta(e, H_2)$ for every edge $e \\in {\\mathcal{P}} \\times\n{\\mathcal{P}}$.\n\\end{smallitemize}\n\\end{proposition}\n\n\\begin{proof}\nThe fact that $\\kappa$ can be computed efficiently and the fact that\n$\\kappa(H_1) \\geq \\kappa(H_2)$ are clear from the definition of $\\kappa$, so\nour goal is to prove that $\\Delta(e, H_1) \\geq \\Delta(e, H_2)$ for every $e\n\\in {\\mathcal{P}} \\times {\\mathcal{P}}$.\nBy Property $\\mathbf{(\\star)}$, it suffices to show that\n$\\Delta_{i}(e, H_1) \\geq \\Delta_{i}(e, H_2)$ for every $1 \\leq i \\leq \\ell$.\nIf $\\Delta_{i}(e, H_2) = 0$, then this holds vacuously, so suppose that\n$\\Delta_{i}(e, H_2) = 1$.\nThis means that $e_i \\notin \\rho(e)$ and the endpoints of $e$ belong to\ndifferent connected components in $F_{i}(H_2)$.\nBut since ${\\mathit{E}}(H_1) \\subseteq {\\mathit{E}}(H_2)$, it follows that the endpoints\nof $e$ must also belong to different connected components in $F_{i}(H_1)$,\nhence $\\Delta_{i}(e, H_1) = 1$ as well.\n\\end{proof}\n\nProposition~\\ref{proposition:Submodularity} implies that the overlay\naugmentation problem falls into the class of \\emph{submodular cover} problems\n(cf. \\cite{W82,BKP01}) and our greedy approach is guaranteed to have an\napproximation ratio of at most $\\ln(\\kappa(T)) + 1 = O (\\log N)$, where $N =\n|{\\mathit{V}}(G)|$.\nMore formally, letting $\\hat{H}$ be a sparsest overlay graph such that\n$\\hat{H} \\supseteq T$ and ${\\mathrm{ERDC}}(\\hat{H}) \\geq 2$, it is guaranteed that the\noverlay graph $H$ generated by our greedy approach satisfies\n$|{\\mathit{E}}(H) - T| \\leq O (\\log N) \\cdot |{\\mathit{E}}(\\hat{H}) - T|$.\n\nTo conclude the analysis, let $H^{*}$ be an optimal solution to the sparsest\n$2$-${\\mathrm{ERDC}}$ overlay graph problem.\nClearly, $|{\\mathit{E}}(H^{*})| > n - 1 = |T|$.\nMoreover, since ${\\mathit{E}}(H^{*}) \\cup T$ is a candidate for $\\hat{H}$, it\nfollows that $|{\\mathit{E}}(H^{*}) \\cup T| \\geq |\\hat{H}|$, thus $|{\\mathit{E}}(H^{*})|\n\\geq |{\\mathit{E}}(\\hat{H}) - T|$.\nTherefore,\n\n", "itemtype": "equation", "pos": 29412, "prevtext": "\nThis transformation is clearly polynomial in $n$.\n\nWe argue that $G_0$ admits a Hamiltonian path if and only if there exists an\noverlay graph $H$ for ${\\mathcal{P}}$ so that $|{\\mathit{E}}(H)| = n$ and ${\\mathrm{ERDC}}_{G,\n\\rho}(H) \\geq 2$.\nTo that end, suppose that $G_0$ admits a Hamiltonian path $\\pi$.\nIf $\\pi$ can be closed to a Hamiltonian cycle (in $G_0$), then take $H$ to be\nthis Hamiltonian cycle.\nOtherwise, take $H$ to be the cycle consisting of $\\pi$ and a virtual edge\nconnecting between $\\pi$'s endpoints.\nIn either case, $H$ clearly has $n$ edges and by the design of\n$\\rho$, $H$ satisfies ${\\mathrm{ERDC}}_{G, \\rho}(H) = 2$.\n\nConversely, if there exists an overlay graph $H$ for ${\\mathcal{P}}$ so that\n$|{\\mathit{E}}(H)| = n$ and ${\\mathrm{ERDC}}_{G, \\rho}(H) \\geq 2$, then $H$ must form a\nHamiltonian cycle $C$ in ${\\mathcal{P}} \\times {\\mathcal{P}}$.\nThis cycle can contain at most one virtual edge as otherwise, the removal of\n$(x, y)$ breaks two edges of $C$ which means that ${\\mathrm{ERDC}}_{G, \\rho}(H) < 2$.\nBy removing this virtual edge, we are left with a Hamiltonian path in $G_0$.\n\\end{proof}\n\n\n\\subsection{Constructing sparse $2$-${\\mathrm{ERDC}}$ overlay graphs}\n\n\nOn the positive side, we develop a polynomial time logarithmic approximation\nalgorithm for the sparsest $2$-${\\mathrm{ERDC}}$ overlay graph problem.\nOur algorithm proceeds in two stages:\nFirst, we take $T$ to be an arbitrary spanning tree of ${\\mathcal{P}} \\times\n{\\mathcal{P}}$.\nSubsequently, we aim towards (approximately) solving the following\noptimization problem, subsequently referred to as the \\emph{overlay\naugmentation} problem:\naugment $T$ with a minimum number of ${\\mathcal{P}} \\times {\\mathcal{P}}$ edges so that\nthe resulting overlay graph $H$ satisfies ${\\mathrm{ERDC}}_{G, \\rho}(H) \\geq 2$.\n\nWe will soon explain how we cope with this optimization problem, but first let\nus make the following observation.\nDenote the edges in $\\rho(T)$ by $\\rho(T) = \\{ e_1, \\dots, e_{\\ell} \\}$ and\nconsider some overlay graph $H$ such that ${\\mathit{E}}(H) \\supseteq T$ and some $1\n\\leq i \\leq \\ell$.\nLet $F_{i}(H)$ be the collection of connected components of the graph obtained\nfrom $H$ by removing all edges $e \\in {\\mathit{E}}(H)$ such that $e_i \\in \\rho(e)$.\nFix\n\n", "index": 7, "text": "$$\n\\kappa_{i}(H) = |F_{i}(H)| - 1\n\\quad \\text{and} \\quad\n\\kappa(H) = \\sum_{i = 1}^{\\ell}\n\\kappa_{i}(H) \\, .\n$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex4.m1\" class=\"ltx_Math\" alttext=\"\\kappa_{i}(H)=|F_{i}(H)|-1\\quad\\text{and}\\quad\\kappa(H)=\\sum_{i=1}^{\\ell}%&#10;\\kappa_{i}(H)\\,.\" display=\"block\"><mrow><mrow><mrow><mrow><msub><mi>\u03ba</mi><mi>i</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>H</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><msub><mi>F</mi><mi>i</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>H</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">|</mo></mrow><mo>-</mo><mn>1</mn></mrow><mo mathvariant=\"italic\" separator=\"true\">\u2003</mo><mtext>and</mtext></mrow></mrow><mo mathvariant=\"italic\" separator=\"true\">\u2003</mo><mrow><mrow><mi>\u03ba</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>H</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">\u2113</mi></munderover><mrow><msub><mi>\u03ba</mi><mi>i</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>H</mi><mo rspace=\"4.2pt\" stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01104.tex", "nexttext": "\nwhich establishes the following theorem.\n\n\\begin{theorem} \\label{theorem:ApproximationSparsestERDC}\nThe sparsest $2$-${\\mathrm{ERDC}}$ overlay graph problem admits a polynomial-time\nlogarithmic-approximation.\n\\end{theorem}\n\n\n\\subsection{A special case}\n\n\nWe now turn to consider instances of the sparsest $2$-${\\mathrm{ERDC}}$ overlay graph\nproblem satisfying the following two simplifying assumptions:\n\\begin{smallitemize}\n\\item[(1)] all vertices are peers, namely, ${\\mathcal{P}} = {\\mathit{V}}(G)$; and\n\\item[(2)] $\\rho$ maps every edge in ${\\mathit{E}}(G)$ to itself.\n\\end{smallitemize}\nWe show that under these assumptions, one can always find a feasible solution\nwith at most $2 n - 2$ edges.\nSince any overlay graph $H$ satisfying ${\\mathrm{ERDC}}(H) \\geq 2$ must have at least\n$n$ edges, this immediately implies a $2$-approximation for our problem.\n\n\\LongVersion \nThe construction proceeds, once again, in two stages:\nFirst, we take $H$ to be an arbitrary spanning tree $T$ of $G$.\nThen, for each edge $e \\in T$, we add to $H$ some edge $e' \\in\n{\\mathit{E}}(G)$ such that $e$ belongs to the cycle closed by appending $e'$ to $T$.\nNote that such an edge $e'$ exists since $G$ is $2$-edge connected (as\notherwise, ${\\mathrm{ERDC}}_{G, \\rho}(K_{{\\mathcal{P}}}) < 2$).\nThe overlay graph $H$ clearly contains at most $2 n - n$ edges.\nMoreover, assumption~(A2) implies that $\\rho$ maps every edge in ${\\mathit{E}}(H)$\nto itself.\nTherefore, our construction guarantees that ${\\mathrm{ERDC}}(H) \\geq 2$:\non one hand, the spanning tree $T$ ensures that the graph obtained from $H$ by\nremoving the edge $e$ is connected for every edge $e \\notin T$;\non the other hand, $H$ does not disconnect by the removal of any single edge\n$e \\in T$ due to the second stage of the construction.\n\\LongVersionEnd \n\n\\begin{theorem} \\label{theorem:ConstructionSparseERDC}\nUnder assumptions~(1) and~(2), an overlay graph $H$ with $2 n - 2$ edges\nsatisfying ${\\mathrm{ERDC}}(H) \\geq 2$ can be constructed in polynomial time.\n\\end{theorem}\n\n\\newpage\n\n\\begin{thebibliography}{99}\n\n\\bibitem{BKP01}\nJ. Bar-Ilan, G. Kortsarz, and D. Peleg.\nGeneralized submodular cover problems and applications.\n\\emph{Theoretical Computer Science} 250:179--200, 2001.\n\n\\bibitem{CLRS09}\nT.H. Cormen, C.E. Leiserson, R.L. Rivest, and C. Stein.\n\\emph{Introduction to Algorithms}, MIT Press, 2009.\n\n\\bibitem{CDPRV07}\nD. Coudert, P. Datta, S. Perennes, H. Rivano, M.-E. Voge.\nShared Risk Resource Group Complexity and Approximability Issues.\n{\\em Parallel Processing Letters} 17(2): 169-184 (2007)\n\n\\bibitem{Dini70}\nE.A. Dinic.\nAlgorithm for solution of a problem of maximum flow in a network with power\nestimation.\n\\emph{Soviet Math. Doklady (Doklady)}, 11:1277--1280, 1970.\n\n\\bibitem{EK72}\nJ. Edmonds and R.M. Karp.\nTheoretical improvements in algorithmic efficiency for network flow problems.\n\\emph{J. ACM}, 19(2): 248--264, 1972.\n\n\\bibitem{EFS56}\nP. Elias, A. Feinstein, and C.E. Shannon.\nA note on the maximum flow through a network.\n\\emph{IRE Trans. Inf. Theory}, IT-2(4):117--119, 1956.\n\n\\bibitem{FF56}\nL.R. Ford and D.R. Fulkerson.\nMaximal flow through a network.\n\\emph{Canadian J. Mathematics}, 8:399--404, 1956.\n\n\\bibitem{GLS93}\nM. Gr\\\"{o}tschel, L. Lov\\'{a}sz, and A. Schrijver.\n\\emph{Geometric Algorithms and Combinatorial Optimization}.\n\nSpringer-Verlag, Berlin, 1993.\n\n\\bibitem{Hast99}\nJ. H{\\aa}stad.\nClique is hard to approximate within $n^{1 - \\epsilon}$.\n\\emph{Acta Mathematica}, 182:105--142, 1999.\n\n\\bibitem{Karp72}\nR.M. Karp.\nReducibility among combinatorial problems.\nIn \\emph{Complexity of Computer Computations}, R.E. Miller and J.W. Thatcher\n(Eds), pp. 85--103, 1972.\n\n\\bibitem{KT05}\nJ. Kleinberg and E. Tardos.\n\\emph{Algorithm Design}.\nAddison Wesley, 2005.\n\n\\bibitem{Meng27}\nK. Menger.\nZur allgemeinen Kurventheorie.\n\\emph{Fund. Math.}, 10:96--115, 1927.\n\n\\bibitem{prev}\nKayi Lee, Eytan Modiano, and Hyang Won Lee.\nCross-layer Survivability in WDM-Based Networks.\" ACM/IEEE \\emph{Transactions on Networking}, Vol. 19, No, 4, Augist 2011.\n\n\\bibitem{cisco-srlg}\nMPLS Traffic Engineering: Shared Risk Link Groups (SRLG),\nCisco IOS Software Releases 12.0 S,\n\nwww.cisco.com/en/US/docs/ios/12\\_0s/feature/guide/fs29srlg.html\n\n\\bibitem{intro-srlg}\nNetwork protection techniques, network failure recovery, network failure events.\nNetwork Protection Website,\n\nwww.network-protection.net/shared-risk-link-group-srlg/.\n\n\\bibitem{CiscoPolicy}\nPolicy-Based Routing.\nWhite Paper, Cisco Systems Inc., 1996. \\\\\n\nwww.cisco.com/warp/public/cc/pd/iosw/tech/plicy\\_wp.pdf.\n\n\\bibitem{protection}\nS. Ramamurthy and B. Mukherjee.\nSurvivable WDM mesh networks. Part I-Protection.\nIn Proc. INFOCOM, 1999, pp. 744-751, New York.\n\n\\bibitem{W82}\nL.A. Wolsey.\nAn analysis of the greedy algorithm for the submodular set covering problem.\n\\emph{Combinatorica} 2:385--393, 1982.\n\n\\end{thebibliography}\n\n\n\\clearpage\n\n\\pagenumbering{roman}\n\\appendix\n\n\\setcounter{equation}{0}\n\\begin{center}\n\\textbf{\\large{APPENDIX}}\n\\end{center}\n\n\n\\section{Hardness of approximation for the simple path variants}\n\\label{appendix:Hardness}\n\nSimilarly to \\cite{prev}, we base our hardness results on the relationship\nbetween path-disjoint deep connectivity and encoding \\emph{set systems}.\nAn \\emph{$(m, n)$-set system} ${\\mathcal{S}}$ is a pair $(D, X)$, where: \n\\begin{smallitemize}\n\\item\n$D$ is a domain of elements, $|D| = m$; and\n\\item \n$X \\subseteq 2^D$ is a collection of sets in the domain $D$, $|X| = n$.\n\\end{smallitemize}\nIt is convenient to represent ${\\mathcal{S}}$ as a Boolean characteristic function,\n${\\mathcal{S}} : [m] \\times [n] \\rightarrow \\{0, 1\\}$, so that for every $i \\in [m]$\nand $j \\in [n]$, ${\\mathcal{S}}(i, j) = 1$ if and only if the $i^{\\text{th}}$ element\nof $D$ is included in the $j^{\\text{th}}$ set of $X$.\n\n\\begin{lemma} \\label{result:EncodeSetSystem}\nFor every overlay graph $H$, edge subset $F \\subseteq {\\mathit{E}}(H)$ of\ncardinality $|F| = n$, and $(m, n)$-set system ${\\mathcal{S}}=(D,X)$, there exist an\nunderlying graph $G$ and a routing scheme $\\rho : {\\mathit{E}}(H) \\rightarrow\n2^{{\\mathit{E}}(G)}$ such that: \n\\begin{smallitemize}\n\\item[\\rm (1)]\n$|{\\mathit{V}}(G)| = |{\\mathit{V}}(H)| + O(m \\cdot n)$;\n\\item[\\rm (2)]\n${\\mathit{E}}(G) = ({\\mathit{E}}(H) - F) \\cup E_{D} \\cup E_{\\rho}$, where\n$E_D$ and $E_\\rho$ are sets of new edges on ${\\mathit{V}}(G)$, $|E_{D}| = m$, and\n$|E_{\\rho}| = O (m \\cdot n)$;\n\\item[\\rm (3)]\nfor every $e_j \\in F$, $j \\in [n]$, and $e_i \\in E_{D}$, $i \\in [m]$, it holds\nthat $e_i \\in \\rho(e_j) \\iff {\\mathcal{S}}(i, j) = 1$; and\n\\item[\\rm (4)]\nfor every $e \\in E_{\\rho}$, there exists a unique $e_j \\in F$, $j \\in [n]$,\nsuch that $e \\in \\rho(e_j)$.\n\\end{smallitemize}\n\\end{lemma}\n\n\\begin{proof}\nInformally, $G$ and $\\rho$ are designed so that the set system ${\\mathcal{S}}=(D,X)$\nis encoded in such a way that $E_{D}$ corresponds to the element domain $D$\nand $F$ corresponds to the set collection $X$. For a more precise description \nof the design of the underlying graph $G$ and routing scheme $\\rho$, \nlet us first present a simpler construction where $G$ is allowed to be \na multigraph (with parallel edges).\n\nThe vertex set of $G$ consists of the vertices of $H$ and two additional new\nvertices $v_{i}^{a}, v_{i}^{b}$ for every $i \\in [m]$.\nThe edge set of $G$ consists of three disjoint subsets.\nThe first subset is just the edges of ${\\mathit{E}}(H) - F$;\n$\\rho$ maps every such $H$-edge to itself, namely, the edge \n$(x, y) \\in {\\mathit{E}}(H) - F$ is mapped to the path in $G$\nthat consists of the single edge $(x, y)$.\nThe second subset is $E_{D} = \\{ e_i = (v_{i}^{a}, v_{i}^{b}) \\mid i \\in [m]\\}$.\nThe routing scheme $\\rho$ is designed to guarantee that an edge $e_i \\in\nE_{D}$ appears in the path $\\rho(e_j)$, $e_j \\in F$, if and only if ${\\mathcal{S}}(i,\nj) = 1$.\nFor that purpose, we introduce the third subset $E_{\\rho}$:\nfor each $j \\in [n]$, assuming that the edge $e_j \\in F$ connects the vertices\n$x$ and $y$ in $H$ and that the $j^{\\text{th}}$ set in ${\\mathcal{S}}$ is $\\{ i_1,\n\\dots, i_k \\} \\subseteq [m]$, we add to $E_{\\rho}$ the edge $(x,\nv_{i_1}^{a})$, the edges $(v_{i_{\\ell}}^{b}, v_{i_{\\ell + 1}}^{a})$ for $\\ell\n= 1, \\dots, k - 1$, and the edge $(v_{i_{k}}^{b}, y)$.\nIt is important to point out that a new copy of those edges are added to\n$E_{\\rho}$ for each $j \\in [n]$, which may create edge multiplicities.\nFinally, $\\rho$ maps the edge $e_j$ to the path $p_j = \\langle x, v_{i_1}^{a},\nv_{i_1}^{b}, \\dots, v_{i_k}^{a}, v_{i_k}^{b}, y \\rangle$.\nRefer to Figure~\\ref{figure:EncodeSetSystem} for an illustration.\n\nThe construction of $G$ immediately implies that $|{\\mathit{V}}(G)| =\n|{\\mathit{V}}(H)| + 2 m$ and that $|E_{D}| = m$.\nTo see that $|E_{\\rho}| = O (n \\cdot m)$, observe that each\n$E_{\\rho}$-edge belongs to some path $p_j$, $j \\in [n]$, and that each such\npath admits at most two hops for every $i \\in [m]$.\nIt remains to show that for every $j \\in [n]$ and $i \\in [m]$, $e_i \\in\n\\rho(e_j)$ if and only if ${\\mathcal{S}}(i, j) = 1$, which follows directly\nfrom the design of $\\rho$ as the path $p_j$ goes through an edge $e_i \\in\nE_{D}$ if and only if ${\\mathcal{S}}(i, j) = 1$.\n\n\\begin{figure}\n\\begin{center}\n\\includegraphics[width=0.6\\linewidth]{encode-set-system.pdf}\n\\end{center}\n\\caption{\\label{figure:EncodeSetSystem}\nThe underlying (multi)graph $G$.\nThe vertices of $H$ are depicted by the black circles;\nthe vertices in $\\{ v_{i}^{a}, v_{i}^{b} \\mid i \\in [m] \\}$ are depicted by\nthe gray circles.\nThe $E_{D}$-edges are depicted by the solid segments;\nthe $E_{\\rho}$-edges along the path $p_j$ to which $\\rho$ maps the edge $e_j =\n(x, y) \\in {\\mathit{E}}(H)$ are depicted by the dashed segments.\n}\n\\vspace*{-.5cm}\n\\end{figure}\n\nFinally, note that edge multiplicities in the constructed multigraph $G$ \nmay occur only among the edges in $E_{\\rho}$.\nHence, by subdividing each edge $e = (u, v) \\in E_{\\rho}$, replacing it with the\nedges $(u, z_e)$ and $(v, z_e)$, where $z_e$ is a new vertex, we can turn the\nmultigraph $G$ into a simple graph at the cost of adding $O (m \\cdot n)$ extra\nvertices. The lemma follows.\n\\end{proof}\n\nThe hardness results established in this section are based on\nLemma~\\ref{result:EncodeSetSystem} by a reduction from the \\emph{set packing}\nproblem:\nGiven an $(m, n)$-set system ${\\mathcal{S}} = (D, X)$ and a positive integer $k$, the\nset packing problem asks whether there exist $k$ pairwise disjoint sets in\n$X$.\nThe problem is known to be NP-complete;\nin fact, it is among the original 21 NP-complete problems listed by\nKarp~\\cite{Karp72}.\n\nThe inapproximability of the ${\\mathrm{SPDDC}}_{G, \\rho}(s, t, H)$ parameter is proved\nby reducing the set packing problem to the problem of distinguishing between \nthe case\n${\\mathrm{SPDDC}}_{G, \\rho}(s, t, H) = 0$ and the case ${\\mathrm{SPDDC}}_{G, \\rho}(s, t, H) \\geq 1$.\nGiven as input to the set packing problem some $(m, n)$-set system ${\\mathcal{S}}$\nwith set collection $X = \\{ S^1, \\dots, S^n \\}$ and positive integer $k$,\nwe first construct the $(m, k \\cdot n)$-set system ${\\mathcal{S}}'$ obtained\nfrom ${\\mathcal{S}}$ by creating $k$ identical copies $S_{1}^{j}, \\dots, S_{k}^{j}$\nof each set $S^j$ in ${\\mathcal{S}}$.\nClearly, ${\\mathcal{S}}'$ admits a set packing of size $k$ if and only if ${\\mathcal{S}}$\nadmits a set packing of size $k$.\nThen, we construct the overlay graph $H$ as illustrated in\nFigure~\\ref{figure:OverlayHops}.\nLet $\\{ F = (u_{\\ell - 1}, v_{\\ell}^{j}) \\mid 1 \\leq \\ell \\leq k, j \\in [n] \\}$ and\ntake $G$ and $\\rho$ to be the underlying graph and routing scheme promised by\nLemma~\\ref{result:EncodeSetSystem} when applied to $H$, $F$, and\n${\\mathcal{S}}'$, where $\\rho$ is organized so that edge $(u_{\\ell - 1},\nv_{\\ell}^{j})$ in $F$ corresponds to set $S_{\\ell}^{j}$ in ${\\mathcal{S}}'$.\n\n\\begin{figure}\n\\begin{center}\n\\includegraphics[width=0.8\\linewidth]{overlay-hops.pdf}\n\\end{center}\n\\caption{\\label{figure:OverlayHops}\nThe overlay graph $H$ used in the hardness proof of ${\\mathrm{SPDDC}}_{G, \\rho}(s, t, H)$.\n}\n\\end{figure}\n\nAssume first that ${\\mathrm{SPDDC}}_{G, \\rho}(s, t, H) \\geq 1$ and let $\\pi$ be an $(s,\nt)$-path in $H$ such that its image under $\\rho$ is a simple path in $G$.\nLet $(u_0, v_{1}^{j_1}), \\dots, (u_{k - 1}, v_{k}^{j_k})$ be the edges\ntraversed by $\\pi$ on odd hops.\nBy the definition of ${\\mathcal{S}}'$ and the design of $\\rho$, it must be that\n$j_{\\ell} \\neq j_{\\ell'}$ for every $1 \\leq \\ell < \\ell' \\leq k$ as otherwise,\n$\\rho(\\pi)$ does not form a simple path in $G$.\nLemma~\\ref{result:EncodeSetSystem} then guarantees that the sets $S^{j_1},\n\\dots, S^{j_k}$ in ${\\mathcal{S}}$ are pairwise disjoint.\nIn the converse direction, assume that the sets $S^{j_1}, \\dots, S^{j_k}$ in\n${\\mathcal{S}}$ are pairwise disjoint.\nBy the definition of ${\\mathcal{S}}'$, the sets $S_{1}^{j_1}, \\dots, S_{k}^{j_k}$ in\n${\\mathcal{S}}'$ are also pairwise disjoint.\nLemma~\\ref{result:EncodeSetSystem} then guarantees that the image under\n$\\rho$ of the path $\\langle u_0, v_{1}^{j_1}, u_1, v_{2}^{j_2}, \\dots, u_{k - 1},\nv_{k}^{j_k}, u_k \\rangle$ in $H$ is simple, hence ${\\mathrm{SPDDC}}_{G, \\rho}(s, t, H)\n\\geq 1$, which establishes Theorem~\\ref{theorem:HardnessSPDDC}.\nTheorem~\\ref{theorem:HardnessAllPairsSPDDC} follows by observing that in the\naforementioned construction, ${\\mathrm{SPDDC}}_{G, \\rho}(x, y, H)$ is minimized by\ntaking $x = s$ and $y = t$.\n\n\n", "itemtype": "equation", "pos": 33756, "prevtext": "\nWe think of $\\kappa(H)$ as a measure of the distance of the overlay graph\n$H$ from being a feasible solution to the overlay augmentation problem (i.e.,\n${\\mathrm{ERDC}}(H) \\geq 2$).\n\n\\begin{observation*}\nAn overlay graph $H \\supseteq T$ satisfies ${\\mathrm{ERDC}}(H) \\geq 2$ if and only if\n$\\kappa(H) = 0$.\n\\end{observation*}\n\n\\begin{proof}\nIf ${\\mathrm{ERDC}}(H) \\geq 2$, then $F_{i}(H)$ must consist of a single connected\ncomponent for every $1 \\leq i \\leq \\ell$, thus $\\kappa(H) = 0$.\nConversely, if $\\kappa(H) = 0$, then necessarily $|F_{i}(H)| = 1$ for every $1\n\\leq i \\leq \\ell$, which means that $H$ does not disconnect by the removal of\nany edge $e_i \\in \\rho(T)$.\nIt is also clear that the removal of any edge in ${\\mathit{E}}(G) - \\rho(T)$ does\nnot disconnect $H$ as the tree $T$ remains intact.\nTherefore, ${\\mathrm{ERDC}}(H) \\geq 2$.\n\\end{proof}\n\nConsider some edge $e \\in ({\\mathcal{P}} \\times {\\mathcal{P}}) - {\\mathit{E}}(H)$ and let $H \\cup\n\\{e\\}$ denote the overlay graph obtained from $H$ by adding the edge $e$.\nBy the definition of the parameter $\\kappa$, we know that\n$\n\\Delta_{i}(e, H) = \\kappa_{i}(H) - \\kappa_{i}(H \\cup \\{e\\})\n$\nis either $0$ or $1$ for any $1 \\leq i \\leq \\ell$.\nFixing\n$\n\\Delta(e, H) = \\kappa(H) - \\kappa(H \\cup \\{e\\})\n$,\nwe observe that:\n$\\Delta(e, H) = \\sum_{i = 1}^{\\ell} \\Delta_{i}(e, H)$\nreferred to as Property $\\mathbf{(\\star)}$.\n\nWe are now ready to complete the description of our approximation algorithm.\nStarting from $H = T$, the algorithm gradually adds edges to $H$ as long as\n$\\kappa(H) > 0$ according to the following greedy rule.\nAt any intermediate step, we add to $H$ an edge $e \\in ({\\mathcal{P}} \\times {\\mathcal{P}})\n- {\\mathit{E}}(H)$ that yields the maximum $\\Delta(e, H)$.\nWhen $\\kappa(H)$ decreases to zero, the algorithm terminates (recall that this\nmeans that ${\\mathrm{ERDC}}(H) \\geq 2$).\n\nThe analysis of our approximation algorithm relies on the following\nproposition.\n\n\\begin{proposition} \\label{proposition:Submodularity}\nThe parameter $\\kappa$ can be computed in polynomial time.\nMoreover, for every two overlay graphs $H_1, H_2$ such that ${\\mathit{E}}(H_1)\n\\subseteq {\\mathit{E}}(H_2)$, we have\n\\begin{smallitemize}\n\\item[\\rm (1)]\n$\\kappa(H_1) \\geq \\kappa(H_2)$; and\n\\item[\\rm (2)]\n$\\Delta(e, H_1) \\geq \\Delta(e, H_2)$ for every edge $e \\in {\\mathcal{P}} \\times\n{\\mathcal{P}}$.\n\\end{smallitemize}\n\\end{proposition}\n\n\\begin{proof}\nThe fact that $\\kappa$ can be computed efficiently and the fact that\n$\\kappa(H_1) \\geq \\kappa(H_2)$ are clear from the definition of $\\kappa$, so\nour goal is to prove that $\\Delta(e, H_1) \\geq \\Delta(e, H_2)$ for every $e\n\\in {\\mathcal{P}} \\times {\\mathcal{P}}$.\nBy Property $\\mathbf{(\\star)}$, it suffices to show that\n$\\Delta_{i}(e, H_1) \\geq \\Delta_{i}(e, H_2)$ for every $1 \\leq i \\leq \\ell$.\nIf $\\Delta_{i}(e, H_2) = 0$, then this holds vacuously, so suppose that\n$\\Delta_{i}(e, H_2) = 1$.\nThis means that $e_i \\notin \\rho(e)$ and the endpoints of $e$ belong to\ndifferent connected components in $F_{i}(H_2)$.\nBut since ${\\mathit{E}}(H_1) \\subseteq {\\mathit{E}}(H_2)$, it follows that the endpoints\nof $e$ must also belong to different connected components in $F_{i}(H_1)$,\nhence $\\Delta_{i}(e, H_1) = 1$ as well.\n\\end{proof}\n\nProposition~\\ref{proposition:Submodularity} implies that the overlay\naugmentation problem falls into the class of \\emph{submodular cover} problems\n(cf. \\cite{W82,BKP01}) and our greedy approach is guaranteed to have an\napproximation ratio of at most $\\ln(\\kappa(T)) + 1 = O (\\log N)$, where $N =\n|{\\mathit{V}}(G)|$.\nMore formally, letting $\\hat{H}$ be a sparsest overlay graph such that\n$\\hat{H} \\supseteq T$ and ${\\mathrm{ERDC}}(\\hat{H}) \\geq 2$, it is guaranteed that the\noverlay graph $H$ generated by our greedy approach satisfies\n$|{\\mathit{E}}(H) - T| \\leq O (\\log N) \\cdot |{\\mathit{E}}(\\hat{H}) - T|$.\n\nTo conclude the analysis, let $H^{*}$ be an optimal solution to the sparsest\n$2$-${\\mathrm{ERDC}}$ overlay graph problem.\nClearly, $|{\\mathit{E}}(H^{*})| > n - 1 = |T|$.\nMoreover, since ${\\mathit{E}}(H^{*}) \\cup T$ is a candidate for $\\hat{H}$, it\nfollows that $|{\\mathit{E}}(H^{*}) \\cup T| \\geq |\\hat{H}|$, thus $|{\\mathit{E}}(H^{*})|\n\\geq |{\\mathit{E}}(\\hat{H}) - T|$.\nTherefore,\n\n", "index": 9, "text": "\\begin{align*}\n|{\\mathit{E}}(H)|\n~ \\leq & ~\nO (\\log N) \\cdot |{\\mathit{E}}(\\hat{H}) - T| + |T| \\\\\n\\leq & ~\nO (\\log N) \\cdot |{\\mathit{E}}(H^{*})| + |{\\mathit{E}}(H^{*})| \\\\\n~ = & ~\nO (\\log(N) \\cdot |{\\mathit{E}}(H^{*})|)\n\\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle|{\\mathit{E}}(H)|~{}\\leq\" display=\"inline\"><mrow><mrow><mo stretchy=\"false\">|</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>H</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo rspace=\"5.8pt\" stretchy=\"false\">|</mo></mrow><mo>\u2264</mo><mi/></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle~{}O(\\log N)\\cdot|{\\mathit{E}}(\\hat{H})-T|+|T|\" display=\"inline\"><mrow><mrow><mrow><mi mathvariant=\"normal\">\u00a0</mi><mo>\u2062</mo><mi>O</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>log</mi><mo>\u2061</mo><mi>N</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>H</mi><mo stretchy=\"false\">^</mo></mover><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mi>T</mi></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>+</mo><mrow><mo stretchy=\"false\">|</mo><mi>T</mi><mo stretchy=\"false\">|</mo></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\leq\" display=\"inline\"><mo>\u2264</mo></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle~{}O(\\log N)\\cdot|{\\mathit{E}}(H^{*})|+|{\\mathit{E}}(H^{*})|\" display=\"inline\"><mrow><mrow><mrow><mi mathvariant=\"normal\">\u00a0</mi><mo>\u2062</mo><mi>O</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>log</mi><mo>\u2061</mo><mi>N</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msup><mi>H</mi><mo>*</mo></msup><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo>+</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msup><mi>H</mi><mo>*</mo></msup><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">|</mo></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle~{}=\" display=\"inline\"><mrow><mi mathvariant=\"normal\">\u00a0</mi><mo>=</mo><mi/></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle~{}O(\\log(N)\\cdot|{\\mathit{E}}(H^{*})|)\" display=\"inline\"><mrow><mi mathvariant=\"normal\">\u00a0</mi><mo>\u2062</mo><mi>O</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>log</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><mrow><mo stretchy=\"false\">|</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msup><mi>H</mi><mo>*</mo></msup><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">|</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></math>", "type": "latex"}]