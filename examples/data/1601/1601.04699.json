[{"file": "1601.04699.tex", "nexttext": "\nwhere $N(i)$ is the number of connected components of the $i$-th element and $I(j;i)$ is an indicator function that is $1$ if component $j$ is connected to component $i$ and $0$ otherwise. We require that all $\\boldsymbol{x}_i \\in \\mathds{X}_S$ remain constrained to their initial positions while the $\\boldsymbol{x}_i \\in \\mathds{X} - \\mathds{X}_S$ are smoothed, all the while adhering to the same node connectivity. We denote this smoothing operation notionally by $SMOOTH\\left(\\mathds{X}, \\mathds{X}_S\\right)$.\n\n\n\n~~As a general rule, we enter points $\\boldsymbol{x}_i$ into our imagined hierarchy such that all $\\boldsymbol{x}_i \\in \\mathds{X}_S$ are at one level above all $\\boldsymbol{x}_i \\in \\mathds{X} - \\mathds{X}_S$. Notationally the hierarchy level or `rank' is denoted by a function $H(\\boldsymbol{x}_i)$ such that $H(\\mathds{X}_S) = 1 + H(\\mathds{X} - \\mathds{X}_S)$; the sole purpose of $H$ being to distinguish points of different ranks and the actual returned value being a matter of choice. \n\\begin{figure}[H]\n\t\\centering\n\t\\includegraphics[width=0.6\\textwidth]{TopHierarchy.pdf}\n\t\\caption{\\textbf{(a)} Hierarchy for a two-dimensional microstructure in which all sample points in the interior of the grain boundary belong to $\\mathds{X} - \\mathds{X}_S$ and the triple points belong to $\\mathds{X}_S$; \\textbf{(b)} Three-dimensional microstructure in which the interior points of the grain boundary belong to $\\mathds{X}-\\mathds{X}_S$ while the boundary perimeter points belong to $\\mathds{X}_S$. The perimeter points themselves can be seen to belong to a union of two-dimensional hierarchies of the type described in \\textbf{(a)}.}\n\t\\label{fig.TopHierarchy}\n\\end{figure}\n~~Figure~\\ref{fig.TopHierarchy} visualizes two common systems with different hierarchy sizes. \nKeeping in mind that in an interface network in $\\mathcal{D}$-dimensional space there exist in general objects of dimensionality $d = 0, 1, \\ldots, \\mathcal{D}-1$, we define the rank function $H(\\boldsymbol{x}_i) \\equiv \\mathcal{D} - d$, where $d$ corresponds to the lowest-dimensional object in the network to which $\\boldsymbol{x}_i$ belongs. For example, a triple point in a 2-dimensional image is assigned a rank of $2$ because it is a zero-dimensional object, while a grain boundary interior point has a rank of $1$.  \n\\begin{table}[H]\n\t\\caption{Hierarchy table for a $2$-dimensional network}\n\t\\center\n\t\\begin{tabular}{|c|c|c|}\n\t\t\\hline\n\t\tType of $\\boldsymbol{x}_i$\t&\t$d$\t&\t$H(\\boldsymbol{x}_i)$\t\\\\\t\\hline\n\t\tTriple point\t\t\t& \t0 \t& \t2\t\t\t\t\t\\\\\t\n\t\tboundary interior\t\t& \t1\t&\t1\t\t\t\t\t\\\\\t\\hline\n\t\\end{tabular}\n\t\\label{tab.Hierarchy2D}\n\\end{table}\n\\begin{table}[H]\n\t\\caption{Hierarchy table for a $3$-dimensional network}\n\t\\center\n\t\\begin{tabular}{|c|c|c|}\n\t\t\\hline\n\t\tType of $\\boldsymbol{x}_i$\t&\t$d$\t&\t$H(\\boldsymbol{x}_i)$\t\\\\\t\\hline\n\t\tQuad point\t\t\t\t& \t0 \t& \t3\t\t\t\t\t\\\\\t\n\t\tTriple line\t\t\t\t&\t1\t&\t2\t\t\t\t\t\\\\\n\t\tBoundary interior\t\t& \t2\t&\t1\t\t\t\t\t\\\\\t\\hline\n\t\\end{tabular}\n\t\\label{tab.Hierarchy3D}\n\\end{table}\nTables~\\ref{tab.Hierarchy2D} and~\\ref{tab.Hierarchy3D} show the general rule that for a given network, $d_i + H(\\boldsymbol{x}_i) = \\mathcal{D}$. We note that the feature of a topological element that decides its rank is its dimensionality rather than its name. For example, if a quad line existed in a network for which $\\mathcal{D} = 3$ (\\emph{i.e.} intersection of four grain boundary surfaces) its rank would be $2$. Based upon these definitions, the smoothing algorithm for a set of $N$ interface points in a $\\mathcal{D}$-dimensional network is as follows:\n\\input{smoothingalgorithm.tex}\n~~In summary, points of rank $N_h$ are smoothed while holding in place all previously smoothed connected points of rank $N_h' > N_h$, with highest-rank points essentially undergoing unconstrained smoothing (since $FIX$ is initially an empty set). If the highest rank elements have $d = 0$ as do quad points when $\\mathcal{D}=3$ or triple points when $\\mathcal{D}=2$, then one can skip `smoothing' them altogether. This scheme gives the aforementioned topological features their due importance relative to one another. The prerequisite of having points labeled according to their rank in the hierarchy is readily achievable by nearest neighbor-based clustering algorithms~\\cite{Groeber2014}.\n\n\n\\section{Constrained smoothing}\n\\label{S:constrainedsmoothing}\n~~$SMOOTH(\\mathds{X}, \\mathds{X}_S)$ is based on a nonparametric regression that involves penalizing, in Cartesian component-by-component fashion, the displacement between each estimated smoothed point and its \\emph{unsmoothed} neighbors. If $M$ of $N$ initial points are mobile ($M < N$), a measure of the nearest neighbor fluctuations of each Cartesian component $s_i$ of $\\boldsymbol{x}_i \\in \\mathds{X}$ can be estimated with $\\left| L\\boldsymbol{\\sigma} + \\mathbf{s}^{(b)}\\right|^2$, where $\\boldsymbol{\\sigma} \\equiv \\left[s_1~s_2~\\ldots~s_M\\right]^T$ represents a vector of only the $s_i$ that require smoothing, $L$ is a modified graph Laplacian operator expressing the connectivity of the mobile nodes and $\\mathbf{s}^{(b)}$ denotes constants that are determined from the remaining $\\boldsymbol{x}_i \\in \\mathds{X}_S$. $\\mathbf{s}^{(b)}$ in fact specifies the Dirichlet boundary conditions to Laplace's equation. Specific examples of $L$ and $\\mathbf{s}^{(b)}$ are described presently. In the case of no constraints, $M = N$, $\\mathds{X}_S$ is an empty set and $L$ is the full graph Laplacian. \n$SMOOTH$ performs simultaneous filtering of each component $s_i \\rightarrow \\chi_i$ by negotiating a tradeoff between fidelity to the raw data and minimization of fluctuations between \\emph{smoothed} neighbors through a scalar control parameter $\\epsilon$. A control function $F(\\boldsymbol{\\chi})$ is defined to this end:\n\n", "itemtype": "equation", "pos": 6905, "prevtext": "\n\n\n\n\n\n\\title{A topology-faithful nonparametric smoothing technique for bulk interface networks}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \\author[1]{S. Maddali\\thanks{Corresponding author: smaddali@andrew.cmu.edu}}\n \\author[1,2]{R. M. Suter}\n\n \\affil[1]{Dept. of Physics, Carnegie Mellon University, Pittsburgh PA 15213 (USA)}\n \\affil[2]{Dept. of Materials Science and Engineering, Carnegie Mellon University, Pittsburgh PA 15213 (USA)}\n\n\t\\maketitle\n\n\n\n\\begin{abstract}\n\nA nonparametric technique is presented for geometric smoothing of interface data in bulk materials obtainable from modern imaging measurements. The filtering methodology relies on an assumed hierarchy of topological features present in a typical interface network, such as foam interfaces and grain boundary networks in polycrystalline materials. Each type of topological feature is treated in order of rank in the hierarchy, with the lower-level feature being filtered subject to the positional constraints imposed by the higher-level features. Such a scheme is an alternative to existing surface smoothing techniques in microstructural materials science, in which the explicit treatment of different elements of the network topology is absent, or at best arbitrarily parameterized. We describe the ramifications of this technique in microstructural applications in which the computation of important physical quantities is predicated on the precise estimation of the interface features. \n\n\\end{abstract}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\section{Introduction}\n\\label{S:intro}\n~~ The morphology of surfaces and interfaces has garnered great interest in many fields of scientific and engineering research. Such studies have implications in applied physics, materials science, biology, pharmacology, chemical engineering and computer vision~\\cite{McCready1986,McInerney1995,Lyklema2005}. A vast part of this research is predicated on the proper imaging of interfaces in the medium of interest. \n\n\n\\input{bobsgiantedit.tex}\n\n\n\n\n\n\n\n\n\n\n~~Whether from a basic or applied science viewpoint, the importance of characterizing grain boundaries in this manner cannot be overstated. In polycrystalline materials, the local interfacial energy density and mobility are known to be sensitive to the five grain boundary parameters at each location~\\cite{Olmsted2009a,Olmsted2009,Ratanaphan2015,Bulatov2014}. It also informs applications like grain boundary engineering whose eventual goal is to precisely manipulate bulk material properties~\\cite{Saylor2003,Saylor2003a,Saylor2004,Li2009}. Further, it is well-known that the topological elements of a grain boundary network like triple junctions and quad points are hotbeds of activity with respect to precipitate diffusion~\\cite{King2010,Bokstein2001,Swiler1997} and strain accumulation~\\cite{Rollett2010,Carter2012}. Real grain boundary networks are usually the starting point for atomistic and continuum simulations of microstructure evolution, the physics of which is most difficult to model at triple lines and quad points. \n\n~~All these applications are predicated upon measurements of the various topological features of a grain boundary network, which are inevitably subject to noise, whether through experimental resolution or image gridding. This necessitates the use of a smoothing routine prior to any further analysis. Owing to the diverse roles of topological elements such as triple lines and quad points in microstructure phenomenology, an important motivation for this novel smoothing technique and other recent ones~\\cite{lee2014} is to give them their due importance through explicit denoising. \n\n~~Other factors motivating this work are:\n\\begin{itemize}\n\t\\item\tUnlike voxelized images of most everyday objects, there exists no general intuition for the form of a grain in a sample, and therefore a grain boundary. In the former case, iterative smoothing algorithms such as Laplace and Taubin smoothing~\\cite{Taubin1995} yield an acceptable result that is partially helped along by the user's advance knowledge of the object in question. However these methods can suffer from under- or over-smoothing if the number of iterations or step size are not chosen properly. \n\t\\item\tExplicit modeling techniques~\\cite{Wang2009} more often than not belie the sheer variety in the observed structure of grain boundaries and network topologies. \n\t\\item\tExisting nonparametric techniques~\\cite{Lieberman2015} require the use of a smoothing window of a user-defined size. \n\\end{itemize}\n\tThe methodology described here internally optimizes a compromise between fidelity to the input data points and a constrained Laplacian smoothing. An objective function is minimized with respect to this compromise. The algorithm requires no user input in terms of smoothing parameters, only that the connectivity of the nodes be specified in advance, in the form of a graph. We distinguish the type of kernel resulting from graph-connectedness to a given node from a fixed-size window centered on that node since the former, which we rely upon, does not take into consideration the physical distance between neighboring nodes, and only keeps track of the connectivity. \n\n~~We first describe the topological hierarchy in general terms and then address the smoothing procedure, which is a modification of Laplacian smoothing of a set of meshed surface points. This is followed by the application of the smoothing algorithm to pixelated versions of easily parameterized geometric primitives, in particular circles, spheres and cylinders. Post-smoothing errors are quantified in terms of estimated sizes of these primitives as well as estimated normals for specific geometries. We then address specific cases of interest in mesoscale materials science: two- and three-dimensional grain boundary networks. The former finds relevance in the study of thin films and the latter in that of bulk material behavior. We demonstrate how the user is freed from the largely intuitive choices of smoothing parameters that is characteristic of iterative or windowed techniques. Maximizing the extent of automation in these things is of great importance to software pipelines that streamline the processing and analysis of digital microstructure data~\\cite{Groeber2014}. The application of the resultant smoothed meshes to finite element calculations is also briefly discussed. \n\n\n\n\n\n\n\\section{General formalism}\n\\label{S:generalformalism}\n~~We consider a set of $N$ noisy sample points in $\\mathcal{D}$-dimensional Cartesian coordinates: $\\mathds{X} = \\{\\boldsymbol{x}_1,\\boldsymbol{x}_2,\\ldots,\\boldsymbol{x}_N\\}$ that denote an imaged grain boundary. A subset $\\mathds{X}_S \\subset \\mathds{X}$ of these points is tagged as a `perimeter' that samples the edges of the grain boundary with the same grid resolution as the interior. We also assume a connectivity scheme for every point relative to the others, described by a graph Laplacian matrix $L^{(0)}$:\n\n", "index": 1, "text": "\\begin{equation*}\n\tL^{(0)}_{ij} = \\begin{cases}\n\t\\hfill\tN(i)\t\t\\hfill\t&\t\\text{If $i = j$}\t\\\\\n\t\\hfill\t-I(j; i)\t\\hfill\t&\t\\text{if $i \\neq j$}\n\t\\end{cases}\n\\end{equation*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"L^{(0)}_{ij}=\\begin{cases}\\hfill N(i)\\hfill&amp;\\text{If $i=j$}\\\\&#10;\\hfill-I(j;i)\\hfill&amp;\\text{if $i\\neq j$}\\end{cases}\" display=\"block\"><mrow><msubsup><mi>L</mi><mrow><mi>i</mi><mo>\u2062</mo><mi>j</mi></mrow><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msubsup><mo>=</mo><mrow><mo>{</mo><mtable columnspacing=\"5pt\" displaystyle=\"true\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><mrow><mi>N</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mtd><mtd columnalign=\"left\"><mrow><mtext>If\u00a0</mtext><mrow><mi>i</mi><mo>=</mo><mi>j</mi></mrow></mrow></mtd></mtr><mtr><mtd columnalign=\"left\"><mrow><mo>-</mo><mrow><mi>I</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>j</mi><mo>;</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mtd><mtd columnalign=\"left\"><mrow><mtext>if\u00a0</mtext><mrow><mi>i</mi><mo>\u2260</mo><mi>j</mi></mrow></mrow></mtd></mtr></mtable></mrow></mrow></math>", "type": "latex"}, {"file": "1601.04699.tex", "nexttext": "\nHere $\\boldsymbol{\\chi} \\equiv \\left[\\chi_1~\\chi_2~\\ldots~\\chi_M\\right]^T$ represents the array corresponding to $\\boldsymbol{\\sigma}$ that is further along in the smoothing process. At the extreme $\\epsilon$-values of $0$ and $1$, the minimizer $\\boldsymbol{\\chi}_{opt}(\\epsilon)$ of $F(\\boldsymbol{\\chi})$ respectively favors complete data fidelity ($\\boldsymbol{\\chi} = \\boldsymbol{\\sigma}$) and complete Laplace-smoothing ($L^TL\\boldsymbol{\\chi} + L^T\\mathbf{s}^{(b)} = 0$). We further define an objective function that penalizes fluctuations between each smoothed point and its nearest \\emph{unsmoothed} neighbors based on the connectivity specified in the full $N \\times N$ graph Laplacian $L^{(0)}$:\n\n", "itemtype": "equation", "pos": 12826, "prevtext": "\nwhere $N(i)$ is the number of connected components of the $i$-th element and $I(j;i)$ is an indicator function that is $1$ if component $j$ is connected to component $i$ and $0$ otherwise. We require that all $\\boldsymbol{x}_i \\in \\mathds{X}_S$ remain constrained to their initial positions while the $\\boldsymbol{x}_i \\in \\mathds{X} - \\mathds{X}_S$ are smoothed, all the while adhering to the same node connectivity. We denote this smoothing operation notionally by $SMOOTH\\left(\\mathds{X}, \\mathds{X}_S\\right)$.\n\n\n\n~~As a general rule, we enter points $\\boldsymbol{x}_i$ into our imagined hierarchy such that all $\\boldsymbol{x}_i \\in \\mathds{X}_S$ are at one level above all $\\boldsymbol{x}_i \\in \\mathds{X} - \\mathds{X}_S$. Notationally the hierarchy level or `rank' is denoted by a function $H(\\boldsymbol{x}_i)$ such that $H(\\mathds{X}_S) = 1 + H(\\mathds{X} - \\mathds{X}_S)$; the sole purpose of $H$ being to distinguish points of different ranks and the actual returned value being a matter of choice. \n\\begin{figure}[H]\n\t\\centering\n\t\\includegraphics[width=0.6\\textwidth]{TopHierarchy.pdf}\n\t\\caption{\\textbf{(a)} Hierarchy for a two-dimensional microstructure in which all sample points in the interior of the grain boundary belong to $\\mathds{X} - \\mathds{X}_S$ and the triple points belong to $\\mathds{X}_S$; \\textbf{(b)} Three-dimensional microstructure in which the interior points of the grain boundary belong to $\\mathds{X}-\\mathds{X}_S$ while the boundary perimeter points belong to $\\mathds{X}_S$. The perimeter points themselves can be seen to belong to a union of two-dimensional hierarchies of the type described in \\textbf{(a)}.}\n\t\\label{fig.TopHierarchy}\n\\end{figure}\n~~Figure~\\ref{fig.TopHierarchy} visualizes two common systems with different hierarchy sizes. \nKeeping in mind that in an interface network in $\\mathcal{D}$-dimensional space there exist in general objects of dimensionality $d = 0, 1, \\ldots, \\mathcal{D}-1$, we define the rank function $H(\\boldsymbol{x}_i) \\equiv \\mathcal{D} - d$, where $d$ corresponds to the lowest-dimensional object in the network to which $\\boldsymbol{x}_i$ belongs. For example, a triple point in a 2-dimensional image is assigned a rank of $2$ because it is a zero-dimensional object, while a grain boundary interior point has a rank of $1$.  \n\\begin{table}[H]\n\t\\caption{Hierarchy table for a $2$-dimensional network}\n\t\\center\n\t\\begin{tabular}{|c|c|c|}\n\t\t\\hline\n\t\tType of $\\boldsymbol{x}_i$\t&\t$d$\t&\t$H(\\boldsymbol{x}_i)$\t\\\\\t\\hline\n\t\tTriple point\t\t\t& \t0 \t& \t2\t\t\t\t\t\\\\\t\n\t\tboundary interior\t\t& \t1\t&\t1\t\t\t\t\t\\\\\t\\hline\n\t\\end{tabular}\n\t\\label{tab.Hierarchy2D}\n\\end{table}\n\\begin{table}[H]\n\t\\caption{Hierarchy table for a $3$-dimensional network}\n\t\\center\n\t\\begin{tabular}{|c|c|c|}\n\t\t\\hline\n\t\tType of $\\boldsymbol{x}_i$\t&\t$d$\t&\t$H(\\boldsymbol{x}_i)$\t\\\\\t\\hline\n\t\tQuad point\t\t\t\t& \t0 \t& \t3\t\t\t\t\t\\\\\t\n\t\tTriple line\t\t\t\t&\t1\t&\t2\t\t\t\t\t\\\\\n\t\tBoundary interior\t\t& \t2\t&\t1\t\t\t\t\t\\\\\t\\hline\n\t\\end{tabular}\n\t\\label{tab.Hierarchy3D}\n\\end{table}\nTables~\\ref{tab.Hierarchy2D} and~\\ref{tab.Hierarchy3D} show the general rule that for a given network, $d_i + H(\\boldsymbol{x}_i) = \\mathcal{D}$. We note that the feature of a topological element that decides its rank is its dimensionality rather than its name. For example, if a quad line existed in a network for which $\\mathcal{D} = 3$ (\\emph{i.e.} intersection of four grain boundary surfaces) its rank would be $2$. Based upon these definitions, the smoothing algorithm for a set of $N$ interface points in a $\\mathcal{D}$-dimensional network is as follows:\n\\input{smoothingalgorithm.tex}\n~~In summary, points of rank $N_h$ are smoothed while holding in place all previously smoothed connected points of rank $N_h' > N_h$, with highest-rank points essentially undergoing unconstrained smoothing (since $FIX$ is initially an empty set). If the highest rank elements have $d = 0$ as do quad points when $\\mathcal{D}=3$ or triple points when $\\mathcal{D}=2$, then one can skip `smoothing' them altogether. This scheme gives the aforementioned topological features their due importance relative to one another. The prerequisite of having points labeled according to their rank in the hierarchy is readily achievable by nearest neighbor-based clustering algorithms~\\cite{Groeber2014}.\n\n\n\\section{Constrained smoothing}\n\\label{S:constrainedsmoothing}\n~~$SMOOTH(\\mathds{X}, \\mathds{X}_S)$ is based on a nonparametric regression that involves penalizing, in Cartesian component-by-component fashion, the displacement between each estimated smoothed point and its \\emph{unsmoothed} neighbors. If $M$ of $N$ initial points are mobile ($M < N$), a measure of the nearest neighbor fluctuations of each Cartesian component $s_i$ of $\\boldsymbol{x}_i \\in \\mathds{X}$ can be estimated with $\\left| L\\boldsymbol{\\sigma} + \\mathbf{s}^{(b)}\\right|^2$, where $\\boldsymbol{\\sigma} \\equiv \\left[s_1~s_2~\\ldots~s_M\\right]^T$ represents a vector of only the $s_i$ that require smoothing, $L$ is a modified graph Laplacian operator expressing the connectivity of the mobile nodes and $\\mathbf{s}^{(b)}$ denotes constants that are determined from the remaining $\\boldsymbol{x}_i \\in \\mathds{X}_S$. $\\mathbf{s}^{(b)}$ in fact specifies the Dirichlet boundary conditions to Laplace's equation. Specific examples of $L$ and $\\mathbf{s}^{(b)}$ are described presently. In the case of no constraints, $M = N$, $\\mathds{X}_S$ is an empty set and $L$ is the full graph Laplacian. \n$SMOOTH$ performs simultaneous filtering of each component $s_i \\rightarrow \\chi_i$ by negotiating a tradeoff between fidelity to the raw data and minimization of fluctuations between \\emph{smoothed} neighbors through a scalar control parameter $\\epsilon$. A control function $F(\\boldsymbol{\\chi})$ is defined to this end:\n\n", "index": 3, "text": "\\begin{align}\n\tF( \\boldsymbol{\\chi}) &= (1 - \\epsilon) \\left| \\boldsymbol{\\chi} - \\boldsymbol{\\sigma}\\right|^2 + \\epsilon \\left|L\\boldsymbol{\\chi} + \\mathbf{s}^{(b)}\\right|^2\t\\label{eq.ControlFunction}  \\\\\n\t\\text{where~}0 &\\leq \\epsilon \\leq 1\t\\notag\n\\end{align}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle F(\\bm{\\chi})\" display=\"inline\"><mrow><mi>F</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\ud835\udf4c</mi><mo stretchy=\"false\">)</mo></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=(1-\\epsilon)\\left|\\bm{\\chi}-\\bm{\\sigma}\\right|^{2}+\\epsilon\\left%&#10;|L\\bm{\\chi}+\\mathbf{s}^{(b)}\\right|^{2}\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mn>1</mn><mo>-</mo><mi>\u03f5</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msup><mrow><mo>|</mo><mrow><mi>\ud835\udf4c</mi><mo>-</mo><mi>\ud835\udf48</mi></mrow><mo>|</mo></mrow><mn>2</mn></msup></mrow><mo>+</mo><mrow><mi>\u03f5</mi><mo>\u2062</mo><msup><mrow><mo>|</mo><mrow><mrow><mi>L</mi><mo>\u2062</mo><mi>\ud835\udf4c</mi></mrow><mo>+</mo><msup><mi>\ud835\udc2c</mi><mrow><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><mo>|</mo></mrow><mn>2</mn></msup></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\text{where~{}}0\" display=\"inline\"><mrow><mtext>where\u00a0</mtext><mo>\u2062</mo><mn>0</mn></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle\\leq\\epsilon\\leq 1\" display=\"inline\"><mrow><mi/><mo>\u2264</mo><mi>\u03f5</mi><mo>\u2264</mo><mn>1</mn></mrow></math>", "type": "latex"}, {"file": "1601.04699.tex", "nexttext": "\nCrucially, we require that the minimizer of $F_{obj}$ be reached by always satisfying the optimality condition of the control function in~\\eqref{eq.ControlFunction} with respect to $\\boldsymbol{\\chi}$ and therefore indirectly through variation of the parameter $\\epsilon$ alone. This makes the smoothing operation on the $s_i$ a one-dimensional minimization in $\\epsilon$ that can easily be achieved by a binary search in the interval $\\left[0, 1\\right]$. Briefly, the objective function $F_{obj}$ is the actual quantity being minimized in the regression, but the path taken in the objective function landscape is decided by the control function $F$. \n\n~~We define the matrix $\\mathbf{x}_0$ of unsmoothed starting points as having $N$ rows and $\\mathcal{D}$ columns where $\\mathcal{D}$ is the dimensionality of the points. Similarly we define the identically-sized matrix $\\boldsymbol{\\chi}^{(0)}$ as the solution resulting from applying $SMOOTH$ to $\\mathbf{x}_0$. We define $D$ and $A$ as the diagonal and adjacency matrices respectively of $L^{(0)}$. We rely on the following intermediate definitions to obtain the reduced Laplacian and constant matrices:\n\\begin{enumerate}\n\t\\item\tLet the integer set $\\mathds{I}$ denote the indices of the points that remain fixed (\\emph{i.e.} $\\mathds{I} \\equiv \\{i \\left| \\boldsymbol{x}_i \\in \\mathds{X}_S\\right.\\}$ or equivalently $\\mathds{X}_S \\equiv \\{\\boldsymbol{x}_i \\left| i \\in \\mathds{I}\\right.\\}$) \n\t\\item\tIf for an integer $N > 0$, $\\mathds{S} = \\{n_1,~n_2,\\ldots\\}$ is an integer set such that $ 1 \\leq n_i \\leq N~\\forall n_i \\in \\mathds{S}$, then let $\\widetilde{\\mathds{S}} \\equiv \\{ i \\in \\mathds{Z} \\left| 1 \\leq i \\leq N,~ i \\notin \\mathds{S}\\right.\\}$, \\emph{i.e.} the complement of $\\mathds{S}$ with respect to $N$.\n\t\n\t\\item\tLet the submatrix of a matrix $\\mathds{M}$ formed by:\n\t\\begin{itemize}\n\t\t\\item the rows whose indices are in $\\mathds{S}$ be denoted by $SM_{\\text{rows}}\\left(\\mathds{M}, \\mathds{S}\\right)$.\n\t\t\\item the rows \\emph{and} columns whose indices are in $\\mathds{S}$ be denoted by $SM_{\\text{both}}\\left(\\mathds{M}, \\mathds{S}\\right)$.\n\t\\end{itemize}\n\\end{enumerate}\n\tthen the reduced Laplacian and constant matrix are defined:\n\n", "itemtype": "equation", "pos": 13796, "prevtext": "\nHere $\\boldsymbol{\\chi} \\equiv \\left[\\chi_1~\\chi_2~\\ldots~\\chi_M\\right]^T$ represents the array corresponding to $\\boldsymbol{\\sigma}$ that is further along in the smoothing process. At the extreme $\\epsilon$-values of $0$ and $1$, the minimizer $\\boldsymbol{\\chi}_{opt}(\\epsilon)$ of $F(\\boldsymbol{\\chi})$ respectively favors complete data fidelity ($\\boldsymbol{\\chi} = \\boldsymbol{\\sigma}$) and complete Laplace-smoothing ($L^TL\\boldsymbol{\\chi} + L^T\\mathbf{s}^{(b)} = 0$). We further define an objective function that penalizes fluctuations between each smoothed point and its nearest \\emph{unsmoothed} neighbors based on the connectivity specified in the full $N \\times N$ graph Laplacian $L^{(0)}$:\n\n", "index": 5, "text": "\\begin{equation}\n\tF_{obj}(\\boldsymbol{\\chi}(\\epsilon)) = \\sum_{i = 1}^N \\left|\\sum_{\\{j \\left| L^{(0)}_{ij}=-1\\right.\\}} \\chi_i - \\sigma_j\\right|^2\n\t\\label{eq.ObjectiveFunction}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E2.m1\" class=\"ltx_Math\" alttext=\"F_{obj}(\\bm{\\chi}(\\epsilon))=\\sum_{i=1}^{N}\\left|\\sum_{\\{j\\left|L^{(0)}_{ij}=-%&#10;1\\right.\\}}\\chi_{i}-\\sigma_{j}\\right|^{2}\" display=\"block\"><mrow><mrow><msub><mi>F</mi><mrow><mi>o</mi><mo>\u2062</mo><mi>b</mi><mo>\u2062</mo><mi>j</mi></mrow></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>\ud835\udf4c</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03f5</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msup><mrow><mo>|</mo><mrow><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mo stretchy=\"false\">{</mo><mi>j</mi><mo>|</mo><mrow><msubsup><mi>L</mi><mrow><mi>i</mi><mo>\u2062</mo><mi>j</mi></mrow><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msubsup><mo>=</mo><mrow><mo>-</mo><mn>1</mn></mrow></mrow><mo stretchy=\"false\">}</mo></mrow></munder><msub><mi>\u03c7</mi><mi>i</mi></msub></mrow><mo>-</mo><msub><mi>\u03c3</mi><mi>j</mi></msub></mrow><mo>|</mo></mrow><mn>2</mn></msup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.04699.tex", "nexttext": "\n\nFor example, if $N = 5$ points $\\{\\boldsymbol{x}_i = \\left[x_i~y_i~z_i\\right]^T \\left| x_i,y_i,z_i \\in \\mathds{R},~i = 1, 2,\\ldots,5\\right.\\}$ in $\\mathcal{D} = 3$ dimensions are to be smoothed in which the $\\boldsymbol{x}_i$ are connected sequentially with $\\boldsymbol{x}_1$ and $\\boldsymbol{x}_5$ to be fixed, then:\n\n", "itemtype": "equation", "pos": 16193, "prevtext": "\nCrucially, we require that the minimizer of $F_{obj}$ be reached by always satisfying the optimality condition of the control function in~\\eqref{eq.ControlFunction} with respect to $\\boldsymbol{\\chi}$ and therefore indirectly through variation of the parameter $\\epsilon$ alone. This makes the smoothing operation on the $s_i$ a one-dimensional minimization in $\\epsilon$ that can easily be achieved by a binary search in the interval $\\left[0, 1\\right]$. Briefly, the objective function $F_{obj}$ is the actual quantity being minimized in the regression, but the path taken in the objective function landscape is decided by the control function $F$. \n\n~~We define the matrix $\\mathbf{x}_0$ of unsmoothed starting points as having $N$ rows and $\\mathcal{D}$ columns where $\\mathcal{D}$ is the dimensionality of the points. Similarly we define the identically-sized matrix $\\boldsymbol{\\chi}^{(0)}$ as the solution resulting from applying $SMOOTH$ to $\\mathbf{x}_0$. We define $D$ and $A$ as the diagonal and adjacency matrices respectively of $L^{(0)}$. We rely on the following intermediate definitions to obtain the reduced Laplacian and constant matrices:\n\\begin{enumerate}\n\t\\item\tLet the integer set $\\mathds{I}$ denote the indices of the points that remain fixed (\\emph{i.e.} $\\mathds{I} \\equiv \\{i \\left| \\boldsymbol{x}_i \\in \\mathds{X}_S\\right.\\}$ or equivalently $\\mathds{X}_S \\equiv \\{\\boldsymbol{x}_i \\left| i \\in \\mathds{I}\\right.\\}$) \n\t\\item\tIf for an integer $N > 0$, $\\mathds{S} = \\{n_1,~n_2,\\ldots\\}$ is an integer set such that $ 1 \\leq n_i \\leq N~\\forall n_i \\in \\mathds{S}$, then let $\\widetilde{\\mathds{S}} \\equiv \\{ i \\in \\mathds{Z} \\left| 1 \\leq i \\leq N,~ i \\notin \\mathds{S}\\right.\\}$, \\emph{i.e.} the complement of $\\mathds{S}$ with respect to $N$.\n\t\n\t\\item\tLet the submatrix of a matrix $\\mathds{M}$ formed by:\n\t\\begin{itemize}\n\t\t\\item the rows whose indices are in $\\mathds{S}$ be denoted by $SM_{\\text{rows}}\\left(\\mathds{M}, \\mathds{S}\\right)$.\n\t\t\\item the rows \\emph{and} columns whose indices are in $\\mathds{S}$ be denoted by $SM_{\\text{both}}\\left(\\mathds{M}, \\mathds{S}\\right)$.\n\t\\end{itemize}\n\\end{enumerate}\n\tthen the reduced Laplacian and constant matrix are defined:\n\n", "index": 7, "text": "\\begin{align}\n\tL &= SM_{\\text{both}}\\left(L^{(0)}, \\widetilde{\\mathds{I}}\\right)\n\t\\label{eq.ReducedLaplacian} \\\\\n\t\\mathbf{s}^{(b)} &= SM_{\\text{rows}}\\left(R\\mathbf{x}_0, \\widetilde{\\mathds{I}}\\right)\t\\label{eq.Constant}\t\t\t\\\\\n\t\\text{where }R\\text{ is defined by: } R_{ij} &=\n\t\\begin{cases}\n\t\t\\hfill\tL^{(0)}_{ij}\t\\hfill\t& \t\\text{if $j \\in \\mathds{I}$}\t\\\\\n\t\t\\hfill\t0\t\t\t\t\\hfill\t&\t\\text{otherwise}\n\t\\end{cases}\t\\notag\n\\end{align}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E3.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle L\" display=\"inline\"><mi>L</mi></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E3.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=SM_{\\text{both}}\\left(L^{(0)},\\widetilde{\\mathds{I}}\\right)\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mi>S</mi><mo>\u2062</mo><msub><mi>M</mi><mtext>both</mtext></msub><mo>\u2062</mo><mrow><mo>(</mo><msup><mi>L</mi><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo>,</mo><mover accent=\"true\"><mi>\ud835\udd40</mi><mo>~</mo></mover><mo>)</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E4.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\mathbf{s}^{(b)}\" display=\"inline\"><msup><mi>\ud835\udc2c</mi><mrow><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow></msup></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E4.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=SM_{\\text{rows}}\\left(R\\mathbf{x}_{0},\\widetilde{\\mathds{I}}\\right)\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mi>S</mi><mo>\u2062</mo><msub><mi>M</mi><mtext>rows</mtext></msub><mo>\u2062</mo><mrow><mo>(</mo><mrow><mi>R</mi><mo>\u2062</mo><msub><mi>\ud835\udc31</mi><mn>0</mn></msub></mrow><mo>,</mo><mover accent=\"true\"><mi>\ud835\udd40</mi><mo>~</mo></mover><mo>)</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\text{where }R\\text{ is defined by: }R_{ij}\" display=\"inline\"><mrow><mtext>where\u00a0</mtext><mo>\u2062</mo><mi>R</mi><mo>\u2062</mo><mtext>\u00a0is defined by:\u00a0</mtext><mo>\u2062</mo><msub><mi>R</mi><mrow><mi>i</mi><mo>\u2062</mo><mi>j</mi></mrow></msub></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\begin{cases}\\hfill L^{(0)}_{ij}\\hfill&amp;\\text{if $j\\in\\mathds{I}$%&#10;}\\\\&#10;\\hfill 0\\hfill&amp;\\text{otherwise}\\end{cases}\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mo>{</mo><mtable columnspacing=\"5pt\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><msubsup><mi>L</mi><mrow><mi>i</mi><mo>\u2062</mo><mi>j</mi></mrow><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mtd><mtd columnalign=\"left\"><mrow><mtext>if\u00a0</mtext><mrow><mi>j</mi><mo>\u2208</mo><mi>\ud835\udd40</mi></mrow></mrow></mtd></mtr><mtr><mtd columnalign=\"left\"><mn>0</mn></mtd><mtd columnalign=\"left\"><mtext>otherwise</mtext></mtd></mtr></mtable></mrow></mrow></math>", "type": "latex"}, {"file": "1601.04699.tex", "nexttext": "\nEquation~\\eqref{eq.FinalComplete} denotes the full smoothed solution including the constrained points. If $\\boldsymbol{\\chi}^{(0)}$ and $\\boldsymbol{\\chi}$ respectively satisfy the free-boundary and constrained Laplace equations, then is it clear that $L^{(0)}\\boldsymbol{\\chi}^{(0)} = 0_{5\\times 3}$ and $L \\boldsymbol{\\chi} + \\mathbf{s}^{(b)} = 0_{3\\times 3}$. The smoothing problem is stated more compactly as the following optimization problem:\n\n", "itemtype": "equation", "pos": 16939, "prevtext": "\n\nFor example, if $N = 5$ points $\\{\\boldsymbol{x}_i = \\left[x_i~y_i~z_i\\right]^T \\left| x_i,y_i,z_i \\in \\mathds{R},~i = 1, 2,\\ldots,5\\right.\\}$ in $\\mathcal{D} = 3$ dimensions are to be smoothed in which the $\\boldsymbol{x}_i$ are connected sequentially with $\\boldsymbol{x}_1$ and $\\boldsymbol{x}_5$ to be fixed, then:\n\n", "index": 9, "text": "\\begin{align}\n\t\\mathds{I} &= \\{1,~5\\},~\\widetilde{\\mathds{I}} = \\{2,~3,~4\\}\t\\notag\t\\\\\n\t\\mathbf{x}_0 &= \\left[ \\boldsymbol{x}_1~\\boldsymbol{x}_2~\\boldsymbol{x}_3~\\boldsymbol{x}_4~\\boldsymbol{x}_5\\right]^T_{3 \\times 5},~ \n\t\\mathbf{x} = SM_{\\text{rows}}\\left(\\mathbf{x}_0, \\hat{\\mathds{I}}\\right) = \\left[ \\boldsymbol{x}_2~\\boldsymbol{x}_3~\\boldsymbol{x}_4\\right]^T_{3 \\times 3}\t\\notag \t\\\\\n\tL^{(0)} &= \\left[\\begin{array}{ccccc}\n\t\t1\t&\t-1\t&\t0\t&\t0\t&\t0\t\\\\\n\t\t-1\t&\t2\t&\t-1\t&\t0\t&\t0\t\\\\\n\t\t0\t&\t-1\t&\t2\t&\t-1\t&\t0\t\\\\\n\t\t0\t&\t0\t&\t-1\t&\t2\t&\t-1\t\\\\\n\t\t0\t&\t0\t&\t0\t&\t-1\t&\t1\n\t\\end{array}\\right],~\n\tL = \\left[\\begin{array}{ccc}\n\t\t2\t&\t-1\t&\t0\t\\\\\n\t\t-1\t&\t2\t&\t-1\t\\\\\n\t\t0\t&\t-1\t&\t2\t\n\t\\end{array}\\right]\t\t\\notag\t\\\\\n\t\\mathbf{s}^{(b)} &= \\left[\n\t\\begin{array}{ccc}\n\t\t-x_1\t&\t-y_1\t&\t-z_1\t\\\\\n\t\t0\t\t&\t0\t\t&\t0\t\t\\\\\n\t\t-x_5\t&\t-y_5\t&\t-z_5\t\n\t\\end{array}\\right]\t\\notag\t\\\\\n\tD_{ij} &= \\begin{cases}\n\t\t\\hfill\tL^{(0)}_{ij}\t\\hfill\t& \\text{If $i = j$}\t\\\\\n\t\t\\hfill\t0\t\\hfill\t& \\text{Otherwise}\n\t\\end{cases}\t\t\\notag\t\\\\\n\tA_{ij} &= \\begin{cases}\n\t\t\\hfill\tL^{(0)}_{ij}\t\\hfill\t& \\text{if $j = i \\pm 1$}\t\\\\\n\t\t\\hfill\t0\t\t\t\t\\hfill\t& \\text{Otherwise}\n\t\\end{cases}\t\t\\notag\t\\\\\n\t\\boldsymbol{\\chi}^{(0)} &\\equiv \\left[\\boldsymbol{x}_1~\\boldsymbol{\\chi}^T~\\boldsymbol{x}_5\\right]^T\t\\label{eq.FinalComplete}\n\\end{align}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex4.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\mathds{I}\" display=\"inline\"><mi>\ud835\udd40</mi></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex4.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\{1,~{}5\\},~{}\\widetilde{\\mathds{I}}=\\{2,~{}3,~{}4\\}\" display=\"inline\"><mrow><mrow><mi/><mo>=</mo><mrow><mo stretchy=\"false\">{</mo><mn>1</mn><mo rspace=\"5.8pt\">,</mo><mn>5</mn><mo stretchy=\"false\">}</mo></mrow></mrow><mo rspace=\"5.8pt\">,</mo><mrow><mover accent=\"true\"><mi>\ud835\udd40</mi><mo>~</mo></mover><mo>=</mo><mrow><mo stretchy=\"false\">{</mo><mn>2</mn><mo rspace=\"5.8pt\">,</mo><mn>3</mn><mo rspace=\"5.8pt\">,</mo><mn>4</mn><mo stretchy=\"false\">}</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\mathbf{x}_{0}\" display=\"inline\"><msub><mi>\ud835\udc31</mi><mn>0</mn></msub></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\left[\\bm{x}_{1}~{}\\bm{x}_{2}~{}\\bm{x}_{3}~{}\\bm{x}_{4}~{}\\bm{x}%&#10;_{5}\\right]^{T}_{3\\times 5},~{}\\mathbf{x}=SM_{\\text{rows}}\\left(\\mathbf{x}_{0}%&#10;,\\hat{\\mathds{I}}\\right)=\\left[\\bm{x}_{2}~{}\\bm{x}_{3}~{}\\bm{x}_{4}\\right]^{T}%&#10;_{3\\times 3}\" display=\"inline\"><mrow><mrow><mi/><mo>=</mo><msubsup><mrow><mo>[</mo><mrow><mpadded width=\"+3.3pt\"><msub><mi>\ud835\udc99</mi><mn>1</mn></msub></mpadded><mo>\u2062</mo><mpadded width=\"+3.3pt\"><msub><mi>\ud835\udc99</mi><mn>2</mn></msub></mpadded><mo>\u2062</mo><mpadded width=\"+3.3pt\"><msub><mi>\ud835\udc99</mi><mn>3</mn></msub></mpadded><mo>\u2062</mo><mpadded width=\"+3.3pt\"><msub><mi>\ud835\udc99</mi><mn>4</mn></msub></mpadded><mo>\u2062</mo><msub><mi>\ud835\udc99</mi><mn>5</mn></msub></mrow><mo>]</mo></mrow><mrow><mn>3</mn><mo>\u00d7</mo><mn>5</mn></mrow><mi>T</mi></msubsup></mrow><mo rspace=\"5.8pt\">,</mo><mrow><mi>\ud835\udc31</mi><mo>=</mo><mrow><mi>S</mi><mo>\u2062</mo><msub><mi>M</mi><mtext>rows</mtext></msub><mo>\u2062</mo><mrow><mo>(</mo><msub><mi>\ud835\udc31</mi><mn>0</mn></msub><mo>,</mo><mover accent=\"true\"><mi>\ud835\udd40</mi><mo stretchy=\"false\">^</mo></mover><mo>)</mo></mrow></mrow><mo>=</mo><msubsup><mrow><mo>[</mo><mrow><mpadded width=\"+3.3pt\"><msub><mi>\ud835\udc99</mi><mn>2</mn></msub></mpadded><mo>\u2062</mo><mpadded width=\"+3.3pt\"><msub><mi>\ud835\udc99</mi><mn>3</mn></msub></mpadded><mo>\u2062</mo><msub><mi>\ud835\udc99</mi><mn>4</mn></msub></mrow><mo>]</mo></mrow><mrow><mn>3</mn><mo>\u00d7</mo><mn>3</mn></mrow><mi>T</mi></msubsup></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle L^{(0)}\" display=\"inline\"><msup><mi>L</mi><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msup></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\left[\\begin{array}[]{ccccc}1&amp;-1&amp;0&amp;0&amp;0\\\\&#10;-1&amp;2&amp;-1&amp;0&amp;0\\\\&#10;0&amp;-1&amp;2&amp;-1&amp;0\\\\&#10;0&amp;0&amp;-1&amp;2&amp;-1\\\\&#10;0&amp;0&amp;0&amp;-1&amp;1\\end{array}\\right],~{}L=\\left[\\begin{array}[]{ccc}2&amp;-1&amp;0\\\\&#10;-1&amp;2&amp;-1\\\\&#10;0&amp;-1&amp;2\\end{array}\\right]\" display=\"inline\"><mrow><mrow><mi/><mo>=</mo><mrow><mo>[</mo><mtable columnspacing=\"5pt\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"center\"><mn>1</mn></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><mn>1</mn></mrow></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mrow><mo>-</mo><mn>1</mn></mrow></mtd><mtd columnalign=\"center\"><mn>2</mn></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><mn>1</mn></mrow></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><mn>1</mn></mrow></mtd><mtd columnalign=\"center\"><mn>2</mn></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><mn>1</mn></mrow></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><mn>1</mn></mrow></mtd><mtd columnalign=\"center\"><mn>2</mn></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><mn>1</mn></mrow></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><mn>1</mn></mrow></mtd><mtd columnalign=\"center\"><mn>1</mn></mtd></mtr></mtable><mo>]</mo></mrow></mrow><mo rspace=\"5.8pt\">,</mo><mrow><mi>L</mi><mo>=</mo><mrow><mo>[</mo><mtable columnspacing=\"5pt\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"center\"><mn>2</mn></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><mn>1</mn></mrow></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mrow><mo>-</mo><mn>1</mn></mrow></mtd><mtd columnalign=\"center\"><mn>2</mn></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><mn>1</mn></mrow></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><mn>1</mn></mrow></mtd><mtd columnalign=\"center\"><mn>2</mn></mtd></mtr></mtable><mo>]</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\mathbf{s}^{(b)}\" display=\"inline\"><msup><mi>\ud835\udc2c</mi><mrow><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow></msup></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\left[\\begin{array}[]{ccc}-x_{1}&amp;-y_{1}&amp;-z_{1}\\\\&#10;0&amp;0&amp;0\\\\&#10;-x_{5}&amp;-y_{5}&amp;-z_{5}\\end{array}\\right]\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mo>[</mo><mtable columnspacing=\"5pt\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"center\"><mrow><mo>-</mo><msub><mi>x</mi><mn>1</mn></msub></mrow></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><msub><mi>y</mi><mn>1</mn></msub></mrow></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><msub><mi>z</mi><mn>1</mn></msub></mrow></mtd></mtr><mtr><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd><mtd columnalign=\"center\"><mn>0</mn></mtd></mtr><mtr><mtd columnalign=\"center\"><mrow><mo>-</mo><msub><mi>x</mi><mn>5</mn></msub></mrow></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><msub><mi>y</mi><mn>5</mn></msub></mrow></mtd><mtd columnalign=\"center\"><mrow><mo>-</mo><msub><mi>z</mi><mn>5</mn></msub></mrow></mtd></mtr></mtable><mo>]</mo></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex8.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle D_{ij}\" display=\"inline\"><msub><mi>D</mi><mrow><mi>i</mi><mo>\u2062</mo><mi>j</mi></mrow></msub></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex8.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\begin{cases}\\hfill L^{(0)}_{ij}\\hfill&amp;\\text{If $i=j$}\\\\&#10;\\hfill 0\\hfill&amp;\\text{Otherwise}\\end{cases}\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mo>{</mo><mtable columnspacing=\"5pt\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><msubsup><mi>L</mi><mrow><mi>i</mi><mo>\u2062</mo><mi>j</mi></mrow><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mtd><mtd columnalign=\"left\"><mrow><mtext>If\u00a0</mtext><mrow><mi>i</mi><mo>=</mo><mi>j</mi></mrow></mrow></mtd></mtr><mtr><mtd columnalign=\"left\"><mn>0</mn></mtd><mtd columnalign=\"left\"><mtext>Otherwise</mtext></mtd></mtr></mtable></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex9.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle A_{ij}\" display=\"inline\"><msub><mi>A</mi><mrow><mi>i</mi><mo>\u2062</mo><mi>j</mi></mrow></msub></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex9.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\begin{cases}\\hfill L^{(0)}_{ij}\\hfill&amp;\\text{if $j=i\\pm 1$}\\\\&#10;\\hfill 0\\hfill&amp;\\text{Otherwise}\\end{cases}\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mo>{</mo><mtable columnspacing=\"5pt\" rowspacing=\"0pt\"><mtr><mtd columnalign=\"left\"><msubsup><mi>L</mi><mrow><mi>i</mi><mo>\u2062</mo><mi>j</mi></mrow><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mtd><mtd columnalign=\"left\"><mrow><mtext>if\u00a0</mtext><mrow><mi>j</mi><mo>=</mo><mrow><mi>i</mi><mo>\u00b1</mo><mn>1</mn></mrow></mrow></mrow></mtd></mtr><mtr><mtd columnalign=\"left\"><mn>0</mn></mtd><mtd columnalign=\"left\"><mtext>Otherwise</mtext></mtd></mtr></mtable></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E5.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\bm{\\chi}^{(0)}\" display=\"inline\"><msup><mi>\ud835\udf4c</mi><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msup></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E5.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle\\equiv\\left[\\bm{x}_{1}~{}\\bm{\\chi}^{T}~{}\\bm{x}_{5}\\right]^{T}\" display=\"inline\"><mrow><mi/><mo>\u2261</mo><msup><mrow><mo>[</mo><mrow><mpadded width=\"+3.3pt\"><msub><mi>\ud835\udc99</mi><mn>1</mn></msub></mpadded><mo>\u2062</mo><mpadded width=\"+3.3pt\"><msup><mi>\ud835\udf4c</mi><mi>T</mi></msup></mpadded><mo>\u2062</mo><msub><mi>\ud835\udc99</mi><mn>5</mn></msub></mrow><mo>]</mo></mrow><mi>T</mi></msup></mrow></math>", "type": "latex"}, {"file": "1601.04699.tex", "nexttext": "\n\n~~We note from Equation~\\eqref{eq.ConstraintCompact}, which is derived from the minimizer of the control function in Equation~\\eqref{eq.ControlFunction}, that $\\boldsymbol{\\chi}(\\epsilon)$ is an $M \\times \\mathcal{D}$ matrix and that in Equation~\\eqref{eq.ObjFunCompact} the argument of the trace operator is a $\\mathcal{D} \\times \\mathcal{D}$ symmetric matrix with non-negative eigenvalues (the case of zero eigenvalues implies that the sample points are flattened in at least one dimension). Significantly, the trace of this matrix and therefore the objective function itself represents the aggregate squared Euclidean distance of each node from its unsmoothed neighbors. The equivalence of Equations~\\eqref{eq.ObjectiveFunction} and~\\eqref{eq.ObjFunCompact} is seen in the simple one-dimensional smoothing example ($\\mathcal{D} = 1$): $\\boldsymbol{\\sigma}^{(0)} = \\left[\\ldots\\sigma_{N-1}~\\sigma_N~\\sigma_{N+1}\\ldots\\right]^T \\longrightarrow \\boldsymbol{\\chi}^{(0)} = \\left[\\ldots\\chi_{N-1}~\\chi_N~\\chi_{N+1}\\ldots\\right]^T$. Each column in in the $N \\times \\mathcal{D}$-matrix $D\\boldsymbol{\\chi}^{(0)} - A\\mathbf{x}_0$ corresponds to one such Cartesian component in the sample frame of reference and each element is of the form $2\\chi_N - \\left(\\sigma_{N-1} + \\sigma_{N+1}\\right)$. This is precisely the argument of the $\\left|\\cdot\\right|^2$ operation in \\eqref{eq.ObjectiveFunction}. The objective function in \\eqref{eq.ObjFunCompact} represents the operation in \\eqref{eq.ObjectiveFunction} being performed simultaneously on all $\\mathcal{D}$ Cartesian components. Minimizing them simultaneously is completely equivalent to minimizing the (reference frame-invariant) trace of the matrix $\\left(D\\boldsymbol{\\chi}^{(0)} - A\\mathbf{x}_0\\right)^T \\left(D\\boldsymbol{\\chi}^{(0)} - A\\mathbf{x}_0\\right)$.\n\n~~The $SMOOTH$ algorithm is finally given by:\n\\input{smoothing.tex}\nThe resulting surface consisting of the smoothed points with the preserved original connectivity is nonparametric. Qualitatively, the algorithm attempts to determine the least jagged surface passing in between the sample points, thus maintaining data fidelity. This precludes a major problem in applying iterative Laplace-like techniques, that of over- or under-smoothing. For the applications of $SMOOTH$ in the remainder of this text, the threshold value of $\\partial F_{\\text{obj}} / \\partial \\epsilon$  was taken to be $10^{-7}$.\n\n~~We point out that the smoothing scheme outlined in this section allows users to define the components of the algorithm for specific requirements. For instance, users of mesh smoothing algorithms like finite element method (FEM) might want to explicitly incorporate mesh quality metrics into the objective function as an alternative to remeshing. This in turn may well decide the manner of stepping in the objective function landscape and therefore shape the control function. Our smoothing paradigm permits the flexibility of user-defined objective and control functions, all the while heeding the hierarchy between the components of the grain boundary network. We address the applicability of smoothed meshes obtained from the objective function in Equation~\\eqref{eq.ObjFunCompact} to finite element applications in Section~\\ref{S:meshquality}. \n\n\n\\section{$SMOOTH$ing a digitized curve in a plane}\n\\label{S:digitalplanarcurve}\n~~We describe as a first demonstration of $SMOOTH$ the problem of smoothing a set of pixelated points $\\mathds{X} \\equiv \\{\\left(i, y_i\\right) \\left|i = 1,2,\\ldots,N~\\text{and}~y_i \\in \\mathds{Z}\\right.\\}$ representative of a curve in a plane. We list the following general properties of such a set of points:\n\\begin{enumerate}\n\t\\item\tThe coordinates are integral multiples of some basis of vectors in the plane. This could indicate either a square or triangular grid as implemented in commercial electron backscatter diffraction (EBSD)~\\cite{Schwartz2009} software or near-field high-energy diffraction microscopy (nf-HEDM)~\\cite{Lienert2011,Li2013}. \n\t\\item\tEvery point has at least one nearest neighbor in at least one direction on this integer grid. This is characteristic of discretized sampling of continuous curves and surfaces in general.\n\t\n\\end{enumerate}\n~~Such points can be obtained from pixelated images in standard formats by first generating a phase field (for instance a field of unique integers assigned to each grain), taking the magnitude of the gradient of this field and binarizing it. A morphological `skeletonizing' operation can then be applied to this binarized field~\\cite{Haralick1992,Lam1992,Kong1996}. This same technology is used in the field of biometrics, for example, to thin down high-resolution images of fingerprints to features of single-pixel thickness for further analysis. For nf-HEDM images, one can collect directly the voxel (\\textbf{vo}lume pi\\textbf{xel}) edges that border two different grains, as decided by some segmentation criterion. In our example the coordinates of the sample points are integers on a square grid. The image of the curve has been skeletonized to ensure that each sample point has no more than two of the $8$ immediate square-grid neighbors belonging to the pixelated line (interior points have two $8$-neighbors and the terminal points have one).\n\nThe results of constrained smoothing on such a pixelated curve is shown in Figure~\\ref{fig.BinarizedLineSmooth} with the perimeter points fixed at the unsmoothed grid point locations.\n\n\\begin{figure}[H]\n\t\\centering\n\t\\includegraphics[width=\\textwidth]{BinarizedLineSmooth.pdf}\n\t\\caption{\\textbf{(a)} Pixelated and thinned line and its smooth estimate; \\textbf{(b)} A plot of the objective function in its domain $\\left[0, 1\\right]$ shows a shallow minimum; \\textbf{(c)} Search for the optimal value of the control parameter $\\epsilon$ that strikes the best balance between data fidelity and smoothness.}\n\t\\label{fig.BinarizedLineSmooth}\n\\end{figure}\n\n\n\\section{$SMOOTH$ing known shapes}\n\\label{S:knownshapes}\n~~In this section the hierarchical $SMOOTH$ algorithm is applied to open surfaces that are geometry primitives in two and three dimensions. Simple parameterizations for these primitives provide a means of comparison with a smoothed solution on a point-to-point basis. We describe trends in the errors for different primitives as a function of voxel density. Focusing attention on open surfaces allows us to simulate smoothing in the presence of topological features characteristic of a grain boundary network. The three primitives chosen are a 2D circle, a 3D sphere, and a 3D cylinder. Surface slices from these primitives were characterized by the following:\n\\begin{itemize}\n\t\\item\tThe gridding resolution was chosen in terms of the number of voxels per unit length, $N$.\n\t\\item\t\\textbf{Circle}: A semicircular arc of unit radius, whose endpoints were reset to unit radius after discretization. These endpoints were held constrained during smoothing.\n\t\\item\t\\textbf{Sphere}: A square patch spanning $100^\\circ$ in two mutually perpendicular directions cut out from the surface of a sphere of radius $0.03$ units, with the edges of the square treated as triple lines and the vertices as quad points. The quad points alone were constrained to lie on the sphere, while the others were subject to discretization on a cubic lattice.\n\t\\item\t\\textbf{Cylinder}: A rectangular patch cut from the surface of a cylinder of radius $0.03$ units, parallel to its axis and spanning $150^\\circ$ along the azimuth. The edges of the rectangle were treated as triple lines and the vertices as quad points. The quad points were constrained to remain on the surface of the cylinder.\n\\end{itemize}\n\tThe choice of the sphere and cylinder radii are indicative of the typical size of a grain from earlier nf-HEDM measurements~\\cite{Hefferan2010}. The quality of smoothing was expressed as the error in the estimated radius of the primitive in question. Specific examples smoothing on these primitives are shown in Figure~\\ref{fig.knownshapes}. \n\n\n\n\n\n\n\\begin{figure}[H]\n\t\\centering\n\t\\subfloat[]{\\includegraphics[height=0.225\\textheight]{KnownShapesCircle.pdf}}\t\t\\vfill\n\t\\subfloat[]{\\includegraphics[height=0.225\\textheight]{KnownShapesSphere.pdf}}\t\t\\vfill\n\t\\subfloat[]{\\includegraphics[height=0.225\\textheight]{KnownShapesCylinder.pdf}}\t\\vfill\n\t\\caption{\\textbf{(a)} Semicurcular arc with a $50$ pixel radius; \\textbf{(b)} A discretized spherical patch ($400$ voxels per unit length) spanning equal angles ($100^\\circ$) in mutually perpendicular directions and its smoothed version; \\textbf{(b)} A cylindrical patch discretized to $400$ voxels per unit length and its smoothed version. }\n\t\\label{fig.knownshapes}\n\\end{figure}\n\n\n\n~~The fidelity of the final smoothed result to the original primitive was quantified in terms of the point-to-point difference in radii of the original and smoothed surfaces. In the case of the sphere and the cylinder, the first spherical and cylindrical polar coordinates are respectively used (\\emph{i.e} $r$ and $\\rho$).  Shown in Figure~\\ref{fig.knownshapeserrors} are trends in the estimated error $\\Delta r \\equiv r - r_0$ and its standard deviation $\\sigma_r$, taken over the smoothed mesh nodes, for all three primitives. If the unit of length is taken to be a millimeter, the relative error in the region between $N = 300$ and $N = 1000$ is particularly relevant for techniques like nf-HEDM since they correspond to a pixel size range of $1 \\mu m$ to $3.33 \\mu m$, which brackets the known experimental resolution~\\cite{Hefferan2010a}. For comparison, the radii of the spherical and cylindrical patches were chosen to be $30\\mu m$. \n\n\n\n\n\n\n\\begin{figure}[H]\n\t\\centering\n\t\\subfloat[]{\\includegraphics[height=0.22\\textheight]{CircleRadError.pdf}}\t\t\\hfill\n\t\\subfloat[]{\\includegraphics[height=0.22\\textheight]{SphereRadError.pdf}}\t\t\\hfill\n\t\\subfloat[]{\\includegraphics[height=0.22\\textheight]{CylinderRadError.pdf}}\t\t\\hfill\n\t\\vfill\n\t\\subfloat[]{\\includegraphics[height=0.22\\textheight]{CircleFitFinal.pdf}}\t\t\\hfill\n\t\\subfloat[]{\\includegraphics[height=0.22\\textheight]{SphereFitFinal.pdf}}\t\t\\hfill\n\t\\subfloat[]{\\includegraphics[height=0.22\\textheight]{CylinderFitFinal.pdf}}\t\t\\hfill\n\t\\caption{Trends in the error in estimated size $\\Delta r = r - r_0$ of the \\textbf{(a)} circle, \\textbf{(b)} sphere and \\textbf{(c)} cylinder as a function of voxel density per unit length $N$. Trends in the error spread $\\sqrt{\\left<\\Delta r^2\\right> - \\left<\\Delta r\\right>^2}/r_0$ for the \\textbf{(d)} circle, \\textbf{(e)} sphere and \\textbf{(f)} cylinder as a function of $N$. The red lines are fits to the power law $\\sigma = 10^{p_0} N^{p_1}$ whose determined coefficients are listed in Table~\\ref{tab.powerlaw}. Not all the points are used in the fits owing to coarse gridding at low values of $N$.}\n\t\\label{fig.knownshapeserrors}\n\\end{figure}\n\\begin{table}\n\t\\caption{Estimated power law coefficients of the error trends for various primitives.}\n\t\\center\n\t\\begin{tabular}{|c|c|c|}\n\t\t\\hline\n\t\tPrimitive\t&\t$p_1$\t\t&\t$p_0$\t\t\\\\ \\hline\n\t\tCircle\t\t&\t$-0.93724$\t&\t$-1.18898$\t\\\\\n\t\tSphere\t\t&\t$-0.86535$\t&\t$0.11215$\t\\\\\n\t\tCylinder\t&\t$-0.96061$\t&\t$0.47041$\t\\\\ \\hline\n\t\\end{tabular}\n\t\\label{tab.powerlaw}\n\\end{table}\n~~The power law behavior in the error trends was tested for each primitive as is seen in the straight line fits in Figure~\\ref{fig.knownshapeserrors}. The coefficients $p_0$ and $p_1$ of the estimated power law  $f(N) = 10^{p_0}  \\times N^{p_1}$ are listed in Table~\\ref{tab.powerlaw}. Of particular interest is $p_1$ which is seen to lie close to $-1$ for all three primitives. This is simply explained by the fact that the length error is $1/N$, the size of one voxel. \n\nThe lowered fit quality for the sphere and cylinder is attributed to the difficulty in obtaining a perfect stair-stepped mesh for these primitives. We further note that the relative error for each primitive is around a fraction of a percent ($< 10^{-2}$) at the spatial resolution of nf-HEDM ($1.48 \\mu m$ or $\\sim 675$ pixels per millimeter).\n\n~~Another smoothing quality metric that is easily calculated for two dimensions is the error in the local normal of a curve. This is particularly relevant to surface imaging applications. We estimate the local deviation about the known normal of the sections of a pixelated straight line that has been $SMOOTH$ed with its endpoints held at their true positions. This deviation is determined for different inclinations of the original line to the Cartesian grid. A schematic and results for the inclination range of $0^\\circ$ to $90^\\circ$ is shown in Figure~\\ref{fig.errors}. It is seen that while the mean deviation varies with the inclination of the original line, it falls within a few degrees of the actual normal which justifies the use of $SMOOTH$ in calculations of grain boundary character distribution~\\cite{Sintay2012,Khorashadizadeh2011,Ratanaphan2014}. \n\\begin{figure}\n\t\\centering\n\t\\subfloat[]{\\includegraphics[width=0.5\\textwidth]{Normal2DSchematic.pdf}}\n\t\\hfill\n\t\\subfloat[]{\\includegraphics[width=0.5\\textwidth]{NormalsTest2D.pdf}}\n\t\\caption{Estimation of deviation in expected inclination for a discretization of $600$ pixels per unit length, for repeated applications of the $SMOOTH$ algorithm. \\textbf{(a)} Schematic of a section of the simulated line, \\textbf{(b)} Mean of $\\theta_{mis}$ (taken over length of the entire smoothed line) as a function of inclination $\\theta$. The error bars denote the standard deviations of the one-sided distribution on either side of the mean.}\n\t\\label{fig.errors}\n\\end{figure}\n\n\n\n\n\n\n\\section{Results: two-dimensional microstructure smoothing}\n\\label{S:2dmic}\n~~The constrained smoothing is next demonstrated on a real two-dimensional microstructure imaged with nf-HEDM. \n\n\tThe sample points $\\mathbf{x}_i \\equiv \\left[x_i~y_i\\right]^T$ of each grain boundary are expressed in integer units of suitable in-plane step size (in this case, $2 \\mu m$) and are classified as belonging to a grain interior, grain boundary or triple point depending on the number of unique grains represented in the $8$-neighborhood . The optimization is performed simultaneously over $x_i$ and $y_i$ and therefore $\\boldsymbol{\\chi}^{(0)}$ is an $N \\times 2$-matrix. The results on a section of microstructure are shown in Figure~\\ref{fig.fe2dsmoothing}.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\begin{figure}\n\t\\centering\n\t\\includegraphics[width=0.95\\textwidth]{Fe2DSmoothing.pdf}\n\t\\caption{\\textbf{(a)} Discrete phase field of a single layer of well-ordered microstructure imaged by nf-HEDM. Each grain is colored according to a unique integer assigned to it; \\textbf{(b)} The region of interest in \\emph{(a)} zoomed in; \\textbf{(c)} Image obtained from taking the derivative of the phase field in \\emph{(a)} and binarizing it above a chosen threshold, then performing a skeletonizing operation. Triple points were identified as those grain boundary points that have three distinct phase values in their $8$-neighborhood, while grain boundary interior points as those having exactly two distinct phase values in their $8$-neighborhood. On this is superposed the result of $SMOOTH$ing carried out for each boundary while holding its associated triple points fixed; \\textbf{(d)} The result of the smoothing operation in the region of interest from \\emph{(c)}.}\n\t\\label{fig.fe2dsmoothing}\n\\end{figure}\n\n\n\n\\section{Results: three-dimensional microstructure smoothing}\n\\label{S:3dmic}\n~~Hierarchical smoothing is demonstrated on select grains of a well-ordered three-dimensional microstructure measured with nf-HEDM and is compared to the results of Laplace smoothing. The prerequisite node connectivity on the grain surfaces was obtained by first segmenting the microstructure into its constituent grains and then triangulating the faces of the cubic voxels along grain boundaries~\\cite{Groeber2014}. The result of this operation is a `quick-and-dirty' Delaunay mesh on stepped grain surfaces characteristic of discrete sampling. A few important points about this bookkeeping process that inform the subsequent smoothing are:\n\\begin{itemize}\n\t\\item\tThe grain surface nodes are unambiguously classified into their topological types \\emph{i.e.} boundary interiors, triple lines or quad points. It is worth mentioning that the preprocessing described above is external to the hierarchical smoothing algorithm itself and as such is not the focus of this work. \n\t\\item\tThe meshing and bookkeeping is done in such a manner as to ensure that nodes along triple lines and at quad points are shared between the neighboring topological features. \n\\end{itemize}\nFigures~\\ref{fig.3dgrain1},~\\ref{fig.3dgrainpair}~and~\\ref{fig.3dgrainpair2} show comparisons of hierarchical smoothing with Laplace smoothing in which the ease of movement of the triple points is enhanced by assigning them a greater Laplace smoothing parameter $\\lambda$. The values of $\\lambda$ for the parent volumes for each of these grains were determined by trial and error (as a user would have to do) by visually minimizing the distortion from  the original square-gridded grain. This is a highly inefficient process that is not required in hierarchical smoothing. \n\n\\begin{figure}[H]\n\t\\centering\n\t\\includegraphics[width=\\textwidth]{CompareWithLaplace_Grain419.pdf}\n\t\\caption{Discretized grain mesh smoothed using Laplace smoothing (with $400$ iterations and smoothing parameter $\\lambda$ set to $0.025$, $0.5$ and $0.025$ for interior nodes, triple lines and quad points respectively), and parameter-free hierarchical smoothing. The red lines are triple lines. }\n\t\\label{fig.3dgrain1}\n\\end{figure}\n\n\n\n\n\n\n\n\n\n\\begin{figure}[H]\n\t\\centering\n\t\\includegraphics[width=\\textwidth]{FeAnneal1_Clilpped_Grains_185_409.pdf}\n\t\\caption{Discretized mesh of a pair of neighboring grains smoothed using Laplace smoothing (same parameters as in Figure~\\ref{fig.3dgrain1}) and parameter-free hierarchical smoothing.}\n\t\\label{fig.3dgrainpair}\n\\end{figure}\n\n\\begin{figure}[H]\n\t\\centering\n\t\\includegraphics[width=\\textwidth]{FeAnneal1_Clilpped_Grains_264_396.pdf}\n\t\\caption{A more complicated grain pair structure with a larger number of topological features. In this example, the flatness of the top surface in the discretized grain owing to the grain being on the edge of the sample is preserved with hierarchical smoothing, while Laplace smoothing returns a clearly visible and unphysical bulge along that face. }\n\t\\label{fig.3dgrainpair2}\n\\end{figure}\n\n\n\\section{Mesh quality}\n\\label{S:meshquality}\n~~Finally we address the suitability of $SMOOTH$ output for finite element applications, which are predicated on the availability of surface meshes with reasonably isotropic mesh elements (equilateral, in the case of triangular) in order to avoid errors from piecewise linear interpolation. While there exist other sophisticated methods of quantifying the quality of a mesh element~\\cite{Frey1999}, we implement a simple metric for triangular elements that tests their closeness to an equilateral triangle~\\cite{Bank1990}. The quality of a triangle of area $A$ and side lengths $s_1$, $s_2$ and $s_3$ is defined to be:\n\n", "itemtype": "equation", "pos": 18630, "prevtext": "\nEquation~\\eqref{eq.FinalComplete} denotes the full smoothed solution including the constrained points. If $\\boldsymbol{\\chi}^{(0)}$ and $\\boldsymbol{\\chi}$ respectively satisfy the free-boundary and constrained Laplace equations, then is it clear that $L^{(0)}\\boldsymbol{\\chi}^{(0)} = 0_{5\\times 3}$ and $L \\boldsymbol{\\chi} + \\mathbf{s}^{(b)} = 0_{3\\times 3}$. The smoothing problem is stated more compactly as the following optimization problem:\n\n", "index": 11, "text": "\\begin{align}\n\tF_{obj}(\\boldsymbol{\\chi}^{(0)}) &= {\\operatorname{Tr}} \\left[ \\left(D\\boldsymbol{\\chi}^{(0)} - A\\mathbf{x}_0\\right)^T \\left(D\\boldsymbol{\\chi}^{(0)} - A\\mathbf{x}_0\\right) \\right]\n\t\\label{eq.ObjFunCompact}\t\\\\\n\n\t\\boldsymbol{\\chi}(\\epsilon) &= \\left[(1-\\epsilon) \\mathds{1} + \\epsilon L^TL\\right]^{-1} \\left( (1-\\epsilon) \\mathbf{x} - \\epsilon L^T \\mathbf{s}^{(b)}\\right)\t\\label{eq.ConstraintCompact}\t\\\\\n\t\\epsilon_{opt} &= \\arg\\min_{\\epsilon} F_{obj}\\left(\\boldsymbol{\\chi}^{(0)}(\\epsilon)\\right)\t\t\\notag \\\\\n\t\\boldsymbol{\\chi}^{(0)}_{opt} &= \\boldsymbol{\\chi}^{(0)}(\\epsilon_{opt})\t\t\t\t\t\t\\notag\n\\end{align}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E6.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle F_{obj}(\\bm{\\chi}^{(0)})\" display=\"inline\"><mrow><msub><mi>F</mi><mrow><mi>o</mi><mo>\u2062</mo><mi>b</mi><mo>\u2062</mo><mi>j</mi></mrow></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msup><mi>\ud835\udf4c</mi><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">)</mo></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E6.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle={\\operatorname{Tr}}\\left[\\left(D\\bm{\\chi}^{(0)}-A\\mathbf{x}_{0}%&#10;\\right)^{T}\\left(D\\bm{\\chi}^{(0)}-A\\mathbf{x}_{0}\\right)\\right]\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mo>Tr</mo><mo>\u2061</mo><mrow><mo>[</mo><mrow><msup><mrow><mo>(</mo><mrow><mrow><mi>D</mi><mo>\u2062</mo><msup><mi>\ud835\udf4c</mi><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msup></mrow><mo>-</mo><mrow><mi>A</mi><mo>\u2062</mo><msub><mi>\ud835\udc31</mi><mn>0</mn></msub></mrow></mrow><mo>)</mo></mrow><mi>T</mi></msup><mo>\u2062</mo><mrow><mo>(</mo><mrow><mrow><mi>D</mi><mo>\u2062</mo><msup><mi>\ud835\udf4c</mi><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msup></mrow><mo>-</mo><mrow><mi>A</mi><mo>\u2062</mo><msub><mi>\ud835\udc31</mi><mn>0</mn></msub></mrow></mrow><mo>)</mo></mrow></mrow><mo>]</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E7.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\par&#10;\\bm{\\chi}(\\epsilon)\" display=\"inline\"><mrow><mi>\ud835\udf4c</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03f5</mi><mo stretchy=\"false\">)</mo></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E7.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\left[(1-\\epsilon)\\mathds{1}+\\epsilon L^{T}L\\right]^{-1}\\left((1%&#10;-\\epsilon)\\mathbf{x}-\\epsilon L^{T}\\mathbf{s}^{(b)}\\right)\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><msup><mrow><mo>[</mo><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mn>1</mn><mo>-</mo><mi>\u03f5</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mn>\ud835\udfd9</mn></mrow><mo>+</mo><mrow><mi>\u03f5</mi><mo>\u2062</mo><msup><mi>L</mi><mi>T</mi></msup><mo>\u2062</mo><mi>L</mi></mrow></mrow><mo>]</mo></mrow><mrow><mo>-</mo><mn>1</mn></mrow></msup><mo>\u2062</mo><mrow><mo>(</mo><mrow><mrow><mrow><mo stretchy=\"false\">(</mo><mrow><mn>1</mn><mo>-</mo><mi>\u03f5</mi></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mi>\ud835\udc31</mi></mrow><mo>-</mo><mrow><mi>\u03f5</mi><mo>\u2062</mo><msup><mi>L</mi><mi>T</mi></msup><mo>\u2062</mo><msup><mi>\ud835\udc2c</mi><mrow><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow></mrow><mo>)</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex10.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\epsilon_{opt}\" display=\"inline\"><msub><mi>\u03f5</mi><mrow><mi>o</mi><mo>\u2062</mo><mi>p</mi><mo>\u2062</mo><mi>t</mi></mrow></msub></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex10.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\arg\\min_{\\epsilon}F_{obj}\\left(\\bm{\\chi}^{(0)}(\\epsilon)\\right)\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mrow><mi>arg</mi><mo>\u2061</mo><mrow><munder><mi>min</mi><mi>\u03f5</mi></munder><mo>\u2061</mo><msub><mi>F</mi><mrow><mi>o</mi><mo>\u2062</mo><mi>b</mi><mo>\u2062</mo><mi>j</mi></mrow></msub></mrow></mrow><mo>\u2062</mo><mrow><mo>(</mo><mrow><msup><mi>\ud835\udf4c</mi><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>\u03f5</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>)</mo></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex11.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\bm{\\chi}^{(0)}_{opt}\" display=\"inline\"><msubsup><mi>\ud835\udf4c</mi><mrow><mi>o</mi><mo>\u2062</mo><mi>p</mi><mo>\u2062</mo><mi>t</mi></mrow><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex11.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\\bm{\\chi}^{(0)}(\\epsilon_{opt})\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><msup><mi>\ud835\udf4c</mi><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>\u03f5</mi><mrow><mi>o</mi><mo>\u2062</mo><mi>p</mi><mo>\u2062</mo><mi>t</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.04699.tex", "nexttext": "\nwhich gives $Q = 1$ for an equilateral triangle. Shown in Figure~\\ref{fig.meshquality} are element-wise quality plots of select grains in a 3-dimensional volume. Figure~\\ref{fig.volmeshquality} histograms the mesh quality over all surface elements in the entire 424 grain volume. The flattening of some of the mesh elements at the triple junctions of the 3-dimensional grains in Figures~\\ref{fig.3dgrain1}, \\ref{fig.3dgrainpair} and \\ref{fig.3dgrainpair2} is evidenced by the slight peak in the distribution in Figure~\\ref{fig.volmeshquality} at low qualities ($\\sim 0.1$). \n\\begin{figure}\n\t\\centering\n\t\\subfloat[]{\\includegraphics[width=.5\\textwidth]{MeshQualityGrain423.pdf}}\n\t\\hfill\n\t\\subfloat[]{\\includegraphics[width=.5\\textwidth]{MeshQualityGrain90.pdf}}\n\t\\vfill\n\t\\subfloat[]{\\includegraphics[width=.5\\textwidth]{MeshQualityGrain170.pdf}}\n\t\\hfill\n\t\\subfloat[]{\\includegraphics[width=.5\\textwidth]{MeshQualityGrain419.pdf}}\n\n\n\t\\caption{Mesh quality of select grains in the microstructure volume. The grain in \\textbf{(d)} is the same as the one in Figure~\\ref{fig.3dgrain1}.}\n\t\\label{fig.meshquality}\n\\end{figure}\n\\begin{figure}\n\t\\centering\n\t\\includegraphics[width=\\textwidth]{VolumeMeshQuality.pdf}\n\t\\caption{Calculated mesh quality over the entire 3-dimensional volume, in which $\\sim 92\\%$ of the patches have a quality above the rule-of-thumb value of $0.6$ for simple finite element applications~\\cite{MATLAB2015}.}\n\t\\label{fig.volmeshquality}\n\\end{figure}\n\n\n\n\\section{Summary and discussion}\n\\label{S:conclusion}\n~~A new smoothing technique for interface networks was demonstrated and compared to the performance of an an established but generic smoothing algorithm in current use. The new algorithm organizes the topological elements of the network into an hierarchy depending on which elements physically border other elements and smooths each element set constraining its bordering elements to their fixed positions. This treatment gives the physically relevant higher-order topolological elements like triple lines and quad points their due consideration and retains the geometric discontinuities along a grain surface resulting from their existence. Qualitatively the smoothest curve that passes in between the original noisy sample points is chosen. Further, all elements belonging to a particular hierarchy rank in the entire volume are smoothed simultaneously so that they are ready to be used as Dirichlet boundary conditions for elements of lower rank that connect to them. The method is completely non-parametric, permitting the automated smoothing of imaged bulk structures and does not suffer from user-related effects like over-, under-smoothing or fixed-size window artifacts. Repeated applications of the smoothing on the same point set results in better smooth approximations with decreasing the extent of waviness along the smoothed surface. \n\n~~The technique is predicated on the nearest neighbor connectivity of the surface nodes being known in advance, which is easily achievable by existing algorithms and is already implemented in open-source microstructure software packages~\\cite{Groeber2014}. The relative errors in the smoothing of known shapes are demonstrated to be a fraction of a percent for typical resolutions of microstructure imaging techniques. The estimated normals in the case of two dimensions were found to be within thresholds characteristic of bin sizes used in plots of grain boundary character distribution. The ability to handle data of different dimensions in a generalized manner allows this technique to be used for surface experiments such as optical metallography and EBSD, as well as 3D bulk techniques like nf-HEDM. Computation of the mesh quality on a 3-dimensional grain boundary network consisting of 424 grains revealed that the overwhelming majority of mesh elements have a quality above a comfortable $0.6$ as required by simple applications. If need be one may remesh the output of the smoothing routine subject to junction constraints in order to obtain a more uniform meshing of the grain boundary interiors. Further, the separate treatment of the different types topological features suggests parallelizeability in order to reduce computation time. \n\n\n\\section{Acknowledgements}\n\\label{S:ack}\nThe authors would like to thank David Menasche, Anthony Rollett and Shlomo Ta'asan at Carnegie Mellon University for their valuable input. This research was supported by NSF Award DRM-1105173.\n\n\n\n\n\\section{References}\n\n\n\n\n", "itemtype": "equation", "pos": 38303, "prevtext": "\n\n~~We note from Equation~\\eqref{eq.ConstraintCompact}, which is derived from the minimizer of the control function in Equation~\\eqref{eq.ControlFunction}, that $\\boldsymbol{\\chi}(\\epsilon)$ is an $M \\times \\mathcal{D}$ matrix and that in Equation~\\eqref{eq.ObjFunCompact} the argument of the trace operator is a $\\mathcal{D} \\times \\mathcal{D}$ symmetric matrix with non-negative eigenvalues (the case of zero eigenvalues implies that the sample points are flattened in at least one dimension). Significantly, the trace of this matrix and therefore the objective function itself represents the aggregate squared Euclidean distance of each node from its unsmoothed neighbors. The equivalence of Equations~\\eqref{eq.ObjectiveFunction} and~\\eqref{eq.ObjFunCompact} is seen in the simple one-dimensional smoothing example ($\\mathcal{D} = 1$): $\\boldsymbol{\\sigma}^{(0)} = \\left[\\ldots\\sigma_{N-1}~\\sigma_N~\\sigma_{N+1}\\ldots\\right]^T \\longrightarrow \\boldsymbol{\\chi}^{(0)} = \\left[\\ldots\\chi_{N-1}~\\chi_N~\\chi_{N+1}\\ldots\\right]^T$. Each column in in the $N \\times \\mathcal{D}$-matrix $D\\boldsymbol{\\chi}^{(0)} - A\\mathbf{x}_0$ corresponds to one such Cartesian component in the sample frame of reference and each element is of the form $2\\chi_N - \\left(\\sigma_{N-1} + \\sigma_{N+1}\\right)$. This is precisely the argument of the $\\left|\\cdot\\right|^2$ operation in \\eqref{eq.ObjectiveFunction}. The objective function in \\eqref{eq.ObjFunCompact} represents the operation in \\eqref{eq.ObjectiveFunction} being performed simultaneously on all $\\mathcal{D}$ Cartesian components. Minimizing them simultaneously is completely equivalent to minimizing the (reference frame-invariant) trace of the matrix $\\left(D\\boldsymbol{\\chi}^{(0)} - A\\mathbf{x}_0\\right)^T \\left(D\\boldsymbol{\\chi}^{(0)} - A\\mathbf{x}_0\\right)$.\n\n~~The $SMOOTH$ algorithm is finally given by:\n\\input{smoothing.tex}\nThe resulting surface consisting of the smoothed points with the preserved original connectivity is nonparametric. Qualitatively, the algorithm attempts to determine the least jagged surface passing in between the sample points, thus maintaining data fidelity. This precludes a major problem in applying iterative Laplace-like techniques, that of over- or under-smoothing. For the applications of $SMOOTH$ in the remainder of this text, the threshold value of $\\partial F_{\\text{obj}} / \\partial \\epsilon$  was taken to be $10^{-7}$.\n\n~~We point out that the smoothing scheme outlined in this section allows users to define the components of the algorithm for specific requirements. For instance, users of mesh smoothing algorithms like finite element method (FEM) might want to explicitly incorporate mesh quality metrics into the objective function as an alternative to remeshing. This in turn may well decide the manner of stepping in the objective function landscape and therefore shape the control function. Our smoothing paradigm permits the flexibility of user-defined objective and control functions, all the while heeding the hierarchy between the components of the grain boundary network. We address the applicability of smoothed meshes obtained from the objective function in Equation~\\eqref{eq.ObjFunCompact} to finite element applications in Section~\\ref{S:meshquality}. \n\n\n\\section{$SMOOTH$ing a digitized curve in a plane}\n\\label{S:digitalplanarcurve}\n~~We describe as a first demonstration of $SMOOTH$ the problem of smoothing a set of pixelated points $\\mathds{X} \\equiv \\{\\left(i, y_i\\right) \\left|i = 1,2,\\ldots,N~\\text{and}~y_i \\in \\mathds{Z}\\right.\\}$ representative of a curve in a plane. We list the following general properties of such a set of points:\n\\begin{enumerate}\n\t\\item\tThe coordinates are integral multiples of some basis of vectors in the plane. This could indicate either a square or triangular grid as implemented in commercial electron backscatter diffraction (EBSD)~\\cite{Schwartz2009} software or near-field high-energy diffraction microscopy (nf-HEDM)~\\cite{Lienert2011,Li2013}. \n\t\\item\tEvery point has at least one nearest neighbor in at least one direction on this integer grid. This is characteristic of discretized sampling of continuous curves and surfaces in general.\n\t\n\\end{enumerate}\n~~Such points can be obtained from pixelated images in standard formats by first generating a phase field (for instance a field of unique integers assigned to each grain), taking the magnitude of the gradient of this field and binarizing it. A morphological `skeletonizing' operation can then be applied to this binarized field~\\cite{Haralick1992,Lam1992,Kong1996}. This same technology is used in the field of biometrics, for example, to thin down high-resolution images of fingerprints to features of single-pixel thickness for further analysis. For nf-HEDM images, one can collect directly the voxel (\\textbf{vo}lume pi\\textbf{xel}) edges that border two different grains, as decided by some segmentation criterion. In our example the coordinates of the sample points are integers on a square grid. The image of the curve has been skeletonized to ensure that each sample point has no more than two of the $8$ immediate square-grid neighbors belonging to the pixelated line (interior points have two $8$-neighbors and the terminal points have one).\n\nThe results of constrained smoothing on such a pixelated curve is shown in Figure~\\ref{fig.BinarizedLineSmooth} with the perimeter points fixed at the unsmoothed grid point locations.\n\n\\begin{figure}[H]\n\t\\centering\n\t\\includegraphics[width=\\textwidth]{BinarizedLineSmooth.pdf}\n\t\\caption{\\textbf{(a)} Pixelated and thinned line and its smooth estimate; \\textbf{(b)} A plot of the objective function in its domain $\\left[0, 1\\right]$ shows a shallow minimum; \\textbf{(c)} Search for the optimal value of the control parameter $\\epsilon$ that strikes the best balance between data fidelity and smoothness.}\n\t\\label{fig.BinarizedLineSmooth}\n\\end{figure}\n\n\n\\section{$SMOOTH$ing known shapes}\n\\label{S:knownshapes}\n~~In this section the hierarchical $SMOOTH$ algorithm is applied to open surfaces that are geometry primitives in two and three dimensions. Simple parameterizations for these primitives provide a means of comparison with a smoothed solution on a point-to-point basis. We describe trends in the errors for different primitives as a function of voxel density. Focusing attention on open surfaces allows us to simulate smoothing in the presence of topological features characteristic of a grain boundary network. The three primitives chosen are a 2D circle, a 3D sphere, and a 3D cylinder. Surface slices from these primitives were characterized by the following:\n\\begin{itemize}\n\t\\item\tThe gridding resolution was chosen in terms of the number of voxels per unit length, $N$.\n\t\\item\t\\textbf{Circle}: A semicircular arc of unit radius, whose endpoints were reset to unit radius after discretization. These endpoints were held constrained during smoothing.\n\t\\item\t\\textbf{Sphere}: A square patch spanning $100^\\circ$ in two mutually perpendicular directions cut out from the surface of a sphere of radius $0.03$ units, with the edges of the square treated as triple lines and the vertices as quad points. The quad points alone were constrained to lie on the sphere, while the others were subject to discretization on a cubic lattice.\n\t\\item\t\\textbf{Cylinder}: A rectangular patch cut from the surface of a cylinder of radius $0.03$ units, parallel to its axis and spanning $150^\\circ$ along the azimuth. The edges of the rectangle were treated as triple lines and the vertices as quad points. The quad points were constrained to remain on the surface of the cylinder.\n\\end{itemize}\n\tThe choice of the sphere and cylinder radii are indicative of the typical size of a grain from earlier nf-HEDM measurements~\\cite{Hefferan2010}. The quality of smoothing was expressed as the error in the estimated radius of the primitive in question. Specific examples smoothing on these primitives are shown in Figure~\\ref{fig.knownshapes}. \n\n\n\n\n\n\n\\begin{figure}[H]\n\t\\centering\n\t\\subfloat[]{\\includegraphics[height=0.225\\textheight]{KnownShapesCircle.pdf}}\t\t\\vfill\n\t\\subfloat[]{\\includegraphics[height=0.225\\textheight]{KnownShapesSphere.pdf}}\t\t\\vfill\n\t\\subfloat[]{\\includegraphics[height=0.225\\textheight]{KnownShapesCylinder.pdf}}\t\\vfill\n\t\\caption{\\textbf{(a)} Semicurcular arc with a $50$ pixel radius; \\textbf{(b)} A discretized spherical patch ($400$ voxels per unit length) spanning equal angles ($100^\\circ$) in mutually perpendicular directions and its smoothed version; \\textbf{(b)} A cylindrical patch discretized to $400$ voxels per unit length and its smoothed version. }\n\t\\label{fig.knownshapes}\n\\end{figure}\n\n\n\n~~The fidelity of the final smoothed result to the original primitive was quantified in terms of the point-to-point difference in radii of the original and smoothed surfaces. In the case of the sphere and the cylinder, the first spherical and cylindrical polar coordinates are respectively used (\\emph{i.e} $r$ and $\\rho$).  Shown in Figure~\\ref{fig.knownshapeserrors} are trends in the estimated error $\\Delta r \\equiv r - r_0$ and its standard deviation $\\sigma_r$, taken over the smoothed mesh nodes, for all three primitives. If the unit of length is taken to be a millimeter, the relative error in the region between $N = 300$ and $N = 1000$ is particularly relevant for techniques like nf-HEDM since they correspond to a pixel size range of $1 \\mu m$ to $3.33 \\mu m$, which brackets the known experimental resolution~\\cite{Hefferan2010a}. For comparison, the radii of the spherical and cylindrical patches were chosen to be $30\\mu m$. \n\n\n\n\n\n\n\\begin{figure}[H]\n\t\\centering\n\t\\subfloat[]{\\includegraphics[height=0.22\\textheight]{CircleRadError.pdf}}\t\t\\hfill\n\t\\subfloat[]{\\includegraphics[height=0.22\\textheight]{SphereRadError.pdf}}\t\t\\hfill\n\t\\subfloat[]{\\includegraphics[height=0.22\\textheight]{CylinderRadError.pdf}}\t\t\\hfill\n\t\\vfill\n\t\\subfloat[]{\\includegraphics[height=0.22\\textheight]{CircleFitFinal.pdf}}\t\t\\hfill\n\t\\subfloat[]{\\includegraphics[height=0.22\\textheight]{SphereFitFinal.pdf}}\t\t\\hfill\n\t\\subfloat[]{\\includegraphics[height=0.22\\textheight]{CylinderFitFinal.pdf}}\t\t\\hfill\n\t\\caption{Trends in the error in estimated size $\\Delta r = r - r_0$ of the \\textbf{(a)} circle, \\textbf{(b)} sphere and \\textbf{(c)} cylinder as a function of voxel density per unit length $N$. Trends in the error spread $\\sqrt{\\left<\\Delta r^2\\right> - \\left<\\Delta r\\right>^2}/r_0$ for the \\textbf{(d)} circle, \\textbf{(e)} sphere and \\textbf{(f)} cylinder as a function of $N$. The red lines are fits to the power law $\\sigma = 10^{p_0} N^{p_1}$ whose determined coefficients are listed in Table~\\ref{tab.powerlaw}. Not all the points are used in the fits owing to coarse gridding at low values of $N$.}\n\t\\label{fig.knownshapeserrors}\n\\end{figure}\n\\begin{table}\n\t\\caption{Estimated power law coefficients of the error trends for various primitives.}\n\t\\center\n\t\\begin{tabular}{|c|c|c|}\n\t\t\\hline\n\t\tPrimitive\t&\t$p_1$\t\t&\t$p_0$\t\t\\\\ \\hline\n\t\tCircle\t\t&\t$-0.93724$\t&\t$-1.18898$\t\\\\\n\t\tSphere\t\t&\t$-0.86535$\t&\t$0.11215$\t\\\\\n\t\tCylinder\t&\t$-0.96061$\t&\t$0.47041$\t\\\\ \\hline\n\t\\end{tabular}\n\t\\label{tab.powerlaw}\n\\end{table}\n~~The power law behavior in the error trends was tested for each primitive as is seen in the straight line fits in Figure~\\ref{fig.knownshapeserrors}. The coefficients $p_0$ and $p_1$ of the estimated power law  $f(N) = 10^{p_0}  \\times N^{p_1}$ are listed in Table~\\ref{tab.powerlaw}. Of particular interest is $p_1$ which is seen to lie close to $-1$ for all three primitives. This is simply explained by the fact that the length error is $1/N$, the size of one voxel. \n\nThe lowered fit quality for the sphere and cylinder is attributed to the difficulty in obtaining a perfect stair-stepped mesh for these primitives. We further note that the relative error for each primitive is around a fraction of a percent ($< 10^{-2}$) at the spatial resolution of nf-HEDM ($1.48 \\mu m$ or $\\sim 675$ pixels per millimeter).\n\n~~Another smoothing quality metric that is easily calculated for two dimensions is the error in the local normal of a curve. This is particularly relevant to surface imaging applications. We estimate the local deviation about the known normal of the sections of a pixelated straight line that has been $SMOOTH$ed with its endpoints held at their true positions. This deviation is determined for different inclinations of the original line to the Cartesian grid. A schematic and results for the inclination range of $0^\\circ$ to $90^\\circ$ is shown in Figure~\\ref{fig.errors}. It is seen that while the mean deviation varies with the inclination of the original line, it falls within a few degrees of the actual normal which justifies the use of $SMOOTH$ in calculations of grain boundary character distribution~\\cite{Sintay2012,Khorashadizadeh2011,Ratanaphan2014}. \n\\begin{figure}\n\t\\centering\n\t\\subfloat[]{\\includegraphics[width=0.5\\textwidth]{Normal2DSchematic.pdf}}\n\t\\hfill\n\t\\subfloat[]{\\includegraphics[width=0.5\\textwidth]{NormalsTest2D.pdf}}\n\t\\caption{Estimation of deviation in expected inclination for a discretization of $600$ pixels per unit length, for repeated applications of the $SMOOTH$ algorithm. \\textbf{(a)} Schematic of a section of the simulated line, \\textbf{(b)} Mean of $\\theta_{mis}$ (taken over length of the entire smoothed line) as a function of inclination $\\theta$. The error bars denote the standard deviations of the one-sided distribution on either side of the mean.}\n\t\\label{fig.errors}\n\\end{figure}\n\n\n\n\n\n\n\\section{Results: two-dimensional microstructure smoothing}\n\\label{S:2dmic}\n~~The constrained smoothing is next demonstrated on a real two-dimensional microstructure imaged with nf-HEDM. \n\n\tThe sample points $\\mathbf{x}_i \\equiv \\left[x_i~y_i\\right]^T$ of each grain boundary are expressed in integer units of suitable in-plane step size (in this case, $2 \\mu m$) and are classified as belonging to a grain interior, grain boundary or triple point depending on the number of unique grains represented in the $8$-neighborhood . The optimization is performed simultaneously over $x_i$ and $y_i$ and therefore $\\boldsymbol{\\chi}^{(0)}$ is an $N \\times 2$-matrix. The results on a section of microstructure are shown in Figure~\\ref{fig.fe2dsmoothing}.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\begin{figure}\n\t\\centering\n\t\\includegraphics[width=0.95\\textwidth]{Fe2DSmoothing.pdf}\n\t\\caption{\\textbf{(a)} Discrete phase field of a single layer of well-ordered microstructure imaged by nf-HEDM. Each grain is colored according to a unique integer assigned to it; \\textbf{(b)} The region of interest in \\emph{(a)} zoomed in; \\textbf{(c)} Image obtained from taking the derivative of the phase field in \\emph{(a)} and binarizing it above a chosen threshold, then performing a skeletonizing operation. Triple points were identified as those grain boundary points that have three distinct phase values in their $8$-neighborhood, while grain boundary interior points as those having exactly two distinct phase values in their $8$-neighborhood. On this is superposed the result of $SMOOTH$ing carried out for each boundary while holding its associated triple points fixed; \\textbf{(d)} The result of the smoothing operation in the region of interest from \\emph{(c)}.}\n\t\\label{fig.fe2dsmoothing}\n\\end{figure}\n\n\n\n\\section{Results: three-dimensional microstructure smoothing}\n\\label{S:3dmic}\n~~Hierarchical smoothing is demonstrated on select grains of a well-ordered three-dimensional microstructure measured with nf-HEDM and is compared to the results of Laplace smoothing. The prerequisite node connectivity on the grain surfaces was obtained by first segmenting the microstructure into its constituent grains and then triangulating the faces of the cubic voxels along grain boundaries~\\cite{Groeber2014}. The result of this operation is a `quick-and-dirty' Delaunay mesh on stepped grain surfaces characteristic of discrete sampling. A few important points about this bookkeeping process that inform the subsequent smoothing are:\n\\begin{itemize}\n\t\\item\tThe grain surface nodes are unambiguously classified into their topological types \\emph{i.e.} boundary interiors, triple lines or quad points. It is worth mentioning that the preprocessing described above is external to the hierarchical smoothing algorithm itself and as such is not the focus of this work. \n\t\\item\tThe meshing and bookkeeping is done in such a manner as to ensure that nodes along triple lines and at quad points are shared between the neighboring topological features. \n\\end{itemize}\nFigures~\\ref{fig.3dgrain1},~\\ref{fig.3dgrainpair}~and~\\ref{fig.3dgrainpair2} show comparisons of hierarchical smoothing with Laplace smoothing in which the ease of movement of the triple points is enhanced by assigning them a greater Laplace smoothing parameter $\\lambda$. The values of $\\lambda$ for the parent volumes for each of these grains were determined by trial and error (as a user would have to do) by visually minimizing the distortion from  the original square-gridded grain. This is a highly inefficient process that is not required in hierarchical smoothing. \n\n\\begin{figure}[H]\n\t\\centering\n\t\\includegraphics[width=\\textwidth]{CompareWithLaplace_Grain419.pdf}\n\t\\caption{Discretized grain mesh smoothed using Laplace smoothing (with $400$ iterations and smoothing parameter $\\lambda$ set to $0.025$, $0.5$ and $0.025$ for interior nodes, triple lines and quad points respectively), and parameter-free hierarchical smoothing. The red lines are triple lines. }\n\t\\label{fig.3dgrain1}\n\\end{figure}\n\n\n\n\n\n\n\n\n\n\\begin{figure}[H]\n\t\\centering\n\t\\includegraphics[width=\\textwidth]{FeAnneal1_Clilpped_Grains_185_409.pdf}\n\t\\caption{Discretized mesh of a pair of neighboring grains smoothed using Laplace smoothing (same parameters as in Figure~\\ref{fig.3dgrain1}) and parameter-free hierarchical smoothing.}\n\t\\label{fig.3dgrainpair}\n\\end{figure}\n\n\\begin{figure}[H]\n\t\\centering\n\t\\includegraphics[width=\\textwidth]{FeAnneal1_Clilpped_Grains_264_396.pdf}\n\t\\caption{A more complicated grain pair structure with a larger number of topological features. In this example, the flatness of the top surface in the discretized grain owing to the grain being on the edge of the sample is preserved with hierarchical smoothing, while Laplace smoothing returns a clearly visible and unphysical bulge along that face. }\n\t\\label{fig.3dgrainpair2}\n\\end{figure}\n\n\n\\section{Mesh quality}\n\\label{S:meshquality}\n~~Finally we address the suitability of $SMOOTH$ output for finite element applications, which are predicated on the availability of surface meshes with reasonably isotropic mesh elements (equilateral, in the case of triangular) in order to avoid errors from piecewise linear interpolation. While there exist other sophisticated methods of quantifying the quality of a mesh element~\\cite{Frey1999}, we implement a simple metric for triangular elements that tests their closeness to an equilateral triangle~\\cite{Bank1990}. The quality of a triangle of area $A$ and side lengths $s_1$, $s_2$ and $s_3$ is defined to be:\n\n", "index": 13, "text": "\\begin{equation}\n\tQ = \\frac{4\\sqrt{3}A}{s_1^2 + s_2^2 + s_3^2}\n\t\\label{eq.meshquality}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E8.m1\" class=\"ltx_Math\" alttext=\"Q=\\frac{4\\sqrt{3}A}{s_{1}^{2}+s_{2}^{2}+s_{3}^{2}}\" display=\"block\"><mrow><mi>Q</mi><mo>=</mo><mfrac><mrow><mn>4</mn><mo>\u2062</mo><msqrt><mn>3</mn></msqrt><mo>\u2062</mo><mi>A</mi></mrow><mrow><msubsup><mi>s</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>s</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>s</mi><mn>3</mn><mn>2</mn></msubsup></mrow></mfrac></mrow></math>", "type": "latex"}]