[{"file": "1601.00428.tex", "nexttext": "\n\n\n\n", "itemtype": "equation", "pos": 27996, "prevtext": "\n\n\n\n\n\\title{Energy Efficient Location and Activity-aware On-Demand Mobile Distributed Sensing Platform  for Sensing as a Service in IoT Clouds}\n\n\n\n\n\n\n\n\n\n\n\n\\author{\\IEEEauthorblockN{Charith Perera~\\IEEEmembership{ Member,~IEEE}, Dumidu Talagala~\\IEEEmembership{Member,~IEEE}, Chi Harold Liu~\\IEEEmembership{Senior Member,~IEEE}, Julio C. Estrella~\\IEEEmembership{Member,~IEEE} }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\thanks{C.~Perera is with the\nDepartment of Computing, Faculty of Maths, Computing and Technology, The\nOpen University, Walton Hall, Milton Keynes, MK7 6AA, United Kingdom\n(e-mail: charith.perera@open.ac.uk)}\n\\thanks{D. S. Talagala is with the Centre for Vision, Speech, and Signal Processing, University of Surrey, Guildford, Surrey GU2 7XH, U.K. (e-mail: d.talagala@surrey.ac.uk).}\n\\thanks{J. C Estrella is with Institute of  Mathematics and Computer Science (ICMC), University of  S\u00c3\u00a3o Paulo, Brazil (email: jcezar@icmc.usp.br )}\n\n\\thanks{C. H. Liu is with Beijing Institute of Technology, China. (e-mail: chiliu@bit.edu.cn)}\n\n\\thanks{Manuscript received xxx xx, xxxx; revised xxx xx, xxxx.}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\markboth{IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS, VOL. xx, NO. xx, xxxxxxx xxxx}\n{Shell \\MakeLowercase{\\textit{et al.}}: Bare Demo of IEEEtran.cls for Journals}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\maketitle\n\n\n\\begin{abstract}\n\n\nThe Internet of Things (IoT) envisions billions of sensors deployed around us and connected to the Internet, where the mobile crowd sensing technologies are widely used to collect data in different contexts of the IoT paradigm. Due to the popularity of Big Data technologies, processing and storing large volumes of data has become easier than ever. However,  large scale data management tasks still require significant amounts of resources that can be expensive regardless of  whether they are purchased or rented (e.g. pay-as-you-go infrastructure). Further, not everyone is interested in such large scale data collection and analysis. More importantly, not everyone has the financial and computational resources to deal with such large volumes of data. Therefore, a timely need exists for a cloud-integrated mobile crowd sensing  platform that is capable of capturing sensors data, on-demand, based  on conditions enforced by the data consumers. In this paper, we propose a context-aware, specifically, location and activity-aware mobile sensing platform called C-MOSDEN (\\textit{Context-aware Mobile Sensor Data ENgine}) for the IoT domain. We evaluated the proposed platform using three real-world scenarios that highlight the importance of \\textit{selective sensing}. The computational effectiveness and efficiency of the proposed platform are investigated and is used to highlight the advantages of context-aware selective sensing. \n\n\n\n\n\\end{abstract}\n\n\n\n\n\n\n\n\n\\begin{IEEEkeywords}\nInternet of Things, context awareness, location awareness, activity awareness,\nselective sensing, cloud sensing middlware platforms, data filtering, distributed sensing.\n\\end{IEEEkeywords}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\IEEEpeerreviewmaketitle\n\n\n\n\\section{Introduction}\n\\label{sec:Introduction}\n\\IEEEPARstart{T}{he} Internet of Things (IoT) \\cite{myIoT} has become popular over the past decade. As part of the IoT infrastructure, sensors are expected to be deployed all around us, from everyday objects we use, to public infrastructure such as bridges and roads \\cite{H1, H2}. As the price of sensors diminish rapidly, we can soon expect to see very large numbers of objects comprising of sensors and actuators. In addition, the modern technology-savvy world is already full of devices comprising of sensors, actuators, and data processors. The concentration of computational resources will enable the sensing, capturing, collection and processing of real time data from billions of connected devices , and can be envisaged to serve   many different applications including environmental monitoring, industrial applications, business and human-centric pervasive applications \\cite{ZMP003}.\n\n\\textit{The Internet of Things allows people and things to be connected any time, any place, with anything and anyone, ideally using any path/network and any service} \\cite{P029}. IoT is expected to generate large volumes of sensors data \\cite{ZMP003}. Due to the latest innovations in the computer hardware sector and the reduction in  hardware costs, large scale data processing is becoming increasingly economical. Specially, with the popularity of utility-based cloud computing \\cite{TCSS1} that offers computational resources in a '\\textit{pay as you-go}' model, the tendency to collect a large amount of data has been increasing over the last few years. In 2010, the total amount of data on earth exceeded one zettabyte (ZB). By the end of 2011, the number grew up to 1.8 ZB \\cite{ZMP003}. Further, it is expected that this number will reach 35 ZB in 2020. It is therefore apparent that sensor data has significant value if we can collect and extract insights from them.\n\nAlong with the IoT concepts, business models such as sensing as a service  has also generated significant interest \\cite{ZMP008}.  The sensing as a service model  envisions a marketplace where sensor data is traded in an open and transparent manner with interested consumers. Sensing as a service can therefore  be seen as a platform where data owners can sell data to interested sensor date consumers in  'pay as you-go' fashion. On the one hand,  such a model stimulates the growth of sensor deployments. On the other hand, it reduces the cost of sensor data acquisition  due to its shared nature (i.e. sense once, sell to many). In addition, the sensing as a service model will also share the common IoT infrastructure to collect, process, and store data. In contrast, crowd sensing technologies have been widely used to collect sensor data in IoT paradigm. In community sensing, also referred to as group sensing \\cite{P217} and mobile {\\textit{crowdsensing }} \\cite{crowdsensing}, the focus has been on monitoring of large-scale phenomena that cannot be measured using information from a single individual. The purpose here is to collect information from a large group of people in order to analyse and use that information for the benefit of the group  as a whole.\n\nIn the discussion so far, we  briefly introduced the IoT, sensing as a service model, and the Big Data in the IoT paradigm. In this paper, we define non-selective sensing as the process of collecting sensors data from all possible sensors available, all the time without any filtering. While we acknowledge the importance and  value of collecting large volumes of sensors data, a number of drawbacks of non-selective sensor data collection  exist.  Despite the fact that non-selective data collection could generate more value in  the long term (e.g. due to discovery of knowledge that were not intended during the time of data collection), it definitely  creates a problem (or difficulties) in the short term. The main issue in non-selective data collection is cost. Moreover, the processing and storing of data lead to more costs directly associated to the computational resource requirements (e.g. CPU, memory, storage space). Further, processing more data requires more time which creates the problem of not being able to extract knowledge from the collected data on time. Crucially, another issues is energy consumption. Sensors are typically resource constrained devices with limited access to energy. Non-selective sensing therefore leads to significant energy consumption and faster battery drain which create additional challenges related to the IoT infrastructure maintenance. Another challenge is  network communication. Large-scale data transfers over the network without any kind of filtering leads to the continuous use of the communication radios continuously. This also leads to faster battery drain in addition to the heavy network traffic generated in the IoT infrastructure. Thus, energy is a critical factor, especially in the crowd sensing domain, where humans  are involved in maintaining the sensing infrastructure. Therefore, we believe that on-demand selective sensing (i.e. perform sensing only under certain conditions) enables to avoid all the issues discussed above. To this end, we propose a scalable energy efficient data analytics platform for on-demand distributed mobile crowd sensing called {C-MOSDEN }\\footnote{It is also important to note that {C-MOSDEN } is closely integrated into the GSN cloud middleware \\cite{P022}.}.  \n\nThe rest of this paper is organised as follows. In Section \\ref{sec:Problem}, we define the problem domain in details. The functional requirements of the proposed solutions is presented in Section \\ref{sec:Functional}. The proposed mobile crowd sensing platform is explained in detail in Section \\ref{sec:Solution}. The cost models and the advantages of using the proposed platform is discussed in Section \\ref{sec:Model}. Section \\ref{sec:Implementation} discusses the implementation details. Experimentation and evaluation details are presented in Section \\ref{sec:Evaluation}.  Related works are discussed in Section \\ref{sec:Related_Work}. Finally, Section \\ref{sec:Conclusions and Future Work} concludes the paper.\n\n\n\n\n\n\n\n\n\n\n\n\n\\section{Problem Definition and Motivation}\n\\label{sec:Problem}\n\nIn the earlier section we briefly introduced our problem domain. In this section, we explain the problem we address in this paper in detail. \n\n\nThe mobile crowd sensing technologies are widely used to collect data in different contexts in the IoT paradigm. Due to popularity of Big Data technologies, processing and storing large volumes of data has become easier than ever. However, still such large scale data management tasks are economically costly. For example, Microsoft Azure\\footnote{http://www.windowsazure.com/en-us/pricing/details/virtual-machines/} cloud computing platform charges  541 USD/month for 8 cores and 14GB RAM. Google\\footnote{https://cloud.google.com/products/app-engine/} cloud services  pricing is similar. Not everyone is interested in such large volumes of data collection and analysis. Further, not everyone has the financial and computational resources to deal with large volumes of data. Therefore, there is a real need for a mobile crowd sensing  platform that is capable of capturing sensor data  on-demand based on user requests and the conditions imposed by the data consumers.\n\nSensing as a service model, as illustrated in Figure \\ref{Figure:Sensing_as_a_service}, shows how cloud IoT middleware (e.g. GSN \\cite{P022}) works hand-in-hand with multiple worker nodes (e.g. C-MOSDEN). We identify two fundamental components in this sensing as a service architecture: 1) the cloud platform which manages and supervises the overall sensing tasks, and 2) worker nodes that actually perform the sensing tasks as instructed by the cloud IoT platform. It is important to note that our objective is not to analyse the data and extract any knowledge. In this context, our objective here is to collect only the most important and relevant data so the interested data consumers can use the data to extract the knowledge in an efficient manner with minimum use of computational resources, energy, time and labour. Our proposed platforms is ideal to be installed on worker nodes. Further, IoT middleware platforms such as Global Sensor Network (GSN) \\cite{P022} can be used as the cloud middleware. The cloud IoT middleware evaluates the availabilities of worker nodes and sends the requests to a specific number of selected worker nodes. More importantly, sensor data consumers may impose specific conditions on the data acquisition or transfer,  such as \\textit{`sense only when  a certain activity occurs'}. The detailed functional requirements of this system are discussed in Section \\ref{sec:Functional}.\n\n\n\n\n\n\\begin{figure}[t]\n \\centering\n\n \\includegraphics[scale=0.78]{./Images/27-Sensing_as_a_service.pdf}\n\n \\caption{The proposed platform can be installed on both mobile and static resource constrained devices. The platform provides easy ways to connect sensors. Each of this platform instances act as worker nodes and able to carry out sensing tasks as directed by the cloud-based IoT middleware.}\n \\label{Figure:Sensing_as_a_service}\t\n\n\\end{figure}\n\n\n\\section{Functional Requirement Analysis}\n\\label{sec:Functional}\n\nIn this section, we discuss some of the major functional requirement of a worker node in an ideal on-demand mobile crowd sensing platform. Let us consider three different scenarios from three different domains: 1) environmental monitoring, 2) physical rehabilitation  and 3) health and well-being.\n\n\n\n\\begin{figure}[b]\n \\centering\n\n \\includegraphics[scale=0.76]{./Images/27-Usecase1.pdf}\n\n \\caption{Usecase Scenario 1: Sensors are deployed in buses in a Smart City environment and the data is expected to be collected based on context information and conditions provided by the data consumer.}\n \\label{Figure:Usecase1}\t\n\n\\end{figure}\n\n\\textbf{Scenario 1 (Environmental Monitoring):} John, a researcher at the Department of the Environment, is interested in measuring and monitoring the air pollution in cities. John's team has deployed sensor kits in buses. Each of these sensors kits consists of multiple sensors and a communication device with both WiFi and 3G capabilities. John's team has developed an application that processes data collected by these sensor kits. This application consists of a number of different algorithms that analyse and visualise air pollution in the city. However, according to the way that the  algorithms are written, John only needs to collect data when the buses are moving. Sensor data captured while the bus is stopped at a bus stop, or in traffic does not add any value. Therefore, John would like to collect sensor data only when the bus is moving. Further, John does not need real-time data in most of the occasions. Therefore,  it is sufficient to push the  sensor data to the cloud when the bus researches a bus stop. The communication devices fitted in the bus will connect to the bus stop's WiFi and push the data collected since the last bus stop, as illustrated in Figure \\ref{Figure:Usecase1}. However, John is also interested to receive sensor data in real-time when raining. Therefore, when raining, the communication devices need to use 3G to upload the sensor data to the cloud. However, they still need to adhere to the first rule  that says \\textit{`sense only when moving'}.\n\n\n\n\n\\textbf{Scenario 2 (Rehabilitation):} Robert is a researcher who oversees a number of a rehabilitation facilities around the country where patients with physical disabilities are treated and rehabilitated. Robert is interested in collecting sensor data from sensors worn by patients while they engage in certain activities. Robert has  developed an application that requires data collected from wearable sensors \\cite{bodyArea} only when patients are walking and climbing stairs (as part of the exercise programs recommended by doctors). Wearable sensor kits push data to the patient's smartphone. Each smartphone pushes data to the cloud when it get access to the Internet as illustrated in Figure \\ref{Figure:Usecase2}. It is important to note that Robert is only interested in data collection  when the patients are performing certain activities. The blind collection of data during other times may impact negatively in the analysis done by the application Robert has developed. Such data also wastes time and resources in the event that Robert has to filter the data he wants from large volume of irrelevant data.\n\n\n\\begin{figure}[h]\n \\centering\n\n \\includegraphics[scale=0.78]{./Images/27-Usecase2.pdf}\n\n \\caption{Usecase Scenario 2: Wearable sensors are attached to patients body. Doctors and researchers are expected to collect data from the sensors based on context information.}\n \\label{Figure:Usecase2}\t\n\n\\end{figure}\n\n\n\n\n\\textbf{Scenario 3 (Health and Well-being):} Michael is working for the Department of public health and well-being. He has been asked to develop a plan to improve the public health  in cities by improving the infrastructure that supports  exercise and recreational activities (e.g. parks and the paths that supports jogging, cycling, and venues for bar exercise). Michael developed a wearable lite-weight sensor kit that can monitor a variety of different parameters such as air quality, sound, movement. Further, Michael has recruited volunteers who are willing to wear those sensor kit when  exercising. The sensor kit collects data and pushes it to the volunteer's smartphone. A smart phone application push data to the cloud once it gets connected to the Internet. However, Michael  only needs to collect data when a volunteer enters  the park areas as illustrated in Figure \\ref{Figure:Usecase3}. Further, Michael only needs to perform sensing only when the volunteers are moving (e.g. walking, running, cycling). Michael has notices that there  is a large amount of people coming to the park during the weekend. In order to reduce the burden to the volunteers, Michael only needs to collect data from a maximum of 30 sensors  kits (i.e. volunteers) despite the actual number of volunteers visiting the park in weekends.\n\n\n\n\\begin{figure}[h]\n \\centering\n\n \\includegraphics[scale=0.78]{./Images/27-Usecase3.pdf}\n\n \\caption{Usecase Scenario 3: Wearable sensors can be used to monitor movements of the  general public who use public spaces such as parks for exercising and recreational activities so the authorities can plan further development and upgrades of the infrastructure.}\n \\label{Figure:Usecase3}\t\n\n\\end{figure}\n\n\n\nAs you may have already noticed, each of these scenarios required sensing to be performed under different conditions. Due to limited resources typically, researchers try to limit the data they collect such that the processing can be done with limited resources. Further, due to the ways that analysis tools are programmed, the data they accept may differs. They tend to perform well and produce accurate results when filtered, relevant data are provided. The most widely needed filtering conditions in mobile crowd sensing platforms are location-awareness (i.e. spatial),  activity-awareness, time-awareness (i.e. temporal), and energy-awareness \\cite{SeCoMan}. Therefore, we developed our proposed platform, C-MOSDEN, to facilitate all of these conditions. Further, it is evident that we require cyber physical systems \\cite{Khaitan}, which have both physical sensing components and cloud based data analysis software modules, to accommodate the scenarios we described earlier in this section.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\section{Proposed Sensing Platform}\n\\label{sec:Solution}\n\nIn order to address the challenges discussed in the previous section, we propose a novel mobile sensing platform called {C-MOSDEN }. It consists of three components: 1) Context-aware data streaming engine called Mobile Sensor Data Engine (C-MOSDEN). C-MOSDEN platform is based on our previous platform MOSDEN \\cite{ZMC008}. MOSDEN is an IoT middleware for resource constrained devices, that allows to collect and process sensor data without programming efforts. Sensing as a service model \\cite{ZMP008} is a first class citizen in MOSDEN design.  MOSDEN is a client-side tool that can be installed in any android device such as smart phones and DragonBoard 410c. However, MOSDEN does not facilitate any context-aware functionalities. Instead, MOSDEN is a mechanism to filter data streams based on users defined queries. In C-MOSDEN,  new  querying capabilities are introduced to support context-aware functionalities., 2) the activity-aware module, and 3) a location-aware module. The complete architecture of the proposed platform, C-MOSDEN, is presented in Figure \\ref{Figure:Architecture}. First, we discuss the three main components  in the subsequent sections in brief. Then, we briefly introduce the IoT cloud middleware employed, called Global Sensor Network Middleware (GSN) \\cite{P022},  which is the cloud-based companion platform of the proposed mobile sensing system. At the end, we explain how GSN and C-MOSDEN work together as a system to achieve a common objective.\n\n\n\\begin{figure}[h]\n \\centering\n \\vspace{-0.23cm}\n \\includegraphics[scale=0.40]{./Images/27-Architecture.pdf}\n\n \\caption{The Proposed C-MOSDEN Platform}\n \\label{Figure:Architecture}\t\n\\vspace{-0.53cm}\t\n\\end{figure}\n\n\n\n\n\n\\subsection{Context-aware Mobile Sensor Data Engine (C-MOSDEN)}\nC-MOSDEN is a plug-in-based IoT middleware for mobile devices (e.g. mobile phones, tablets, Raspberry Pi like platforms) that allows to collect and process sensor data without programming efforts. C-MOSDEN is also a true zero programming middleware where users do not need to write program code or any other specifications using declarative languages. C-MOSDEN also supports both push and pull data streaming mechanisms as well as centralised and decentralised (e.g. peer-to-peer) data communication. Plugins can be installed separately to extend the capabilities of C-MOSDEN (e.g. provide support for difference types of sensors). This engine supports a number data processing and filtering capabilities such as comparison operators, average, etc. Additionally, it supports scalable and distributed sensing. C-MOSDEN can handle more than 100 user request at a given time. Performance evaluation details are presented in \\cite{ZMC008, ZMP010}. In C-MOSDEN, mobile devices are configured using a human readable SQL-like query language as explained following sections.\n\n\\subsection{Activity-aware Module}\n\\label{sec:Activity}\nThe activity-aware module is capable of recognizing six different activities. The detectable activities are 1) moving in a vehicle, 2) cycling, 3) walking, 4) running, 5) still (not moving), 6) tilting (falling). Therefore, users can combine these activities to build different types of queries. \n\n\n\n\n\n\n\\subsection{Location-aware Module}\n\nThe location-aware module is capable of recognizing when the device moves into a certain area and moves away from a certain area. These locations are defined using latitude, longitude, and radius in meters. Location-awareness can also be combined with other sensing parameters as presented in Figure \\ref{Figure:Architecture}.\n\nLet's consider three different queries built to support the three scenarios presented in Section \\ref{sec:Functional}. Figure \\ref{Figure:Sample_Query_Snippits} illustrates how to combine different sensing parameters including both activity and location awareness.\n\n\\begin{figure}[h]\n \\centering\n\n \\includegraphics[scale=0.84]{./Images/27_Sample_Query_Snippits.pdf}\n\n \\caption{Sample queries related to the three scenarios presented earlier in the paper. Queries are slightly modified for demonstration and clarity purposes.}\n \\label{Figure:Sample_Query_Snippits}\t\n\n\\end{figure}\n\nMostly the sample queries are self descriptive. However, it is important to note that activities are represented by numbers as explained in Section \\ref{sec:Activity}. Further, 'within' location is defined as a boolean value (true = 1 and false = 0). Sensor data retrieved by different plugins\\cite{ZMC008} can be referred in the query. For example, in query 2, health data is retrieved though a plugin  called \\textit{HealthKit}. This means C-MOSDEN is retrieving data from a external IoT health product \\cite{ZMJ007}.\n\n\\subsection{Global Sensor Network Middleware (GSN)}\nThe Global Sensor Network (GSN) \\cite{P022} is an IoT cloud platform aimed at providing flexible middleware to address the challenges of sensor data integration and distributed query processing. It is a generic data stream processing engine. GSN has gone beyond the traditional sensor network research efforts such as routing, data aggregation, and energy optimisation. The design of GSN is based on four basic principles: simplicity, adaptivity, scalability, and light-weight implementation. GSN middleware simplifies the procedure of connecting heterogeneous sensor devices to applications. Specifically, GSN provides the capability to integrate, discover, combine, query, and filter sensor data through a declarative XML-based language and enables zero-programming deployment and management. The GSN is based on a container based architecture. A detailed explanation is provided in \\cite{P022}. The \\textit{Virtual Sensor} is the key element in the GSN. A virtual sensor can be any kind of data producer, for example, a real sensor, a wireless camera, a desktop computer, a mobile phone, or any combination of virtual sensors. Typical, a virtual sensor can have multiple input data streams but have only one output data stream.  In this work, GSN plays the   role of cloud in the IoT platform. It provides the functionality of global scheduler that manages worker nodes. In the next section, we explain how GSN and C-MOSDEN work together as a system.\n\n\n\n\\subsection{System Work Flow}\n\nAs illustrated in Figure \\ref{Figure:Task_Scheduler}, first sensor data consumers (e.g. city council, researcher, medical doctor) submit their requirement. Then, the IoT cloud platform analyses the consumer's problem and decides which sensors are to be used to collect relevant data \\cite{ZMP009}. Then, the global task scheduler develops a strategic plan on how to delegate the tasks to multiple worker nodes (e.g. C-MOSDEN). Finally, global scheduler sends individual requests to a selected number of worker nodes (e.g. C-MOSDEN). These requests provide exact specifications and sensing objectives on  how, when, and where to collect data. Context-awareness allows to eliminates significant amount of uninterested data from communicating over limited network resources. The next section will present theoretical models for the resources saving of context-aware selective sensing. Experimental evaluation to justify the theoretical models are discussed in Section \\ref{sec:Evaluation}.\n\n\n\n\n\\begin{figure}[t]\n \\centering\n \\vspace{-0.43cm}\n \\includegraphics[scale=0.78]{./Images/27-Task_Scheduler.pdf}\n\n \\caption{The IoT cloud platform is responsible for global scheduling sensing tasks. For example, GSN performs that task.  The IoT cloud platforms can send the specific sensing objectives to the clients, so the C-MOSDEN exactly sends back only the data that is requested}\n \\label{Figure:Task_Scheduler}\t\n\n\\end{figure}\n\n\n\n\n\n\n\n\n\n\\section{Cost Model for Efficient Sensing}\n\\label{sec:Model}\n\nIn this section, we develop cost models to evaluate the efficiency of C-MOSDEN from three different perspectives: 1) energy, 2) storage, and 3) network communication.\n\n\n\n\n\n\n\n\n\\subsection{Energy Consumption Modelling}\n\\label{sec:Energy}\n\n \n\nThe notations will be described  as we introduce them in the upcoming sections. As denoted in Equation \\ref{equation:01}, the total energy consumption of a mobile sensing platform at a given point in time (i.e. $\\Delta$) depends on two factors: 1) energy used for computational tasks (denoted by $E_{CPU}^{\\Delta}$), and 2) energy used for data communication tasks (denoted by $E_{DCom}^{\\Delta}$). It is also important to note that the data communication can also be divided into two parts: 1) ($E_{DCom^{S2D}}^{\\Delta}$) data communication between sensors (S) and the local computational device (D)  (e.g.  between external sensors and the mobile phone \\cite{ZMPB001}), and 2) ($E_{DCom^{D2C}}^{\\Delta}$) data communication between the computational device (D) and the IoT cloud  middleware (C) as defined in Equation \\ref{equation:01_2}. Further, we can define $E_{DCom}^{\\Delta}$ based on the communication protocols as well, as presented by Equation \\ref{equation:01_3} (e.g. 3G, WiFi, Bluetooth, ZigBee, Z-Wave, etc.). Typically, long range protocols consumes significantly more energy than short range protocols. However, there are some other energy costs as well (e.g. operating system related computational tasks, display, and so on.) where we denote them using a constant $K^{\\Delta}$ in Equation \\ref{equation:01}.\n\n\n\n\n\n", "index": 1, "text": "\\begin{equation}\n\\label{equation:01}\nE_{Total}^{\\Delta} = E_{CPU}^{\\Delta} + E_{DCom}^{\\Delta}   + K^{\\Delta}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m1\" class=\"ltx_Math\" alttext=\"E_{Total}^{\\Delta}=E_{CPU}^{\\Delta}+E_{DCom}^{\\Delta}+K^{\\Delta}\" display=\"block\"><mrow><msubsup><mi>E</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup><mo>=</mo><mrow><msubsup><mi>E</mi><mrow><mi>C</mi><mo>\u2062</mo><mi>P</mi><mo>\u2062</mo><mi>U</mi></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup><mo>+</mo><msubsup><mi>E</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup><mo>+</mo><msup><mi>K</mi><mi mathvariant=\"normal\">\u0394</mi></msup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\n", "itemtype": "equation", "pos": 28123, "prevtext": "\n\n\n\n", "index": 3, "text": "\\begin{equation}\n\\label{equation:01_2}\nE_{DCom}^{\\Delta}  =  E_{DCom^{S2D}}^{\\Delta} + E_{DCom^{D2C}}^{\\Delta}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E2.m1\" class=\"ltx_Math\" alttext=\"E_{DCom}^{\\Delta}=E_{DCom^{S2D}}^{\\Delta}+E_{DCom^{D2C}}^{\\Delta}\" display=\"block\"><mrow><msubsup><mi>E</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup><mo>=</mo><mrow><msubsup><mi>E</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><msup><mi>m</mi><mrow><mi>S</mi><mo>\u2062</mo><mn>2</mn><mo>\u2062</mo><mi>D</mi></mrow></msup></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup><mo>+</mo><msubsup><mi>E</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><msup><mi>m</mi><mrow><mi>D</mi><mo>\u2062</mo><mn>2</mn><mo>\u2062</mo><mi>C</mi></mrow></msup></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\n\nIn Section \\ref{sec:Functional}, we presented three different scenarios. Each of these scenarios had their own set of requirements and sensing objectives regarding how, what, and when to collect data. A scenario can be considered as an experiment that takes place within a certain period of time. We use $S^{\\Theta}$ to denote a scenario. Equation \\ref{equation:02} defines the total energy consumption by the scenario $S^{\\Theta}$.\n\n\n\n\n\n\n", "itemtype": "equation", "pos": 28250, "prevtext": "\n\n\n", "index": 5, "text": "\\begin{equation}\n\\label{equation:01_3}\nE_{DCom}^{\\Delta}  =  E_{3G}^{\\Delta} + E_{WiFi}^{\\Delta} +  E_{BT}^{\\Delta} + E_{ZigBee}^{\\Delta} + E_{Z-Wave}^{\\Delta}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E3.m1\" class=\"ltx_Math\" alttext=\"E_{DCom}^{\\Delta}=E_{3G}^{\\Delta}+E_{WiFi}^{\\Delta}+E_{BT}^{\\Delta}+E_{ZigBee}%&#10;^{\\Delta}+E_{Z-Wave}^{\\Delta}\" display=\"block\"><mrow><msubsup><mi>E</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup><mo>=</mo><mrow><msubsup><mi>E</mi><mrow><mn>3</mn><mo>\u2062</mo><mi>G</mi></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup><mo>+</mo><msubsup><mi>E</mi><mrow><mi>W</mi><mo>\u2062</mo><mi>i</mi><mo>\u2062</mo><mi>F</mi><mo>\u2062</mo><mi>i</mi></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup><mo>+</mo><msubsup><mi>E</mi><mrow><mi>B</mi><mo>\u2062</mo><mi>T</mi></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup><mo>+</mo><msubsup><mi>E</mi><mrow><mi>Z</mi><mo>\u2062</mo><mi>i</mi><mo>\u2062</mo><mi>g</mi><mo>\u2062</mo><mi>B</mi><mo>\u2062</mo><mi>e</mi><mo>\u2062</mo><mi>e</mi></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup><mo>+</mo><msubsup><mi>E</mi><mrow><mi>Z</mi><mo>-</mo><mrow><mi>W</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>v</mi><mo>\u2062</mo><mi>e</mi></mrow></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\nIn Equation \\ref{equation:03}, we introduce $S^{\\Psi}$ instead of $S^{\\Theta}$. In the scenario defined in  Equation \\ref{equation:02}, sensor data is collected using non-context-aware fashion. This means that the mobile sensing platform has been configured to collect data during the total time of the experiment (no activity-aware or location-aware capabilities have been used). In contrast, Equation \\ref{equation:03} defines the total energy consumption when context-aware capabilites are activated. As  mentioned earlier, the context-aware capabilites are provided by the C-MOSDEN platforms at some cost. For example, in order to provide activity-aware and location-aware services, C-MOSDEN needs to perform some additional computations. Such additional computations need to be added to the total energy consumption equation. We use $E_{\\Omega}^{S^{\\Psi}}$ to denote such overhead computational costs.\n\n\n\n\n\n\n\n\n", "itemtype": "equation", "pos": 28866, "prevtext": "\n\n\n\nIn Section \\ref{sec:Functional}, we presented three different scenarios. Each of these scenarios had their own set of requirements and sensing objectives regarding how, what, and when to collect data. A scenario can be considered as an experiment that takes place within a certain period of time. We use $S^{\\Theta}$ to denote a scenario. Equation \\ref{equation:02} defines the total energy consumption by the scenario $S^{\\Theta}$.\n\n\n\n\n\n\n", "index": 7, "text": "\\begin{equation}\n\\label{equation:02}\nE_{Total}^{S^{\\Theta}} = E_{CPU}^{S^{\\Theta}} + E_{DCom}^{S^{\\Theta}}  +  K^{S^{\\Theta}}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E4.m1\" class=\"ltx_Math\" alttext=\"E_{Total}^{S^{\\Theta}}=E_{CPU}^{S^{\\Theta}}+E_{DCom}^{S^{\\Theta}}+K^{S^{\\Theta}}\" display=\"block\"><mrow><msubsup><mi>E</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup><mo>=</mo><mrow><msubsup><mi>E</mi><mrow><mi>C</mi><mo>\u2062</mo><mi>P</mi><mo>\u2062</mo><mi>U</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup><mo>+</mo><msubsup><mi>E</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup><mo>+</mo><msup><mi>K</mi><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\nThe total energy consumption by the CPU when context-aware capabilities are not in use (i.e. scenario $S^{\\Theta}$) denoted by Equation \\ref{equation:04}. $PT_{CPU}^{S^{\\Theta}}$ denotes the CPU processing time of the scenario $S^{\\Theta}$. $E_{CPU}^{\\Delta}$ denotes the energy cost at a given time. Therefore, total energy consumption by the CPU during a the scenario $S^{\\Theta}$ is denoted by $E_{CPU}^{S^{\\Theta}}$.\n\n\n\n\n", "itemtype": "equation", "pos": 29922, "prevtext": "\n\nIn Equation \\ref{equation:03}, we introduce $S^{\\Psi}$ instead of $S^{\\Theta}$. In the scenario defined in  Equation \\ref{equation:02}, sensor data is collected using non-context-aware fashion. This means that the mobile sensing platform has been configured to collect data during the total time of the experiment (no activity-aware or location-aware capabilities have been used). In contrast, Equation \\ref{equation:03} defines the total energy consumption when context-aware capabilites are activated. As  mentioned earlier, the context-aware capabilites are provided by the C-MOSDEN platforms at some cost. For example, in order to provide activity-aware and location-aware services, C-MOSDEN needs to perform some additional computations. Such additional computations need to be added to the total energy consumption equation. We use $E_{\\Omega}^{S^{\\Psi}}$ to denote such overhead computational costs.\n\n\n\n\n\n\n\n\n", "index": 9, "text": "\\begin{equation}\n\\label{equation:03}\nE_{Total}^{S^{\\Psi}} = E_{CPU}^{S^{\\Psi}} + E_{DCom}^{S^{\\Psi}} +  K^{S^{\\Psi}} + E_{\\Omega}^{S^{\\Psi}}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E5.m1\" class=\"ltx_Math\" alttext=\"E_{Total}^{S^{\\Psi}}=E_{CPU}^{S^{\\Psi}}+E_{DCom}^{S^{\\Psi}}+K^{S^{\\Psi}}+E_{%&#10;\\Omega}^{S^{\\Psi}}\" display=\"block\"><mrow><msubsup><mi>E</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup><mo>=</mo><mrow><msubsup><mi>E</mi><mrow><mi>C</mi><mo>\u2062</mo><mi>P</mi><mo>\u2062</mo><mi>U</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup><mo>+</mo><msubsup><mi>E</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup><mo>+</mo><msup><mi>K</mi><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msup><mo>+</mo><msubsup><mi>E</mi><mi mathvariant=\"normal\">\u03a9</mi><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\nSimilarly, Equation \\ref{equation:05}  denotes the total energy cost for data communication. At a given point of time  data communication energy cost is $E_{DCom}^{\\Delta}$. Total data transmission time is denoted by $TT_{DCom}^{S^{\\Theta}}$.\n\n\n", "itemtype": "equation", "pos": 30504, "prevtext": "\n\n\nThe total energy consumption by the CPU when context-aware capabilities are not in use (i.e. scenario $S^{\\Theta}$) denoted by Equation \\ref{equation:04}. $PT_{CPU}^{S^{\\Theta}}$ denotes the CPU processing time of the scenario $S^{\\Theta}$. $E_{CPU}^{\\Delta}$ denotes the energy cost at a given time. Therefore, total energy consumption by the CPU during a the scenario $S^{\\Theta}$ is denoted by $E_{CPU}^{S^{\\Theta}}$.\n\n\n\n\n", "index": 11, "text": "\\begin{equation}\n\\label{equation:04}\nE_{CPU}^{S^{\\Theta}} =  E_{CPU}^{\\Delta} \\times PT_{CPU}^{S^{\\Theta}}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E6.m1\" class=\"ltx_Math\" alttext=\"E_{CPU}^{S^{\\Theta}}=E_{CPU}^{\\Delta}\\times PT_{CPU}^{S^{\\Theta}}\" display=\"block\"><mrow><msubsup><mi>E</mi><mrow><mi>C</mi><mo>\u2062</mo><mi>P</mi><mo>\u2062</mo><mi>U</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup><mo>=</mo><mrow><mrow><msubsup><mi>E</mi><mrow><mi>C</mi><mo>\u2062</mo><mi>P</mi><mo>\u2062</mo><mi>U</mi></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup><mo>\u00d7</mo><mi>P</mi></mrow><mo>\u2062</mo><msubsup><mi>T</mi><mrow><mi>C</mi><mo>\u2062</mo><mi>P</mi><mo>\u2062</mo><mi>U</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\n\n\n\n\n\n\n\n\n\nIt is important to note that in scenario $S^{\\Theta}$, the  data communication is performed throughout the total duration (due to non-selective, non-context-aware sensing strategy). \n\n\nFor example, let us consider data communication related  energy consumption. $TT_{DCom}^{S^{\\Theta}} $ is denoted by Equation \\ref{equation:07}. The total duration of the scenario is denoted by $T_{TD}^{S^{\\Theta}}$. The network communication frequency (i.e. how frequently the data needs to be sent to the cloud) is denoted by $T_{NCF}^{S^{\\Theta}}$. Therefore, the number of time that the mobile device needs to push data to the cloud is denoted by $\\frac{T_{TD}^{S^{\\Theta}} }{T_{NCF}^{S^{\\Theta}}  }$. $T_{DCom}^{\\alpha }$ denotes the time it takes to push data to the cloud for one single round. It is important to  note that we mainly consider the data communication between the local computational device and the IoT cloud (i.e. $E_{DCom^{D2C}}^{\\Delta}$) due to its significance over $E_{DCom^{S2D}}^{\\Delta}$.\n\n\n\n\n\n", "itemtype": "equation", "pos": 30872, "prevtext": "\n\n\nSimilarly, Equation \\ref{equation:05}  denotes the total energy cost for data communication. At a given point of time  data communication energy cost is $E_{DCom}^{\\Delta}$. Total data transmission time is denoted by $TT_{DCom}^{S^{\\Theta}}$.\n\n\n", "index": 13, "text": "\\begin{equation}\n\\label{equation:05}\nE_{DCom}^{S^{\\Theta}} =  E_{DCom}^{\\Delta} \\times TT_{DCom}^{S^{\\Theta}}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E7.m1\" class=\"ltx_Math\" alttext=\"E_{DCom}^{S^{\\Theta}}=E_{DCom}^{\\Delta}\\times TT_{DCom}^{S^{\\Theta}}\" display=\"block\"><mrow><msubsup><mi>E</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup><mo>=</mo><mrow><mrow><msubsup><mi>E</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup><mo>\u00d7</mo><mi>T</mi></mrow><mo>\u2062</mo><msubsup><mi>T</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\nHowever, in selective context-aware sensing, data is collected only when required. This means that the mobile sensing platform does not push data to the cloud all the time (i.e. $T_{TD} $). As shown in Equation \\ref{equation:010}, actual running time (i.e. $T_{ART}$) is less than the total duration of the scenario (i.e. $T_{TD} $) due to $T_{\\textbf{$\\Pi$}}$. $T_{\\textbf{$\\Pi$}}$ denotes the time period where mobile sensing platform is not interested to push data to the cloud based on the sensing objectives and instructions provided to it (e.g. through context-aware policies) \n\n\n\n", "itemtype": "equation", "pos": 32016, "prevtext": "\n\n\n\n\n\n\n\n\n\n\n\nIt is important to note that in scenario $S^{\\Theta}$, the  data communication is performed throughout the total duration (due to non-selective, non-context-aware sensing strategy). \n\n\nFor example, let us consider data communication related  energy consumption. $TT_{DCom}^{S^{\\Theta}} $ is denoted by Equation \\ref{equation:07}. The total duration of the scenario is denoted by $T_{TD}^{S^{\\Theta}}$. The network communication frequency (i.e. how frequently the data needs to be sent to the cloud) is denoted by $T_{NCF}^{S^{\\Theta}}$. Therefore, the number of time that the mobile device needs to push data to the cloud is denoted by $\\frac{T_{TD}^{S^{\\Theta}} }{T_{NCF}^{S^{\\Theta}}  }$. $T_{DCom}^{\\alpha }$ denotes the time it takes to push data to the cloud for one single round. It is important to  note that we mainly consider the data communication between the local computational device and the IoT cloud (i.e. $E_{DCom^{D2C}}^{\\Delta}$) due to its significance over $E_{DCom^{S2D}}^{\\Delta}$.\n\n\n\n\n\n", "index": 15, "text": "\\begin{equation}\n\\label{equation:07}\nTT_{DCom}^{S^{\\Theta}}  = \\frac{T_{TD}^{S^{\\Theta}} }{T_{NCF}^{S^{\\Theta}}  } \\times T_{DCom}^{\\alpha }\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E8.m1\" class=\"ltx_Math\" alttext=\"TT_{DCom}^{S^{\\Theta}}=\\frac{T_{TD}^{S^{\\Theta}}}{T_{NCF}^{S^{\\Theta}}}\\times T%&#10;_{DCom}^{\\alpha}\" display=\"block\"><mrow><mrow><mi>T</mi><mo>\u2062</mo><msubsup><mi>T</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup></mrow><mo>=</mo><mrow><mfrac><msubsup><mi>T</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>D</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup><msubsup><mi>T</mi><mrow><mi>N</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>F</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup></mfrac><mo>\u00d7</mo><msubsup><mi>T</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><mi>\u03b1</mi></msubsup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\nAs a result, actual running time ($T_{ART}$) is less than total duration of a given scenario ($T_{TD}$) as shown in Equation \\ref{equation:011}.\n\n\n", "itemtype": "equation", "pos": 32760, "prevtext": "\n\n\nHowever, in selective context-aware sensing, data is collected only when required. This means that the mobile sensing platform does not push data to the cloud all the time (i.e. $T_{TD} $). As shown in Equation \\ref{equation:010}, actual running time (i.e. $T_{ART}$) is less than the total duration of the scenario (i.e. $T_{TD} $) due to $T_{\\textbf{$\\Pi$}}$. $T_{\\textbf{$\\Pi$}}$ denotes the time period where mobile sensing platform is not interested to push data to the cloud based on the sensing objectives and instructions provided to it (e.g. through context-aware policies) \n\n\n\n", "index": 17, "text": "\\begin{equation}\n\\label{equation:010}\n\\downarrow T_{ART}= T_{TD} - T_{\\Pi} \\uparrow\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E9.m1\" class=\"ltx_Math\" alttext=\"\\downarrow T_{ART}=T_{TD}-T_{\\Pi}\\uparrow\" display=\"block\"><mrow><mi/><mo>\u2193</mo><msub><mi>T</mi><mrow><mi>A</mi><mo>\u2062</mo><mi>R</mi><mo>\u2062</mo><mi>T</mi></mrow></msub><mo>=</mo><mrow><msub><mi>T</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>D</mi></mrow></msub><mo>-</mo><msub><mi>T</mi><mi mathvariant=\"normal\">\u03a0</mi></msub></mrow><mo>\u2191</mo><mi/></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\nThen, we can define the energy consumption related to data communication ($E_{DCom}^{S^{\\Psi}}$)  for a given scenario $\\Psi$ which employs context-aware capabilities to reduce energy wastage as in Equation \\ref{equation:013} and \\ref{equation:012}.\n\n\n\n", "itemtype": "equation", "pos": 33006, "prevtext": "\n\nAs a result, actual running time ($T_{ART}$) is less than total duration of a given scenario ($T_{TD}$) as shown in Equation \\ref{equation:011}.\n\n\n", "index": 19, "text": "\\begin{equation}\n\\label{equation:011}\nT_{ART} < T_{TD}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E10.m1\" class=\"ltx_Math\" alttext=\"T_{ART}&lt;T_{TD}\" display=\"block\"><mrow><msub><mi>T</mi><mrow><mi>A</mi><mo>\u2062</mo><mi>R</mi><mo>\u2062</mo><mi>T</mi></mrow></msub><mo>&lt;</mo><msub><mi>T</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>D</mi></mrow></msub></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\n\n", "itemtype": "equation", "pos": 33330, "prevtext": "\n\n\nThen, we can define the energy consumption related to data communication ($E_{DCom}^{S^{\\Psi}}$)  for a given scenario $\\Psi$ which employs context-aware capabilities to reduce energy wastage as in Equation \\ref{equation:013} and \\ref{equation:012}.\n\n\n\n", "index": 21, "text": "\\begin{equation}\n\\label{equation:013}\nTT_{DCom}^{S^{\\Psi}}  = \\frac{T_{ART}^{S^{\\Psi}} }{T_{NCF}^{S^{\\Psi}}  } \\times T_{DCom}^{\\alpha }\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E11.m1\" class=\"ltx_Math\" alttext=\"TT_{DCom}^{S^{\\Psi}}=\\frac{T_{ART}^{S^{\\Psi}}}{T_{NCF}^{S^{\\Psi}}}\\times T_{%&#10;DCom}^{\\alpha}\" display=\"block\"><mrow><mrow><mi>T</mi><mo>\u2062</mo><msubsup><mi>T</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup></mrow><mo>=</mo><mrow><mfrac><msubsup><mi>T</mi><mrow><mi>A</mi><mo>\u2062</mo><mi>R</mi><mo>\u2062</mo><mi>T</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup><msubsup><mi>T</mi><mrow><mi>N</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>F</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup></mfrac><mo>\u00d7</mo><msubsup><mi>T</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><mi>\u03b1</mi></msubsup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\nFinally, by applying Equation \\ref{equation:012} to Equation \\ref{equation:03} and Equation \\ref{equation:02}, we can model the total saving as defined in Equation \\ref{equation:014}.\n\n\n", "itemtype": "equation", "pos": 33484, "prevtext": "\n\n\n\n", "index": 23, "text": "\\begin{equation}\n\\label{equation:012}\nE_{DCom}^{S^{\\Psi}} =  E_{DCom}^{\\Delta} \\times TT_{DCom}^{S^{\\Psi}}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E12.m1\" class=\"ltx_Math\" alttext=\"E_{DCom}^{S^{\\Psi}}=E_{DCom}^{\\Delta}\\times TT_{DCom}^{S^{\\Psi}}\" display=\"block\"><mrow><msubsup><mi>E</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup><mo>=</mo><mrow><mrow><msubsup><mi>E</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><mi mathvariant=\"normal\">\u0394</mi></msubsup><mo>\u00d7</mo><mi>T</mi></mrow><mo>\u2062</mo><msubsup><mi>T</mi><mrow><mi>D</mi><mo>\u2062</mo><mi>C</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>m</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\n\n\\subsection{Storage Consumption Modelling}\n\\label{sec:Storage}\n\nIn a similar  way to energy consumption modelling, we can also model storage consumption. In a non-context-aware $\\Theta$ scenario, the total number of sensor data records collected are denoted by $N^{\\Theta}_{Records}$. Storage frequency is denoted by $T_{SF}^{S^{\\Theta}}$ and the total duration of the scenario $\\Theta$  is denoted by $T_{TD}^{S^{\\Theta}}$. Therefore, Equation \\ref{equation:016} defines the number of records that will be stored during the scenario $\\Theta$.\n\n\n\n", "itemtype": "equation", "pos": 33793, "prevtext": "\n\n\nFinally, by applying Equation \\ref{equation:012} to Equation \\ref{equation:03} and Equation \\ref{equation:02}, we can model the total saving as defined in Equation \\ref{equation:014}.\n\n\n", "index": 25, "text": "\\begin{equation}\n\\label{equation:014}\n\\textrm{Total Energy Cost Saving}  = \\frac{E_{Total}^{S^{\\Psi}}}{E_{Total}^{S^{\\Theta}} } \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E13.m1\" class=\"ltx_Math\" alttext=\"\\textrm{Total Energy Cost Saving}=\\frac{E_{Total}^{S^{\\Psi}}}{E_{Total}^{S^{%&#10;\\Theta}}}\" display=\"block\"><mrow><mtext>Total Energy Cost Saving</mtext><mo>=</mo><mfrac><msubsup><mi>E</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup><msubsup><mi>E</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup></mfrac></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\nThe total storage requirement is defined in Equation \\ref{equation:017}. It can be calculated by multiplying the  number of records need to be stored and the storage requirement of a single record (i.e. $S_{Record}^{\\alpha}$).\n\n\n", "itemtype": "equation", "pos": 34486, "prevtext": "\n\n\n\n\\subsection{Storage Consumption Modelling}\n\\label{sec:Storage}\n\nIn a similar  way to energy consumption modelling, we can also model storage consumption. In a non-context-aware $\\Theta$ scenario, the total number of sensor data records collected are denoted by $N^{\\Theta}_{Records}$. Storage frequency is denoted by $T_{SF}^{S^{\\Theta}}$ and the total duration of the scenario $\\Theta$  is denoted by $T_{TD}^{S^{\\Theta}}$. Therefore, Equation \\ref{equation:016} defines the number of records that will be stored during the scenario $\\Theta$.\n\n\n\n", "index": 27, "text": "\\begin{equation}\n\\label{equation:016}\nN^{\\Theta}_{Records} = \\frac{T_{TD}^{S^{\\Theta}} }{T_{SF}^{S^{\\Theta}}  }\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E14.m1\" class=\"ltx_Math\" alttext=\"N^{\\Theta}_{Records}=\\frac{T_{TD}^{S^{\\Theta}}}{T_{SF}^{S^{\\Theta}}}\" display=\"block\"><mrow><msubsup><mi>N</mi><mrow><mi>R</mi><mo>\u2062</mo><mi>e</mi><mo>\u2062</mo><mi>c</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>r</mi><mo>\u2062</mo><mi>d</mi><mo>\u2062</mo><mi>s</mi></mrow><mi mathvariant=\"normal\">\u0398</mi></msubsup><mo>=</mo><mfrac><msubsup><mi>T</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>D</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup><msubsup><mi>T</mi><mrow><mi>S</mi><mo>\u2062</mo><mi>F</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup></mfrac></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\nIn Equation \\ref{equation:010}, we showed the reduction of actual running time of a context-aware scenario (i.e. $\\Psi$). This means that the mobile sensing platform now needs to store  less number of records compared to a $\\Theta$ scenario as defined in Equation \\ref{equation:018}.\n\n\n\n", "itemtype": "equation", "pos": 34842, "prevtext": "\n\nThe total storage requirement is defined in Equation \\ref{equation:017}. It can be calculated by multiplying the  number of records need to be stored and the storage requirement of a single record (i.e. $S_{Record}^{\\alpha}$).\n\n\n", "index": 29, "text": "\\begin{equation}\n\\label{equation:017}\nS_{Total}^{S^{\\Theta}} = N^{\\Theta}_{Records} \\times S_{Record}^{\\alpha }\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E15.m1\" class=\"ltx_Math\" alttext=\"S_{Total}^{S^{\\Theta}}=N^{\\Theta}_{Records}\\times S_{Record}^{\\alpha}\" display=\"block\"><mrow><msubsup><mi>S</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup><mo>=</mo><mrow><msubsup><mi>N</mi><mrow><mi>R</mi><mo>\u2062</mo><mi>e</mi><mo>\u2062</mo><mi>c</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>r</mi><mo>\u2062</mo><mi>d</mi><mo>\u2062</mo><mi>s</mi></mrow><mi mathvariant=\"normal\">\u0398</mi></msubsup><mo>\u00d7</mo><msubsup><mi>S</mi><mrow><mi>R</mi><mo>\u2062</mo><mi>e</mi><mo>\u2062</mo><mi>c</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>r</mi><mo>\u2062</mo><mi>d</mi></mrow><mi>\u03b1</mi></msubsup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\nAs a results, less number of records require less amount of storage as denoted in Equation \\ref{equation:019}. Finally, we can model the storage cost savings  as  in Equation \\ref{equation:020}.\n\n\n", "itemtype": "equation", "pos": 35257, "prevtext": "\n\n\nIn Equation \\ref{equation:010}, we showed the reduction of actual running time of a context-aware scenario (i.e. $\\Psi$). This means that the mobile sensing platform now needs to store  less number of records compared to a $\\Theta$ scenario as defined in Equation \\ref{equation:018}.\n\n\n\n", "index": 31, "text": "\\begin{equation}\n\\label{equation:018}\nN^{\\Psi}_{Records} = \\frac{T_{ART}^{S^{\\Psi}} }{T_{SF}^{S^{\\Psi}}  }\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E16.m1\" class=\"ltx_Math\" alttext=\"N^{\\Psi}_{Records}=\\frac{T_{ART}^{S^{\\Psi}}}{T_{SF}^{S^{\\Psi}}}\" display=\"block\"><mrow><msubsup><mi>N</mi><mrow><mi>R</mi><mo>\u2062</mo><mi>e</mi><mo>\u2062</mo><mi>c</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>r</mi><mo>\u2062</mo><mi>d</mi><mo>\u2062</mo><mi>s</mi></mrow><mi mathvariant=\"normal\">\u03a8</mi></msubsup><mo>=</mo><mfrac><msubsup><mi>T</mi><mrow><mi>A</mi><mo>\u2062</mo><mi>R</mi><mo>\u2062</mo><mi>T</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup><msubsup><mi>T</mi><mrow><mi>S</mi><mo>\u2062</mo><mi>F</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup></mfrac></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\n\n", "itemtype": "equation", "pos": 35576, "prevtext": "\n\nAs a results, less number of records require less amount of storage as denoted in Equation \\ref{equation:019}. Finally, we can model the storage cost savings  as  in Equation \\ref{equation:020}.\n\n\n", "index": 33, "text": "\\begin{equation}\n\\label{equation:019}\nS_{Total}^{S^{\\Psi}} = N^{\\Psi}_{Records}  \\times S_{Record}^{\\alpha }\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E17.m1\" class=\"ltx_Math\" alttext=\"S_{Total}^{S^{\\Psi}}=N^{\\Psi}_{Records}\\times S_{Record}^{\\alpha}\" display=\"block\"><mrow><msubsup><mi>S</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup><mo>=</mo><mrow><msubsup><mi>N</mi><mrow><mi>R</mi><mo>\u2062</mo><mi>e</mi><mo>\u2062</mo><mi>c</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>r</mi><mo>\u2062</mo><mi>d</mi><mo>\u2062</mo><mi>s</mi></mrow><mi mathvariant=\"normal\">\u03a8</mi></msubsup><mo>\u00d7</mo><msubsup><mi>S</mi><mrow><mi>R</mi><mo>\u2062</mo><mi>e</mi><mo>\u2062</mo><mi>c</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>r</mi><mo>\u2062</mo><mi>d</mi></mrow><mi>\u03b1</mi></msubsup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\n\n\\subsection{Network Communication Modelling}\n\\label{sec:Network_Communication}\n\nIn the above section, we showed how context-aware $\\Psi$ scenarios can reduce storage consumption. Based on that, we base our argument that network communication mostly has the same characteristics as storage. This means that more data we save, it costs more to transfer them to the IoT cloud. Based on Equations \\ref{equation:021}, \\ref{equation:022}, \\ref{equation:023}, \\ref{equation:024}, we can infer, context aware capabilities lead to reduce network communication wastage. \n\n\n\n", "itemtype": "equation", "pos": 35702, "prevtext": "\n\n\n\n", "index": 35, "text": "\\begin{equation}\n\\label{equation:020}\n\\textrm{Total Storage Cost Saving}  = \\frac{S_{Total}^{S^{\\Psi}}}{S_{Total}^{S^{\\Theta}}} \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E18.m1\" class=\"ltx_Math\" alttext=\"\\textrm{Total Storage Cost Saving}=\\frac{S_{Total}^{S^{\\Psi}}}{S_{Total}^{S^{%&#10;\\Theta}}}\" display=\"block\"><mrow><mtext>Total Storage Cost Saving</mtext><mo>=</mo><mfrac><msubsup><mi>S</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup><msubsup><mi>S</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup></mfrac></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\n\n", "itemtype": "equation", "pos": 36412, "prevtext": "\n\n\n\n\\subsection{Network Communication Modelling}\n\\label{sec:Network_Communication}\n\nIn the above section, we showed how context-aware $\\Psi$ scenarios can reduce storage consumption. Based on that, we base our argument that network communication mostly has the same characteristics as storage. This means that more data we save, it costs more to transfer them to the IoT cloud. Based on Equations \\ref{equation:021}, \\ref{equation:022}, \\ref{equation:023}, \\ref{equation:024}, we can infer, context aware capabilities lead to reduce network communication wastage. \n\n\n\n", "index": 37, "text": "\\begin{equation}\n\\label{equation:021}\nNC_{Total}^{S^{\\Theta}}   \\approx S_{Total}^{S^{\\Theta}}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E19.m1\" class=\"ltx_Math\" alttext=\"NC_{Total}^{S^{\\Theta}}\\approx S_{Total}^{S^{\\Theta}}\" display=\"block\"><mrow><mrow><mi>N</mi><mo>\u2062</mo><msubsup><mi>C</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup></mrow><mo>\u2248</mo><msubsup><mi>S</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\n\n\n", "itemtype": "equation", "pos": 36524, "prevtext": "\n\n\n\n", "index": 39, "text": "\\begin{equation}\n\\label{equation:022}\nNC_{Total}^{S^{\\Psi}}  \\approx S_{Total}^{S^{\\Psi}}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E20.m1\" class=\"ltx_Math\" alttext=\"NC_{Total}^{S^{\\Psi}}\\approx S_{Total}^{S^{\\Psi}}\" display=\"block\"><mrow><mrow><mi>N</mi><mo>\u2062</mo><msubsup><mi>C</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup></mrow><mo>\u2248</mo><msubsup><mi>S</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\n\n\n\n", "itemtype": "equation", "pos": 36632, "prevtext": "\n\n\n\n\n", "index": 41, "text": "\\begin{equation}\n\\label{equation:023}\nS_{Total}^{S^{\\Psi}}  < S_{Total}^{S^{\\Theta}}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E21.m1\" class=\"ltx_Math\" alttext=\"S_{Total}^{S^{\\Psi}}&lt;S_{Total}^{S^{\\Theta}}\" display=\"block\"><mrow><msubsup><mi>S</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup><mo>&lt;</mo><msubsup><mi>S</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\nFinally, Equation \\ref{equation:025} models the total network communication savings of C-MOSDEN when employing context-aware capabilities. \n\n\n", "itemtype": "equation", "pos": 36736, "prevtext": "\n\n\n\n\n\n", "index": 43, "text": "\\begin{equation}\n\\label{equation:024}\nNC_{Total}^{S^{\\Psi}} < NC_{Total}^{S^{\\Theta}} \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E22.m1\" class=\"ltx_Math\" alttext=\"NC_{Total}^{S^{\\Psi}}&lt;NC_{Total}^{S^{\\Theta}}\" display=\"block\"><mrow><mrow><mi>N</mi><mo>\u2062</mo><msubsup><mi>C</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup></mrow><mo>&lt;</mo><mrow><mi>N</mi><mo>\u2062</mo><msubsup><mi>C</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup></mrow></mrow></math>", "type": "latex"}, {"file": "1601.00428.tex", "nexttext": "\n\n\nIn above three sections, we theoretically explained how and why context-aware selective sensing is more efficient over non-selective non-context aware sensing strategies. In Section \\ref{sec:Implementation} and \\ref{sec:Evaluation}, we validate the theoretical modelling by conducting a series of experimental evaluations.\n\n\n\\begin{figure*}[t!]\n        \\centering\n        \\begin{subfigure}[b]{165pt}\n                \\centering\n                \\includegraphics[scale=0.38]{./Images/27_1_Overhead_CPU.pdf}\n\n                \\caption{\\footnotesize }\n                \\label{Figure:Overhead_CPU}\n        \\end{subfigure}\n        ~ \n          \n        \\begin{subfigure}[b]{165pt}\n                \\centering\n                \\includegraphics[scale=.38]{./Images/27_2_Overhead_Memory.pdf}\n\n                \\caption{\\footnotesize }\n                \\label{Figure:Overhead_Memory}\n        \\end{subfigure}\n        ~ \n          \n          \n        \\begin{subfigure}[b]{165pt}\n                \\centering\n                \\includegraphics[scale=.38]{./Images/27_3_Overhead_Energy.pdf}\n\n                \\caption{\\footnotesize }\n                \\label{Figure:Overhead_Energy}\n                \n        \\end{subfigure}\n\n\n\n\n\n\n\n\n\n\n        ~ \n          \n          \n         \\begin{subfigure}[b]{165pt}\n          \n         \\centering\n         \\includegraphics[scale=0.38]{./Images/27_7_Cost_Saving_Real.pdf}\n\n          \\caption{\\footnotesize }\n          \\label{Figure:Cost_Saving_Real}\n         \\end{subfigure}\n        \\begin{subfigure}[b]{165pt}\n                \\centering\n                \\includegraphics[scale=.38]{./Images/27_5_Cost_Saving_CPU.pdf}\n\n                \\caption{\\footnotesize }\n                \\label{Figure:Cost_Saving_CPU}\n        \\end{subfigure}\n        ~ \n          \n          \n        \\begin{subfigure}[b]{165pt}\n                \\centering\n                \\includegraphics[scale=.38]{./Images/27_6_Cost_Saving_Memory.pdf}\n\n                \\caption{\\footnotesize }\n                \\label{Figure:Cost_Saving_Memory}\n        \\end{subfigure}\n        \n    \n        \n\n                ~ \n                  \n                  \n             \\begin{subfigure}[b]{165pt}\n                \\centering\n                \\includegraphics[scale=.38]{./Images/27_7_Cost_Saving_Energy.pdf}\n          \n                \\caption{\\footnotesize }\n                \\label{Figure:Cost_Saving_Energy}\n                          \\end{subfigure}  \n                \\begin{subfigure}[b]{165pt}\n                        \\centering\n                        \\includegraphics[scale=.38]{./Images/27_8_Cost_Saving_Storage.pdf}\n                        \\vspace{-16pt}\n                        \\caption{\\footnotesize }\n                        \\label{Figure:Cost_Saving_Storage}\n                \\end{subfigure}\n                ~ \n                  \n                  \n                \\begin{subfigure}[b]{165pt}\n                        \\centering\n                        \\includegraphics[scale=.38]{./Images/27_9_Cost_Saving_Network_Communication.pdf}\n                        \\vspace{-16pt}\n                        \\caption{\\footnotesize }\n                        \\label{Figure:Cost_Saving_Network_Communication}\n                \\end{subfigure}\n                \\label{fig:animals}\n        \\caption{C-MOSDEN Performance Evaluation}\n        \\vspace{-20pt}\n\\end{figure*}\n\n\\section{Implementation and Experimental Test-bed}\n\\label{sec:Implementation}\n\nThis proposed context-aware mobile sensing platform, C-MOSDEN, is developed using the Android platform. We used a Google Nexus 4 device with the Android KitKat operating system for evaluations. Hardware  of the device consists of Qualcomm Snapdragon S4 Pro CPU, 2 GB RAM and 16GB storage. In order to verify the hypothesis and the cost models, we ran different usecase experiments as explained below in Section \\ref{sec:Evaluation}. Each usecase is run 10 times and average has been presented as the results. We employed a human actor to perform the three scenario mentioned in the Section \\ref{sec:Functional}. More importantly, we also ran  each usecase under different configurations (e.g. different number of sensors used  depending on the experiment) to create a benchmark for comparison. We also ran the experiment with and without context-aware capabilities. We built the current activity-aware module using the Android SDK  API. We also created a location-aware module by using geofencing technique provided in Google API\\footnote{\\url{https://developer.android.com/reference/com/google/android/gms/location/package-summary.html}}. It is important to highlight  that our intention is not to develop a more efficient activity  recognition or geofencing technique, but to use activity and location awareness to enable selective-sensing in sensing as a service domain towards improving efficiency. Furthermore, it is very easy to replace the context-aware module that will be employing at a given time. Thus, regardless of the underlying context-aware modules used, the system will always behave the same way from the user perspective. We used a location mocking tool called \\textit{'Fake GPS location'} to test geofencing capabilities. In all the evaluations, CPU usage (consumption) is measured in units of jiffies\\footnote{In computing, a jiffy is the duration of one tick of the system timer interrupt. It is not an absolute time interval unit, since its duration depends on the clock interrupt frequency of the particular hardware platform}.\n\n\n\n\\section{Lessons Learned and Discussion}\n\\label{sec:Evaluation}\n\nIn this section, we present details of the  experimental evaluations that are  performed using the proposed sensing platform, C-MOSDEN. Our experiments consists of both real-world experiments and simulated lab based experiments.\n\n\nIn the first three series of experiments, our intention was to understand the impact of context-aware functionality towards CPU consumption, memory consumption, and energy consumption. As we highlighted in the cost models, presented in Section \\ref{sec:Model}, there are overheads created by activity-aware and location-aware capabilities. \n\nFirst, we measured the above mentioned parameters while context-aware capabilities are deactivated and one the accelerometer sensor is configured to collect data. Secondly, we activated all the sensors available in the smart phone (i.e. accelerometer, gravity, gyroscope, liner acceleration, rotation vector,  light, pressure,  magnetic fields, orientation, proximity). We also kept the  context-aware capabilities deactivated. Thirdly, we activated the context-aware capabilities and kept the number of sensors used to collect data the same as before. In this case, we did activated the context-aware capabilities however did not use the capabilities in action. We configured the mobile device to push all the sensed data to the IoT cloud without any context-aware filtering. By doing so, we were aimed to compare the computational requirements with and without context-aware capabilities activated to identify the overhead created by the context-aware reasoning modules.\n\nIn these experiments, our objective is to understand how much more computational resources are required by C-MOSDEN when context-aware capabilities are in action. Specially, we changed the number of sensors used to collect data in two different experiments, in order to compare the resource consumption variability when different number of sensors are activated, in comparison to when the context-aware capabilities are activated. It is also important to note that, in these experiments, we configured C-MOSDEN to collect sensor data and push to the IoT cloud middleware in one second intervals. We ran the experiments for 30 minutes. The results presented in  Figure \\ref{Figure:Overhead_CPU} (CPU consumption), Figure \\ref{Figure:Overhead_Memory} (memory consumption), and Figure \\ref{Figure:Overhead_Energy} (energy consumption).\n\n\n\\textcolor{black}{According to the results, it is evident that context-aware functionalities creates some overhead in term of CPU, memory and energy. Based on our experience, in this paper as well as in the past \\cite{ZMC008}, CPU and energy consumptions are not very good indicators to measure the computational complexity, specially in Android, due its auto load balancing of computational requirement between different applications. However, memory is  a much better  indicator to measure the computational complexity. Android allocates memory less greedily to application as long as it has abundant amount of memory which is 2GB in Nexus 4 device. If we analyse the memory consumption results in Figure \\ref{Figure:Overhead_Memory}, it is evident that, additional overhead created by context-aware functionalities are not substantial.}\n\n\n\nNext, we ran an experiment to test the capabilities of C-MOSDEN in the real world. In this experiment, we measured CPU, memory, and energy consumptions, and network usage. In order to plot all the result in a single graph, we used the cost savings as the common measurements  (as a percentage). The results are presented in Figure \\ref{Figure:Cost_Saving_Real}.  In this experiments. First, the user walked for 10 minutes. Then, he cycled for 20 minutes and then  walked again for another 10 minutes. We ran the experiment with both while context-aware capabilities were ON and OFF. Mobile phone has been configured to collect sensor data using all available sensors. The objective was to collect sensor data only when the users is cycling.\n\n\\textcolor{black}{According to the results presented in Figure \\ref{Figure:Cost_Saving_Real}, it is evident that context-aware capabilities have been able to save costs in term of all four parameters we measured. However, the most significant saving is energy and network usage. Both energy and network usage have been significantly reduced due to selective sensing. Energy consumption is reduced due to the less usage of wireless communication radios \\cite{TCSS3}.}\n\nIt is important to note that running  these experiments required significant amount of time and budget. Therefore, we decided to simulate the scenario we presented earlier in this paper in a lab environment. However, the result we gathered in this real-world example substantially validates our lab simulations.\nLater, we ran series of experiments to evaluate three usecase scenarios presented in Section \\ref{sec:Functional}. We simulated those scenarios in a lab environment. The data collecting specifications are as follows. All the available sensors were configured to collect data in following experiments. We conducted the experiment both with and without context-aware capabilities activated. We measured CPU, memory, energy, storage, and network consumption. Results are presented  in Figures \\ref{Figure:Cost_Saving_Real} to Figure \\ref{Figure:Cost_Saving_Network_Communication} respectively. To run these experiments, we created predefined data set that simulates the relevant use behaviour including location changes and activities changes over time.\n\n\\begin{itemize}\n\\item Scenario 1 (Environmental Monitoring):Bus moves 5 minutes and stops for 2 minutes. This pattern will continue for 60 minutes (1.e. 10 stops). The sensing objective is to collect sensor data only when bus is moving. The total duration of the experiment 6o minutes.\n\n\\item Scenario 2 (Rehabilitation): The patient performs medically recommended walking exercises for 20 minutes and rest for 15 minute. Then, the patient again walks for 15 minutes. The sensing objective is to collect sensor data only when the patient is walking. The total duration of the experiment 50 minutes.\n\n\n\\item Scenario 3 (Health and Well-being): The user cycles to the jogging path for 10 minutes and then she jogs for 30 minutes. Next she does some bar exercise for 15 minutes before return home by cycling (another 10 minutes). The sensing objective is to collect sensor data only when uses is jogging in the jogging path. The total duration of the experiment is 65 minutes.\n\\end{itemize}\n\n\n\\textcolor{black}{According to the results presented in Figure \\ref{Figure:Cost_Saving_CPU} to \\ref{Figure:Cost_Saving_Network_Communication}, it is evident that context-aware capabilities can save costs at different levels depending on the scenario, sensing objectives, conditions, and characteristics. Based on the results gathered in these experiments, we can  conclude that any kind of context-aware functionalities (e.g. time-awareness and social awareness) that would reduce the uninterested data collection and transmission can be helpful to save costs. }\n\n\n\\textcolor{black}{In general, wireless communication radios switching on and off consumes significant amount of energy. If the number of times these radios switched on can be reduced, it helps to significantly  reduce the energy consumptions. As shown in theoretical models, lesser the amount of data is captured, the less time it will take to transfer the data over the cloud, so the communication radios will only be required for shorter durations. When wireless radios are not actively transmitting data, they will also put less workload on the CPU as well due to less reads/writes from the storage (which also requires less memory). By conducting a number of experiments, we have comprehensively validated the theoretical models presented in Section \\ref{sec:Functional}. We have also verified the importance of context-aware capabilities integrated into mobile sensing platforms in order to breakdown Big Data into small data so anyone can analyse them and derive knowledge  easily with less amount of resources and budgets.}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\section{Related Work}\n\\label{sec:Related_Work}\n\n Mobile phone based sensing algorithms, approaches, and applications are discussed in \\cite{P217}. DAM4GSN \\cite{ZMP001} is  an approach based on GSN that is capable of collecting data from internal sensors of a mobile phone and sending it to the GSN middleware. No processing capabilities are provided at the mobile phone end. Therefore, all the information sensed is sent to the server. This approach is inefficient due to the continuous usage of the communication radio of the mobile phone and may also communicate sensor data that are not required or important to the data sensor data consumer \\cite{ZMP001}. \\textit{Dynamix} \\cite{P627} is a plug-and-play context framework for Android. \\textit{Dynamix} automatically discovers, downloads and installs the plug-ins needed for a given context sensing task. \\textit{Dynamix} is a stand alone application and it tries to understand new environments by using pluggable context discovery and reasoning mechanisms.  Context discovery is the main functionality in \\textit{Dynamix}. \n\n\nOne of the most popular type of processing in mobile is activity recognition. Yan et al. \\cite{P629} have presented an energy-efficient continuous activity recognition on mobile phones. Choudhury et al. \\cite{Z1016} has also developed customs mobile sensing hardware platform for activity recognition. Activities such as walking, running taking stairs up/down, taking elevator up/down, cooking, working on computer, eating, watching TV, talking, cycling, using an elliptical trainer, and using a stair machine can be detected by using the device. Choudhury et al. have used sensors such as microphone, light, 3-axis digital accelerometer, barometer temperature, IR and visible+IR light, humidity/temperature, Compass,  3D magnetometers, 3D gyroscope, and 3D compass to collect data to support their algorithms that detect the activities. Lee et al. \\cite{Z1017} have developed a similarity system. However, instead of processing the data in the mobile device, it sends data to the cloud by using a smartphone as an intermediate gateway device. Another similar approach has been presented by Laukkarinen et al. \\cite{Z1018}. They have implemented a distributed middleware for 8-bit micro controller nodes where executing instructions (e.g. for data processing and event detection) are sent to each node using a \\textit{Process Description Language} (PDL). It is important to note that all these approaches focus on building activity recognition modules. In contrast, we employ an activity recognition module to filter unnecessary data processing and communication with the intention of reducing all costs. CONSORTS-S \\cite{Z1020} has also used a similar approach. Instead of getting data from external sensors directly into mobile phones, CONSORTS-S uses a custom made sensor board that connect to the mobile phone using a serial cable which allows the mobile phone to collect data from external sensors.\n\n\n\nMost mobile sensing applications can be classified into \\textit{personal} and \\textit{community sensing} \\cite{P217}. \\textit{Personal sensing} applications focus on the individuals. On the contrary, \\textit{community sensing} also termed \\textit{opportunistic/crowdsensing}\\footnote{In this chapter, we use the terms \\textit{opportunistic sensing }, \\textit{crowdsensing } and \\textit{participatory sensing }synonymously.} takes advantage of a population of individuals to measure large-scale phenomenon that cannot be measured using single individual. In most cases, the population of individuals participating in {\\textit{crowdsensing }} applications share a common goal. To date, most efforts to develop {\\textit{crowdsensing }} applications have focused on building monolithic mobile applications that are built for specific requirements \\cite{pogo}. Furthermore, the sensed data generated by the application are often available only within the closed population \\cite{P485}. However, to realise the greater vision of a collaborative mobile {\\textit{crowdsensing }} application, we would need a common platform that facilitates easy development and deployment of collaborative crowd-sensed applications \\cite{Z1034}. \n\n\nGrid-M \\cite{Z1019} is a platform for lightweight grid computing. It is a tailored for embedded and mobile computing devices. The middleware is built using  Java 2 Micro Edition, and an application programming interface (API) is provided to connect Java-developed applications in a Grid Computing environment. This work highlights the importance of providing and API based communication channel which enables communication. As illustrated in Figure \\ref{Figure:Sensing_as_a_service}, mobile nodes work  similar to grid computing,  where they work together to collect sensors data as instructed by the cloud based IoT middleware or by their own peers (e.g. other mobile sensing platform nodes). Zhang et al. \\cite{Z1021} have developed a middleware on top of TinyOS (tinyos.net)  for TelosB sensors. The data fusion components are designed as agents which they migrate form one node to another. Such migration is an efficient technique in term of resource utilization. Data fusion consumes the resources only when a given node required to process data. Otherwise the agents moves on to another node on demand. We simulate such behaviour in C-MOSDEN where plugins are installed when needed and uninstall when not needed. Another agent-based sensing platform has been proposed by Sun and Nakata \\cite{Z1026}. Budde et al. \\cite{Z1030} have proposed a framework that allows to discover  smart objects in the Internet of Things. The framework allows smart objects and services to be registered by providing metadata where it later allows searching and selection. Mori et al. \\cite{Mori} has proposed a cloud-based mobile phone sensing middleware \\cite{TCSS2} that can collectively sense the environment as group of participants. however, if there are more participants present in a given region that expected, the task will be selectively assigned to the most appropriate participants by considering context information such as remaining energy, exact location, and so on. Their approach is also focusing on reducing unnecessary amount of data capturing and communication.\n\n\n\n\nNORS \\cite{Z1023} is an open source platform that enables participatory sensing using mobile phones. It mainly focuses on collecting data instead of processing. The platform includes external sensors, mobile phones, and a cloud service for data storage. Sharing data among of mobile phones is not supported. In contract, C-MOSDEN is capable of peer to peer communication as well as cloud based communication. USense \\cite{Z1024} is client-side middleware that opportunistically and passively (i.e. without human intervention) performance sensing tasks in crowd sensing fashion. It uses XML definitions to explain a \\textit{`moment'} where the middleware needs to start sensing and stop sensing. The \\textit{`moment'} are composed with a bunch of condition such as location, time, and so on. Similarly, SENSE-SATION \\cite{Z1025} also gathers and stores sensor information using mobile phones and make them directly accessible over the Internet via RESTful web services. Patti et al. \\cite{Patti} have proposed an energy-efficient middleware aims at improving energy efficiency of public buildings and spaces exploiting both event-driven and user centric approaches. In their work, sensors are used to detect user presence. Then, system actuates heating systems accordingly to reduce energy wastage.\n\n\n\n\n\n\n\n\\section{Conclusions and Future Work}\n\\label{sec:Conclusions and Future Work}\n\n\nWe have presented our {C-MOSDEN } platform to support on-demand distributed mobile crowd sensing. Our objective was to built a platform that can perform sensing tasks in a collaborative and selective manner. For example, the {C-MOSDEN } platform can be remotely configured to sense only when a certain activity occurs (e.g. driving, running, walking).  Further, the C-MOSDEN platform supports location-aware sensing (e.g. sense only when a user enters to a particular building). Moreover, the platform  has the capability to autonomously select which communication channel (e.g. WiFi or 3G) to use to send the data to the cloud based on context information such as battery level and availability. The proposed platform collects only the data that are relevant to the data consumers, thereby reducing the data storage requirements and processing requirements. We discussed three different real-world use case scenarios where the proposed platform can offer significant advantages. It was shown to  facilitate the efficient and effective mobile crowd sensing functionality at a  minimum cost. Through a series of experimentations and evaluations, we showed the importance of selective sensing through the reduction  of computational requirements. In general, through selective sensing,  we were able to successfully reduce the energy consumption, network communication requirements and storage requirements. Although the context-aware functionalities have generated a small amount of overhead, it was revealed that the  cost savings and benefits   far outweighed the increased complexity. In future works, we are planning to enrich C-MOSDEN with privacy preserving data analytics capabilities.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\ifCLASSOPTIONcaptionsoff\n  \\newpage\n\\fi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\bibliography{Bibliography}\n\\bibliographystyle{IEEEtran}\n\n\n\n\n\\vspace{-30pt}\n\n\\begin{IEEEbiography}[{\\includegraphics[width=1in,height=1.25in,clip,keepaspectratio]{./Images/charith}}]{Charith Perera}(S'11-M'14)\nreceived his BSc (Hons) in Computer Science in 2009 from Staffordshire University, Stoke-on-Trent, United Kingdom and MBA in Business Administration in 2012 from University of Wales, Cardiff, United Kingdom and PhD in Computer Science in 2014 from The Australian National University, Canberra, Australia. He is also worked at Information Engineering Laboratory, ICT Centre, CSIRO and involved in OpenIoT Project  which is co-funded by the European Commission under seventh framework program. Currently, he is a Post-doctoral Research Fellow at Open University, UK. His research interests include Internet of Things, Smart Cities, Sensing as a Service, Privacy, Sensing Middleware Architecture. He is a member of both IEEE and ACM.\n\n\n\\end{IEEEbiography}\n\n\n\\vspace{-30pt}\n\n\\begin{IEEEbiography}[{\\includegraphics[width=1in,height=1.25in,clip,keepaspectratio]{./Images/dumidu}}]{Dumidu S. Talagala}\n (S'11-M'14) received the B.Sc. Eng (Hons) in electronic and telecommunication engineering from the University of Moratuwa, Sri Lanka, in 2007. From 2007 to 2009, he was an Engineer at Dialog Axiata PLC, Sri Lanka. He completed his Ph.D. degree within the Applied Signal Processing Group, College of Engineering and Computer Science, at the Australian National University, Canberra, in 2013. He is currently a research fellow in the Centre for Vision, Speech and Signal Processing at the University of Surrey, United Kingdom. His research interests are in the areas of sound source localization, spatial sound-field reproduction, active noise control, array signal processing and convex optimization.\n\n\n\\end{IEEEbiography}\n\n\n\n\n\n\\vspace{-30pt}\n\n\\begin{IEEEbiography}[{\\includegraphics[width=1in,height=1.25in,clip,keepaspectratio]{./Images/harold}}]{Chi Harold Liu} is a Full Professor at the School of Software, Beijing Institute of Technology, China. He is also the Director of the Institute of Data Intelligence, Director of IBM Mainframe Excellence Center (Beijing), Director of IBM Big Data \\& AnalysisTechnology Center, and Director of National Laboratory of Data Intelligence for China Light Industry. He holds a Ph.D. degree from Imperial College, London, U.K., and a B.Eng. degree from Tsinghua University, Beijing, China.  His current research interests include the Internet of Things (IoT), Big Data analytics, and wireless ad hoc, sensor, and mesh networks.  He served as the consultant to Asian Development Bank, Bain \\& Company, and KPMG, USA, and the peer reviewer for Qatar National Research Foundation, and National Science Foundation, China. He is a member of IEEE and ACM.\n\n\\end{IEEEbiography}\n\n\n\\vspace{-30pt}\n\n\n\\begin{IEEEbiography}[{\\includegraphics[width=1in,height=1.25in,clip,keepaspectratio]{./Images/julio}}]{Julio C. Estrella}\n received the Ph.D. in Computer Science at Institute of Mathematics and Computer Science from University of Sao Paulo - USP (2010). MSc in Computer Science at Institute of Mathematics and Computer Science from University of S\u00c3\u00a3o Paulo - USP (2006). BSc in Computer Science at State University of Sao Paulo -  Julio de Mesquita Filho \u00e2\u0080\u0093 UNESP (2002). He has experience in Computer Science with emphasis in Computer Systems Architecture, acting on the following themes: Service Oriented Architectures, Web Services, Performance Evaluation, Distributed Systems, Computer Networks and Computer Security.  He is currently Assistant Professor at Institute of Mathematics and Computer Science - ICMC \u00e2\u0080\u0093 USP. \n\n\n\n\\end{IEEEbiography}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "itemtype": "equation", "pos": 36981, "prevtext": "\n\n\nFinally, Equation \\ref{equation:025} models the total network communication savings of C-MOSDEN when employing context-aware capabilities. \n\n\n", "index": 45, "text": "\\begin{equation}\n\\label{equation:025}\n\\textrm{Total Network Communication Saving}  = \\frac{NC_{Total}^{S^{\\Psi}}}{NC_{Total}^{S^{\\Theta}} } \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E23.m1\" class=\"ltx_Math\" alttext=\"\\textrm{Total Network Communication Saving}=\\frac{NC_{Total}^{S^{\\Psi}}}{NC_{%&#10;Total}^{S^{\\Theta}}}\" display=\"block\"><mrow><mtext>Total Network Communication Saving</mtext><mo>=</mo><mfrac><mrow><mi>N</mi><mo>\u2062</mo><msubsup><mi>C</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u03a8</mi></msup></msubsup></mrow><mrow><mi>N</mi><mo>\u2062</mo><msubsup><mi>C</mi><mrow><mi>T</mi><mo>\u2062</mo><mi>o</mi><mo>\u2062</mo><mi>t</mi><mo>\u2062</mo><mi>a</mi><mo>\u2062</mo><mi>l</mi></mrow><msup><mi>S</mi><mi mathvariant=\"normal\">\u0398</mi></msup></msubsup></mrow></mfrac></mrow></math>", "type": "latex"}]