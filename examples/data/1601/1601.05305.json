[{"file": "1601.05305.tex", "nexttext": "\n\\end{proposition}\n\n\\begin{proof}\nInitially, $2n$ {z\\l{}oty}{}s are assigned amongst the vertices of $G$ and\n$t$ {z\\l{}oty}{}s are assigned to maximal $3$-cliques. \nSince $s$ {z\\l{}oty}{}s are saved during the course of the algorithm, it stands that $2n+t-s$ {z\\l{}oty}{}s have been paid for red vertices.\nSince exactly seven {z\\l{}oty}{}s are paid for each red vertex,\nthe bound on the size of $X$ follows.\n\\end{proof}\n\n\\subsection{Basic algorithm}\n\nWe begin by presenting a clique-transversal algorithm that may fail to save any {z\\l{}oty}{}s.\nWe will then modify this algorithm for the case of $4$-chordal graphs with maximal $3$-cliques and\nfinally the case of $4$-chordal graphs with no maximal $3$-cliques.\nThe algorithm that we design in this subsection will be referred to as the {\\em basic algorithm}.\n\nThe basic algorithm processes the nodes of an input nice tree-decomposition of a $4$-chordal graph from the leaves towards the root using the rules we now describe.\nEach time a node is processed, it is removed from the tree-decomposition;\nmoreover, the vertices of the graph associated with only that node are also removed.\n\nLet $u$ be a leaf node of the tree-decomposition,\nlet $U$ be the set of vertices associated with $u$, and\nlet $U'\\subseteq U$ be the set of vertices associated with $u$ but not with its parent.\nWe analyze four cases concerning the possible sizes of $U$ and $U'$.\n\n{\\bf Case 1: The size of $U$ is at least four and the size of $U'$ is one.}\n\nLet $v$ be the single vertex contained in $U'$.\nThe algorithm follows the first of the following rules that applies \nand then removes both \nthe node $u$ from the tree-decomposition and the vertex $v$ from the graph.\n\n\\begin{description}\n\\item[Rule B1.] If the vertex $v$ is red, the algorithm performs no additional steps.\n\\item[Rule G1.] If the vertex $v$ is contained in at least three distinguished tuples, it becomes red.\n                The tuples containing $v$ cease to exist and their {z\\l{}oty}{}s are removed.\n                During this process, seven {z\\l{}oty}{}s are paid for coloring $v$ red and\n                at least one {z\\l{}oty}{} is saved.\n\\item[Rule G2.] If the vertex $v$ is contained in at least two distinguished pairs, it becomes red.\n                The pairs containing $v$ cease to exist and their {z\\l{}oty}{}s are removed.\n                As in the case of Rule G1, at least one {z\\l{}oty}{} is saved.\n\\item[Rule B2.] If the vertex $v$ is contained in a distinguished pair and a distinguished triple,\n                it becomes red and the two tuples cease to exist. No {z\\l{}oty}{}s are saved.\n\\item[Rule B3.] If the vertex $v$ is contained in two distinguished triples,\n                the remaining two vertices of each triple will become a distinguished pair. \n                Each pair keeps the {z\\l{}oty}{}s of the original triple it was contained in and\n                is reassigned one additional {z\\l{}oty}{} from $v$.\n\\item[Rule G3.] If the vertex $v$ is contained in a distinguished triple,\n                the remaining two vertices of the triple become a distinguished pair.\n                This pair keeps the two {z\\l{}oty}{}s of the original triple and\n                gets one {z\\l{}oty}{} from $v$. The other {z\\l{}oty}{} of $v$ is saved.\n\\item[Rule G4.] If the vertex $v$ is contained in a distinguished pair and\n                the other vertex, call it $v'$, of that pair is contained in another distinguished tuple,\n                the vertex $v'$ becomes red. The tuples containing $v'$ cease to exist.\n\t\tSince we remove at least nine {z\\l{}oty}{}s (the four {z\\l{}oty}{}s of $v$ and $v'$ and\n\t\tat least five {z\\l{}oty}{}s of the tuples),\n                at least two {z\\l{}oty}{}s are saved.\n\\item[Rule B4.] If the vertex $v$ is contained in a distinguished pair,\n                the other vertex of the pair becomes red and the pair ceases to exist.\n\\item[Rule G5.] If the vertex $v$ is not in a tuple and one of the vertices of $U\\setminus\\{v\\}$ is red,\n                the algorithm also performs no additional steps;\n                the two {z\\l{}oty}{}s of $v$ are saved.\n\\item[Rule B5.] If the vertex $v$ is not in a tuple and no vertex of $U\\setminus\\{v\\}$ is red, \n\t\t\t\tan arbitrary three vertices of $U\\setminus\\{v\\}$ form a distinguished triple and\n                this triple is reassigned two {z\\l{}oty}{}s from $v$.\n\\end{description}\n\nNote that at least one {z\\l{}oty}{} is saved when one of Rules G1--G5 is applied,\nso we will refer to these five rules as {\\em good} rules.\nSimilarly, rules B1--B5 will be referred to as {\\em bad} rules (since no {z\\l{}oty}{}s are saved).\n\n{\\bf Case 2: The size of $U$ is at least four and the size of $U'$ is greater than one.}\n\nWe apply some of the rules from Case 1.\nAs long as $U'$ contains a non-red vertex that is not contained in any distinguished tuple (and that has not been processed),\nwe process it, i.e., we use Rule B5 or G5.\nWe then use the first applicable rule to process each remaining vertex in $U'$ in an arbitrary \norder, followed by removing the node $u$ from the tree-decomposition.\n\n{\\bf Case 3: The size of $U$ is three and the size of $U'$ is one.}\n\nLet $v$ be the single vertex contained in $U'$.\nThe algorithm follows the first of the following rules that applies and\nthen removes the node $u$ from the tree-decomposition and the vertex $v$ from the graph.\n\\begin{description}\n\\item[Rule T1.] If the vertex $v$ is red, the algorithm performs no additional steps.\n\\item[Rule T2.] If the vertex $v$ is contained in at least two distinguished tuples,\n                it becomes red and all the tuples containing $v$ cease to exist. \n\t\tColoring $v$ red is paid using the two {z\\l{}oty}{}s of $v$,\n\t\tat least four {z\\l{}oty}{}s from the tuples containing $v$ and\n\t\tthe one {z\\l{}oty}{} of node $u$.\n\\item[Rule T3.] If the vertex $v$ is contained in exactly one distinguished tuple,\n                an arbitrary vertex $v'$ of the tuple different from $v$ becomes red and\n                all distinguished tuples containing $v'$ cease to exist.\n                Note that at least seven {z\\l{}oty}{}s are removed with this rule:\n                the two {z\\l{}oty}{}s of the vertex $v$,\n                the two {z\\l{}oty}{}s of the new red vertex,\n                at least two {z\\l{}oty}{}s from the ceased tuples, and\n                the one {z\\l{}oty}{} of the node $u$.\n\\item[Rule T4.] If $U$ contains a red vertex, the algorithm performs no additional steps;\n                one {z\\l{}oty}{} assigned to the node $u$ is saved.\n\\item[Rule T5.] The other two vertices of $U$ become a distinguished pair,\n                which is assigned the two {z\\l{}oty}{}s of $v$ and the one {z\\l{}oty}{} of node $u$.\n\\end{description}\n\n{\\bf Case 4: The size of $U$ is three and the size of $U'$ is greater than one.}\n\nLet $v$ be an arbitrary vertex of $U'$ and follow the first applicable rule among the Rules T1--T5.\nIf the remaining two vertices of $U$ do not form a distinguished pair after this step,\nwe remove the remaining vertices of $U'$ from the graph and \nremove the node $u$ from the tree-decomposition.\nAssume that the remaining two vertices of $U$ form a distinguished pair.\nLet $v'$ be the vertex of $U\\setminus U'$ if it exists;\notherwise, let $v'$ be an arbitrary vertex of $U$ different from $v$.\nThe vertex $v'$ is colored red and all distinguished pairs containing $v'$ cease to exist.\nThe remaining vertices of $U'$ and the node $u$ are then removed. \nNotice that 7 {z\\l{}oty}{}s are removed: the 4 {z\\l{}oty}{}s of the two vertices $v$, $v'$ and 3 {z\\l{}oty}{}s from the distinguished pair.\n\nThis concludes the description of the basic algorithm.\nIts description yields that the basic algorithm is a cash-balanced clique transversal algorithm.\nNote that if we apply the basic algorithm to a nice tree-decomposition of a $4$-chordal graph $G$ with no maximal $3$-cliques,\nwe get a clique transversal of $G$ of size at most $2|G|/7$ by Proposition~\\ref{prop-zlotys}.\n\n\\subsection{Chordal graphs with maximal $3$-cliques}\n\nA {\\em branch} is a rooted subtree of a nice tree-decomposition of a $4$-chordal graph such that:\n\\begin{itemize}\n\\item its root $r$ corresponds to a $4$-clique,\n\\item the parent of $r$ corresponds to a clique that shares two vertices with $r$,\n\\item the branch contains all descedants of $r$, and\n\\item no descendant of $r$ corresponds to a $3$-clique.\n\\end{itemize}\nThe following proposition easily follows from the definition of a nice tree-decomposition.\n\n\\begin{proposition}\n\\label{prop-branch}\nLet $G$ be a $4$-chordal graph with $t$ maximal $3$-cliques.\nEvery nice tree-decompo\\-si\\-tion of $G$ has at least $t+2$ branches.\n\\end{proposition}\n\n\\begin{proof}\nLet $T$ be a nice tree-decomposition of $G$.\nSuppose that $u$ is a node of $T$ corresponding to a $3$-clique formed by vertices $v_1$, $v_2$ and $v_3$.\nSince $G$ is a $4$-chordal graph, every pair of the vertices $v_1$, $v_2$ and $v_3$ is contained in a $4$-clique.\nIn particular, for every such pair, there exists a node adjacent to $u$ that contains both vertices of the pair.\nLet $u_1$, $u_2$ and $u_3$ be these nodes for the three different pairs of the vertices $v_1$, $v_2$ and $v_3$.\nSince the $3$-clique corresponding to $u$ is maximal, the nodes $u_1$, $u_2$ and $u_3$ are different.\nObserve that if $u_i$, $i\\in\\{1,2,3\\}$, is a child of $u$, then the subtree rooted at $u_i$ is a branch\nunless it contains a node corresponding to a $3$-clique.\n\nLet $T'$ be a rooted tree obtained from $T$ as follows:\nthe nodes of $T'$ are the nodes of $T$ corresponding to $3$-cliques;\nthe root of $T'$ is the root of $T$; and\na node $u$ is the parent of a node $u'$ if the path from $u$ to $u'$ contains no node corresponding to a $3$-clique.\nHence, every leaf of $T'$ will have at least two children in $T$ such that the subtrees rooted at them form a branch, and\nevery node with exactly one child in $T'$ has at least one child in $T$ such that the subtree rooted at it is a branch.\nMoreover, if the root of $T'$ has $d$ children in $T'$ and $d<3$,\nit has at least $3-d$ children in $T$ such that the subtrees rooted at them form a branch.\nIn other words, if the degree of a node of $T'$ is $d$,\nthis node in $T$ has at least $3-d$ children such that the subtrees rooted at them form a branch.\nSince $T'$ has $t$ nodes and the sum of their degrees is $2(t-1)$, we derive that $T$ must have at least $3t-2(t-1)=t+2$ branches.\n\\end{proof}\n\nWe now modify the basic algorithm to save at least one {z\\l{}oty}{} while processing each branch of an input nice tree-decomposition.\n\n\\begin{lemma}\n\\label{lm-branch}\nThere exists a cash-preserving clique transversal algorithm that\nsaves at least one {z\\l{}oty}{} when processing the nodes of each branch of an input nice tree-decomposition.\n\\end{lemma}\n\n\\begin{proof}\nConsider a branch rooted at a node $r$.\nObserve that we can freely choose the order in which the nodes of the branch are processed provided \nthat all the descendants of each node are processed before the node itself.\nIn particular, if we find an order such that at least one of the good rules are used,\nwe save one {z\\l{}oty}{} as desired.\n\nLet $u$ be an arbitrary leaf node of the branch and\nlet $u_0=u,u_1,\\ldots,u_\\ell=r$ be the path from $u$ to $r$.\nFurthermore, let $\\alpha$ and $\\beta$ be the two vertices of the clique corresponding to $r$ that\nare also contained in the clique corresponding to the parent of $r$.\nThe node $u$ will be the first node of the branch to be processed.\nSuppose first that the clique corresponding to $u$ has two vertices that are not contained in the clique corresponding to $u_1$.\nThis implies that $u$ corresponds to a $4$-clique.\nHence, the first two rules that apply are either Rules B5 and G3 or Rule G5 twice.\nIn both cases, a good rule is applied and hence at least one {z\\l{}oty}{} is saved.\nThe remaining nodes of the branch can be processed in an arbitrary order.\n\nIf the clique corresponding to $u$ has exactly one vertex not contained in the clique corresponding to $u_1$,\nthen either Rule B5 or Rule G5 is the first rule to apply.\nIn the latter case, a good rule is applied, so we need only analyze the former.\nWe process all nodes of the branch in an arbitrary order, but stipulate that the nodes $u_1,\\ldots,u_{\\ell}$ are to be processed last.\nWe can assume that no good rules are applied while the branch is processed---otherwise, one {z\\l{}oty}{} is saved.\nIn particular, the distinguished triple created by Rule B5 during the removal of the node $u$\ncannot cease to exist before processing the node $u_1$ (without applying Rule G4).\n\nLet $k$ be the largest index such that a subset of the vertices of the clique corresponding to $u_k$ form a distinguished triple \nprior to processing the node $u_k$, and\nlet $V$ be the set of vertices contained in the cliques corresponding to the nodes $u_k,\\ldots,u_\\ell$.\nBy the choice of $k$, either Rule B2 or B3 applies to $u_k$; let $v$ be the vertex that is removed at this step.\nObserve that the choice of $k$ implies that, after $v$ is removed,\nonly Rules B1 and B4 can apply while processing $u_k,\\ldots,u_\\ell$,\ni.e., the distinguished pairs induce a matching on non-red vertices of $V$\nwith the possible exception of $\\alpha$, $\\beta$ or both, which may be unmatched.\n\nWe modify the basic algorithm to remove the vertex $v$ more economically depending on which of \nRules B2 or B3 removed it, saving at least one {z\\l{}oty}{} as required.\n\n{\\bf Case 1: The vertex $v$ was removed by Rule B2.}\n\nLet $v_1$ and $v'_1$ be the two vertices forming a distinguished triple with $v$ and\nlet $v_2$ be the vertex forming a distinguished pair with $v$.\nIf $v_2=v_1$ or $v_2=v'_1$, we color $v_2$ red and remove $v$, including the tuples containing it.\nIn this way, two {z\\l{}oty}{}s are saved.\nHence, we can assume that the vertices $v_1$, $v'_1$ and $v_2$ are mutually distinct.\nNote that at least one of these three vertices must be distinct from $\\alpha$ and $\\beta$.\n\nIf $v_2$ is contained in a distinguished pair with another vertex, we proceed as follows.\nWe color $v_2$ red and remove $v$.\nWe also remove the distinguished pairs containing $v_2$ and the distinguished triple $\\{v,v_1,v'_1\\}$, \nbefore creating a new distinguished pair $\\{v_1,v'_1\\}$.\nThis procedure removes $12$ {z\\l{}oty}{}s (two from each of $v$ and $v_2$, three from each distinguished pair \ncontaining $v_2$ and two from the distinguished triple), which we reassign as follows:\nseven {z\\l{}oty}{}s are paid for coloring $v_2$ red,\nthree {z\\l{}oty}{}s are reassigned to the new distinguished pair, and\ntwo {z\\l{}oty}{}s are saved.\n\nIf $v_2$ is not contained in a distinguished pair with another vertex, $v_2$ is either $\\alpha$ or $\\beta$. \nBy symmetry, we can assume that $v_2=\\alpha$.\nConsequently, at least one of the vertices $v_1$ and $v'_1$ is distinct from $\\beta$.\nWe can assume $v_1\\not=\\beta$ by symmetry.\nLet $v''_1$ be the vertex contained in a distinguished pair with $v_1$.\nIf $v''_1=\\beta$, we swap the roles of $v_1$ and $v'_1$.\nIn particular, we can assume that neither $v_1$ nor $v''_1$ is $\\beta$.\nWe can now proceed as follows:\nthe vertices $v_1$ and $v_2=\\alpha$ are colored red\nwhile the vertex $v$ and all distinguished tuples containing $v_1$ or $v_2$ are removed.\nA total of $14$ {z\\l{}oty}{}s are removed (two from each of the vertices $v$, $v_1$ and $v_2$; five from the \ndistinguished tuples containing $v$; and three from the distinguished pair containing $v_1$) \nas payment for coloring the vertices $v_1$ and $v_2$ red.\nWe run the basic algorithm and observe that the vertex $v''_1$ is removed by Rule G5 (the vertex $\\alpha$ is contained\nin all the cliques corresponding to the nodes $u_k,\\ldots,u_{\\ell}$), which results in saving two {z\\l{}oty}{}s.\n\n{\\bf Case 2: The vertex $v$ was removed by Rule B3.}\n\nIf both distinguished triples containing $v$ also contain another vertex, say $v'$,\nwe color $v'$ red and remove the vertex $v$, including the two triples containing it.\nIn this way, we have removed eight {z\\l{}oty}{}s, of which seven are paid for coloring $v'$ red and\none is saved. Hence, we can assume that $v$ is the only vertex contained\nin the intersection of the two distinguished triples.\n\nWe proceed by coloring the vertex $v$ red and removing the two triples containing it.\nUnfortunately, we are only able to pay six out of the seven {z\\l{}oty}{}s requisite to color $v$ red.\nWe argue that we can always remove two {z\\l{}oty}{}s while processing the nodes $u_{k+1},\\ldots,u_\\ell$ without creating a red vertex;\none of which will pay off the one {z\\l{}oty}{} debt for coloring $v$ red and \nthe other will constitute the required saving in the branch.\n\nLet $x_1,\\ldots,x_4$ be the four other vertices contained in the two distinguished triples that contained $v$.\nLet $k'$ be the largest index such that the clique corresponding to $u_{k'}$ contains all four of the vertices $x_1,\\ldots,x_4$.\nBy symmetry, we can assume that $x_1$ is not contained in the clique corresponding to the parent of $u_{k'}$.\nNote that only Rules B1 and B4 apply while processing the nodes $u_{k+1},\\ldots,u_{k'-1}$.\nIn particular, no new distinguished tuples are created and none of the vertices $x_1,\\ldots,x_4$ become red.\nIf the clique corresponding to the node $u_{k'}$ contains a red vertex, we simply apply Rule G5 to $x_1$.\nIf the clique of $u_{k'}$ contains no vertices in addition to $x_1,\\ldots,x_4$,\nwe may still remove $x_1$ and its two {z\\l{}oty}{}s\nsince the clique is not maximal (it is a subset of the clique corresponding to $u_k$).\nHence, we can assume that the clique of $u_{k'}$ contains a non-red vertex $y$.\n\nWe first assume that $y=\\alpha$ (note that the case $y=\\beta$ is symmetric).\nIf no vertex from $x_2,\\ldots,x_4$ is $\\beta$,\nwe color $y$ red and observe that all of the vertices $x_1,\\ldots,x_4$ are eventually removed by Rule G5.\nThus we have removed $10$ {z\\l{}oty}{}s: seven {z\\l{}oty}{}s are paid for coloring $y$ red,\none {z\\l{}oty}{} pays off the {z\\l{}oty}{} debt for coloring $v$ red, and two {z\\l{}oty}{}s are saved.\nIf one of the vertices $x_2,\\ldots,x_4$, say $x_4$, is $\\beta$,\nwe create a distinguished pair formed from $y=\\alpha$ and $x_4=\\beta$, and\nwhen processing the vertices $x_1,x_2,x_3$, simply remove them from the graph (the cliques corresponding to the nodes\ncontaining $x_1,x_2,x_3$ also contain both $\\alpha$ and $\\beta$, so they will eventually contain a red vertex).\nIn this way, a total of $6$ {z\\l{}oty}{}s are removed:\none pays off the {z\\l{}oty}{} debt for coloring $v$ red,\nthree are assigned to the new distinguished pair, and\ntwo {z\\l{}oty}{}s are saved.\n\nIf the vertex $y$ is neither $\\alpha$ nor $\\beta$, it must be contained in a distinguished pair with another vertex, say $y'$.\nWhen processing $u_{k'}$,\nwe color $y$ red, which is paid for with the three {z\\l{}oty}{}s assigned to the distinguished pair containing $y$ and four \n{z\\l{}oty}{}s shared between the vertices $x_1$ and $y$.\nIf any of the vertices $x_2,x_3,x_4$ are removed before $y$, we must have applied Rule G5.\nThe two {z\\l{}oty}{} we save from this are used to pay off the one {z\\l{}oty}{} debt for coloring $v$ red and make the required saving \nin the branch.\nOtherwise, $y$ is removed before the vertices $x_2,x_3,x_4$, \nwhich implies there is a clique containing each of the vertices $x_2,x_3,x_4,y,y'$.\nAfter $y$ is removed,\nthe case of the vertices $x_2,x_3,x_4,y'$ is completely analogous to the original case of the vertices $x_1,\\ldots,x_4$, and\nwe proceed in the very same way, i.e., we repeat the steps presented in this and the preceding two paragraphs.\nSince the process must eventually terminate, we find one {z\\l{}oty}{} to pay off the debt and also save one {z\\l{}oty}{}.\n\\end{proof}\n\nPropositions~\\ref{prop-zlotys} and~\\ref{prop-branch} and Lemma~\\ref{lm-branch} yield the following.\n\n\\begin{theorem}\n\\label{thm-main-A}\nEvery $4$-chordal graph $G$ containing a maximal $3$-clique\nhas a clique transversal with at most $2(|G|-1)/7$ vertices.\n\\end{theorem}\n\n\\subsection{Chordal graphs with no maximal $3$-cliques}\n\nAs identified earlier, the basic algorithm together with Proposition~\\ref{prop-zlotys} gives, in this case, a clique transversal of $G$ \nof size at most $2|G|/7$, which is greater than our proposed bound of $2(|G|-1)/7$.\nTo attain this improvement, we need to slightly modify the algorithm depending on the structure of $G$.\n\n\\begin{theorem}\n\\label{thm-main-B}\nEvery $4$-chordal graph $G$ that contains no maximal $3$-clique\nhas a clique transversal with at most $2(|G|-1)/7$ vertices unless $|G|=4$.\n\\end{theorem}\n\n\\begin{proof}\nLet $G$ be a counterexample to the statement of the theorem \ncontaining the minimum number of vertices and, subject to this, the minimum number of edges.\nClearly, $G$ is connected, in particular, $G$ has no isolated vertices.\nFix a rooted tree-decomposition $T$ of $G$ with the maximum number of leaves such that\nevery node corresponds to a maximal clique of $G$ (such a tree-decomposition\nexists by Lemma~\\ref{lm-maximal}).\nIf $G$ has at most two maximal cliques, then it has a clique transversal of size one.\nSo, we can assume that $G$ has at least three maximal cliques, which implies \nthat the tree-decomposition $T$ has at least three nodes.\nIn particular, the root of $T$ has at least two children.\n\nWe now show that we may assume each leaf node of $T$ corresponds to a $4$-clique.\nSuppose that $T$ has a leaf node $u'$ that corresponds to a $k$-clique with $k\\ge 5$.\nLet $U'$ be the set of vertices of $G$ that are associated with $u'$, and \nlet $U$ be the set of vertices associated with the parent of $u'$ in $T$.\nIf $|U'\\setminus U|\\ge 2$, then let $v$ be any vertex in $U'\\setminus U$ and\nlet $G'$ be the graph obtained from $G$ by removing the vertex $v$.\nIf $|U'\\setminus U|=1$, then let $v$ be the unique vertex in $U'\\setminus U$,\nlet $v'$ be any vertex of $U'\\cap U$, and\nlet $G'$ be the graph obtained from $G$ by removing the edge $vv'$.\nObserve that in both cases, $G'$ is a $4$-chordal graph and\nany clique transversal of $G'$ is also a clique-transversal of $G$.\nHowever, this contradicts the choice of $G$ as a minimal counterexample.\n\nSuppose that $T$ has a node $u$ adjacent to a leaf $u'$ such that\nat least two vertices associated with $u'$ are not associated with $u$.\nLet $U$ and $U'$ be the sets of vertices of $G$ associated with nodes $u$ and $u'$ respectively, and\nlet $k=|U'\\setminus U|$. Note that $k\\in\\{2,3\\}$ since $G$ is connected.\nConsider a nice tree-decomposition $T'$ such that its root corresponds to the clique induced by $U'$;\nsuch a tree-decomposition $T'$ exists by Proposition~\\ref{prop-nice}.\nNote that the root of $T'$ has a single child and\nexactly the $k$ vertices of $U'\\setminus U$ are not associated with its only child.\nIf $k=2$, the subtree rooted at the only child of the root of $T'$ is a branch and\nwe process its nodes following Lemma~\\ref{lm-branch}, which results in saving one {z\\l{}oty}{}.\nIf one of the nodes $U'$ is red, then we can save at least $4$ {z\\l{}oty}{}s and\nconclude that $G$ has a clique transversal of size at most $(2|G|-5)/7$.\nIf no node of $U'$ is red, we color one of the vertices of $U\\cap U'$ red, making a saving of \none {z\\l{}oty}{} from the eight {z\\l{}oty}{}s assigned to the vertices of $U'$ (additional {z\\l{}oty}{}s\nare saved if the two vertices of $U\\cap U'$ form a distinguished pair), and\nconclude that $G$ has a clique transversal of size at most $(2|G|-2)/7$.\n\nIf $k=3$, then exactly one vertex, say $v$, of $U'$ is also contained in $U$.\nLet $v'$ be another vertex associated with the child of the root of $T'$.\nWe process the nodes of the subtree of $T'$ rooted at the single child of its root as in Lemma~\\ref{lm-branch},\nas if the subtree were a branch sharing the vertices $v$ and $v'$ with the rest of the graph. \nIn this way, we save one {z\\l{}oty}{}. If $v$ is red, we can save all six {z\\l{}oty}{}s assigned to the vertices of $U'\\setminus U$.\nIf $v$ is not red, we color $v$ red and save one {z\\l{}oty}{} out of eight {z\\l{}oty}{}s assigned among the vertices of $U'$.\n\nIn total, we save at least two {z\\l{}oty}{}s in both cases and \nconclude that $G$ has a clique transversal of size at most $2(|G|-1)/7$.\n\nFrom now on, we assume that all but one vertex associated with each leaf node of $T$\nare also associated with its parent in $T$.\n\nWe next show that the tree $T$ contains no node $u'$ with a single child that is a leaf.\nSuppose that such a node $u'$ exists.\nLet $u$ its child, let $u''$ be its parent, and\nlet $U$, $U'$ and $U''$ be the vertex sets associated with the nodes $u$, $u'$ and $u''$, respectively.\nIf $U'\\cap U''=U\\cap U'$, then we can modify the tree $T$ by replacing the edge $uu'$ with $uu''$, \nwhich increases the number of leaves and so contradicts the choice of $T$.\nSo, we assume that $U'\\cap U''\\not=U\\cap U'$.\n\nSuppose that $|U'|>4$.\nIf $U'\\cap U''\\subset U\\cap U'$, let $v$ be a vertex contained in $(U\\cap U')\\setminus (U'\\cap U'')$.\nOtherwise, we have that $U'\\cap U''\\not\\subseteq U\\cap U'$ and thus $U'\\cap U''\\not\\subseteq U$, and\nwe let $v$ be a vertex contained in $(U'\\cap U'')\\setminus U$.\nRemove $v$ from $U'$ and let $G'$ be the $4$-chordal graph corresponding to this modified tree-decomposition.\nAny clique transversal of $G'$ is also a clique transversal of $G$, contradictory to the choice of $G$ as a minimum counterexample.\n\nHence, we can assume that $|U'|=4$. Let $U=\\{v_1,v_2,v_3,v_4\\}$ and $U'=\\{v_2,v_3,v_4,v_5\\}$.\nBy symmetry, we can assume that $U'\\cap U''\\subseteq\\{v_3,v_4,v_5\\}$ (recall that $U'\\cap U''\\not=U\\cap U'$ and $U'$ is a maximal clique of $G$).\nWe now construct another $4$-chordal graph $H$ as follows.\nLet $X$ be a two-element subset of $U''$ that contains all the vertices of $U''\\cap\\{v_3,v_4\\}$, and\nlet $X'\\subset U''$ be the set $X\\cup\\{w,w'\\}$, where $w$ and $w'$ are two new vertices.\nWe construct a new tree decomposition $S$ from $T$ by removing the nodes $u$ and $u'$ and\nintroducing a new node $s$ associated with the set $X'$ and adjacent to the node $u''$.\nLet $H$ be the chordal graph with the tree-decomposition $S$. Observe that $H$ is $4$-chordal and\nall maximal cliques of $G$, except for those induced by $U$ and $U'$, are also maximal cliques of $H$.\n\nLet $S'$ be a nice tree-decomposition of $H$ with its root node corresponding to the clique of $H$ induced by $X'$.\nObserve that the subtree of $S'$ rooted at the child of the root of $S'$ containing a node associated with $U''$ is a branch.\nHence, we can process all nodes of $S'$ except for the root, saving one {z\\l{}oty}{} by Lemma~\\ref{lm-branch}.\nNote that neither of the new vertices $w$ and $w'$, nor their {z\\l{}oty}{}s, are removed during this process and\nthat the output set intersects all maximal cliques of $G$, except possibly those induced by $U$ and $U'$. \nOne can think of this as if we had processed all nodes of $T$ except for $u$ and $u'$,\nwhile removing all vertices of $G$ except for $v_1,\\ldots,v_4$, saving at least one {z\\l{}oty}{}.\nIf at least one of the vertices $v_3$ and $v_4$ is red, the set of red vertices is a clique transversal of $G$ and \nwe save four {z\\l{}oty}{}s assigned to the vertices $v_1$ and $v_2$.\nIf none of the vertices $v_3$ or $v_4$ are red, we color one of them red and remove eight {z\\l{}oty}{}s assigned\nto the vertices $v_1,\\ldots,v_4$; in this way, we have saved an additional one {z\\l{}oty}{}.\nIn total, we have saved at least two {z\\l{}oty}{}s and so the constructed clique transversal of $G$\ncontains at most $2(|G|-1)/7$ vertices.\n\nHence, we can assume onwards that every node adjacent to a leaf has at least two children.\nConsider a node $u$ of $T$ that has at least two children that are leaves.\nLet $u'$ and $u''$ be two such children, and\nlet $U$, $U'$ and $U''$ be the sets of vertices of $G$ associated with the nodes $u$, $u'$ and $u''$ respectively.\nNote that $|U\\cap U'|=|U\\cap U''|=3$, $U'\\cap U''\\subseteq U\\cap U'$ and $U'\\cap U''\\subseteq U\\cap U''$.\nLet $k=|U'\\cap U''|$ and observe that $k\\in\\{0,1,2,3\\}$.\nWe show it must hold that $k=2$.\n\nIf $k=3$, obtain a nice tree-decomposition from $T$ following the proof of Proposition~\\ref{prop-nice}.\nNote that $u$ has remained the parent of both $u'$ and $u''$.\nWe start processing this nice tree-decomposition\nby removing the two vertices contained in $U'\\setminus U$ and $U''\\setminus U$, removing the nodes $u'$ and $u''$, \nand introducing a distinguished triple formed by the vertices of $U'\\cap U''$.\nThis results in saving two {z\\l{}oty}{}s. We process the rest of the graph using the basic algorithm.\n\n\nIf $k\\in\\{0,1\\}$, we fix a nice tree-decomposition $T'$ such that\nits root is associated with $(U\\cap U')\\cup(U\\cap U'')$ with \ntwo children associated with $U'$ and $U''$.\nSuch a nice tree-decomposition $T'$ indeed exists: \nintroduce a new node $w$ associated with $(U\\cap U')\\cup(U\\cap U'')$,\nmake $w$ a child of $u$, and make both $u'$ and $u''$ children of $w$.\nNext, reroot the tree-decomposition at $w$ and subdivide edges as necessary to obtain a nice tree-decomposition.\nNote that neither the edge $u'w$ nor the edge $u''w$ needs subdividing.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe now process all the nodes of $T'$, except for $u_0,\\ldots,u_{4-k}$, using the basic algorithm.\nLet $v'$ be the vertex of $U'\\setminus U$, $v''$ the vertex of $U''\\setminus U$,\n$v_1,\\ldots,v_3$ the vertices of $U\\cap U'$ and $v_{4-k},\\ldots,v_{6-k}$ the vertices of $U\\cap U''$.\nNote that neither $v'$ nor $v''$ can be contained in a distingushed tuple.\nIf any vertex from $v_1,\\ldots,v_{6-k}$ is contained in either at least three distinguished triples, or\na distinguished pair and another distinguished tuple, color that vertex red and remove the {z\\l{}oty}{}s\nassigned to it, including the distinguished tuples containing it.\nContinue while such a vertex exists. Note that we remove at least seven {z\\l{}oty}{}s each time.\nIf two distinguished triples share at least two vertices,\nreplace them with a single distinguished pair containing two of the shared vertices, and\nrepeat until no such distinguished triples exist.\n\nWe next analyze two cases depending on the value of $k$.\n\\begin{itemize}\n\\item {\\bf Case $k=1$:}\n  If the vertices $v_1,\\ldots,v_5$ are contained in at least two distinguished tuples, then these tuples are\n  either two disjoint distinguished pairs, a\n  disjoint distinguished pair and triple, or\n  two distinguished triples sharing a single vertex.\n  In each case, it is possible to color two vertices from $v_1\\ldots,v_5$ in such a way that\n  at least one vertex from $v_1,\\ldots,v_3$, at least one vertex form $v_3,\\ldots,v_5$, and\n  at least one vertex from each distinguished tuple are red.\n  Since we have removed at least 16 {z\\l{}oty}{}s ($12$ {z\\l{}oty}{}s assigned among the vertices $v'$, $v''$ and at least\n  four of the vertices $v_1,\\ldots,v_5$ contained in the distinguished tuples, and\n  at least four {z\\l{}oty}{}s assigned among the two distinguished tuples), we have saved at least two {z\\l{}oty}{}s.\n\n  So, we can assume that there is at most one distinguished tuple.\n  If this tuple contains the vertex $v_3$, we color $v_3$ red and remove all remaining vertices and {z\\l{}oty}{}s.\n  In this way, we remove at least $10$ {z\\l{}oty}{}s (eight {z\\l{}oty}{}s assigned among the vertices $v'$, $v''$ and\n  at least two of the vertices $v_1,\\ldots,v_5$ contained in the distinguished tuple; and\n  at least two {z\\l{}oty}{}s assigned to the distinguished tuple), so we have saved at least three {z\\l{}oty}{}s.\n\n  If the single distinguished tuple does not contain the vertex $v_3$,\n  we color one of its vertices red in such a way that if possible both sets $\\{v_1,v_2,v_3\\}$ and $\\{v_3,v_4,v_5\\}$ contain a red vertex.\n  By symmetry, we can assume that we have colored $v_4$.\n  If none of the vertices $v_1,\\ldots,v_3$ are red, we color $v_3$ red (note that $v_5$ cannot be red in this case).\n  We now remove all remaining vertices and {z\\l{}oty}{}s from the graph.\n  If we colored only a single vertex red, we have removed at least $10$ {z\\l{}oty}{}s (eight {z\\l{}oty}{}s assigned among the vertices $v'$, $v''$ and\n  at least two of the vertices $v_1,\\ldots,v_5$ contained in the distinguished tuple; and\n  at least two {z\\l{}oty}{}s assigned to the distinguished tuple), so we have saved at least three {z\\l{}oty}{}s.\n  If we colored two vertices red, we have removed at least $16$ {z\\l{}oty}{}s ($14$ {z\\l{}oty}{}s assigned among the vertices $v'$, $v''$ and\n  $v_1,\\ldots,v_5$; and\n  at least two {z\\l{}oty}{}s assigned to the distinguished tuple), so we have saved at least two {z\\l{}oty}{}s.\n\n  Finally, we analyze the case where there is no distinguished tuple.\n  If none of the vertices $v_1,\\ldots,v_3$ are red or none of the vertices $v_3,\\ldots,v_5$ are red,\n  we color the vertex $v_3$ red and remove all remaining vertices and {z\\l{}oty}{}s from the graph.\n  In this way, we remove at least $10$ {z\\l{}oty}{}s (those assigned among the vertices $v'$, $v''$ and\n  at least three of the vertices $v_1,\\ldots,v_5$), so we have saved at least three {z\\l{}oty}{}s.\n  If at least one of the vertices $v_1,\\ldots,v_3$ is red and if at least one of the vertices $v_3,\\ldots,v_5$ is red,\n  we color no vertex red and save at least the four {z\\l{}oty}{}s assigned to $v'$ and $v''$.\n\\item {\\bf Case $k=0$:}\n  If the vertices $v_1,\\ldots,v_6$ contain at least three distinguished tuples,\n  they must form three disjoint distinguished pairs. We color one vertex from each pair red in such a way that\n  at least one vertex from $v_1,\\ldots,v_3$ and at least one vertex from $v_4,\\ldots,v_6$ are red.\n  We then remove all remaining vertices and {z\\l{}oty}{}s.\n  In this way, we have removed $25$ {z\\l{}oty}{}s ($16$ {z\\l{}oty}{}s assigned among the vertices $v'$, $v''$ and $v_1,\\ldots,v_6$; and\n  nine {z\\l{}oty}{}s assigned among the three distinguished pairs), so we have saved four {z\\l{}oty}{}s.\n\n  If the vertices $v_1,\\ldots,v_6$ contain two distinguished tuples,\n  then the distinguished tuples together cover at least four vertices and\n  it is possible to color two of these vertices red such that\n  at least one vertex from $v_1,\\ldots,v_3$, at least one vertex from $v_4,\\ldots,v_6$, and\n  at least one vertex from each tuple are red.\n  We then remove all remaining vertices and {z\\l{}oty}{}s.\n  In this way, we have removed at least $16$ {z\\l{}oty}{}s (at least $12$ {z\\l{}oty}{}s assigned among the vertices $v'$, $v''$, and\n  at least four from the vertices $v_1,\\ldots,v_6$; and at least four {z\\l{}oty}{}s assigned among the two distinguished tuples), so\n  we have saved at least two {z\\l{}oty}{}s.\n\n  If the vertices $v_1,\\ldots,v_6$ contain a single distinguished tuple,\n  we color a vertex from this distinguished tuple red such that if possible\n  at least one vertex from $v_1,\\ldots,v_3$ and at least one vertex from $v_4,\\ldots,v_6$ are red.\n  By symmetry let us color the vertex $v_4$ red.\n  If none of the vertices $v_1,\\ldots,v_3$ are red,\n  we color any one of them.\n  We then remove all remaining vertices and {z\\l{}oty}{}s.\n  If the procedure colors only a single vertex red, we have removed at least $10$ {z\\l{}oty}{}s (eight {z\\l{}oty}{}s assigned among the vertices $v'$, $v''$ and\n  at least two of the vertices $v_1,\\ldots,v_6$ contained in the distinguished tuple; and\n  at least two {z\\l{}oty}{}s assigned to the distinguished tuple), so we have saved at least three {z\\l{}oty}{}s.\n  If two vertices are colored red, we have removed at least $16$ {z\\l{}oty}{}s ($14$ {z\\l{}oty}{}s assigned among the vertices $v'$, $v''$ and\n  $v_1,\\ldots,v_6$; and\n  at least two {z\\l{}oty}{}s assigned to the distinguished tuple), so we have saved at least two {z\\l{}oty}{}s.\n  \n  Finally, suppose that there is no distinguished tuple.\n  If no vertex from $v_1,\\ldots,v_3$ is red, color $v_1$ red.\n  Similarly, if no vertex from $v_4,\\ldots,v_6$ is red, color $v_4$ red.\n  We continue by removing all remaining vertices and {z\\l{}oty}{}s.\n  We have removed four {z\\l{}oty}{}s assigned to the vertices $v'$ and $v''$ and\n  an additional six {z\\l{}oty}{}s for each colored vertex.\n  In total, we have saved at least two {z\\l{}oty}{}s.\n\\end{itemize}\nSince we save at least two {z\\l{}oty}{}s in both cases,\nthe size of the constructed clique transversal is at most $2(|G|-1)/7$ as desired.\n\nWe finish the proof by analyzing three cases based on the structure of $T$.\n\\begin{itemize}\n\\item {\\bf Case: $T$ contains at least two different nodes such that each has at least two children that are leaves.}\n\nLet $u$ and $\\hat u$ be two such nodes (note that one of $u$ and $\\hat u$ can be the root).\nLet $u'$ and $u''$ be two children of $u$ that are leaves.\nLet $U$, $U'$ and $U''$ be the sets of vertices of $G$ associated with the nodes $u$, $u'$ and $u''$ respectively.\nNote that $|U\\cap U'|=|U\\cap U''|=3$ and $|U'\\cap U''|=2$.\nHence, we can assume that $U'=\\{v_1,v_2,v_3,v_4\\}$, $U''=\\{v_3,v_4,v_5,v_6\\}$ and $\\{v_2,v_3,v_4,v_5\\}\\subseteq U$.\nIn the analogous way, we define $\\hat u'$, $\\hat u''$ and $\\hat v_1,\\ldots,\\hat v_6$.\n\nNext, we obtain a nice tree-decomposition from $T$ following the proof of Proposition~\\ref{prop-nice}.\nObserve that both $u'$ and $u''$ have remained as children of $u$ and\nboth $\\hat u'$ and $\\hat u''$ have remained as children of $\\hat u$.\nWe start processing the graph $G$ by removing the vertices $v_1$, $v_6$, $\\hat v_1$ and $\\hat v_6$,\nremoving the nodes $u'$, $u''$, $\\hat u'$ and $\\hat u''$, and\nintroducing two distinguished pairs $\\{v_3,v_4\\}$ and $\\{\\hat v_3,\\hat v_4\\}$.\nIn this way, we save two {z\\l{}oty}{}s.\nThe rest of the graph is then processed following the basic algorithm.\n\n\\item {\\bf Case: the first case does not apply and the root of $T$ has a non-leaf child.}\nSince the first case does not apply, the root of $T$ has exactly two children such that\none is a leaf and the other is not.\nLet $r$ be the root of $T$ and $r'$ its child that is a leaf.\nLet $w_1,\\ldots,w_4$ be the vertices associated with $r'$, and\nlet $w_5$ be one of the vertices associated with $r$ but not with $r'$.\nBy symmetry, we can assume that the vertices $w_2$, $w_3$ and $w_4$ are associated with $r$.\nFurthermore, let $u$ be a deepest non-leaf node of $T$, and $u'$ and $u''$ be two of its children.\nAs in the previous case, we can assume that\nthe node $u'$ is associated exactly with vertices $v_1,v_2,v_3,v_4$,\nthe node $u''$ is associated exactly with vertices $v_3,v_4,v_5,v_6$, and\nthe node $u$ is associated with vertices $v_2,v_3,v_4,v_5$ (with possibly some additional vertices).\n\nWe now introduce a new node $u_0$ associated with the vertices $w_2,\\ldots,w_5$, and\nmake both $r$ and $r'$ to be children of $u_0$; the node $u_0$ becomes the new root.\nNext obtain a nice tree-decomposition from $T$ following the proof of Proposition~\\ref{prop-nice}.\nNote that $u'$ and $u''$ have remained as children of $u$, and $r'$ has remained as a child of $u_0$.\nWe start processing the graph $G$ by removing the vertices $v_1$ and $v_6$,\nremoving the nodes $u'$ and $u''$, and\nintroducing a distinguished pair $\\{v_3,v_4\\}$.\nIn this way, we have saved one {z\\l{}oty}{}.\nWe then process the remaining nodes except for $u_0$ and $r'$.\nIf one of the vertices $w_2$, $w_3$ and $w_4$ is red,\nthe vertex $w_1$ is removed using Rule G5 and we save additional two {z\\l{}oty}{}s.\nOtherwise, $w_1$ is removed using Rule B5 and the vertices $w_2$, $w_3$ and $w_4$ become a distinguished triple.\nObserve that one of the good rules applies when processing the root and\nwe save additional one {z\\l{}oty}{}. In both cases, we have saved at least two {z\\l{}oty}{}s in total.\n\n\\item {\\bf Case: all children of the root of $T$ are leaves.}\nObserve that $T$ is a nice tree-decomposition.\nLet $u'$ and $u''$ be two children of the root of $T$.\nWe can assume that\nthe node $u'$ is associated exactly with vertices $v_1,v_2,v_3,v_4$,\nthe node $u''$ is associated exactly with vertices $v_3,v_4,v_5,v_6$, and\nthe root is associated with vertices $v_2,v_3,v_4,v_5$ (and with possibly some additional vertices), \nbut not with $v_1$ and $v_6$.\n\nIf the root has only two children, then the vertex $v_3$ is contained in all cliques, and\nthe statement of the theorem follows.\nIf the root has exactly three children, then its third child\nis associated with exactly two of the vertices $v_2,v_3,v_4$;\nin particular, the third child is associated with $v_3$ or $v_4$ (or both).\nBy symmetry, we can assume that it is associated with $v_3$.\nConsequently, the vertex $v_3$ is contained in all cliques, and\nthe statement of the theorem again follows.\n\nWe now assume that the root has at least four children, i.e.,\nit has two additional children $\\hat u'$ and $\\hat u''$.\nLet $\\hat v_1,\\hat v_2,\\hat v_3,\\hat v_4$ be the vertices associated with $\\hat u'$ and\nlet $\\hat v_3,\\hat v_4,\\hat v_5,\\hat v_6$ be the vertices associated with $\\hat u''$ listed\nin such a way that the vertices $\\hat v_2,\\hat v_3,\\hat v_4,\\hat v_5$ are associated with the root (some of\nthe vertices $v_2,v_3,v_4,v_5$ might be among the vertices $\\hat v_2,\\hat v_3,\\hat v_4,\\hat v_5$).\nWe now process the graph $G$.\nWe start with removing the vertices $v_1$, $v_6$, $\\hat v_1$ and $\\hat v_6$,\nremoving the nodes $u'$, $u''$, $\\hat u'$ and $\\hat u''$, and\nintroducing distinguished pairs $\\{v_3,v_4\\}$ and $\\{\\hat v_3,\\hat v_4\\}$.\nIn this way, we save two {z\\l{}oty}{}s. We then process the rest of the graph using the basic algorithm.\n\\end{itemize}\nSince we save at least two {z\\l{}oty}{}s in each of the cases,\nthe size of the constructed clique transversal is at most $2(|G|-1)/7$ as desired.\n\\end{proof}\n\n\\section{Lower bound}\n\nWe conclude by showing that the bound given in Theorem~\\ref{thm-main} is tight.\nTo this end, we extend the construction presented in~\\cite{bib-andreae96+} for $n\\mod 7=1$ to all values of $n$.\n\n\\begin{proposition}\n\\label{prop-lower}\nFor every $n\\ge 5$,\nthere exists an $n$-vertex $4$-chordal graph with no clique transversal with fewer than $\\lfloor 2(n-1)/7\\rfloor$ vertices.\n\\end{proposition}\n\n\\begin{proof}\nIf $n\\in\\{5,6,7\\}$, $\\lfloor 2(n-1)/7\\rfloor$ is equal to one and\nthe complete graph $K_n$ shows that the assertion of the proposition is true.\n\n\\begin{figure}\n\\begin{center}\n\\epsfbox{chord-k4.1} \\hskip 10mm\n\\epsfbox{chord-k4.2} \\vskip 5mm\n\\epsfbox{chord-k4.3}\n\\end{center}\n\\caption{The graphs $H_0$, $H_1$ and $H_2$.}\n\\label{fig-lower1}\n\\end{figure}\n\nWe next recall the construction presented in~\\cite{bib-andreae96+}.\nLet $H_k$, $k\\ge 0$, be the following graph with $7k+8$ vertices (see Figure~\\ref{fig-lower1}).\nThe vertex set of $H_k$ is formed from $7k$ vertices $b_i,b'_i,b''_i,c_i,c'_i,c''_i,c'''_i$, $i\\in\\{1,\\ldots,k\\}$, and \neight vertices $a,a',a'',a'''$ and $d,d',d'',d'''$.\nThe vertices $a,a',a'',a'''$ form a $4$-clique;\neach triple of vertices $b_i,b'_i,b''_i$, $i\\in\\{1,\\ldots,k\\}$, forms a $3$-clique;\neach quadriple of vertices $c_i,c'_i,c''_i,c'''_i$, $i\\in\\{1,\\ldots,k\\}$, forms a $4$-clique; and\nthe vertices $d,d',d'',d'''$ also form a $4$-clique.\nNote that these $2k+2$ cliques are vertex disjoint.\nIn addition, $H_k$ contains $4$-cliques formed by vertices $b'_i,b''_i,c_i,c'_i$ for $i\\in\\{1,\\ldots,k\\}$; \nvertices $b_i,b''_i,b_{i+1},b'_{i+1}$ for $i\\in\\{1,\\ldots,k-1\\}$; \nand finally vertices $a'',a''',b_1,b'_1$, and $b_k,b''_k,d,d'$.\nObserve that $H_k$ is a $4$-chordal graph with $7k+8$ vertices and $2k+2$ disjoint maximal cliques.\nThis proves the proposition for $n\\mod 7=1$.\n\nFor $n\\mod 7\\not=1$, we proceed as follows.\nLet $k$ be the largest integer such that $7k+8\\le n$ and let $z=(n-1)\\mod 7$.\nIf $z\\le 3$, we add $z$ new vertices $e_1,\\ldots,e_z$ to the graph $H_k$ and\njoin each of them to all of the four vertices $d,d',d'',d'''$.\nThe resulting graph is $4$-chordal and its clique transversal number is at least $2k+2=\\lfloor 2(n-1)/7\\rfloor$.\nIf $z\\ge 4$, we add $z$ new vertices $e_1,\\ldots,e_z$ to the graph $H_k$ such that the $z$ vertices are mutually adjacent, \nand join the vertices $e_1$, $e_2$ to both $d''$ and $d'''$.\nThe resulting graph is $4$-chordal. Since the clique formed by the vertices $e_1,\\ldots,e_z$\nis vertex-disdjoint from the $2k+2$ disjoint maximal cliques of $H_k$ identified earlier,\nthe clique transversal number of the resulting graph is at least $2k+3=\\lfloor 2(n-1)/7\\rfloor$.\n\\end{proof}\n\n\\section*{Acknowledgement}\n\nThe first author would like to thank the Undergraduate Research Support Scheme of the University of Warwick\nfor support provided to him during the summer 2015 while carrying out this work.\n\n\\begin{thebibliography}{9}\n\\bibitem{bib-aigner+}\nM.~Aigner and T.~Andreae:\n{\\em Vertex-sets that meet all maximal cliques of a graph\\/},\nmanuscript, 1986.\n\\bibitem{bib-andreae98}\nT.~Andreae:\n{\\em On the clique-transversal number of chordal graphs\\/},\nDiscrete Math. {\\bf 191} (1998), 3--11.\n\\bibitem{bib-andreae96+}\nT.~Andreae and C.~Flotow:\n{\\em On covering all cliques of a chordal graph\\/}, \nDiscrete Math. {\\bf 149} (1996), 299--302.\n\\bibitem{bib-erdos92+}\nP.~Erd\\H os, T.~Gallai, and Zs.~Tuza:\n{\\em Covering the cliques of a graph with vertices\\/},\nDiscrete Math. {\\bf 108} (1992), 279--289.\n\\bibitem{bib-flotow92}\nC.~Flotow:\n{\\em Obere Schranken f\\\"ur die Clique-Transversalzahl eines Graphen\\/}, \nthesis, Univ.~Hamburg, 1992. \n\\bibitem{bib-tuza90}\nZs.~Tuza:\n{\\em Covering all cliques of a graph\\/},\nDiscrete Math. {\\bf 86} (1990), 117--126.\n\\bibitem{bib-tuza01}\nZs.~Tuza:\n{\\em Unsolved combinatorial problems, Part I\\/},\nBRICS Lecture Ser.~LS-01-1, 2001, 30 pp.\n\\end{thebibliography}\n\n", "itemtype": "equation", "pos": 11784, "prevtext": "\n\n\\title{Optimal-size clique transversals in chordal graphs}\n\\author{Jacob W.~Cooper\\thanks{Department of Computer Science, University of Warwick, Coventry CV4 7AL, UK. E-mail: {\\tt j.w.cooper@warwick.ac.uk}.}\\and\n        Andrzej Grzesik\\thanks{Institute of Informatics, University of Warsaw, ul. Banacha 2, 02-097 Warsaw, Poland. E-mail: {\\tt grzesik@mimuw.edu.pl}.} \\and\n        Daniel Kr\\'al'\\thanks{Mathematics Institute, DIMAP and Department of Computer Science, University of Warwick, Coventry CV4 7AL, UK. E-mail: {\\tt d.kral@warwick.ac.uk}.}}\n\\date{}\t\n\\maketitle\n\n\\begin{abstract}\nThe following question was raised by Tuza in 1990 and Erd\\H os et al.~in 1992:\nif every edge of an $n$-vertex chordal graph $G$ is contained in a clique of size at least four,\ndoes $G$ have a clique transversal, i.e.,~a set of vertices meeting all non-trivial maximal cliques, of size at most $n/4$?\nWe prove that every such graph $G$ has a clique transversal of size at most $2(n-1)/7$ if $n\\ge 5$,\nwhich is the best possible bound.\n\\end{abstract}\n\n\\section{Introduction}\n\nWe investigate a problem posed by Erd\\H os et al.~\\cite[Problem 4]{bib-erdos92+} and Tuza~\\cite[Problem 1]{bib-tuza90}\non clique transversals in chordal graphs.\nTo state the problem, we require the following definitions. \nA graph is {\\em chordal} if it contains no induced cycle of length four or more.\nWe define a {\\em clique} to be a complete subgraph of a graph (here, we deviate from the standard definition) and \ncall a clique {\\em maximal} if it is an inclusion-wise maximal complete subgraph. \nA {\\em $k$-clique} is a clique containing $k$ vertices; moreover we call a clique non-trivial if it is a $k$-clique for some $k\\ge 2$.\nA {\\em clique transversal} of a graph $G$ is a set $U$ of vertices such that\nevery non-trivial maximal clique of $G$ contains a vertex from $U$.\nFinally, a chordal graph $G$ is {\\em $k$-chordal} if each edge of $G$ is contained in a $k$-clique.\n\nEvery $2$-chordal $n$-vertex graph has a clique transversal of size at most $n/2$~\\cite{bib-aigner+}, and\nevery $3$-chordal $n$-vertex graph has a clique transversal of size at most $n/3$~\\cite{bib-tuza90}.\nMotivated by these results,\nErd\\H os et al.~\\cite[Problem 4]{bib-erdos92+} and Tuza~\\cite[Problem 1]{bib-tuza90} posed the following.\n\\begin{question}\n\\label{quest}\nDoes every $4$-chordal graph with $n$ vertices have a clique transversal of size at most $n/4$?\n\\end{question}\n\\noindent Flotow~\\cite{bib-flotow92} constructed counterexamples for some small values of $n$ and \nAndreae and Flotow~\\cite{bib-andreae96+}\nconstructed arbitrarily large $n$-vertex $4$-chordal graphs admitting no clique transversal with fewer than $2n/7-O(1)$ vertices, \nconjecturing this to be tight up to a constant factor.\n\\begin{conjecture}\n\\label{conj}\nEvery $4$-chordal graph with $n$ vertices has a clique transversal of size at most $2n/7$.\n\\end{conjecture}\n\\noindent This conjecture also appears as~\\cite[Problem 77]{bib-tuza01}.\nAndreae~\\cite{bib-andreae98} proved this conjecture when restricting to $4$-chordal graphs with every maximal clique \ncontaining at most four vertices.\n\nIn this paper, we prove Conjecture~\\ref{conj} and\ndetermine the optimal function of $n$ for which Question~\\ref{quest} holds true, that is we prove the following.\n\\begin{theorem}\n\\label{thm-main}\nEvery $4$-chordal graph $G$ with $n\\ge 5$ vertices\nhas a clique transversal of size at most $\\lfloor 2(n-1)/7\\rfloor$.\n\\end{theorem}\n\\noindent As shown in Proposition~\\ref{prop-lower},\nthe bound proven in Theorem~\\ref{thm-main} is best possible for every $n\\ge 5$.\n\n\\section{Tree-decompositions of chordal graphs}\n\nIt is well-known that every chordal graph is an intersection graph of subtrees of a tree.\nSuch intersection representations lead to tree-decompositions, which we now define.\nA {\\em tree-decomposition} of a graph $G$ is a tree $T$ such that\n\\begin{itemize}\n\\item each node $u$ of $T$ is {\\em associated} with a subset $V_u$ of vertices of $G$,\n\\item two vertices $v$ and $v'$ of $G$ are joined by an edge if and only if there exists a node $u$ such that $\\{v,v'\\}\\subseteq V_u$, and\n\\item for every vertex $v$ of $G$, the nodes $u$ with $v\\in V_u$ induce a subtree of $T$.\n\\end{itemize}\nA graph $G$ admits a tree-decomposition $T$ if and only if $G$ is chordal.\nWe will always refer to the vertices of a tree-decomposition as nodes in order to distinguish clearly between the vertices of graphs and tree-decompositions.\n\nThe vertices associated with a node $u$ of a tree-decomposition of a graph $G$\nform a clique in $G$; we will say that $u$ {\\em corresponds} to this clique.\nThe Helly property of subtrees of a tree implies that\nevery maximal clique corresponds to a node of a tree-decomposition.\nHowever, not all nodes of a tree-decomposition need correspond to a maximal clique.\nWe now state the following folklore lemma that asserts it is possible to modify a tree-decomposition of a chordal graph such that\neach node corresponds to a maximal clique.\n\n\\begin{lemma}\n\\label{lm-maximal}\nEvery chordal graph $G$ has a tree-decomposition $T$ such that\neach node of $T$ corresponds to a maximal non-trivial clique of $G$, and\nall the nodes of $T$ are associated with different subsets of vertices of $G$.\n\\end{lemma}\n\n\\begin{proof}\nLet $T$ be a tree-decomposition of $G$ with the minimum number of nodes.\nThe minimality of $T$ implies that no node is associated with a single vertex,\ni.e., all cliques associated with nodes of $T$ are non-trivial.\nLet $u$ be a node of $T$ and let $C$ be the clique corresponding to $u$.\nWe will show that $C$ is a maximal clique.\nIf $u$ had a neighbor $u'$ such that every vertex associated with $u$ were also associated with $u'$,\nwe could contract the edge $uu'$ and obtain a smaller tree-decomposition of $G$,\nwhich is impossible by the choice of $T$.\nHence, for every neighbor $u'$, there exists a vertex $v$ associated with $u$ but not with $u'$.\n\nSuppose that $C$ is not a maximal clique, i.e., there exists a clique $C'$ of $G$ containing $C$.\nLet $u''$ be the node that corresponds to $C'$ and let $u'$ be the neighbor of $u$ on the path from $u$ to $u''$.\nFurthermore, let $v$ be a vertex associated with $u$ but not with $u'$.\nSince the nodes associated with $v$ induce a subtree, the vertex $v$ is not associated with the node $u''$.\nConsequently, $C'$ does not contain $v$. We conclude that the clique $C$ is maximal.\n\\end{proof}\n\nIn the proof of Theorem~\\ref{thm-main}, we require a particular type of tree-decomposition, which we now define.\nA tree-decomposition of a $4$-chordal graph is {\\em nice} if it is rooted and satisfies the following:\n\\begin{itemize}\n\\item no two adjacent nodes correspond to the same clique,\n\\item if a node $u$ corresponds to a $k$-clique $C$, then $k\\ge 3$ and if $k=3$, then $C$ is maximal,\n\\item if a node $u$ corresponds to a $k$-clique, $k\\ge 5$ and $u$ is not the root, then\n      $k-1$ vertices associated with $u$ are also associated with the parent of $u$, and\n\\item if $G$ contains a maximal $3$-clique, then the root node corresponds to a maximal $3$-clique.\n\\end{itemize}\nWe now show that every $4$-chordal graph admits a nice tree-decomposition,\neven with the additional restriction on the clique corresponding to its root.\n\n\\begin{proposition}\n\\label{prop-nice}\nLet $G$ be a $4$-chordal graph and let $C$ be a maximal $3$-clique of $G$, if it exists;\notherwise let $C$ be a clique of $G$ of order at least four.\nThen, $G$ admits a nice tree-decomposition such that its root corresponds to $C$.\n\\end{proposition}\n\n\\begin{proof}\nLet $T$ be a tree-decomposition of $G$ such that each node of $T$ corresponds to a maximal non-trivial clique,\nwhich exists by Lemma~\\ref{lm-maximal}.\nWe construct a nice tree-decomposition of $G$ from $T$.\n\nWe first introduce a new node $r$ and associate it with the vertices of $C$.\nWe join $r$ to a node of $T$ that corresponds to a clique containing $C$ (if $C$ is maximal,\nthen this node corresponds to $C$ itself), and\nroot the tree-decomposition at $r$.\nObserve that the second and forth properties from the definition of a nice tree-decomposition hold in this modified tree-decomposition.\n\nWhile the modified tree-decomposition contains a node $u$ associated with vertices $v_1,\\ldots,v_k$, $k\\ge 5$, such that\ntwo of these vertices, say $v_{k-1}$ and $v_k$, are not associated with the parent $u'$ of $u$, we proceed as follows:\nwe introduce a new node $u''$ to be both a child of $u'$ and the parent of $u$, \nassociating $u''$ with $v_1,\\ldots,v_{k-1}$.\nThis process terminates since the sum of the squares of the sizes of the symmetric difference of vertex sets associated\nwith adjacent nodes in the tree-decomposition decreases in each step. \n\nThis tree-decomposition now satisfies the second, third and forth properties from the definition of a nice tree-decomposition.\nIf the tree-decomposition contains two adjacent nodes corresponding to the same clique,\nwe contract the edge joining them. After this process terminates, we have a nice tree-decomposition of $G$\nrooted at a node corresponding to the clique $C$.\n\\end{proof}\n\n\\section{Clique transversals in chordal graphs}\n\nTo prove our main result, we design an algorithm that constructs a small clique transversal of a given $4$-chordal graph $G$, \nwhose input is $G$ together with any one of its nice tree-decompositions.\nDuring the course of the algorithm, nodes of the input nice tree-decomposition will be removed sequentially, \nwhilst simultaneously in $G$, selected pairs and triples of vertices will become temporarily distinguished, determining which \nvertices are to be removed or colored red with every iteration. \nDistinguished pairs and triples will be collectively referred to as distinguished tuples, and \nit will hold that:\n\\begin{itemize}\n\\item a distinguished tuple will never contain a red vertex,\n\\item the vertices of each distinguished tuple will induce a complete subgraph, and\n\\item at least one vertex of a distinguished tuple will eventually become red.\n\\end{itemize}\nThe red vertices will form the sought clique transversal.\nWe will refer to an algorithm of this kind as a {\\em clique transversal algorithm}.\n\nTo bound the size of the constructed clique transversal, we apply a double counting argument.\nInitially, each vertex will be assigned two {z\\l{}oty}{}s and\neach node of the input nice tree-decomposition corresponding to a maximal clique of order three will be assigned one {z\\l{}oty}{}.\nAs each vertex of the chordal graph is removed or colored red,\nits assigned {z\\l{}oty}{}s will be reassigned in accordance with the algorithm.\nWhenever a vertex is colored red, seven {z\\l{}oty}{}s will be removed from the graph---these seven {z\\l{}oty}{}s will be referred to as {\\em paid} for coloring a vertex red.\nIt may also occur that some {z\\l{}oty}{}s are removed from the graph without \ncreating a red vertex---these {z\\l{}oty}{}s will be referred to as {\\em saved}.\nIn addition, each distinguished pair will always be assigned three {z\\l{}oty}{}s and\neach distinguished triple two {z\\l{}oty}{}s at the instant of its creation.\nWhen any distinguished tuple ceases to exist, its {z\\l{}oty}{}s will also be reassigned.\n\nTo aid the accessibility of our arguments,\nwe will sequentially design three algorithms with the properties above.\nTo establish a further notion, a clique transversal algorithm will be denoted {\\em cash-balanced}\nif it abides by the rules presented above for reassigning {z\\l{}oty}{}s.\n\n\\begin{proposition}\n\\label{prop-zlotys}\nLet $G$ be a $4$-chordal graph and let $X$ be the clique transversal produced by a clique transversal algorithm that is cash-balanced.\nIf $n$ is the number of vertices of $G$, $t$ is the number of maximal $3$-cliques of $G$ and $s$ is the number of {z\\l{}oty}{}s saved by the algorithm, then\n\n", "index": 1, "text": "$$|X|=\\frac{2n+t-s}{7}\\;\\mbox{.}$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"|X|=\\frac{2n+t-s}{7}\\;\\mbox{.}\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">|</mo><mi>X</mi><mo stretchy=\"false\">|</mo></mrow><mo>=</mo><mrow><mpadded width=\"+2.8pt\"><mfrac><mrow><mrow><mrow><mn>2</mn><mo>\u2062</mo><mi>n</mi></mrow><mo>+</mo><mi>t</mi></mrow><mo>-</mo><mi>s</mi></mrow><mn>7</mn></mfrac></mpadded><mo>\u2062</mo><mtext>.</mtext></mrow></mrow></math>", "type": "latex"}]