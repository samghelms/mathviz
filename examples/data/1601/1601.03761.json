[{"file": "1601.03761.tex", "nexttext": " \nwhere $m_0$ is the nominal mass per node. What we need now is a method of evenly distributing $N$ particles on a spherical surface. Our method employs two nested, algorithmic distribution schemes for populating shells in a hybrid fashion.\n\n\\subsection{RPR scheme}\n\nThe first half of the method relies on a recursive primitive refinement (RPR) algorithm. The primitives are three dimensional solids with triangular facets (Platonic shapes), \nand we refine on those triangles to create shells of particles at successively higher particle counts. This procedure was described by \\cite{herant1994}. The goal is to \nmaintain equal mass particles in each shell and between shells with roughly equal spacing in all directions between particles and their local neighbor set. We accomplish \nthis via a Catmull-Clark subdivision process \\citep{catmull1978}. As shown in Figure \\ref{fig:triangle}, a single refinement ($n=1$) of one triangle produces four similar \ntriangles by bisecting the $n-1$ triangle edges at their midpoints. This produces three new vertices (4,5,6) that will each be one vertex of a refinement of an adjacent \ntriangle. \n\n\\begin{figure}[ht]\n\\centering\n\\includegraphics[width=0.45\\textwidth]{triangles}\n\\caption{A graphical representation a single-level triangle refinement.}\n\\label{fig:triangle}\n\\end{figure}\n\nThe storage of these new vertices may be handled abstractly (so as not to double-count vertices created through edge bisections), and the particle positions for these vertices are displaced by unit vectors scaled to an appropriate radial displacement after the recursive refinement process has completed. This process can be performed on any primitive polygon built of triangles, such as a tetrahedron or icosahedron.\n\nFor the purposes of creating nested spherical shells with equal mass particles, we first compute the total integrated mass for a given radial density distribution. A user may desire an \narbitrary radial particle resolution, and so this fixes a nominal particle mass for the entire distribution. Each successive radial shell particle count can be computed simply by the shell \nmass divided by the nominal particle mass (as in equation (\\ref{eq:shell})). At this stage, one might desire a sufficiently large number of primitive types so as to fill in any gaps between \nsuccessive refinement levels. Consider for instance refining icosahedra, as is done in Figure \\ref{fig:icosahedron}. At $n=3$ refinement levels, the total number of surface points is already \n642 -- the next lowest shell count using only icosahedra would be 162 at $n=2$. If, in order to maintain equal masses between shells, one desires $\\approx 300$ particles in a shell, there \nexists no refinement level of an icosahedron that will produce particles within $\\sim 2 \\times$ the desired, nominal particle mass. These gaps between successive shell counts for a given \nprimitive shape grow exponentially larger at high refinement levels ($\\sim 2^{2n-1}$).\n\n\\begin{figure}[ht]\n\\centering\n\\includegraphics[width=0.23\\textwidth]{low}\n\n\\includegraphics[width=0.23\\textwidth]{medium}\n\n\\includegraphics[width=0.23\\textwidth]{high}\n\\caption{Icosahedra with $n=0$ refinement (12 points), $n=1$ (42 points), and $n=2$ (162 points), respectively.}\n\\label{fig:icosahedron}\n\\end{figure}\n\n\\begin{figure*}[ht]\n\\centering\n\\includegraphics[width=0.20\\textwidth]{shape1}\n\\includegraphics[width=0.20\\textwidth]{shape2}\n\\includegraphics[width=0.20\\textwidth]{shape3}\n\\includegraphics[width=0.20\\textwidth]{shape4}\n\\caption{The four primitive shapes (in this case, the first four Platonic solids) we use in conjunction with recursive refinement to build particle shells at desired particle counts. \nIn the case of the cube, any two diagonal points on a face can be chosen arbitrarily to form an edge of a triangle such that the primitive $n=0$ shape has 12 faces.}\n\\label{fig:library}\n\\end{figure*}\n\n\nTo combat this problem, we store a library of primitive types (depicted in Figure \\ref{fig:library}) whose refinement particle counts neatly span the counts between successive refinements of the various other \nprimitive types. In order to choose the correct primitive type for a desired shell count, the total number of points on the surface of a primitive shape that has been refined $n$ \ntimes can be calculated by\n\n", "itemtype": "equation", "pos": -1, "prevtext": "\n\\title{Rapid Optimal SPH Particle Distributions in Spherical Geometries For Creating Astrophysical Initial Conditions}\n\n\\author{Cody Raskin\\altaffilmark{1} \\& J. Michael Owen\\altaffilmark{1}}\n\n\\altaffiltext{1}{Lawrence Livermore National Laboratory, P.O. Box 808, L-038, Livermore, CA 94550}\n\n\\begin{abstract}\n\nCreating spherical initial conditions in smoothed particle hydrodynamics simulations that are spherically conformal is a difficult task. Here, we describe two algorithmic methods for evenly \ndistributing points on surfaces, that when paired can be used to build 3D spherical objects with optimal equipartition of volume between particles, commensurate with an arbitrary, radial \ndensity function. We demonstrate the efficacy of our method against stretched lattice arrangements on the metrics of hydrodynamic stability, spherical conformity, and the harmonic power \ndistribution of gravitational settling oscillations. We further demonstrate how our method is highly optimized for simulating multi-material spheres, such as planets with core-mantle\nboundaries. \n\n\\end{abstract}\n\n\\section{Introduction}\n\nSmoothed Particle Hydrodynamics (SPH) \\citep{gingold1977,lucy1977} is a meshless hydrodynamics scheme widely used in many astrophysical contexts. Being Lagrangian, SPH does \nnot require regularly spaced, lattice-oriented interpolants as Eulerian mesh methods do. However, there is currently a paucity of readily available initial conditions generators for \nLagrangian particle distributions. As a result many SPH users resort to using latticelike particle arrangements, and where sphericity is required they often simply apply a clipping operator \nto these regular arrangements to produce a subset of particles that occupy a sphere ({\\textit{e.g.\\ }} \\cite{benz1987}, \\cite{monaghan1991}, \\cite{bate1998}, \\cite{rasio1999}). These latticelike \narrangements may be cartesian cubical lattice (CL), a hexagonal close packing (HCP) arrangement ({\\textit{e.g.\\ }} \\cite{kitsionas2002}, \\cite{davies1991}, \\cite{davies1992}), or a quaquaversal \ntiling (QVT) arrangement \\citep{hansen2007}, each of which use some space-filling method to achieve equipartition of volume.\nFor brevity we will refer to all such permutations of regular space-filling methods that are not necessarily spherically conformal as ``lattices''.\n\nFor many spherical problems, especially those involving shocks, lattice particle arrangements introduce a host of distorting features into SPH simulations. For example, shock-driven, \nradially compressive flows may demonstrate imprinting along one or more of the regular cardinal directions inherent in the underlying latticelike point arrangement as the particle column \ndensity is higher along those directions \\citep{herant1994}. More importantly, applying an arbitrary radial profile to particles arrayed in a lattice is difficult under the constraint of equal mass \nparticles throughout the distribution. \\cite{rosswog2008} adapted a method of stretching a uniform CL in the radial direction so as to reproduce an arbitrary density profile, however, this \nmethod does not obviate the drawbacks of a lattice as we discuss below.\n\nThere are several alternative methods to lattice distributions for the purpose of generating spherical distributions of points, and these fall into two major categories -- one-stage and two-stage \nsetups. Typical one-stage setups rely on random distributions according to some arbitrary probability distribution. The simplest of these is the Monte Carlo method, wherein the entire \nsphere is populated randomly by picking numbers from a probability distribution that matches the desired radial profile. A slightly more sophisticated approach populates shells at \npredetermined radii with randomly selected locations in the chosen shell. For the purposes of this paper, we will refer to the latter approach as the Random Shell method.\n\nTwo-stage setups take the output of any of the previously described methods (including lattice arrangements) and apply some extra iterative physics on the particle positions to drive \ntoward the goal of nearly equal volume or surface area per point. One such approach is the Gravitational Glass (GG) method of \\cite{wang2007} which uses an inverse gravitational field \nin conjunction with a motion-dampening force to drive particles toward an optimally spaced configuration. When combined with a lattice stretching algorithm, this method can also \nreproduce density profiles well, depending on the application. Another alternative is the Concentrated Shell setup, which uses the Random Shell method as its starting point. In this \nmethod, the particles are given a repulsive force from one another while constrained to remain inside their shells, which also settles them into a nearly optimally spaced distribution within \neach shell \\citep{fryer2002,hungerford2003,fryer2007late}.\n\n\\cite{diehl2012} have developed a more sophisticated alternative, two-step method using a GG-type repulsion force inspired by weighted Voronoi tessellations (WVT). This \nmethod harnesses the power of an oct-tree to optimally arrange particles in three dimensions via a method similar to, but subtly different from the Lloyd algorithm \\citep{lloyd1982}. \nWhile this method produces a reasonably relaxed distribution, it can be computationally expensive and does not entirely eliminate local shot noise. For their purposes, the authors \nof WVT use a Monte Carlo method for the first stage.\n\nEach of these two-stage methods produces particle distributions near the low-energy, optimal configuration with varying success. However, each of \nthem also requires a complicated and potentially expensive setup routine in combination with a relaxation step, especially where GG-type repulsion forces are required. For \nthe most part these methods require a separate physics code for the sole purpose of initial conditions. While accurate and high-fidelity initial conditions are often crucial \nto getting a trustworthy numerical result, occasionally computational expense and time expediency argue for something simpler, yet still robust. In this paper, we describe a \ncomputationally simple, one-stage method for optimal or near-optimal spherically conformal arrangements that is rapid, easy to deploy for any SPH code, and requires no tree knowledge or expensive \nrepulsion/relaxation pre-step. In Section 2, we describe our method which employs a hybrid of two different methods for arranging particles into shells, and in Section 3, we \ncompare the results of our particle arrangements to a stretched CL arrangement (the most commonly used \\textit{just in time} alternative), a random shell method (where particles\nare randomly distributed in shells), and a Monte Carlo method (particles are randomly distributed in all three dimensions according to a probability distribution) on a variety of metrics \nduring the creation and hydrodynamic relaxation of a two-material, Earth-like object. In Section 4, we give our conclusions.\n\n\\section{Method}\n\nDistributing an arbitrary number of equal mass points inside a sphere according to a density function is not a simple task. We can simplify the problem by reducing our three degrees of \nfreedom to two if we parameterize the radial coordinate according to our density function such that we are left with the problem of building successive shells of particles. At each radial \ncoordinate ($r_i$), the total number of particles in the shell is\n\n", "index": 1, "text": "\\begin{equation}\n N=\\frac{4\\pi}{m_0}\\int_{r_{i-1}}^{r_i} \\rho(r) r^2 dr,\\label{eq:shell} \n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m1\" class=\"ltx_Math\" alttext=\"N=\\frac{4\\pi}{m_{0}}\\int_{r_{i-1}}^{r_{i}}\\rho(r)r^{2}dr,\" display=\"block\"><mrow><mrow><mi>N</mi><mo>=</mo><mrow><mfrac><mrow><mn>4</mn><mo>\u2062</mo><mi>\u03c0</mi></mrow><msub><mi>m</mi><mn>0</mn></msub></mfrac><mo>\u2062</mo><mrow><msubsup><mo largeop=\"true\" symmetric=\"true\">\u222b</mo><msub><mi>r</mi><mrow><mi>i</mi><mo>-</mo><mn>1</mn></mrow></msub><msub><mi>r</mi><mi>i</mi></msub></msubsup><mrow><mi>\u03c1</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><msup><mi>r</mi><mn>2</mn></msup><mo>\u2062</mo><mrow><mo>\ud835\udc51</mo><mi>r</mi></mrow></mrow></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.03761.tex", "nexttext": "\nwhere $N_\\Delta$ is the number of triangles in the unrefined primitive shape, $N_t(n)$ is the number of points in a triangle that has been refined $n$ times, given by\n\n", "itemtype": "equation", "pos": 11876, "prevtext": " \nwhere $m_0$ is the nominal mass per node. What we need now is a method of evenly distributing $N$ particles on a spherical surface. Our method employs two nested, algorithmic distribution schemes for populating shells in a hybrid fashion.\n\n\\subsection{RPR scheme}\n\nThe first half of the method relies on a recursive primitive refinement (RPR) algorithm. The primitives are three dimensional solids with triangular facets (Platonic shapes), \nand we refine on those triangles to create shells of particles at successively higher particle counts. This procedure was described by \\cite{herant1994}. The goal is to \nmaintain equal mass particles in each shell and between shells with roughly equal spacing in all directions between particles and their local neighbor set. We accomplish \nthis via a Catmull-Clark subdivision process \\citep{catmull1978}. As shown in Figure \\ref{fig:triangle}, a single refinement ($n=1$) of one triangle produces four similar \ntriangles by bisecting the $n-1$ triangle edges at their midpoints. This produces three new vertices (4,5,6) that will each be one vertex of a refinement of an adjacent \ntriangle. \n\n\\begin{figure}[ht]\n\\centering\n\\includegraphics[width=0.45\\textwidth]{triangles}\n\\caption{A graphical representation a single-level triangle refinement.}\n\\label{fig:triangle}\n\\end{figure}\n\nThe storage of these new vertices may be handled abstractly (so as not to double-count vertices created through edge bisections), and the particle positions for these vertices are displaced by unit vectors scaled to an appropriate radial displacement after the recursive refinement process has completed. This process can be performed on any primitive polygon built of triangles, such as a tetrahedron or icosahedron.\n\nFor the purposes of creating nested spherical shells with equal mass particles, we first compute the total integrated mass for a given radial density distribution. A user may desire an \narbitrary radial particle resolution, and so this fixes a nominal particle mass for the entire distribution. Each successive radial shell particle count can be computed simply by the shell \nmass divided by the nominal particle mass (as in equation (\\ref{eq:shell})). At this stage, one might desire a sufficiently large number of primitive types so as to fill in any gaps between \nsuccessive refinement levels. Consider for instance refining icosahedra, as is done in Figure \\ref{fig:icosahedron}. At $n=3$ refinement levels, the total number of surface points is already \n642 -- the next lowest shell count using only icosahedra would be 162 at $n=2$. If, in order to maintain equal masses between shells, one desires $\\approx 300$ particles in a shell, there \nexists no refinement level of an icosahedron that will produce particles within $\\sim 2 \\times$ the desired, nominal particle mass. These gaps between successive shell counts for a given \nprimitive shape grow exponentially larger at high refinement levels ($\\sim 2^{2n-1}$).\n\n\\begin{figure}[ht]\n\\centering\n\\includegraphics[width=0.23\\textwidth]{low}\n\n\\includegraphics[width=0.23\\textwidth]{medium}\n\n\\includegraphics[width=0.23\\textwidth]{high}\n\\caption{Icosahedra with $n=0$ refinement (12 points), $n=1$ (42 points), and $n=2$ (162 points), respectively.}\n\\label{fig:icosahedron}\n\\end{figure}\n\n\\begin{figure*}[ht]\n\\centering\n\\includegraphics[width=0.20\\textwidth]{shape1}\n\\includegraphics[width=0.20\\textwidth]{shape2}\n\\includegraphics[width=0.20\\textwidth]{shape3}\n\\includegraphics[width=0.20\\textwidth]{shape4}\n\\caption{The four primitive shapes (in this case, the first four Platonic solids) we use in conjunction with recursive refinement to build particle shells at desired particle counts. \nIn the case of the cube, any two diagonal points on a face can be chosen arbitrarily to form an edge of a triangle such that the primitive $n=0$ shape has 12 faces.}\n\\label{fig:library}\n\\end{figure*}\n\n\nTo combat this problem, we store a library of primitive types (depicted in Figure \\ref{fig:library}) whose refinement particle counts neatly span the counts between successive refinements of the various other \nprimitive types. In order to choose the correct primitive type for a desired shell count, the total number of points on the surface of a primitive shape that has been refined $n$ \ntimes can be calculated by\n\n", "index": 3, "text": "\\begin{equation}\nN_p(n) = N_\\Delta N_t(n) - N_e N_{pe}(n) + N_c,\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E2.m1\" class=\"ltx_Math\" alttext=\"N_{p}(n)=N_{\\Delta}N_{t}(n)-N_{e}N_{pe}(n)+N_{c},\" display=\"block\"><mrow><mrow><mrow><msub><mi>N</mi><mi>p</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mrow><mrow><msub><mi>N</mi><mi mathvariant=\"normal\">\u0394</mi></msub><mo>\u2062</mo><msub><mi>N</mi><mi>t</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mrow><msub><mi>N</mi><mi>e</mi></msub><mo>\u2062</mo><msub><mi>N</mi><mrow><mi>p</mi><mo>\u2062</mo><mi>e</mi></mrow></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>+</mo><msub><mi>N</mi><mi>c</mi></msub></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.03761.tex", "nexttext": "\n$N_e$ is the number of edges of the primitive shape, $N_{pe}(n)$ is the number of points along an edge of a primitive shape that has been refined $n$ times, given by\n\n", "itemtype": "equation", "pos": 12123, "prevtext": "\nwhere $N_\\Delta$ is the number of triangles in the unrefined primitive shape, $N_t(n)$ is the number of points in a triangle that has been refined $n$ times, given by\n\n", "index": 5, "text": "\\begin{equation}\nN_t(n) = 2^{(2n-1)} + 3\\times2^{(n-1)} + 1,\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E3.m1\" class=\"ltx_Math\" alttext=\"N_{t}(n)=2^{(2n-1)}+3\\times 2^{(n-1)}+1,\" display=\"block\"><mrow><mrow><mrow><msub><mi>N</mi><mi>t</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mn>2</mn><mo>\u2062</mo><mi>n</mi></mrow><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></msup><mo>+</mo><mrow><mn>3</mn><mo>\u00d7</mo><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></msup></mrow><mo>+</mo><mn>1</mn></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.03761.tex", "nexttext": "\nand $N_c$ is the number of corners of the primitive shape. Using this formula, we bracket the desired shell particle count between two different shapes at arbitrary refinement levels, \nand we choose the closest shape refinement to the desired count. In practice, this results in particle masses that vary by roughly $\\sim1.2\\times$ at most, and adjacent shell particle \nmass ratios are near unity. Figure \\ref{fig:library} shows the primitive shapes we employ for our RPR scheme that, together with recursive refinement, can be used to construct shells \nof a variety of particle counts. For shells near the center of the sphere (where particle counts are near unity) we simply choose which is closest to the desired particle mass of either \na one, two, or four particle arrangement about the center of the system -- the four particle arrangement being that of a regular tetrahedron.\n\n\\subsection{PS scheme}\n\nThe RPR scheme works very well for low to mid-range shell particle counts, but as the shell counts grow large, the unequal area mapping in the projection of the primitive triangular \nshapes onto a spherical surface introduces artifacts in the final arrangement. To mitigate this problem, we restrict the use of the RPR scheme to a maximum shell particle count of \n162 (icosahedron $n=2$). For shells with higher particle counts, we employ the parameterized spiraling (PS) scheme described by \\cite{saff1997}.\n\nIn the PS scheme, the two principle angles in spherical coordinates are parameterized with a stepping parameter\n\\begin{eqnarray}\nh_k=-1+\\frac{2(k+1)}{(N-1)},&1\\leq k \\leq N,\n\\end{eqnarray}\nsuch that\n\\begin{eqnarray}\n\\theta_k &=& cos^{-1}(h_k),\\\\\n\\phi_k &=& \\left(\\phi_{k-1}+\\frac{3.8}{\\sqrt{N}}\\frac{1}{\\sqrt{1-h_k^2}}\\right),\n\\end{eqnarray}\nwhere $N$ is the total number of particles in the shell and $\\phi_0=\\phi_N=0$. In our notation, $\\theta$ is the polar angle. The choice of 3.8 in the definition of $\\phi_k$ comes from the close packing argument laid out \nin \\cite{vanderwaerden1968}, namely that $(\\phi_k-\\phi_{k-1})\\sqrt{1-h_k^2}\\approx 3.8/\\sqrt{N}$. Figure \\ref{fig:spiral} demonstrates the ability of the PS scheme to \nefficiently distribute large numbers of particles on a spherical surface.\n\n\\begin{figure}[ht]\n\\centering\n\\includegraphics[width=0.35\\textwidth]{spiral}\n\\caption{A PS distribution for a shell count of 800 particles.}\n\\label{fig:spiral}\n\\end{figure}\n\nThe PS scheme is quite adept for large shell particle counts, but falls short for low shell particle counts as the stepping in $\\phi$ becomes chaotic and poorly sampled as \n$N\\to1$. Therefore, it is ideal to combine the RPR and PS schemes at low and high shell particle counts, respectively.\n\nFinally, to avoid producing columns of particles along each of the poles we rotate each shell from both the PS and RPR distributions in $\\phi$ and $\\theta$ with random numbers seeded from the shell particle \ncount. This way, the final arrangements do not have any preferred degrees of freedom and the random rotations are reproducible for a given shell count.\n\n\\begin{figure*}[ht]\n\\centering\nIa)\\includegraphics[width=0.20\\textwidth]{lattice}\nIb)\\includegraphics[width=0.20\\textwidth]{sphere}\nIc)\\includegraphics[width=0.20\\textwidth]{randomshell}\nId)\\includegraphics[width=0.20\\textwidth]{montecarlo}\\\\\nIIa)\\includegraphics[width=0.20\\textwidth]{lattice-final}\nIIb)\\includegraphics[width=0.20\\textwidth]{sphere-final}\nIIc)\\includegraphics[width=0.20\\textwidth]{randomshell-final}\nIId)\\includegraphics[width=0.20\\textwidth]{montecarlo-final}\n\\caption{An example distribution of $\\approx100,000$ particles total with an Earth-like radial profile using a) the stretched lattice, b) the RPR+PS method, c) the \nrandom shell method, and d) the Monte Carlo method. The color scale indicates density. The top images (I) are the initial condition distributions with the assigned particle \ndensities (not the SPH approximated densities), while the bottom images (II) are the final configurations after $t=10,000$ s ($\\approx20$ sound crossing times) of \nhydrodynamical settling. For this test problem, the particle masses ranged $0.9-1.1\\times$ the nominal particle mass in the refined primitives region.}\n\\label{fig:sphere}\n\\end{figure*}\n\n\\section{Results}\n\nA particularly complicated initial condition -- from a hydrodynamical perspective -- to reproduce with any method is that of a rocky planet like the Earth. Rocky planets are built from \nconcentric shells with complicated constitutive laws (equations of state) relating the pressure to the density with abrupt transitions between the shells as the material changes. For this \nreason, the equations of state can be very stiff, such that small density perturbations can result in catastrophically large pressure changes. The specific example of the Earth is primarily \nbuilt of two very different materials; an iron-nickel core (in solid and liquid states, depending on depth), and a predominantly basaltic mantle in a mostly solid state. There is a discontinuity \nin the density function at the interface of these two materials (in fact, the Earth features several density discontinuities, one at each phase transition). As a result, any spherical \nSPH distribution that is built from a 1D profile of this kind will necessarily have a period of instability, during which the planet will oscillate as it settles into a more stable configuration. \nThese oscillations offer useful diagnostics of the degrees of freedom each distribution has, and of the disparity from hydrostatic equilibrium the initial setups have.\n\nFor this paper we test the performance of the RPR+PS method against the stretched CL, random shell, and Monte Carlo methods for a two-material, single-discontinuity density \nfunction, using $\\approx100,000$ particles. In principle any of these distributions could be used as first-pass arrangements for two-stage initial conditions generators. Here we have \nchosen to pass these arrangements through regular hydrodynamical settling, as this step is typically required of two-phase arrangements as well. The presence of the multiple spherical interfaces within \nthe body make this test problem particularly difficult for non-spherically-conformal distributions, and so the results of the stretched CL can be used as an indicator of the performance of most lattice\narrangements for this particular test. The beginning and ending states of \neach of the distributions are shown in Figure \\ref{fig:sphere}. The properties of these materials and the location of the interface are Earth-like, in that the core is composed of iron and \nthe mantle of basalt, with an interface between the two at a depth of 3000 km (half the total radius of the object).  We use the Tillotson equation of state \\citep{tillotson1962} for each of \nthe two materials. Note the Tillotson does not capture the phase transitions within the core and mantle, so both materials in our test problem are single-phased. This means we have a \nsingle discontinuity between the core and mantle, a simpler arrangement than the actual Earth.\n\nWhat is most immediately evident is the voxelization that occurs in the stretched CL arrangement as a result of the poor geometrical mapping of a CL to a \nradial density profile -- in other words, the CL arrangement is not spherically conformal. This results in the core-mantle transition straddling the CL points, leading to a \nstair-stepped interface between the two. The Monte Carlo method is also deficient in this regard as the radial positions of particles are entirely random.\nIn the RPR+PS and the random shell arrangements, each shell has a more-or-less spherical surface. The apparent jumbling of particles in the \ncutout of the initial RPR+PS distribution is merely the result of the random rotations applied to each shell. Seen face-on, it is clear that the RPR+PS distribution is spherically \nconformal. \n\nOne way to measure the uniformity of a spherical initial conditions generator for SPH in the reproduction of an analytical density function is to use the SPH sum density approximation \n(equation \\ref{eq:rhosph}) to find the sampled density approximation, and compare the deviations in density from the analytical function that we intended to reproduce. \n\n", "itemtype": "equation", "pos": 12365, "prevtext": "\n$N_e$ is the number of edges of the primitive shape, $N_{pe}(n)$ is the number of points along an edge of a primitive shape that has been refined $n$ times, given by\n\n", "index": 7, "text": "\\begin{equation}\nN_{pe}(n) = 2^n + 1,\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E4.m1\" class=\"ltx_Math\" alttext=\"N_{pe}(n)=2^{n}+1,\" display=\"block\"><mrow><mrow><mrow><msub><mi>N</mi><mrow><mi>p</mi><mo>\u2062</mo><mi>e</mi></mrow></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>+</mo><mn>1</mn></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.03761.tex", "nexttext": "\nWe then sample radial profiles from these distributions' sum density approximations using a Shepard's function convolution with 100 radial bins equally spaced in $(\\bold{x})$\n\n", "itemtype": "equation", "pos": 20645, "prevtext": "\nand $N_c$ is the number of corners of the primitive shape. Using this formula, we bracket the desired shell particle count between two different shapes at arbitrary refinement levels, \nand we choose the closest shape refinement to the desired count. In practice, this results in particle masses that vary by roughly $\\sim1.2\\times$ at most, and adjacent shell particle \nmass ratios are near unity. Figure \\ref{fig:library} shows the primitive shapes we employ for our RPR scheme that, together with recursive refinement, can be used to construct shells \nof a variety of particle counts. For shells near the center of the sphere (where particle counts are near unity) we simply choose which is closest to the desired particle mass of either \na one, two, or four particle arrangement about the center of the system -- the four particle arrangement being that of a regular tetrahedron.\n\n\\subsection{PS scheme}\n\nThe RPR scheme works very well for low to mid-range shell particle counts, but as the shell counts grow large, the unequal area mapping in the projection of the primitive triangular \nshapes onto a spherical surface introduces artifacts in the final arrangement. To mitigate this problem, we restrict the use of the RPR scheme to a maximum shell particle count of \n162 (icosahedron $n=2$). For shells with higher particle counts, we employ the parameterized spiraling (PS) scheme described by \\cite{saff1997}.\n\nIn the PS scheme, the two principle angles in spherical coordinates are parameterized with a stepping parameter\n\\begin{eqnarray}\nh_k=-1+\\frac{2(k+1)}{(N-1)},&1\\leq k \\leq N,\n\\end{eqnarray}\nsuch that\n\\begin{eqnarray}\n\\theta_k &=& cos^{-1}(h_k),\\\\\n\\phi_k &=& \\left(\\phi_{k-1}+\\frac{3.8}{\\sqrt{N}}\\frac{1}{\\sqrt{1-h_k^2}}\\right),\n\\end{eqnarray}\nwhere $N$ is the total number of particles in the shell and $\\phi_0=\\phi_N=0$. In our notation, $\\theta$ is the polar angle. The choice of 3.8 in the definition of $\\phi_k$ comes from the close packing argument laid out \nin \\cite{vanderwaerden1968}, namely that $(\\phi_k-\\phi_{k-1})\\sqrt{1-h_k^2}\\approx 3.8/\\sqrt{N}$. Figure \\ref{fig:spiral} demonstrates the ability of the PS scheme to \nefficiently distribute large numbers of particles on a spherical surface.\n\n\\begin{figure}[ht]\n\\centering\n\\includegraphics[width=0.35\\textwidth]{spiral}\n\\caption{A PS distribution for a shell count of 800 particles.}\n\\label{fig:spiral}\n\\end{figure}\n\nThe PS scheme is quite adept for large shell particle counts, but falls short for low shell particle counts as the stepping in $\\phi$ becomes chaotic and poorly sampled as \n$N\\to1$. Therefore, it is ideal to combine the RPR and PS schemes at low and high shell particle counts, respectively.\n\nFinally, to avoid producing columns of particles along each of the poles we rotate each shell from both the PS and RPR distributions in $\\phi$ and $\\theta$ with random numbers seeded from the shell particle \ncount. This way, the final arrangements do not have any preferred degrees of freedom and the random rotations are reproducible for a given shell count.\n\n\\begin{figure*}[ht]\n\\centering\nIa)\\includegraphics[width=0.20\\textwidth]{lattice}\nIb)\\includegraphics[width=0.20\\textwidth]{sphere}\nIc)\\includegraphics[width=0.20\\textwidth]{randomshell}\nId)\\includegraphics[width=0.20\\textwidth]{montecarlo}\\\\\nIIa)\\includegraphics[width=0.20\\textwidth]{lattice-final}\nIIb)\\includegraphics[width=0.20\\textwidth]{sphere-final}\nIIc)\\includegraphics[width=0.20\\textwidth]{randomshell-final}\nIId)\\includegraphics[width=0.20\\textwidth]{montecarlo-final}\n\\caption{An example distribution of $\\approx100,000$ particles total with an Earth-like radial profile using a) the stretched lattice, b) the RPR+PS method, c) the \nrandom shell method, and d) the Monte Carlo method. The color scale indicates density. The top images (I) are the initial condition distributions with the assigned particle \ndensities (not the SPH approximated densities), while the bottom images (II) are the final configurations after $t=10,000$ s ($\\approx20$ sound crossing times) of \nhydrodynamical settling. For this test problem, the particle masses ranged $0.9-1.1\\times$ the nominal particle mass in the refined primitives region.}\n\\label{fig:sphere}\n\\end{figure*}\n\n\\section{Results}\n\nA particularly complicated initial condition -- from a hydrodynamical perspective -- to reproduce with any method is that of a rocky planet like the Earth. Rocky planets are built from \nconcentric shells with complicated constitutive laws (equations of state) relating the pressure to the density with abrupt transitions between the shells as the material changes. For this \nreason, the equations of state can be very stiff, such that small density perturbations can result in catastrophically large pressure changes. The specific example of the Earth is primarily \nbuilt of two very different materials; an iron-nickel core (in solid and liquid states, depending on depth), and a predominantly basaltic mantle in a mostly solid state. There is a discontinuity \nin the density function at the interface of these two materials (in fact, the Earth features several density discontinuities, one at each phase transition). As a result, any spherical \nSPH distribution that is built from a 1D profile of this kind will necessarily have a period of instability, during which the planet will oscillate as it settles into a more stable configuration. \nThese oscillations offer useful diagnostics of the degrees of freedom each distribution has, and of the disparity from hydrostatic equilibrium the initial setups have.\n\nFor this paper we test the performance of the RPR+PS method against the stretched CL, random shell, and Monte Carlo methods for a two-material, single-discontinuity density \nfunction, using $\\approx100,000$ particles. In principle any of these distributions could be used as first-pass arrangements for two-stage initial conditions generators. Here we have \nchosen to pass these arrangements through regular hydrodynamical settling, as this step is typically required of two-phase arrangements as well. The presence of the multiple spherical interfaces within \nthe body make this test problem particularly difficult for non-spherically-conformal distributions, and so the results of the stretched CL can be used as an indicator of the performance of most lattice\narrangements for this particular test. The beginning and ending states of \neach of the distributions are shown in Figure \\ref{fig:sphere}. The properties of these materials and the location of the interface are Earth-like, in that the core is composed of iron and \nthe mantle of basalt, with an interface between the two at a depth of 3000 km (half the total radius of the object).  We use the Tillotson equation of state \\citep{tillotson1962} for each of \nthe two materials. Note the Tillotson does not capture the phase transitions within the core and mantle, so both materials in our test problem are single-phased. This means we have a \nsingle discontinuity between the core and mantle, a simpler arrangement than the actual Earth.\n\nWhat is most immediately evident is the voxelization that occurs in the stretched CL arrangement as a result of the poor geometrical mapping of a CL to a \nradial density profile -- in other words, the CL arrangement is not spherically conformal. This results in the core-mantle transition straddling the CL points, leading to a \nstair-stepped interface between the two. The Monte Carlo method is also deficient in this regard as the radial positions of particles are entirely random.\nIn the RPR+PS and the random shell arrangements, each shell has a more-or-less spherical surface. The apparent jumbling of particles in the \ncutout of the initial RPR+PS distribution is merely the result of the random rotations applied to each shell. Seen face-on, it is clear that the RPR+PS distribution is spherically \nconformal. \n\nOne way to measure the uniformity of a spherical initial conditions generator for SPH in the reproduction of an analytical density function is to use the SPH sum density approximation \n(equation \\ref{eq:rhosph}) to find the sampled density approximation, and compare the deviations in density from the analytical function that we intended to reproduce. \n\n", "index": 9, "text": "\\begin{equation}\n  {\\rho^{\\mbox{\\tiny SPH}}}(\\bold{x}) \\equiv \\sum_j m_j W_i(\\bold{x})\n  \\label{eq:rhosph}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E5.m1\" class=\"ltx_Math\" alttext=\"{\\rho^{\\mbox{\\tiny SPH}}}(\\bold{x})\\equiv\\sum_{j}m_{j}W_{i}(\\bold{x})\" display=\"block\"><mrow><mrow><msup><mi>\u03c1</mi><mtext mathsize=\"71%\">SPH</mtext></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\bold</mtext></merror><mo>\u2062</mo><mi>x</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2261</mo><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mi>j</mi></munder><mrow><msub><mi>m</mi><mi>j</mi></msub><mo>\u2062</mo><msub><mi>W</mi><mi>i</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\bold</mtext></merror><mo>\u2062</mo><mi>x</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.03761.tex", "nexttext": "\nwhere $V_j$ is the particle volume ($m_j/\\rho_j$), with $\\rho_j$ coming from the sum density approximations, and $W_j$ is the SPH kernel function. \nUsing this sampling method ensures that any deviations from the analytical expectation \n($\\delta(\\bold{x}) = \\rho_0(\\bold{x})-\\rho(\\bold{x})$) are due to non-unitary partitions of volume and not to the SPH kernel. Furthermore, as SPH distributions under the sum density \napproximation will err by of order a factor of two near surfaces, we constrain this portion of our analysis to the regions of our Earth model that are several particles distant from any \nsurface (either between the core-mantle or at the actual outer surface) so as not to saturate the calculation of the density deviations with deviations that are an unavoidable result of \nthe SPH method. Therefore we have excised the outer surface of our Earth model and also the core-mantle boundary in the calculation of $\\delta(\\bold{x})$. The top panel of Figure \n\\ref{fig:fft} demonstrates the region of interest for this analysis. Note that the SPH approximated densities differ from the assigned particle densities in Figure \\ref{fig:sphere}.\n\n\\begin{figure}[ht]\n\\centering\n\\includegraphics[width=0.40\\textwidth]{fft}\n\\caption{\n{\\bf Top panel:} The Shepard's function approximations of the density in each of the tested distributions compared to the analytical expectation (dashed line). \n{\\bf Bottom panel:} The power spectrum of the density deviations from analytical expectation.\n}\n\\label{fig:fft}\n\\end{figure}\n\nIn the bottom panel of Figure \\ref{fig:fft}, we show a power spectrum of the Fourier transform of $\\delta(\\bold{x})$ for each of our tested distributions. The two randomly seeded methods,\nthe Monte Carlo method and the random shell method, have the greatest power across the entire spectrum, while the RPR+PS and CL arrangements perform similarly for this metric, \nwith the CL distribution having approximately twice as much power in the irreducible error that is on the scale of the entire object. \n\nIn evolving these objects the well known surface error in the SPH mass density summation (equation \\ref{eq:rhosph}) would be catastrophic for such a stiff equation of state. \nTherefore during our hydrodynamical settling we time integrate the density\nbased on the SPH continuity equation, making the density evolution an initial value problem which can be integrated all the way to the surface. In the final arrangements after $\\approx20$ \nsound crossing times -- also shown in Figure \\ref{fig:sphere} -- it is evident in the CL distribution that the grid-like nature of \nthe initial setup has not entirely vanished. In addition, there is more mixing of materials across the core-mantle boundary than in the RPR+PS distribution. \n\nTo quantify the amount of mixing we define the location below which 99\\% of the iron mass resides as the maximum radius of the core, and a second location above which 99\\% of the \nbasalt resides as the minimum radius of the mantle. The total mass of material between these locations can then be taken as a measure of the amount of mixing across the interface. \nIn the case of the CL distribution this interface has a width of $\\approx160$ km, across which $\\approx2.5\\times10^{23}$ kg has mixed. For the random shell distribution \n$3.5\\times10^{23}$ kg have mixed across a 250 km region, and for the Monte Carlo distribution $4.9\\times10^{23}$ kg have mixed across a 377 km region.\nFor the RPR+PS distribution this interface region is \nonly $15$ km wide with $7.4\\times10^{22}$ kg of mixed material. The disparity here is most likely due to the conformity of the core-mantle boundary. For the CL distribution the\nstair-stepping nature of this boundary results in unphysical, turbulent mixing along the non-cardinal directions. The Monte Carlo distribution should also suffer from this problem. In the \ncase of the random shell distribution (where the boundary is spherically conformal) the distribution of particles is highly non-isotropic, and this too results in turbulent mixing.\n\nWe plot the kinetic energy over time of the entire body in Figure \\ref{fig:settling}. It is clear that the initial RPR+PS setup is nearer to equilibrium than any of the other \nsetups tested here, most likely due to the interface remaining spherically symmetric as opposed to voxelized as is the case for the stretched CL. Moreover, the $e$-folding \ntime for the oscillations is slightly shorter in the RPR+PS distribution, resulting in a slightly faster convergence rate. \n\n\\begin{figure}[ht]\n\\centering\n\\includegraphics[width=0.40\\textwidth]{timeToSettle}\n\\caption{The change in kinetic energy over time as each of the distributions undergoes gravitational settling. The RPR+PS method performs better than the other distributions on this metric \nwith smaller peak amplitudes and a slightly faster oscillatory decay rate (\\textit{i.e.} $e$-folding time \n$\\delta t_{\\rm RPR+PS}\\approx1500, \\delta t_{\\rm CL} \\approx 1700, \\delta t_{\\rm shell} \\approx 1600,\\delta t_{\\rm monte carlo} \\approx 1750$).}\n\\label{fig:settling}\n\\end{figure}\n\nAnother important metric is the oscillatory power in each of the harmonic modes from these methods. To measure this, we perform a spherical harmonic decomposition of the velocity field \nat one-quarter-radius at peak velocity amplitude after two oscillatory periods. This is ample enough time for the hydrodynamics to distribute oscillatory power into the higher harmonics \ncommensurate with the degrees of freedom of the initial distribution. For a perfectly spherically symmetric distribution, only the $l=0$ mode should have any oscillatory power. As is \nshown in Figure \\ref{fig:harmonics}, the RPR+PS arrangement has considerably less power in the higher modes than do the others, \\textit{i.e.}\\ the oscillatory motion in the RPR+PS \narrangement is much more spherically symmetric.\n\n\\begin{figure}[ht]\n\\centering\n\\includegraphics[width=0.40\\textwidth]{harmonics}\n\\caption{The oscillatory power $P_l$ (summed over all $m$) normalized to $P_{3}=1$ for the monte carlo distribution on a linear scale in each of the first four harmonic modes \n(neglecting $l=0$) for each of the tested distribution methods in this paper. }\n\\label{fig:harmonics}\n\\end{figure}\n\nIn the case of the RPR+PS distribution the initial configuration is conformal with spherical geometry, and so the power in non-spherical motions (higher modes) is more-or-less equal. \nBy contrast in the CL distribution, the lack of spherical conformity in the initial distribution generates extra power in the higher modes. This results in deleterious non-spherical motions \nand turbulence. The random shell and Monte Carlo methods fare even worse as the random displacements away from equal volumes for all particles introduces extra noise into the \ndensity field.\n\nFor the random shell method the extra noise introduced into each shell tends to overwhelm any benefit derived from the spherical conformity of the shells, and the Monte Carlo method is \nsimply too noisy everywhere to use as is. This is well known, and such Monte Carlo methods are best used as the first stage of a two-stage relaxation method such as the gravitational glass.\nFor the CL distribution the combination of the harmonic power distribution, the oscillatory magnitude and decay rate, and the turbulent mixing \nat the core-mantle boundary argues against its use for problems where sphericity is important, as in a high pressure, self-gravitating object like the Earth.  The results of the RPR+PS \ndistribution, on the other hand, demonstrate its efficacy to handle these sorts of problems, mainly due to its spherical conformity by construction, and to its low-noise equipartition of area \non surfaces.\n\n\\section{Conclusion}\n\nThe recursive primitive shape refinement in conjunction with the parameterized spiral algorithm (RPR+PS) described here offers a rapid and easily extensible way to create robust, \nspherical initial conditions in SPH for a variety of applications. Since it doesn't rely on any physics (as in two-stage generators), this method is readily adaptable as the first step in many \nSPH application scripts, obviating the need to create and store libraries of spherical particle arrangements. Alternatively, the arrangements generated by this method provide a clean initial \nbasis for GG or WVT type generators as they are not plagued by random noise or aspherical geometries. Consequently, the time-to-convergence for two-stage generators ought to be \ngreatly shorted, reducing computational expense.\n\nThe RPR+PS method has already been employed in the generation of initial conditions for a variety of astrophysical problems at Lawrence Livermore National Laboratories, featured in \nforthcoming papers. Examples include the construction of post-main-sequence stars in \\cite{gray2016} and the construction of initial conditions for a moon-forming simulation in \n\\cite{raskin2016} (using a more sophisticated equation of state than that used here), as well as various asteroid mitigation simulation tests. In each of these simulations, spherical \nconformity and radially consistent deformation are essential, and the RPR+PS method has been valuable in that regard.\n\nThe entirety of this particle distribution method was written in python as a part of the open source SPH code, \\textsc{SPHERAL++}, available for download at sourceforge and can be used \nas a particle generator for any SPH code.\n\nThis work was performed under the auspices of the U.S. Department of Energy by Lawrence Livermore National Laboratory under Contract DE-AC52-07NA27344, and all tests and \nsimulations were performed with computing resources provided by Lawrence Livermore National Labs, Livermore, CA. We are grateful for the geophysical consultation of Naor Movshovitz \nin the Department of Earth and Planetary Sciences at UC Santa Cruz.\n\n\\begin{thebibliography}{24}\n\\expandafter\\ifx\\csname natexlab\\endcsname\\relax\\def\\natexlab#1{#1}\\fi\n\\setlength{\\itemsep}{0.0\\baselineskip}\n\n\\bibitem[{Bate(1998)}]{bate1998}\nBate, M.~R. 1998, The Astrophysical Journal Letters, 508, L95\n\n\\bibitem[{Benz {et~al.}(1987)Benz, Slattery, \\& Cameron}]{benz1987}\nBenz, W., Slattery, W., \\& Cameron, A. 1987, Icarus, 71, 30\n\n\\bibitem[{Catmull \\& Clark(1978)Catmull \\& Clark}]{catmull1978}\nCatmull, E. \\& Clark, J. 1978, Computer-Aided Design, 10, 350\n\n\\bibitem[{Davies {et~al.}(1991)Davies, Benz, \\& Hills}]{davies1991}\nDavies, M., Benz, W., \\& Hills, J. 1991, The Astrophysical Journal, 381, 449\n\n\\bibitem[{Davies {et~al.}(1992)Davies, Benz, \\& Hills}]{davies1992}\n---. 1992, The Astrophysical Journal, 401, 246\n\n\\bibitem[{Diehl {et~al.}(2012)Diehl, Rockefeller, Fryer, Riethmiller, \\&\n  Statler}]{diehl2012}\nDiehl, S., Rockefeller, G., Fryer, C.~L., Riethmiller, D., \\& Statler, T.~S.\n  2012, arXiv preprint arXiv:1211.0525\n\n\\bibitem[{Fryer \\& Warren(2002)Fryer \\& Warren}]{fryer2002}\nFryer, C.~L. \\& Warren, M.~S. 2002, The Astrophysical Journal Letters, 574, L65\n\n\\bibitem[{Fryer \\& Young(2007)Fryer \\& Young}]{fryer2007late}\nFryer, C.~L. \\& Young, P.~A. 2007, The Astrophysical Journal, 659, 1438\n\n\\bibitem[{Gingold \\& Monaghan(1977)Gingold \\& Monaghan}]{gingold1977}\nGingold, R.~A. \\& Monaghan, J.~J. 1977, Monthly notices of the royal\n  astronomical society, 181, 375\n\n\\bibitem[{Gray \\& Raskin(2016)Gray \\& Raskin}]{gray2016}\nGray, W.~J. \\& Raskin, C.~D. 2016, in prep\n\n\\bibitem[{{Hansen} {et~al.}(2007){Hansen}, {Agertz}, {Joyce}, {Stadel},\n  {Moore}, \\& {Potter}}]{hansen2007}\n{Hansen}, S.~H., {Agertz}, O., {Joyce}, M., {Stadel}, J., {Moore}, B., \\&\n  {Potter}, D. 2007, \\apj, 656, 631\n\n\\bibitem[{Herant(1994)}]{herant1994}\nHerant, M. 1994, Memorie della Societa Astronomica Italiana, 65, 1013\n\n\\bibitem[{Hungerford {et~al.}(2003)Hungerford, Fryer, \\&\n  Warren}]{hungerford2003}\nHungerford, A.~L., Fryer, C.~L., \\& Warren, M.~S. 2003, The Astrophysical\n  Journal, 594, 390\n\n\\bibitem[{Kitsionas \\& Whitworth(2002)Kitsionas \\& Whitworth}]{kitsionas2002}\nKitsionas, S. \\& Whitworth, A. 2002, Monthly Notices of the Royal Astronomical\n  Society, 330, 129\n\n\\bibitem[{Lloyd(1982)}]{lloyd1982}\nLloyd, S.~P. 1982, Information Theory, IEEE Transactions on, 28, 129\n\n\\bibitem[{Lucy(1977)}]{lucy1977}\nLucy, L.~B. 1977, The astronomical journal, 82, 1013\n\n\\bibitem[{Monaghan \\& Lattanzio(1991)Monaghan \\& Lattanzio}]{monaghan1991}\nMonaghan, J.~J. \\& Lattanzio, J.~C. 1991, The Astrophysical Journal, 375, 177\n\n\\bibitem[{Rasio \\& Lombardi(1999)Rasio \\& Lombardi}]{rasio1999}\nRasio, F.~A. \\& Lombardi, J.~C. 1999, Journal of Computational and Applied\n  Mathematics, 109, 213\n\n\\bibitem[{Raskin \\& Syal(2016)Raskin \\& Syal}]{raskin2016}\nRaskin, C.~D. \\& Syal, M.~B. 2016, in prep\n\n\\bibitem[{Rosswog {et~al.}(2008)Rosswog, Ramirez-Ruiz, Hix, \\&\n  Dan}]{rosswog2008}\nRosswog, S., Ramirez-Ruiz, E., Hix, W.~R., \\& Dan, M. 2008, Computer Physics\n  Communications, 179, 184 , special issue based on the Conference on\n  Computational Physics 2007CCP 2007\n\n\\bibitem[{Saff \\& Kuijlaars(1997)Saff \\& Kuijlaars}]{saff1997}\nSaff, E.~B. \\& Kuijlaars, A.~B. 1997, The mathematical intelligencer, 19, 5\n\n\\bibitem[{Tillotson(1962)}]{tillotson1962}\nTillotson, J.~H. 1962, Metallic equations of state for hypervelocity impact,\n  Tech. rep., DTIC Document\n\n\\bibitem[{Van~der Waerden \\& Habicht(1968)Van~der Waerden \\&\n  Habicht}]{vanderwaerden1968}\nVan~der Waerden, B.~L. \\& Habicht, H. 1968, Erwachende Wissenschaft\n  (Birkh{\\\"a}user Basel)\n\n\\bibitem[{Wang \\& White(2007)Wang \\& White}]{wang2007}\nWang, J. \\& White, S.~D. 2007, Monthly Notices of the Royal Astronomical\n  Society, 380, 93\n\n\\end{thebibliography}\n\n\n", "itemtype": "equation", "pos": 20942, "prevtext": "\nWe then sample radial profiles from these distributions' sum density approximations using a Shepard's function convolution with 100 radial bins equally spaced in $(\\bold{x})$\n\n", "index": 11, "text": "\\begin{equation}\n  \\rho(\\bold{x}) \\approx \\frac{\\Sigma V_j{\\rho^{\\mbox{\\tiny SPH}}}_j W_j(\\bold{x})}{\\Sigma V_jW_j(\\bold{x})},\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E6.m1\" class=\"ltx_Math\" alttext=\"\\rho(\\bold{x})\\approx\\frac{\\Sigma V_{j}{\\rho^{\\mbox{\\tiny SPH}}}_{j}W_{j}(%&#10;\\bold{x})}{\\Sigma V_{j}W_{j}(\\bold{x})},\" display=\"block\"><mrow><mrow><mrow><mi>\u03c1</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\bold</mtext></merror><mo>\u2062</mo><mi>x</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2248</mo><mfrac><mrow><mi mathvariant=\"normal\">\u03a3</mi><mo>\u2062</mo><msub><mi>V</mi><mi>j</mi></msub><mo>\u2062</mo><mmultiscripts><mi>\u03c1</mi><none/><mtext mathsize=\"71%\">SPH</mtext><mi>j</mi><none/></mmultiscripts><mo>\u2062</mo><msub><mi>W</mi><mi>j</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\bold</mtext></merror><mo>\u2062</mo><mi>x</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mi mathvariant=\"normal\">\u03a3</mi><mo>\u2062</mo><msub><mi>V</mi><mi>j</mi></msub><mo>\u2062</mo><msub><mi>W</mi><mi>j</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><merror class=\"ltx_ERROR undefined undefined\"><mtext>\\bold</mtext></merror><mo>\u2062</mo><mi>x</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mfrac></mrow><mo>,</mo></mrow></math>", "type": "latex"}]