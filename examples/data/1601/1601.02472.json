[{"file": "1601.02472.tex", "nexttext": "\nSo the blocks of the partition are the equivalence classes:\n", "itemtype": "equation", "pos": 12667, "prevtext": "\n\n\\title{An Application-Level Dependable Technique\\\\\nfor Farmer-Worker Parallel Programs}\n\n\\author{Vincenzo De Florio, Geert Deconinck, Rudy Lauwereins}\n\n\\institute{Katholieke Universiteit Leuven\\\\\nElectrical Engineering Dept - ACCA\\\\\nKard. Mercierlaan 94 -- B-3001 Heverlee -- Belgium}\n\n\\maketitle\n\n\\begin{abstract} \nAn application-level technique is described for\nfarmer-wor\\-ker parallel applications which allows a worker to be added\nor removed from the computing farm at any moment of the run time without\naffecting the overall outcome of the computation.  The technique is based on\nuncoupling the farmer from the workers by means of a separate module which\nasynchronously feeds these latter with new\n``units of work'' on an on-demand basis, \n\n\n\n\nand on a\nspecial feeding strategy based on bookkeeping the status of each work-unit.\nAn augmentation of the LINDA model is finally proposed to exploit\nthe bookkeeping algorithm for tuple management.  \n\\end{abstract} \n\n\n\\section{Introduction} \n\n\nParallel computing is nowadays the only technique that can be used in order\nto achieve the impressive computing power needed to solve a number of\nchallenging problems; as such, it is being employed by an ever growing\ncommunity of users in spite of what we feel as two main disadvantages,\nnamely:\n\n\\begin{enumerate}\n\\item harder-to-use programming models, programming techniques and \ndevelopment tools---if any,---which sometimes translate into programs\nthat don't match as efficiently as expected with the underlying\nparallel hardware, and\n\\item the inherently lower level of dependability that characterizes\nany such parallel hardware i.e., a higher probability for events like\na node's permanent or temporary failure.\n\\end{enumerate}\n\nA real, effective exploitation of any given parallel computer\nasks for solutions which take into a deep account the above \noutlined problems.\n\nLet us consider for example the synchronous farmer-worker algorithm i.e., a\nwell-known model for structuring data-parallel applications: a master\nprocess, namely the farmer, feeds a pool of slave processes, called\nworkers, with some units of work;  then polls them until they return their\npartial results which are eventually recollected and saved. Though quite\nsimple, this scheme may give good results, especially in homogeneous,\ndedicated environments. \n\nBut how does this model react to events like a failure of a worker, or more\nsimply to a worker's performance degradation due e.g., to the exhaustion\nof any vital resource?\nWithout substantial modifications, this scheme is not able to cope with these\nevents---they would seriously affect the whole application or its overall\nperformances, regardless the high degree of hardware redundancy \nimplicitly available in any parallel system.\nThe same unflexibility prevents a failed worker to re-enter \nthe computing farm once it has regained the proper operational state.\n\nAs opposed to this synchronous structuring, it is possible for example to\nimplement the farmer-worker model by de-coupling the farmer from the workers\nby means of an intermediate module, a dispatcher which asynchronously\nfeeds these latter and supplies them with new units of work on an\non-demand basis.\nThis strategy guarantees some sort of a dynamic balancing of the workload\neven in heterogeneous, distributed environments, thus\nexhibiting a higher matching to the parallel hardware. The Live Data Structure\ncomputational paradigm, known from the LINDA context, makes this\nparticularly easy to set up (see for example~\\cite{CaGe1,CaGe2,pvmlinda}).\n\nWith this approach it is also possible to add a new worker at run-time\nwithout any notification to both the farmer and the intermediate\nmodule---the newcomer will simply generate additional, non-distinguishable\nrequests for work.  But again, if a worker fails or its performances\ndegrade, the whole application may fail or its overall outcome be affected\nor seriously delayed.  This is particularly important when one considers\nthe inherent loss in dependability of any parallel (i.e., replicated)\nhardware. \n\nNext sections introduce and discuss a modification to the above sketched\nasynchronous scheme, which inherits the advantages of its parent and offers\nnew ones, namely:  \n\n\\begin{itemize} \n\\item it allows a non-solitary,\ntemporarily slowed down worker to be left out of the processing farm as\nlong as its performance degradation exists, and \n\\item it allows a non-solitary worker which has been permanently affected by\nsome fault to be definitively removed from the farm, \n\\end{itemize} \nboth of them without affecting the overall outcome of the computation,\nand dynamically spreading the workload among the active processors in a way\nthat results in an excellent match to various different MIMD\narchitectures.\n\n\n\\section{The Technique}\n\n\nFor the purpose of describing the technique we define the following\nscenario:  a MIMD machine disposes of $n+2$ identical ``nodes'' ($n>0$), or\nprocessing entities, connected by some communication line. On each node a\nnumber of independent sequential processes are executed on a time-sharing\nbasis.  A message passing library is available for sending and receiving\nmessages across the communication line. A synchronous communication\napproach is used: a sender blocks until the intended receiver gets the\nmessage. A receiver blocks waiting for a message from a specific sender, or\nfor a message from a number of senders. When a message arrives, the\nreceiver is awaken and is able to receive that message and to know the \nidentity of the sender.  Nodes are numbered from 0 to $n+1$.  Node 0 is\nconnected to an input line and node $n+1$ is connected to an output line. \n\n\\begin{itemize}\n\\item Node 0 runs:\n\\begin{itemize}\n\\item a Farmer process, connected by the input line to an external\nproducer device. From now on we consider a camera as the producer device.\nA control line wires again the Farmer to the camera, so that this latter can\nbe commanded to produce new data and eventually send this data across the\ninput line;\n\\item a Dispatcher process, yet to be described.\n\\end{itemize}\n\n\\item Node $n+1$ runs a Collector process, to be described later on,\nconnected by the output line to an external\nstorage device e.g., a disk;\n\n\\item Each of the nodes from 1 to $n$ is purely devoted to the execution \nof one instance of the Worker process. Each Worker is connected\nto the Dispatcher and to the Collector processes.\n\\end{itemize}\n\\begin{figure}\n\\psfig{file=schema.ps,width=4.9in}\n\\caption{Summary of the interactions among the processes.}\\label{f1}\n\\end{figure}\n\n\n\\subsection{Interactions Between the Farmer and the Dispatcher}\n\n\n\\label{iFS}\nOn demand of the Farmer process, the camera sends it an input image.\nOnce it has received an image, the Farmer performs a predefined,\nstatic data decomposition, creating $m$ equally sized sub-images, or blocks.\nBlocks are numbered from 1 to $m$, and are represented by variables\n$b_i, 1\\le i\\le m$. \n\nThe Farmer process interacts exclusively with the camera and with the\nDispatcher process. \n\n\\begin{itemize}\n\\item\nThree classes of messages can be sent from the Farmer process to the\nDispatcher (see Fig.~\\ref{f1}): \n\n\\begin{enumerate}\n\\item a {\\tt NEW\\_RUN} message, which means:\n``a new bunch of data is available'';\n\\item a {\\tt STOP} message, which means that no more input\nis available so the whole process has to be terminated;\n\\item a couple $(k,b_k), 1\\le k\\le m$ i.e., an integer which identifies a particular block\n(it will be referred from now on as a ``block-id''), followed by the block\nitself.\n\\end{enumerate}\n\n\\item\nThe only type of message that the Dispatcher process sends to the Farmer\nprocess is a block-id i.e., a single integer in the range $\\{1,\\dots,m\\}$\nwhich expresses the information that a certain block has been fully processed\nby a Worker and recollected by the Collector (see~\\S\\ref{iWC}.)\n\\end{itemize}\n\nAt the other end of the communication line, the Dispatcher is ready to\nprocess a number of events triggered by message arrivals.  For example,\nwhen a class-3 message comes in, the block is stored into a work buffer\nas follows:\n\n\\begin{tabbing}\ntab \\= tab \\= tab \\= tab \\= tab \\kill\n\\> {\\tt receive} $(k, b_k)$   \\\\\n\\> $s_k \\leftarrow$ {\\tt DISABLED} \\\\\n\\> $w_k \\leftarrow b_k$      \n\\end{tabbing}\n\n\\noindent\n(Here, {\\tt receive} is the function for receiving an incoming message,\n$\\vec{s}$ is a vector of $m$ integers pre-initialized to {\\tt DISABLED}, \nwhich represents some status information that will be described later on, and\n$\\vec{w}$ is a vector of ``work buffers'', i.e., bunches of memory able to\nstore any block.\n{\\tt DISABLED} is an integer which is not in the set $\\{1,\\dots,m\\}$.\nThe ``$\\leftarrow$'' sign is the assignment operator.)\n\n\nAs the Farmer process sends a class-1 message, that is, a {\\tt NEW\\_RUN}\nsignal, the Dispatcher processes that event as follows: \n\n\\begin{tabbing}\ntab \\= tab \\= tab \\= tab \\= tab \\kill\n\\>  $\\vec{s} \\leftarrow 0$   \\\\\n\\>  {\\tt broadcast RESUME}\n\\end{tabbing}\n\nthat is, it zeroes each element of $\\vec{s}$ and then broadcasts\nthe {\\tt RESUME} message to the whole farm.\n\n\\vspace*{2pt}\n\nWhen the first image arrives to the Farmer\nprocess, it produces a series $(b_i)_{1\\le i\\le m}$, and then\na sequence of messages $(i,b_i)_{1\\le i\\le m}$.  Finally, the Farmer\nsends a {\\tt NEW\\_RUN} message. \n\nStarting from the second image, and while there are images to process\nfrom the camera,\nthe Farmer performs the image decomposition in advance, thus creating\na complete set of $(k, b_k)$ couples. These couples are then sent to the \nDispatcher on an on-demand basis: as soon as block-id $i$ comes in, couple\n$(i, b_i)$ is sent out. This is done for anticipating the transmission of\nthe couples belonging to the next run of the computation.\nWhen eventually the last block-id of a certain run has been received,\na complete set of ``brand-new'' blocks is already in the hands of \nthe Dispatcher; at that point, sending the one {\\tt NEW\\_RUN} message\nwill simultaneously enable all blocks.\n\n\n\n\\subsection{Interactions Between the Dispatcher and the Workers}\n\n\n\\label{iSW}\nThe Dispatcher interacts with every instance of the Worker\nprocess.\n\n\\begin{itemize}\n\\item\nFour classes of messages can be sent from the Dispatcher to the Workers\n (see Fig.~\\ref{f1}):\n\\begin{enumerate}\n\\item a {\\tt SLEEP} message, which sets the receiver into a wait condition;\n\\item a {\\tt RESUME} message, to get the receiver out of the waiting state;\n\\item a {\\tt STOP} message, which makes the Worker terminate;\n\\item a $(k,w)$ couple, where $w$ represents the input\ndata to be elaborated.\n\\end{enumerate}\n\n\\item\nWorker $j$, $1\\le j\\le n$, interacts with the Dispatcher by sending it \nits worker-id message, i.e., the $j$ integer. This happens when\nWorker $j$ has finished dealing with a previously sent $w$ working buffer\nand is available for a new $(k,w)$ couple to work with.\n\\end{itemize}\n\nIn substance, Worker $j$ continuously repeats the following loop:\n\n\\begin{tabbing}\ntab \\= tab \\= tab \\= tab \\= tab \\kill\n\\> {\\tt send $j$ to Dispatcher}                  \\\\\n\\> {\\tt receive {\\em message\\/} from Dispatcher} \\\\\n\\> {\\tt process {\\em message\\/} }\n\\end{tabbing}\n\nClearly, {\\tt send} transmits a message.\nThe last instruction, in dependence with the class\nof the incoming message, results in a number of different\noperations:\n\n\\begin{itemize}\n\\item if the message is a {\\tt SLEEP}, the Worker waits until the arrival \nof a {\\tt RESUME} message, which makes it resume the loop, or the arrival\nof any other message, which means that an error has occurred;\n\\item if it is a {\\tt STOP} message, the Worker breaks the loop and exits\nthe farm;\n\\item if it is a $(k,w)$ couple, the Worker starts computing\nthe value $f(w)$, where $f$ is some user-defined function e.g.,\nan edge detector.\nIf a {\\tt RESUME} event is raised during\nthe computation of $f$, that computation is immediately abandoned and\nthe Worker restarts the loop.\nContrarywise, the output couple $(k, f(w))$ is sent to the Collector process.\n\\end{itemize}\n\nWhen the Dispatcher gets a $j$ integer from Worker $j$,\nits expected response is a new $(k,w)$ couple, or a {\\tt SLEEP}.\nWhat rules in this context is the $\\vec{s}$ vector---if all entries\nof $\\vec{s}$ are {\\tt DISABLED}, then a {\\tt SLEEP} message is sent to Worker $j$.\nOtherwise, an entry is selected among those with the minimum non-negative\nvalue, say entry $l$, and a $(l, b_l)$ message is then sent as a response.\n$s_l$ is finally incremented by 1.\n\nMore formally, considered set\n\\( S=\\{ s \\in \\vec{s} \\,|\\, s\\neq {\\tt DISABLED}\\}, \\)\nif $S$ is non-empty it is possible to partition $S$ according to the\nequivalence relation $R$ defined as follows:\n", "index": 1, "text": "\n\\[ \\forall (a,b)\\in S\\times S : {\\hbox{${a}R\\,{b}$}} \\Leftrightarrow s_a = s_b. \\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"\\forall(a,b)\\in S\\times S:{\\hbox{${a}R\\,{b}$}}\\Leftrightarrow s_{a}=s_{b}.\" display=\"block\"><mrow><mrow><mrow><mrow><mo>\u2200</mo><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2208</mo><mrow><mi>S</mi><mo>\u00d7</mo><mi>S</mi></mrow></mrow><mo>:</mo><mrow><mi>a</mi><mo>\u2062</mo><mpadded width=\"+1.7pt\"><mi>R</mi></mpadded><mo>\u2062</mo><mi>b</mi></mrow><mo>\u21d4</mo><mrow><msub><mi>s</mi><mi>a</mi></msub><mo>=</mo><msub><mi>s</mi><mi>b</mi></msub></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.02472.tex", "nexttext": "\nNow, first we consider\n", "itemtype": "equation", "pos": 12810, "prevtext": "\nSo the blocks of the partition are the equivalence classes:\n", "index": 3, "text": "\n\\[ [x] {\\mbox{\\ $\\stackrel{\\mbox{\\tiny def}}{=}$\\ }} \\{ s\\in S \\,|\\, \\exists y\\in\\{1\\dots m\\} \\ni' \n\t      (s = s_y) \\wedge (s_y = x) \\}. \\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"[x]{\\mbox{\\ $\\stackrel{\\mbox{\\tiny def}}{=}$\\ }}\\{s\\in S\\,|\\,\\exists y\\in\\{1%&#10;\\dots m\\}\\ni^{\\prime}(s=s_{y})\\wedge(s_{y}=x)\\}.\" display=\"block\"><mrow><mrow><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo></mrow><mrow><mtext>\u00a0</mtext><mover><mo movablelimits=\"false\">=</mo><mtext mathsize=\"71%\">def</mtext></mover><mtext>\u00a0</mtext></mrow><mrow><mo stretchy=\"false\">{</mo><mi>s</mi><mo>\u2208</mo><mpadded width=\"+1.7pt\"><mi>S</mi></mpadded><mo rspace=\"4.2pt\" stretchy=\"false\">|</mo><mo>\u2203</mo><mi>y</mi><mo>\u2208</mo><mrow><mo stretchy=\"false\">{</mo><mn>1</mn><mi mathvariant=\"normal\">\u2026</mi><mi>m</mi><mo stretchy=\"false\">}</mo></mrow><msup><mo>\u220b</mo><mo>\u2032</mo></msup><mrow><mo stretchy=\"false\">(</mo><mi>s</mi><mo>=</mo><msub><mi>s</mi><mi>y</mi></msub><mo stretchy=\"false\">)</mo></mrow><mo>\u2227</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>s</mi><mi>y</mi></msub><mo>=</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"false\">}</mo></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.02472.tex", "nexttext": "\nthen we choose $l\\in [a]$ in any way e.g., pseudo-randomly; finally,\nmessage $(l, b_l)$ is sent to Worker $j$, \n$s_l$ is incremented, and the partition is reconfigured accordingly.\nIf $S$ is the empty set, a {\\tt SLEEP} message is generated.\n\nIn other words, entry $s_i$ when greater than or equal to 0 represents\nsome sort of a priority identifier (the lower the value, the higher \nthe priority for block $b_i$). The block to be sent to a requesting\nWorker process is always selected among those with the highest priority;\nafter the selection, $s_i$ is updated incrementing its value by 1.\nIn this way, the content of $s_i$ represents\nthe degree of ``freshness'' of block $b_i$: it substantially counts\nthe number of times it has been picked up by a Worker process;\nfresher blocks are always preferred. \n\nAs long as there are ``brand-new'' blocks i.e., blocks with a freshness\nattribute of 0, these are the blocks which are selected and distributed. \nNote that this means that as long as the above condition is true,\neach Worker deals with a different unit of work; on the contrary,\nas soon as the last brand-new block is distributed, the model admits \nthat a same block may be assigned to more than one Worker.\n\nThis is tolerated up to a certain threshold value; if any $s_i$ becomes\ngreater than that value, an alarm event is raised---too many workers\nare dealing with the same input data, which might mean that they are\nall affected by the same problem e.g., a software bug resulting in an\nerror when $b_i$ is being processed. We won't deal with this special\ncase. Another possibility is that two or more Workers had finished\ntheir work almost at the same time thus bringing rapidly a flag to\nthe threshold. Waiting for the processing time of one block may\nsupply the answer.\n\nA value of {\\tt DISABLED} for any $s_i$ means that its corresponding block\nis not available to be computed. It is simply not considered\nduring the selection procedure.\n\n\n\\subsection{Interactions Between the Workers and the Collector}\n\n\n\\label{iWC}\nAny Worker may send one class of messages to the Collector;\nno message is sent from this latter to any Worker\n (see Fig.~\\ref{f1}).\n\nThe only allowed message is the couple $(k,o)$ in which $o$ is the \nfully processed output of the Worker's activity on the $k^{\\hbox{\\tiny th}}$ block.\n\nThe Collector's task is to fill a number of ``slots'', namely\n$p_i, i=1,\\dots,m$, with the outputs coming from the Workers.\nAs two or more Workers are allowed to process a same block thus\nproducing two or more $(k,o)$ couples, the Collector runs\na vector of status bits which records the status of each slot:\nif $f_i$ is {\\tt FREE} then $p_i$ is ``empty'' i.e., it has never\nbeen filled in by any output before; if it is {\\tt BUSY}, it already\nholds an output. $\\vec{f}$ is firstly initialized to {\\tt FREE}.\n\nFor each incoming message from the Worker, the Collector repeats\nthe following sequence of operations:\n\n\\begin{tabbing}\ntab \\= tab \\= tab \\= tab \\= tab \\kill\n\\> {\\tt receive $(k,o)$ from Worker}  \\\\\n\\> {\\tt if $f_k$ is equal to FREE}    \\\\\n\\> \\>  {\\tt then}                     \\\\\n\\> \\> \\> \\>{\\tt send $k$ to Dispatcher}\\\\\n\\> \\> \\> \\>{\\tt $p_k \\leftarrow o$}              \\\\\n\\> \\> \\> \\>{\\tt $f_k \\leftarrow $ BUSY}          \\\\\n\\> \\> \\> \\>{\\tt check-if-full}        \\\\\n\\> \\>  {\\tt else}                     \\\\\n\\> \\> \\> \\>{\\tt detect}               \\\\\n\\> {\\tt endif}\n\\end{tabbing}\n\n\\noindent \nwhere:\n\\begin{description}\n\\item[{\\tt check-if-full}] checks if, due to the last arrival,\nall entries of $\\vec{f}$ have become {\\tt BUSY}. In that case,\na complete set of partial outputs has been recollected and,\nafter some user-defined post-processing (for example,\na polygonal approximation of the chains of edges produced by\nthe Workers), a global output can be saved,\nand the flag vector re-initialized:\n\n\\begin{tabbing}\ntab \\= tab \\= tab \\= tab \\= tab \\kill\n\\> {\\tt if $\\vec{f}$ is equal to BUSY}    \\\\\n\\> \\>  {\\tt then}                     \\\\\n\\> \\> \\> \\>{\\tt post-process $\\vec{p}$}   \\\\\n\\> \\> \\> \\>{\\tt save $\\vec{p}$}           \\\\\n\\> \\> \\> \\>{\\tt $\\vec{f}\\leftarrow$ FREE} \\\\\n\\> {\\tt endif}\n\\end{tabbing}\n\n\\item[{\\tt detect}] is a user-defined functionality---he/she may choose\nto compare the two $o$'s so to be able to detect any inconsistency\nand start some recovery action, or may simply ignore the whole message.\n\\end{description}\n\nNote also that an acknowledgment message (the block-id) is sent \nfrom the Collector\nto the Dispatcher, to inform it that an output slot has been occupied i.e.,\na partial output has been gathered. This also means that the Farmer\ncan anticipate the transmission of a block which belongs to the next\nrun, if any.\n\n\n\\subsection{Interactions Between the Collector and the Dispatcher}\n\n\n\\label{iCD}\nAs just stated, upon acceptance of an output, the collector\nsends a block-id, say integer $k$, to the Dispatcher---it is the only message\nthat goes from the Collector to the Dispatcher.\n\nThe Dispatcher then simply acts as follows:\n\\begin{tabbing}\ntab \\= tab \\= tab \\= tab \\= tab \\kill\n\\>{\\tt $s_k \\leftarrow$ DISABLED} \\\\\n\\>{\\tt send $k$ to Farmer}\n\\end{tabbing}\n\n\\noindent\nthat is, the Dispatcher ``disables'' the $k^{\\hbox{\\tiny th}}$ unit of work---set\n$S$ as defined in~\\S\\ref{iSW} is reduced by one element and consequently\npartition $\\frac SR$ changes its shape; then the block-id is propagated\nto the Farmer (see Fig.~\\ref{f1}).\n\nOn the opposite direction, there is only one message that may travel from the\nDispatcher to the Collector: the {\\tt STOP} message that means that no more\ninput is available and so processing is over. Upon reception of this\nmessage, the Collector stops itself, like it does any other receiver in the farm.\n\n\n\\section{Discussions and Conclusions}\n\n\nThe just proposed technique uses asynchronicity in order to\nefficiently match to a huge class of parallel architectures.\nIt also uses the redundancy which is inherent to parallelism\nto make an application able to cope with events like e.g.,\na failure of a node, or a node being slowed down, temporarily or not.\n\n\\begin{itemize}\n\\item If a node fails while it is processing block $k$, then\nno output block will be transferred to the Collector. When no more\n``brand-new'' blocks are available, block $k$ will be assigned to\none or more Worker processes, up to a certain limit. During this phase\nthe replicated processing modules of the parallel machine may be thought of\nas part of a hardware redundancy fault tolerant mechanism.\nThis phase is over when any Worker module delivers its output to the\nCollector and consequently all others are possibly\nexplicitly forced to resume their processing loop or, if too late,\ntheir output is discarded;\n\\item if a node has been for some reason drastically slowed down,\nthen its block will be probably assigned to other possibly non-slowed\nWorkers. Again, the first who succeeds, its output is collected;\nthe others are stopped or ignored.\n\\end{itemize}\n\nIn any case, from the point of view of the Farmer process, all these\nevents are completely masked. The mechanism may be provided to a user in the\nform of some set of basic functions, making all technicalities concerning\nboth parallel programming and fault tolerance transparent to the programmer.\n\nOf course, nothing prevents the concurrent use of other fault tolerance\nmechanisms in any of the involved processes e.g., using watchdog timers\nto understand that a Worker has failed and consequently reset the proper\nentry of vector $\\vec{f}$. The ability to re-enter the farm may also \nbe exploited committing a reboot of a failed node and restarting \nthe Worker process on that node.\n\n\\subsection{Reliability Analysis}\n\nIn order to compare the original, synchronous farmer-worker model with the\none described in this paper, a first step is given by observing that the\nsynchronous model depicts a {\\em series system\\/} \n\\cite{Johnson} i.e., a system in which each element is required\nnot to have failed for the whole system to operate. This is not the case of\nthe model described in this paper, in which a subset of the elements,\nnamely the Worker farm, is a\n{\\em parallel system\\/} \\cite{Johnson}: if at least one Worker has not\nfailed, so it is for the whole farm subsystem. Note how Fig.~\\ref{f1} may be\nalso thought of as the reliability block diagram of this system.\n\nConsidering the sole farm subsystem, if we let $C_i(t), 1\\le i\\le n$ be the\nevent that Worker on node $i$ has not failed at time $t$, and we let\n$R(t)$ be the reliability of any Worker at time $t$ then, under the\nassumption of mutual independency between the events, we can conclude that:\n\n\n", "itemtype": "equation", "pos": 12974, "prevtext": "\nNow, first we consider\n", "index": 5, "text": "\n\\[ a = \\min\\{ b \\,|\\, \\exists b\\ge0 \\ni' [b]\\in \\frac{S}{R}\\}; \\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"a=\\min\\{b\\,|\\,\\exists b\\geq 0\\ni^{\\prime}[b]\\in\\frac{S}{R}\\};\" display=\"block\"><mrow><mrow><mi>a</mi><mo>=</mo><mrow><mi>min</mi><mo>\u2061</mo><mrow><mo stretchy=\"false\">{</mo><mpadded width=\"+1.7pt\"><mi>b</mi></mpadded><mo rspace=\"4.2pt\" stretchy=\"false\">|</mo><mrow><mrow><mo>\u2203</mo><mi>b</mi></mrow><mo>\u2265</mo><mn>0</mn><msup><mo>\u220b</mo><mo>\u2032</mo></msup><mrow><mo stretchy=\"false\">[</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><mo>\u2208</mo><mfrac><mi>S</mi><mi>R</mi></mfrac></mrow><mo stretchy=\"false\">}</mo></mrow></mrow></mrow><mo>;</mo></mrow></math>", "type": "latex"}, {"file": "1601.02472.tex", "nexttext": "\n\n\\noindent\nbeing $R_s(t)$ the reliability of the farm as a series system, and\n\n\n", "itemtype": "equation", "pos": 21633, "prevtext": "\nthen we choose $l\\in [a]$ in any way e.g., pseudo-randomly; finally,\nmessage $(l, b_l)$ is sent to Worker $j$, \n$s_l$ is incremented, and the partition is reconfigured accordingly.\nIf $S$ is the empty set, a {\\tt SLEEP} message is generated.\n\nIn other words, entry $s_i$ when greater than or equal to 0 represents\nsome sort of a priority identifier (the lower the value, the higher \nthe priority for block $b_i$). The block to be sent to a requesting\nWorker process is always selected among those with the highest priority;\nafter the selection, $s_i$ is updated incrementing its value by 1.\nIn this way, the content of $s_i$ represents\nthe degree of ``freshness'' of block $b_i$: it substantially counts\nthe number of times it has been picked up by a Worker process;\nfresher blocks are always preferred. \n\nAs long as there are ``brand-new'' blocks i.e., blocks with a freshness\nattribute of 0, these are the blocks which are selected and distributed. \nNote that this means that as long as the above condition is true,\neach Worker deals with a different unit of work; on the contrary,\nas soon as the last brand-new block is distributed, the model admits \nthat a same block may be assigned to more than one Worker.\n\nThis is tolerated up to a certain threshold value; if any $s_i$ becomes\ngreater than that value, an alarm event is raised---too many workers\nare dealing with the same input data, which might mean that they are\nall affected by the same problem e.g., a software bug resulting in an\nerror when $b_i$ is being processed. We won't deal with this special\ncase. Another possibility is that two or more Workers had finished\ntheir work almost at the same time thus bringing rapidly a flag to\nthe threshold. Waiting for the processing time of one block may\nsupply the answer.\n\nA value of {\\tt DISABLED} for any $s_i$ means that its corresponding block\nis not available to be computed. It is simply not considered\nduring the selection procedure.\n\n\n\\subsection{Interactions Between the Workers and the Collector}\n\n\n\\label{iWC}\nAny Worker may send one class of messages to the Collector;\nno message is sent from this latter to any Worker\n (see Fig.~\\ref{f1}).\n\nThe only allowed message is the couple $(k,o)$ in which $o$ is the \nfully processed output of the Worker's activity on the $k^{\\hbox{\\tiny th}}$ block.\n\nThe Collector's task is to fill a number of ``slots'', namely\n$p_i, i=1,\\dots,m$, with the outputs coming from the Workers.\nAs two or more Workers are allowed to process a same block thus\nproducing two or more $(k,o)$ couples, the Collector runs\na vector of status bits which records the status of each slot:\nif $f_i$ is {\\tt FREE} then $p_i$ is ``empty'' i.e., it has never\nbeen filled in by any output before; if it is {\\tt BUSY}, it already\nholds an output. $\\vec{f}$ is firstly initialized to {\\tt FREE}.\n\nFor each incoming message from the Worker, the Collector repeats\nthe following sequence of operations:\n\n\\begin{tabbing}\ntab \\= tab \\= tab \\= tab \\= tab \\kill\n\\> {\\tt receive $(k,o)$ from Worker}  \\\\\n\\> {\\tt if $f_k$ is equal to FREE}    \\\\\n\\> \\>  {\\tt then}                     \\\\\n\\> \\> \\> \\>{\\tt send $k$ to Dispatcher}\\\\\n\\> \\> \\> \\>{\\tt $p_k \\leftarrow o$}              \\\\\n\\> \\> \\> \\>{\\tt $f_k \\leftarrow $ BUSY}          \\\\\n\\> \\> \\> \\>{\\tt check-if-full}        \\\\\n\\> \\>  {\\tt else}                     \\\\\n\\> \\> \\> \\>{\\tt detect}               \\\\\n\\> {\\tt endif}\n\\end{tabbing}\n\n\\noindent \nwhere:\n\\begin{description}\n\\item[{\\tt check-if-full}] checks if, due to the last arrival,\nall entries of $\\vec{f}$ have become {\\tt BUSY}. In that case,\na complete set of partial outputs has been recollected and,\nafter some user-defined post-processing (for example,\na polygonal approximation of the chains of edges produced by\nthe Workers), a global output can be saved,\nand the flag vector re-initialized:\n\n\\begin{tabbing}\ntab \\= tab \\= tab \\= tab \\= tab \\kill\n\\> {\\tt if $\\vec{f}$ is equal to BUSY}    \\\\\n\\> \\>  {\\tt then}                     \\\\\n\\> \\> \\> \\>{\\tt post-process $\\vec{p}$}   \\\\\n\\> \\> \\> \\>{\\tt save $\\vec{p}$}           \\\\\n\\> \\> \\> \\>{\\tt $\\vec{f}\\leftarrow$ FREE} \\\\\n\\> {\\tt endif}\n\\end{tabbing}\n\n\\item[{\\tt detect}] is a user-defined functionality---he/she may choose\nto compare the two $o$'s so to be able to detect any inconsistency\nand start some recovery action, or may simply ignore the whole message.\n\\end{description}\n\nNote also that an acknowledgment message (the block-id) is sent \nfrom the Collector\nto the Dispatcher, to inform it that an output slot has been occupied i.e.,\na partial output has been gathered. This also means that the Farmer\ncan anticipate the transmission of a block which belongs to the next\nrun, if any.\n\n\n\\subsection{Interactions Between the Collector and the Dispatcher}\n\n\n\\label{iCD}\nAs just stated, upon acceptance of an output, the collector\nsends a block-id, say integer $k$, to the Dispatcher---it is the only message\nthat goes from the Collector to the Dispatcher.\n\nThe Dispatcher then simply acts as follows:\n\\begin{tabbing}\ntab \\= tab \\= tab \\= tab \\= tab \\kill\n\\>{\\tt $s_k \\leftarrow$ DISABLED} \\\\\n\\>{\\tt send $k$ to Farmer}\n\\end{tabbing}\n\n\\noindent\nthat is, the Dispatcher ``disables'' the $k^{\\hbox{\\tiny th}}$ unit of work---set\n$S$ as defined in~\\S\\ref{iSW} is reduced by one element and consequently\npartition $\\frac SR$ changes its shape; then the block-id is propagated\nto the Farmer (see Fig.~\\ref{f1}).\n\nOn the opposite direction, there is only one message that may travel from the\nDispatcher to the Collector: the {\\tt STOP} message that means that no more\ninput is available and so processing is over. Upon reception of this\nmessage, the Collector stops itself, like it does any other receiver in the farm.\n\n\n\\section{Discussions and Conclusions}\n\n\nThe just proposed technique uses asynchronicity in order to\nefficiently match to a huge class of parallel architectures.\nIt also uses the redundancy which is inherent to parallelism\nto make an application able to cope with events like e.g.,\na failure of a node, or a node being slowed down, temporarily or not.\n\n\\begin{itemize}\n\\item If a node fails while it is processing block $k$, then\nno output block will be transferred to the Collector. When no more\n``brand-new'' blocks are available, block $k$ will be assigned to\none or more Worker processes, up to a certain limit. During this phase\nthe replicated processing modules of the parallel machine may be thought of\nas part of a hardware redundancy fault tolerant mechanism.\nThis phase is over when any Worker module delivers its output to the\nCollector and consequently all others are possibly\nexplicitly forced to resume their processing loop or, if too late,\ntheir output is discarded;\n\\item if a node has been for some reason drastically slowed down,\nthen its block will be probably assigned to other possibly non-slowed\nWorkers. Again, the first who succeeds, its output is collected;\nthe others are stopped or ignored.\n\\end{itemize}\n\nIn any case, from the point of view of the Farmer process, all these\nevents are completely masked. The mechanism may be provided to a user in the\nform of some set of basic functions, making all technicalities concerning\nboth parallel programming and fault tolerance transparent to the programmer.\n\nOf course, nothing prevents the concurrent use of other fault tolerance\nmechanisms in any of the involved processes e.g., using watchdog timers\nto understand that a Worker has failed and consequently reset the proper\nentry of vector $\\vec{f}$. The ability to re-enter the farm may also \nbe exploited committing a reboot of a failed node and restarting \nthe Worker process on that node.\n\n\\subsection{Reliability Analysis}\n\nIn order to compare the original, synchronous farmer-worker model with the\none described in this paper, a first step is given by observing that the\nsynchronous model depicts a {\\em series system\\/} \n\\cite{Johnson} i.e., a system in which each element is required\nnot to have failed for the whole system to operate. This is not the case of\nthe model described in this paper, in which a subset of the elements,\nnamely the Worker farm, is a\n{\\em parallel system\\/} \\cite{Johnson}: if at least one Worker has not\nfailed, so it is for the whole farm subsystem. Note how Fig.~\\ref{f1} may be\nalso thought of as the reliability block diagram of this system.\n\nConsidering the sole farm subsystem, if we let $C_i(t), 1\\le i\\le n$ be the\nevent that Worker on node $i$ has not failed at time $t$, and we let\n$R(t)$ be the reliability of any Worker at time $t$ then, under the\nassumption of mutual independency between the events, we can conclude that:\n\n\n", "index": 7, "text": "\\begin{equation}\nR_s(t) {\\mbox{\\ $\\stackrel{\\mbox{\\tiny def}}{=}$\\ }} P( \\bigcap_{i=1}^{n} C_i(t)) = \\prod_{i=1}^{n} R(t) = (R(t))^n\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m1\" class=\"ltx_Math\" alttext=\"R_{s}(t){\\mbox{\\ $\\stackrel{\\mbox{\\tiny def}}{=}$\\ }}P(\\bigcap_{i=1}^{n}C_{i}(%&#10;t))=\\prod_{i=1}^{n}R(t)=(R(t))^{n}\" display=\"block\"><mrow><mrow><msub><mi>R</mi><mi>s</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mtext>\u00a0</mtext><mover><mo movablelimits=\"false\">=</mo><mtext mathsize=\"71%\">def</mtext></mover><mtext>\u00a0</mtext></mrow><mo>\u2062</mo><mi>P</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><munderover><mo largeop=\"true\" mathsize=\"160%\" movablelimits=\"false\" stretchy=\"false\" symmetric=\"true\">\u22c2</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u220f</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>R</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>=</mo><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mi>R</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow><mi>n</mi></msup></mrow></math>", "type": "latex"}, {"file": "1601.02472.tex", "nexttext": "\n\n\\noindent\nwhere $R_p(t)$ represents the reliability of the farm as a parallel system.\nOf course failures must be independent, so again data-induced errors are\nnot considered. Figure~\\ref{f2} shows the reliability of the farm in a series\nand in a parallel system as a Worker's reliability goes from 0 to 1.\n\n\\begin{figure}\n\n\\setlength{\\unitlength}{0.240900pt}\n\\ifx\\plotpoint\\undefined\\newsavebox{\\plotpoint}\\fi\n\\sbox{\\plotpoint}{\\rule[-0.200pt]{0.400pt}{0.400pt}}\n\\begin{picture}(1500,900)(0,0)\n\\font\\gnuplot=cmr10 at 10pt\n\\gnuplot\n\\sbox{\\plotpoint}{\\rule[-0.200pt]{0.400pt}{0.400pt}}\n\\put(220.0,113.0){\\rule[-0.200pt]{292.934pt}{0.400pt}}\n\\put(220.0,113.0){\\rule[-0.200pt]{0.400pt}{184.048pt}}\n\\put(220.0,113.0){\\rule[-0.200pt]{4.818pt}{0.400pt}}\n\\put(198,113){\\makebox(0,0)[r]{0}}\n\\put(1416.0,113.0){\\rule[-0.200pt]{4.818pt}{0.400pt}}\n\\put(220.0,266.0){\\rule[-0.200pt]{4.818pt}{0.400pt}}\n\\put(198,266){\\makebox(0,0)[r]{0.2}}\n\\put(1416.0,266.0){\\rule[-0.200pt]{4.818pt}{0.400pt}}\n\\put(220.0,419.0){\\rule[-0.200pt]{4.818pt}{0.400pt}}\n\\put(198,419){\\makebox(0,0)[r]{0.4}}\n\\put(1416.0,419.0){\\rule[-0.200pt]{4.818pt}{0.400pt}}\n\\put(220.0,571.0){\\rule[-0.200pt]{4.818pt}{0.400pt}}\n\\put(198,571){\\makebox(0,0)[r]{0.6}}\n\\put(1416.0,571.0){\\rule[-0.200pt]{4.818pt}{0.400pt}}\n\\put(220.0,724.0){\\rule[-0.200pt]{4.818pt}{0.400pt}}\n\\put(198,724){\\makebox(0,0)[r]{0.8}}\n\\put(1416.0,724.0){\\rule[-0.200pt]{4.818pt}{0.400pt}}\n\\put(220.0,877.0){\\rule[-0.200pt]{4.818pt}{0.400pt}}\n\\put(198,877){\\makebox(0,0)[r]{1}}\n\\put(1416.0,877.0){\\rule[-0.200pt]{4.818pt}{0.400pt}}\n\\put(220.0,113.0){\\rule[-0.200pt]{0.400pt}{4.818pt}}\n\\put(220,68){\\makebox(0,0){0}}\n\\put(220.0,857.0){\\rule[-0.200pt]{0.400pt}{4.818pt}}\n\\put(463.0,113.0){\\rule[-0.200pt]{0.400pt}{4.818pt}}\n\\put(463,68){\\makebox(0,0){0.2}}\n\\put(463.0,857.0){\\rule[-0.200pt]{0.400pt}{4.818pt}}\n\\put(706.0,113.0){\\rule[-0.200pt]{0.400pt}{4.818pt}}\n\\put(706,68){\\makebox(0,0){0.4}}\n\\put(706.0,857.0){\\rule[-0.200pt]{0.400pt}{4.818pt}}\n\\put(950.0,113.0){\\rule[-0.200pt]{0.400pt}{4.818pt}}\n\\put(950,68){\\makebox(0,0){0.6}}\n\\put(950.0,857.0){\\rule[-0.200pt]{0.400pt}{4.818pt}}\n\\put(1193.0,113.0){\\rule[-0.200pt]{0.400pt}{4.818pt}}\n\\put(1193,68){\\makebox(0,0){0.8}}\n\\put(1193.0,857.0){\\rule[-0.200pt]{0.400pt}{4.818pt}}\n\\put(1436.0,113.0){\\rule[-0.200pt]{0.400pt}{4.818pt}}\n\\put(1436,68){\\makebox(0,0){1}}\n\\put(1436.0,857.0){\\rule[-0.200pt]{0.400pt}{4.818pt}}\n\\put(220.0,113.0){\\rule[-0.200pt]{292.934pt}{0.400pt}}\n\\put(1436.0,113.0){\\rule[-0.200pt]{0.400pt}{184.048pt}}\n\\put(220.0,877.0){\\rule[-0.200pt]{292.934pt}{0.400pt}}\n\\put(45,495){\\makebox(0,0){\\shortstack{$R_p(\\overline t)$\\\\ or $R_s(\\overline t)$}}}\n\\put(828,23){\\makebox(0,0){$R(\\overline t)$}}\n\\put(706,495){\\makebox(0,0)[l]{n=1}}\n\\put(950,342){\\makebox(0,0)[l]{n=2}}\n\\put(567,591){\\makebox(0,0)[l]{n=2}}\n\\put(1071,266){\\makebox(0,0)[l]{n=4}}\n\\put(445,667){\\makebox(0,0)[l]{n=4}}\n\\put(1181,197){\\makebox(0,0)[l]{n=8}}\n\\put(348,720){\\makebox(0,0)[l]{n=8}}\n\\put(1254,151){\\makebox(0,0)[l]{n=16}}\n\\put(256,778){\\makebox(0,0)[l]{n=16}}\n\\put(220.0,113.0){\\rule[-0.200pt]{0.400pt}{184.048pt}}\n\\put(220,113){\\usebox{\\plotpoint}}\n\\multiput(220.00,113.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(220.00,112.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(232.00,121.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(232.00,120.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(245.00,128.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(245.00,127.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(257.00,136.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(257.00,135.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(269.00,144.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(269.00,143.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(281.00,152.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(281.00,151.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(294.00,159.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(294.00,158.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(306.00,167.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(306.00,166.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(318.00,175.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(318.00,174.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(331.00,182.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(331.00,181.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(343.00,190.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(343.00,189.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(355.00,198.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(355.00,197.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(367.00,206.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(367.00,205.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(380.00,213.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(380.00,212.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(392.00,221.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(392.00,220.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(404.00,229.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(404.00,228.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(417.00,236.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(417.00,235.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(429.00,244.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(429.00,243.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(441.00,252.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(441.00,251.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(453.00,260.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(453.00,259.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(466.00,267.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(466.00,266.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(478.00,275.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(478.00,274.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(490.00,283.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(490.00,282.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(503.00,290.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(503.00,289.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(515.00,298.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(515.00,297.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(527.00,306.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(527.00,305.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(539.00,314.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(539.00,313.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(552.00,321.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(552.00,320.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(564.00,329.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(564.00,328.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(576.00,337.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(576.00,336.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(588.00,345.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(588.00,344.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(601.00,352.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(601.00,351.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(613.00,360.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(613.00,359.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(625.00,368.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(625.00,367.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(638.00,375.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(638.00,374.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(650.00,383.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(650.00,382.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(662.00,391.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(662.00,390.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(674.00,399.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(674.00,398.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(687.00,406.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(687.00,405.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(699.00,414.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(699.00,413.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(711.00,422.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(711.00,421.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(724.00,429.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(724.00,428.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(736.00,437.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(736.00,436.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(748.00,445.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(748.00,444.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(760.00,453.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(760.00,452.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(773.00,460.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(773.00,459.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(785.00,468.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(785.00,467.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(797.00,476.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(797.00,475.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(810.00,483.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(810.00,482.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(822.00,491.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(822.00,490.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(834.00,499.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(834.00,498.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(846.00,507.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(846.00,506.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(859.00,514.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(859.00,513.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(871.00,522.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(871.00,521.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(883.00,530.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(883.00,529.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(896.00,537.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(896.00,536.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(908.00,545.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(908.00,544.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(920.00,553.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(920.00,552.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(932.00,561.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(932.00,560.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(945.00,568.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(945.00,567.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(957.00,576.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(957.00,575.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(969.00,584.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(969.00,583.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(982.00,591.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(982.00,590.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(994.00,599.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(994.00,598.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1006.00,607.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1006.00,606.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1018.00,615.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(1018.00,614.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(1031.00,622.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1031.00,621.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1043.00,630.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1043.00,629.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1055.00,638.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(1055.00,637.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(1068.00,645.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1068.00,644.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1080.00,653.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1080.00,652.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1092.00,661.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1092.00,660.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1104.00,669.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(1104.00,668.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(1117.00,676.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1117.00,675.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1129.00,684.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1129.00,683.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1141.00,692.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1141.00,691.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1153.00,700.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(1153.00,699.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(1166.00,707.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1166.00,706.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1178.00,715.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1178.00,714.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1190.00,723.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(1190.00,722.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(1203.00,730.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1203.00,729.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1215.00,738.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1215.00,737.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1227.00,746.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1227.00,745.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1239.00,754.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(1239.00,753.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(1252.00,761.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1252.00,760.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1264.00,769.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1264.00,768.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1276.00,777.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(1276.00,776.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(1289.00,784.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1289.00,783.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1301.00,792.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1301.00,791.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1313.00,800.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1313.00,799.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1325.00,808.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(1325.00,807.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(1338.00,815.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1338.00,814.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1350.00,823.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1350.00,822.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1362.00,831.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(1362.00,830.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(1375.00,838.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1375.00,837.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1387.00,846.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1387.00,845.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1399.00,854.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1399.00,853.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\multiput(1411.00,862.59)(0.950,0.485){11}{\\rule{0.843pt}{0.117pt}}\n\\multiput(1411.00,861.17)(11.251,7.000){2}{\\rule{0.421pt}{0.400pt}}\n\\multiput(1424.00,869.59)(0.758,0.488){13}{\\rule{0.700pt}{0.117pt}}\n\\multiput(1424.00,868.17)(10.547,8.000){2}{\\rule{0.350pt}{0.400pt}}\n\\put(220,113){\\usebox{\\plotpoint}}\n\\put(220.00,113.00){\\usebox{\\plotpoint}}\n\\put(240.76,113.00){\\usebox{\\plotpoint}}\n\\multiput(245,113)(20.684,1.724){0}{\\usebox{\\plotpoint}}\n\\put(261.47,114.00){\\usebox{\\plotpoint}}\n\\multiput(269,114)(20.684,1.724){0}{\\usebox{\\plotpoint}}\n\\put(282.18,115.09){\\usebox{\\plotpoint}}\n\\put(302.87,116.74){\\usebox{\\plotpoint}}\n\\multiput(306,117)(20.684,1.724){0}{\\usebox{\\plotpoint}}\n\\put(323.56,118.43){\\usebox{\\plotpoint}}\n\\multiput(331,119)(20.473,3.412){0}{\\usebox{\\plotpoint}}\n\\put(344.12,121.09){\\usebox{\\plotpoint}}\n\\put(364.70,123.62){\\usebox{\\plotpoint}}\n\\multiput(367,124)(20.514,3.156){0}{\\usebox{\\plotpoint}}\n\\put(385.20,126.87){\\usebox{\\plotpoint}}\n\\multiput(392,128)(20.136,5.034){0}{\\usebox{\\plotpoint}}\n\\put(405.48,131.23){\\usebox{\\plotpoint}}\n\\put(425.83,135.21){\\usebox{\\plotpoint}}\n\\multiput(429,136)(20.473,3.412){0}{\\usebox{\\plotpoint}}\n\\put(446.16,139.29){\\usebox{\\plotpoint}}\n\\multiput(453,141)(20.224,4.667){0}{\\usebox{\\plotpoint}}\n\\put(466.35,144.09){\\usebox{\\plotpoint}}\n\\put(486.30,149.77){\\usebox{\\plotpoint}}\n\\multiput(490,151)(20.224,4.667){0}{\\usebox{\\plotpoint}}\n\\put(506.33,155.11){\\usebox{\\plotpoint}}\n\\put(526.02,161.67){\\usebox{\\plotpoint}}\n\\multiput(527,162)(19.690,6.563){0}{\\usebox{\\plotpoint}}\n\\put(545.77,168.08){\\usebox{\\plotpoint}}\n\\multiput(552,170)(19.690,6.563){0}{\\usebox{\\plotpoint}}\n\\put(565.46,174.61){\\usebox{\\plotpoint}}\n\\put(584.86,181.95){\\usebox{\\plotpoint}}\n\\multiput(588,183)(19.372,7.451){0}{\\usebox{\\plotpoint}}\n\\put(604.25,189.35){\\usebox{\\plotpoint}}\n\\put(623.41,197.34){\\usebox{\\plotpoint}}\n\\multiput(625,198)(19.372,7.451){0}{\\usebox{\\plotpoint}}\n\\put(642.71,204.96){\\usebox{\\plotpoint}}\n\\put(661.50,213.75){\\usebox{\\plotpoint}}\n\\multiput(662,214)(18.564,9.282){0}{\\usebox{\\plotpoint}}\n\\put(680.15,222.84){\\usebox{\\plotpoint}}\n\\put(698.82,231.91){\\usebox{\\plotpoint}}\n\\multiput(699,232)(18.564,9.282){0}{\\usebox{\\plotpoint}}\n\\put(717.48,240.99){\\usebox{\\plotpoint}}\n\\put(735.73,250.84){\\usebox{\\plotpoint}}\n\\multiput(736,251)(18.564,9.282){0}{\\usebox{\\plotpoint}}\n\\put(754.07,260.54){\\usebox{\\plotpoint}}\n\\put(772.23,270.58){\\usebox{\\plotpoint}}\n\\multiput(773,271)(17.928,10.458){0}{\\usebox{\\plotpoint}}\n\\put(790.17,281.01){\\usebox{\\plotpoint}}\n\\put(807.94,291.73){\\usebox{\\plotpoint}}\n\\multiput(810,293)(17.928,10.458){0}{\\usebox{\\plotpoint}}\n\\put(825.70,302.47){\\usebox{\\plotpoint}}\n\\put(842.97,313.98){\\usebox{\\plotpoint}}\n\\multiput(846,316)(17.677,10.878){0}{\\usebox{\\plotpoint}}\n\\put(860.54,325.02){\\usebox{\\plotpoint}}\n\\put(877.81,336.54){\\usebox{\\plotpoint}}\n\\put(894.93,348.26){\\usebox{\\plotpoint}}\n\\multiput(896,349)(17.270,11.513){0}{\\usebox{\\plotpoint}}\n\\put(912.03,360.02){\\usebox{\\plotpoint}}\n\\put(928.63,372.47){\\usebox{\\plotpoint}}\n\\multiput(932,375)(17.065,11.814){0}{\\usebox{\\plotpoint}}\n\\put(945.57,384.47){\\usebox{\\plotpoint}}\n\\put(961.70,397.52){\\usebox{\\plotpoint}}\n\\put(978.22,410.09){\\usebox{\\plotpoint}}\n\\multiput(982,413)(16.604,12.453){0}{\\usebox{\\plotpoint}}\n\\put(994.75,422.63){\\usebox{\\plotpoint}}\n\\put(1010.70,435.91){\\usebox{\\plotpoint}}\n\\put(1026.59,449.27){\\usebox{\\plotpoint}}\n\\put(1042.51,462.59){\\usebox{\\plotpoint}}\n\\multiput(1043,463)(15.945,13.287){0}{\\usebox{\\plotpoint}}\n\\put(1058.43,475.90){\\usebox{\\plotpoint}}\n\\put(1074.06,489.55){\\usebox{\\plotpoint}}\n\\put(1089.36,503.58){\\usebox{\\plotpoint}}\n\\multiput(1092,506)(15.300,14.025){0}{\\usebox{\\plotpoint}}\n\\put(1104.68,517.58){\\usebox{\\plotpoint}}\n\\put(1120.27,531.27){\\usebox{\\plotpoint}}\n\\put(1135.19,545.68){\\usebox{\\plotpoint}}\n\\put(1150.11,560.11){\\usebox{\\plotpoint}}\n\\put(1165.24,574.30){\\usebox{\\plotpoint}}\n\\multiput(1166,575)(14.676,14.676){0}{\\usebox{\\plotpoint}}\n\\put(1179.95,588.95){\\usebox{\\plotpoint}}\n\\put(1194.63,603.63){\\usebox{\\plotpoint}}\n\\put(1209.30,618.30){\\usebox{\\plotpoint}}\n\\put(1223.61,633.33){\\usebox{\\plotpoint}}\n\\put(1237.69,648.58){\\usebox{\\plotpoint}}\n\\multiput(1239,650)(14.676,14.676){0}{\\usebox{\\plotpoint}}\n\\put(1252.30,663.32){\\usebox{\\plotpoint}}\n\\put(1266.28,678.66){\\usebox{\\plotpoint}}\n\\put(1280.12,694.12){\\usebox{\\plotpoint}}\n\\put(1294.33,709.22){\\usebox{\\plotpoint}}\n\\put(1308.13,724.72){\\usebox{\\plotpoint}}\n\\put(1321.83,740.30){\\usebox{\\plotpoint}}\n\\put(1335.41,756.01){\\usebox{\\plotpoint}}\n\\put(1348.93,771.75){\\usebox{\\plotpoint}}\n\\multiput(1350,773)(13.508,15.759){0}{\\usebox{\\plotpoint}}\n\\put(1362.44,787.51){\\usebox{\\plotpoint}}\n\\put(1375.99,803.23){\\usebox{\\plotpoint}}\n\\put(1389.03,819.37){\\usebox{\\plotpoint}}\n\\put(1402.40,835.25){\\usebox{\\plotpoint}}\n\\put(1415.41,851.42){\\usebox{\\plotpoint}}\n\\put(1428.45,867.56){\\usebox{\\plotpoint}}\n\\put(1436,877){\\usebox{\\plotpoint}}\n\\put(220,113){\\usebox{\\plotpoint}}\n\\put(220.00,113.00){\\usebox{\\plotpoint}}\n\\put(232.97,129.20){\\usebox{\\plotpoint}}\n\\put(246.05,145.32){\\usebox{\\plotpoint}}\n\\put(259.10,161.45){\\usebox{\\plotpoint}}\n\\put(272.47,177.33){\\usebox{\\plotpoint}}\n\\put(285.65,193.36){\\usebox{\\plotpoint}}\n\\put(299.21,209.07){\\usebox{\\plotpoint}}\n\\put(312.71,224.83){\\usebox{\\plotpoint}}\n\\put(326.27,240.55){\\usebox{\\plotpoint}}\n\\put(339.81,256.28){\\usebox{\\plotpoint}}\n\\put(353.75,271.65){\\usebox{\\plotpoint}}\n\\multiput(355,273)(13.508,15.759){0}{\\usebox{\\plotpoint}}\n\\put(367.34,287.34){\\usebox{\\plotpoint}}\n\\put(381.86,302.16){\\usebox{\\plotpoint}}\n\\put(395.51,317.80){\\usebox{\\plotpoint}}\n\\put(409.82,332.82){\\usebox{\\plotpoint}}\n\\put(424.19,347.79){\\usebox{\\plotpoint}}\n\\put(438.27,363.04){\\usebox{\\plotpoint}}\n\\put(452.83,377.83){\\usebox{\\plotpoint}}\n\\multiput(453,378)(14.676,14.676){0}{\\usebox{\\plotpoint}}\n\\put(467.51,392.51){\\usebox{\\plotpoint}}\n\\put(482.18,407.18){\\usebox{\\plotpoint}}\n\\put(497.13,421.58){\\usebox{\\plotpoint}}\n\\put(512.03,436.03){\\usebox{\\plotpoint}}\n\\multiput(515,439)(15.300,14.025){0}{\\usebox{\\plotpoint}}\n\\put(527.19,450.19){\\usebox{\\plotpoint}}\n\\put(542.10,464.62){\\usebox{\\plotpoint}}\n\\put(557.74,478.26){\\usebox{\\plotpoint}}\n\\put(573.04,492.28){\\usebox{\\plotpoint}}\n\\multiput(576,495)(15.300,14.025){0}{\\usebox{\\plotpoint}}\n\\put(588.35,506.29){\\usebox{\\plotpoint}}\n\\put(604.21,519.68){\\usebox{\\plotpoint}}\n\\put(620.16,532.96){\\usebox{\\plotpoint}}\n\\put(636.03,546.33){\\usebox{\\plotpoint}}\n\\multiput(638,548)(15.945,13.287){0}{\\usebox{\\plotpoint}}\n\\put(651.96,559.64){\\usebox{\\plotpoint}}\n\\put(668.15,572.62){\\usebox{\\plotpoint}}\n\\put(684.66,585.20){\\usebox{\\plotpoint}}\n\\multiput(687,587)(16.604,12.453){0}{\\usebox{\\plotpoint}}\n\\put(701.15,597.79){\\usebox{\\plotpoint}}\n\\put(717.53,610.52){\\usebox{\\plotpoint}}\n\\put(734.30,622.73){\\usebox{\\plotpoint}}\n\\multiput(736,624)(16.604,12.453){0}{\\usebox{\\plotpoint}}\n\\put(751.03,635.02){\\usebox{\\plotpoint}}\n\\put(768.20,646.67){\\usebox{\\plotpoint}}\n\\multiput(773,650)(17.270,11.513){0}{\\usebox{\\plotpoint}}\n\\put(785.41,658.27){\\usebox{\\plotpoint}}\n\\put(802.81,669.58){\\usebox{\\plotpoint}}\n\\put(820.25,680.83){\\usebox{\\plotpoint}}\n\\multiput(822,682)(17.270,11.513){0}{\\usebox{\\plotpoint}}\n\\put(837.65,692.13){\\usebox{\\plotpoint}}\n\\put(855.45,702.81){\\usebox{\\plotpoint}}\n\\multiput(859,705)(17.928,10.458){0}{\\usebox{\\plotpoint}}\n\\put(873.32,713.35){\\usebox{\\plotpoint}}\n\\put(891.41,723.53){\\usebox{\\plotpoint}}\n\\multiput(896,726)(17.928,10.458){0}{\\usebox{\\plotpoint}}\n\\put(909.48,733.74){\\usebox{\\plotpoint}}\n\\put(927.76,743.53){\\usebox{\\plotpoint}}\n\\multiput(932,746)(18.845,8.698){0}{\\usebox{\\plotpoint}}\n\\put(946.37,752.69){\\usebox{\\plotpoint}}\n\\put(964.94,761.97){\\usebox{\\plotpoint}}\n\\multiput(969,764)(18.845,8.698){0}{\\usebox{\\plotpoint}}\n\\put(983.69,770.85){\\usebox{\\plotpoint}}\n\\put(1002.26,780.13){\\usebox{\\plotpoint}}\n\\multiput(1006,782)(19.159,7.983){0}{\\usebox{\\plotpoint}}\n\\put(1021.33,788.28){\\usebox{\\plotpoint}}\n\\put(1040.60,796.00){\\usebox{\\plotpoint}}\n\\multiput(1043,797)(19.159,7.983){0}{\\usebox{\\plotpoint}}\n\\put(1059.81,803.85){\\usebox{\\plotpoint}}\n\\put(1079.37,810.79){\\usebox{\\plotpoint}}\n\\multiput(1080,811)(19.159,7.983){0}{\\usebox{\\plotpoint}}\n\\put(1098.73,818.24){\\usebox{\\plotpoint}}\n\\multiput(1104,820)(19.838,6.104){0}{\\usebox{\\plotpoint}}\n\\put(1118.51,824.50){\\usebox{\\plotpoint}}\n\\put(1138.20,831.07){\\usebox{\\plotpoint}}\n\\multiput(1141,832)(19.690,6.563){0}{\\usebox{\\plotpoint}}\n\\put(1158.03,837.16){\\usebox{\\plotpoint}}\n\\put(1177.93,842.98){\\usebox{\\plotpoint}}\n\\multiput(1178,843)(20.136,5.034){0}{\\usebox{\\plotpoint}}\n\\put(1198.10,847.87){\\usebox{\\plotpoint}}\n\\multiput(1203,849)(20.136,5.034){0}{\\usebox{\\plotpoint}}\n\\put(1218.31,852.55){\\usebox{\\plotpoint}}\n\\put(1238.59,856.90){\\usebox{\\plotpoint}}\n\\multiput(1239,857)(20.514,3.156){0}{\\usebox{\\plotpoint}}\n\\put(1258.96,860.74){\\usebox{\\plotpoint}}\n\\multiput(1264,862)(20.473,3.412){0}{\\usebox{\\plotpoint}}\n\\put(1279.36,864.52){\\usebox{\\plotpoint}}\n\\put(1299.85,867.81){\\usebox{\\plotpoint}}\n\\multiput(1301,868)(20.684,1.724){0}{\\usebox{\\plotpoint}}\n\\put(1320.45,870.24){\\usebox{\\plotpoint}}\n\\multiput(1325,871)(20.694,1.592){0}{\\usebox{\\plotpoint}}\n\\put(1341.09,872.26){\\usebox{\\plotpoint}}\n\\put(1361.77,873.98){\\usebox{\\plotpoint}}\n\\multiput(1362,874)(20.694,1.592){0}{\\usebox{\\plotpoint}}\n\\put(1382.46,875.62){\\usebox{\\plotpoint}}\n\\multiput(1387,876)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1403.19,876.35){\\usebox{\\plotpoint}}\n\\put(1423.92,877.00){\\usebox{\\plotpoint}}\n\\multiput(1424,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1436,877){\\usebox{\\plotpoint}}\n\\sbox{\\plotpoint}{\\rule[-0.400pt]{0.800pt}{0.800pt}}\n\\put(220,113){\\usebox{\\plotpoint}}\n\\put(404,111.84){\\rule{3.132pt}{0.800pt}}\n\\multiput(404.00,111.34)(6.500,1.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(220.0,113.0){\\rule[-0.400pt]{44.326pt}{0.800pt}}\n\\put(466,112.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(466.00,112.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(417.0,114.0){\\rule[-0.400pt]{11.804pt}{0.800pt}}\n\\put(503,113.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(503.00,113.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(478.0,115.0){\\rule[-0.400pt]{6.022pt}{0.800pt}}\n\\put(527,114.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(527.00,114.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(515.0,116.0){\\rule[-0.400pt]{2.891pt}{0.800pt}}\n\\put(552,115.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(552.00,115.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(564,116.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(564.00,116.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(539.0,117.0){\\rule[-0.400pt]{3.132pt}{0.800pt}}\n\\put(588,117.84){\\rule{3.132pt}{0.800pt}}\n\\multiput(588.00,117.34)(6.500,1.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(601,118.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(601.00,118.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(613,119.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(613.00,119.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(625,121.34){\\rule{3.132pt}{0.800pt}}\n\\multiput(625.00,120.34)(6.500,2.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(638,122.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(638.00,122.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(650,123.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(650.00,123.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(662,125.34){\\rule{2.891pt}{0.800pt}}\n\\multiput(662.00,124.34)(6.000,2.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(674,127.34){\\rule{3.132pt}{0.800pt}}\n\\multiput(674.00,126.34)(6.500,2.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(687,128.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(687.00,128.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(699,130.34){\\rule{2.891pt}{0.800pt}}\n\\multiput(699.00,129.34)(6.000,2.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(711,132.34){\\rule{3.132pt}{0.800pt}}\n\\multiput(711.00,131.34)(6.500,2.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(724,134.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(724.00,133.34)(6.000,3.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(736,137.34){\\rule{2.891pt}{0.800pt}}\n\\multiput(736.00,136.34)(6.000,2.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(748,139.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(748.00,138.34)(6.000,3.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(760,142.84){\\rule{3.132pt}{0.800pt}}\n\\multiput(760.00,141.34)(6.500,3.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(773,145.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(773.00,144.34)(6.000,3.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(785,148.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(785.00,147.34)(6.000,3.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(797,151.84){\\rule{3.132pt}{0.800pt}}\n\\multiput(797.00,150.34)(6.500,3.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(810,155.34){\\rule{2.600pt}{0.800pt}}\n\\multiput(810.00,153.34)(6.604,4.000){2}{\\rule{1.300pt}{0.800pt}}\n\\put(822,159.34){\\rule{2.600pt}{0.800pt}}\n\\multiput(822.00,157.34)(6.604,4.000){2}{\\rule{1.300pt}{0.800pt}}\n\\put(834,163.34){\\rule{2.600pt}{0.800pt}}\n\\multiput(834.00,161.34)(6.604,4.000){2}{\\rule{1.300pt}{0.800pt}}\n\\put(846,167.34){\\rule{2.800pt}{0.800pt}}\n\\multiput(846.00,165.34)(7.188,4.000){2}{\\rule{1.400pt}{0.800pt}}\n\\multiput(859.00,172.38)(1.600,0.560){3}{\\rule{2.120pt}{0.135pt}}\n\\multiput(859.00,169.34)(7.600,5.000){2}{\\rule{1.060pt}{0.800pt}}\n\\multiput(871.00,177.38)(1.600,0.560){3}{\\rule{2.120pt}{0.135pt}}\n\\multiput(871.00,174.34)(7.600,5.000){2}{\\rule{1.060pt}{0.800pt}}\n\\multiput(883.00,182.38)(1.768,0.560){3}{\\rule{2.280pt}{0.135pt}}\n\\multiput(883.00,179.34)(8.268,5.000){2}{\\rule{1.140pt}{0.800pt}}\n\\multiput(896.00,187.38)(1.600,0.560){3}{\\rule{2.120pt}{0.135pt}}\n\\multiput(896.00,184.34)(7.600,5.000){2}{\\rule{1.060pt}{0.800pt}}\n\\multiput(908.00,192.39)(1.132,0.536){5}{\\rule{1.800pt}{0.129pt}}\n\\multiput(908.00,189.34)(8.264,6.000){2}{\\rule{0.900pt}{0.800pt}}\n\\multiput(920.00,198.39)(1.132,0.536){5}{\\rule{1.800pt}{0.129pt}}\n\\multiput(920.00,195.34)(8.264,6.000){2}{\\rule{0.900pt}{0.800pt}}\n\\multiput(932.00,204.39)(1.244,0.536){5}{\\rule{1.933pt}{0.129pt}}\n\\multiput(932.00,201.34)(8.987,6.000){2}{\\rule{0.967pt}{0.800pt}}\n\\multiput(945.00,210.40)(0.913,0.526){7}{\\rule{1.571pt}{0.127pt}}\n\\multiput(945.00,207.34)(8.738,7.000){2}{\\rule{0.786pt}{0.800pt}}\n\\multiput(957.00,217.40)(0.913,0.526){7}{\\rule{1.571pt}{0.127pt}}\n\\multiput(957.00,214.34)(8.738,7.000){2}{\\rule{0.786pt}{0.800pt}}\n\\multiput(969.00,224.40)(0.847,0.520){9}{\\rule{1.500pt}{0.125pt}}\n\\multiput(969.00,221.34)(9.887,8.000){2}{\\rule{0.750pt}{0.800pt}}\n\\multiput(982.00,232.40)(0.913,0.526){7}{\\rule{1.571pt}{0.127pt}}\n\\multiput(982.00,229.34)(8.738,7.000){2}{\\rule{0.786pt}{0.800pt}}\n\\multiput(994.00,239.40)(0.774,0.520){9}{\\rule{1.400pt}{0.125pt}}\n\\multiput(994.00,236.34)(9.094,8.000){2}{\\rule{0.700pt}{0.800pt}}\n\\multiput(1006.00,247.40)(0.674,0.516){11}{\\rule{1.267pt}{0.124pt}}\n\\multiput(1006.00,244.34)(9.371,9.000){2}{\\rule{0.633pt}{0.800pt}}\n\\multiput(1018.00,256.40)(0.737,0.516){11}{\\rule{1.356pt}{0.124pt}}\n\\multiput(1018.00,253.34)(10.186,9.000){2}{\\rule{0.678pt}{0.800pt}}\n\\multiput(1031.00,265.40)(0.674,0.516){11}{\\rule{1.267pt}{0.124pt}}\n\\multiput(1031.00,262.34)(9.371,9.000){2}{\\rule{0.633pt}{0.800pt}}\n\\multiput(1043.00,274.40)(0.599,0.514){13}{\\rule{1.160pt}{0.124pt}}\n\\multiput(1043.00,271.34)(9.592,10.000){2}{\\rule{0.580pt}{0.800pt}}\n\\multiput(1055.00,284.40)(0.654,0.514){13}{\\rule{1.240pt}{0.124pt}}\n\\multiput(1055.00,281.34)(10.426,10.000){2}{\\rule{0.620pt}{0.800pt}}\n\\multiput(1068.00,294.40)(0.539,0.512){15}{\\rule{1.073pt}{0.123pt}}\n\\multiput(1068.00,291.34)(9.774,11.000){2}{\\rule{0.536pt}{0.800pt}}\n\\multiput(1080.00,305.40)(0.539,0.512){15}{\\rule{1.073pt}{0.123pt}}\n\\multiput(1080.00,302.34)(9.774,11.000){2}{\\rule{0.536pt}{0.800pt}}\n\\multiput(1092.00,316.41)(0.491,0.511){17}{\\rule{1.000pt}{0.123pt}}\n\\multiput(1092.00,313.34)(9.924,12.000){2}{\\rule{0.500pt}{0.800pt}}\n\\multiput(1104.00,328.41)(0.536,0.511){17}{\\rule{1.067pt}{0.123pt}}\n\\multiput(1104.00,325.34)(10.786,12.000){2}{\\rule{0.533pt}{0.800pt}}\n\\multiput(1117.00,340.41)(0.491,0.511){17}{\\rule{1.000pt}{0.123pt}}\n\\multiput(1117.00,337.34)(9.924,12.000){2}{\\rule{0.500pt}{0.800pt}}\n\\multiput(1130.41,351.00)(0.511,0.581){17}{\\rule{0.123pt}{1.133pt}}\n\\multiput(1127.34,351.00)(12.000,11.648){2}{\\rule{0.800pt}{0.567pt}}\n\\multiput(1142.41,365.00)(0.511,0.536){17}{\\rule{0.123pt}{1.067pt}}\n\\multiput(1139.34,365.00)(12.000,10.786){2}{\\rule{0.800pt}{0.533pt}}\n\\multiput(1154.41,378.00)(0.509,0.574){19}{\\rule{0.123pt}{1.123pt}}\n\\multiput(1151.34,378.00)(13.000,12.669){2}{\\rule{0.800pt}{0.562pt}}\n\\multiput(1167.41,393.00)(0.511,0.581){17}{\\rule{0.123pt}{1.133pt}}\n\\multiput(1164.34,393.00)(12.000,11.648){2}{\\rule{0.800pt}{0.567pt}}\n\\multiput(1179.41,407.00)(0.511,0.671){17}{\\rule{0.123pt}{1.267pt}}\n\\multiput(1176.34,407.00)(12.000,13.371){2}{\\rule{0.800pt}{0.633pt}}\n\\multiput(1191.41,423.00)(0.509,0.616){19}{\\rule{0.123pt}{1.185pt}}\n\\multiput(1188.34,423.00)(13.000,13.541){2}{\\rule{0.800pt}{0.592pt}}\n\\multiput(1204.41,439.00)(0.511,0.671){17}{\\rule{0.123pt}{1.267pt}}\n\\multiput(1201.34,439.00)(12.000,13.371){2}{\\rule{0.800pt}{0.633pt}}\n\\multiput(1216.41,455.00)(0.511,0.762){17}{\\rule{0.123pt}{1.400pt}}\n\\multiput(1213.34,455.00)(12.000,15.094){2}{\\rule{0.800pt}{0.700pt}}\n\\multiput(1228.41,473.00)(0.511,0.717){17}{\\rule{0.123pt}{1.333pt}}\n\\multiput(1225.34,473.00)(12.000,14.233){2}{\\rule{0.800pt}{0.667pt}}\n\\multiput(1240.41,490.00)(0.509,0.740){19}{\\rule{0.123pt}{1.369pt}}\n\\multiput(1237.34,490.00)(13.000,16.158){2}{\\rule{0.800pt}{0.685pt}}\n\\multiput(1253.41,509.00)(0.511,0.807){17}{\\rule{0.123pt}{1.467pt}}\n\\multiput(1250.34,509.00)(12.000,15.956){2}{\\rule{0.800pt}{0.733pt}}\n\\multiput(1265.41,528.00)(0.511,0.852){17}{\\rule{0.123pt}{1.533pt}}\n\\multiput(1262.34,528.00)(12.000,16.817){2}{\\rule{0.800pt}{0.767pt}}\n\\multiput(1277.41,548.00)(0.509,0.823){19}{\\rule{0.123pt}{1.492pt}}\n\\multiput(1274.34,548.00)(13.000,17.903){2}{\\rule{0.800pt}{0.746pt}}\n\\multiput(1290.41,569.00)(0.511,0.897){17}{\\rule{0.123pt}{1.600pt}}\n\\multiput(1287.34,569.00)(12.000,17.679){2}{\\rule{0.800pt}{0.800pt}}\n\\multiput(1302.41,590.00)(0.511,0.943){17}{\\rule{0.123pt}{1.667pt}}\n\\multiput(1299.34,590.00)(12.000,18.541){2}{\\rule{0.800pt}{0.833pt}}\n\\multiput(1314.41,612.00)(0.511,0.988){17}{\\rule{0.123pt}{1.733pt}}\n\\multiput(1311.34,612.00)(12.000,19.402){2}{\\rule{0.800pt}{0.867pt}}\n\\multiput(1326.41,635.00)(0.509,0.905){19}{\\rule{0.123pt}{1.615pt}}\n\\multiput(1323.34,635.00)(13.000,19.647){2}{\\rule{0.800pt}{0.808pt}}\n\\multiput(1339.41,658.00)(0.511,1.078){17}{\\rule{0.123pt}{1.867pt}}\n\\multiput(1336.34,658.00)(12.000,21.126){2}{\\rule{0.800pt}{0.933pt}}\n\\multiput(1351.41,683.00)(0.511,1.078){17}{\\rule{0.123pt}{1.867pt}}\n\\multiput(1348.34,683.00)(12.000,21.126){2}{\\rule{0.800pt}{0.933pt}}\n\\multiput(1363.41,708.00)(0.509,1.029){19}{\\rule{0.123pt}{1.800pt}}\n\\multiput(1360.34,708.00)(13.000,22.264){2}{\\rule{0.800pt}{0.900pt}}\n\\multiput(1376.41,734.00)(0.511,1.169){17}{\\rule{0.123pt}{2.000pt}}\n\\multiput(1373.34,734.00)(12.000,22.849){2}{\\rule{0.800pt}{1.000pt}}\n\\multiput(1388.41,761.00)(0.511,1.214){17}{\\rule{0.123pt}{2.067pt}}\n\\multiput(1385.34,761.00)(12.000,23.711){2}{\\rule{0.800pt}{1.033pt}}\n\\multiput(1400.41,789.00)(0.511,1.214){17}{\\rule{0.123pt}{2.067pt}}\n\\multiput(1397.34,789.00)(12.000,23.711){2}{\\rule{0.800pt}{1.033pt}}\n\\multiput(1412.41,817.00)(0.509,1.195){19}{\\rule{0.123pt}{2.046pt}}\n\\multiput(1409.34,817.00)(13.000,25.753){2}{\\rule{0.800pt}{1.023pt}}\n\\multiput(1425.41,847.00)(0.511,1.304){17}{\\rule{0.123pt}{2.200pt}}\n\\multiput(1422.34,847.00)(12.000,25.434){2}{\\rule{0.800pt}{1.100pt}}\n\\put(576.0,119.0){\\rule[-0.400pt]{2.891pt}{0.800pt}}\n\\put(220,113){\\usebox{\\plotpoint}}\n\\multiput(221.41,113.00)(0.511,1.304){17}{\\rule{0.123pt}{2.200pt}}\n\\multiput(218.34,113.00)(12.000,25.434){2}{\\rule{0.800pt}{1.100pt}}\n\\multiput(233.41,143.00)(0.509,1.195){19}{\\rule{0.123pt}{2.046pt}}\n\\multiput(230.34,143.00)(13.000,25.753){2}{\\rule{0.800pt}{1.023pt}}\n\\multiput(246.41,173.00)(0.511,1.214){17}{\\rule{0.123pt}{2.067pt}}\n\\multiput(243.34,173.00)(12.000,23.711){2}{\\rule{0.800pt}{1.033pt}}\n\\multiput(258.41,201.00)(0.511,1.214){17}{\\rule{0.123pt}{2.067pt}}\n\\multiput(255.34,201.00)(12.000,23.711){2}{\\rule{0.800pt}{1.033pt}}\n\\multiput(270.41,229.00)(0.511,1.169){17}{\\rule{0.123pt}{2.000pt}}\n\\multiput(267.34,229.00)(12.000,22.849){2}{\\rule{0.800pt}{1.000pt}}\n\\multiput(282.41,256.00)(0.509,1.029){19}{\\rule{0.123pt}{1.800pt}}\n\\multiput(279.34,256.00)(13.000,22.264){2}{\\rule{0.800pt}{0.900pt}}\n\\multiput(295.41,282.00)(0.511,1.078){17}{\\rule{0.123pt}{1.867pt}}\n\\multiput(292.34,282.00)(12.000,21.126){2}{\\rule{0.800pt}{0.933pt}}\n\\multiput(307.41,307.00)(0.511,1.078){17}{\\rule{0.123pt}{1.867pt}}\n\\multiput(304.34,307.00)(12.000,21.126){2}{\\rule{0.800pt}{0.933pt}}\n\\multiput(319.41,332.00)(0.509,0.905){19}{\\rule{0.123pt}{1.615pt}}\n\\multiput(316.34,332.00)(13.000,19.647){2}{\\rule{0.800pt}{0.808pt}}\n\\multiput(332.41,355.00)(0.511,0.988){17}{\\rule{0.123pt}{1.733pt}}\n\\multiput(329.34,355.00)(12.000,19.402){2}{\\rule{0.800pt}{0.867pt}}\n\\multiput(344.41,378.00)(0.511,0.943){17}{\\rule{0.123pt}{1.667pt}}\n\\multiput(341.34,378.00)(12.000,18.541){2}{\\rule{0.800pt}{0.833pt}}\n\\multiput(356.41,400.00)(0.511,0.897){17}{\\rule{0.123pt}{1.600pt}}\n\\multiput(353.34,400.00)(12.000,17.679){2}{\\rule{0.800pt}{0.800pt}}\n\\multiput(368.41,421.00)(0.509,0.823){19}{\\rule{0.123pt}{1.492pt}}\n\\multiput(365.34,421.00)(13.000,17.903){2}{\\rule{0.800pt}{0.746pt}}\n\\multiput(381.41,442.00)(0.511,0.852){17}{\\rule{0.123pt}{1.533pt}}\n\\multiput(378.34,442.00)(12.000,16.817){2}{\\rule{0.800pt}{0.767pt}}\n\\multiput(393.41,462.00)(0.511,0.807){17}{\\rule{0.123pt}{1.467pt}}\n\\multiput(390.34,462.00)(12.000,15.956){2}{\\rule{0.800pt}{0.733pt}}\n\\multiput(405.41,481.00)(0.509,0.740){19}{\\rule{0.123pt}{1.369pt}}\n\\multiput(402.34,481.00)(13.000,16.158){2}{\\rule{0.800pt}{0.685pt}}\n\\multiput(418.41,500.00)(0.511,0.717){17}{\\rule{0.123pt}{1.333pt}}\n\\multiput(415.34,500.00)(12.000,14.233){2}{\\rule{0.800pt}{0.667pt}}\n\\multiput(430.41,517.00)(0.511,0.762){17}{\\rule{0.123pt}{1.400pt}}\n\\multiput(427.34,517.00)(12.000,15.094){2}{\\rule{0.800pt}{0.700pt}}\n\\multiput(442.41,535.00)(0.511,0.671){17}{\\rule{0.123pt}{1.267pt}}\n\\multiput(439.34,535.00)(12.000,13.371){2}{\\rule{0.800pt}{0.633pt}}\n\\multiput(454.41,551.00)(0.509,0.616){19}{\\rule{0.123pt}{1.185pt}}\n\\multiput(451.34,551.00)(13.000,13.541){2}{\\rule{0.800pt}{0.592pt}}\n\\multiput(467.41,567.00)(0.511,0.671){17}{\\rule{0.123pt}{1.267pt}}\n\\multiput(464.34,567.00)(12.000,13.371){2}{\\rule{0.800pt}{0.633pt}}\n\\multiput(479.41,583.00)(0.511,0.581){17}{\\rule{0.123pt}{1.133pt}}\n\\multiput(476.34,583.00)(12.000,11.648){2}{\\rule{0.800pt}{0.567pt}}\n\\multiput(491.41,597.00)(0.509,0.574){19}{\\rule{0.123pt}{1.123pt}}\n\\multiput(488.34,597.00)(13.000,12.669){2}{\\rule{0.800pt}{0.562pt}}\n\\multiput(504.41,612.00)(0.511,0.536){17}{\\rule{0.123pt}{1.067pt}}\n\\multiput(501.34,612.00)(12.000,10.786){2}{\\rule{0.800pt}{0.533pt}}\n\\multiput(516.41,625.00)(0.511,0.581){17}{\\rule{0.123pt}{1.133pt}}\n\\multiput(513.34,625.00)(12.000,11.648){2}{\\rule{0.800pt}{0.567pt}}\n\\multiput(527.00,640.41)(0.491,0.511){17}{\\rule{1.000pt}{0.123pt}}\n\\multiput(527.00,637.34)(9.924,12.000){2}{\\rule{0.500pt}{0.800pt}}\n\\multiput(539.00,652.41)(0.536,0.511){17}{\\rule{1.067pt}{0.123pt}}\n\\multiput(539.00,649.34)(10.786,12.000){2}{\\rule{0.533pt}{0.800pt}}\n\\multiput(552.00,664.41)(0.491,0.511){17}{\\rule{1.000pt}{0.123pt}}\n\\multiput(552.00,661.34)(9.924,12.000){2}{\\rule{0.500pt}{0.800pt}}\n\\multiput(564.00,676.40)(0.539,0.512){15}{\\rule{1.073pt}{0.123pt}}\n\\multiput(564.00,673.34)(9.774,11.000){2}{\\rule{0.536pt}{0.800pt}}\n\\multiput(576.00,687.40)(0.539,0.512){15}{\\rule{1.073pt}{0.123pt}}\n\\multiput(576.00,684.34)(9.774,11.000){2}{\\rule{0.536pt}{0.800pt}}\n\\multiput(588.00,698.40)(0.654,0.514){13}{\\rule{1.240pt}{0.124pt}}\n\\multiput(588.00,695.34)(10.426,10.000){2}{\\rule{0.620pt}{0.800pt}}\n\\multiput(601.00,708.40)(0.599,0.514){13}{\\rule{1.160pt}{0.124pt}}\n\\multiput(601.00,705.34)(9.592,10.000){2}{\\rule{0.580pt}{0.800pt}}\n\\multiput(613.00,718.40)(0.674,0.516){11}{\\rule{1.267pt}{0.124pt}}\n\\multiput(613.00,715.34)(9.371,9.000){2}{\\rule{0.633pt}{0.800pt}}\n\\multiput(625.00,727.40)(0.737,0.516){11}{\\rule{1.356pt}{0.124pt}}\n\\multiput(625.00,724.34)(10.186,9.000){2}{\\rule{0.678pt}{0.800pt}}\n\\multiput(638.00,736.40)(0.674,0.516){11}{\\rule{1.267pt}{0.124pt}}\n\\multiput(638.00,733.34)(9.371,9.000){2}{\\rule{0.633pt}{0.800pt}}\n\\multiput(650.00,745.40)(0.774,0.520){9}{\\rule{1.400pt}{0.125pt}}\n\\multiput(650.00,742.34)(9.094,8.000){2}{\\rule{0.700pt}{0.800pt}}\n\\multiput(662.00,753.40)(0.913,0.526){7}{\\rule{1.571pt}{0.127pt}}\n\\multiput(662.00,750.34)(8.738,7.000){2}{\\rule{0.786pt}{0.800pt}}\n\\multiput(674.00,760.40)(0.847,0.520){9}{\\rule{1.500pt}{0.125pt}}\n\\multiput(674.00,757.34)(9.887,8.000){2}{\\rule{0.750pt}{0.800pt}}\n\\multiput(687.00,768.40)(0.913,0.526){7}{\\rule{1.571pt}{0.127pt}}\n\\multiput(687.00,765.34)(8.738,7.000){2}{\\rule{0.786pt}{0.800pt}}\n\\multiput(699.00,775.40)(0.913,0.526){7}{\\rule{1.571pt}{0.127pt}}\n\\multiput(699.00,772.34)(8.738,7.000){2}{\\rule{0.786pt}{0.800pt}}\n\\multiput(711.00,782.39)(1.244,0.536){5}{\\rule{1.933pt}{0.129pt}}\n\\multiput(711.00,779.34)(8.987,6.000){2}{\\rule{0.967pt}{0.800pt}}\n\\multiput(724.00,788.39)(1.132,0.536){5}{\\rule{1.800pt}{0.129pt}}\n\\multiput(724.00,785.34)(8.264,6.000){2}{\\rule{0.900pt}{0.800pt}}\n\\multiput(736.00,794.39)(1.132,0.536){5}{\\rule{1.800pt}{0.129pt}}\n\\multiput(736.00,791.34)(8.264,6.000){2}{\\rule{0.900pt}{0.800pt}}\n\\multiput(748.00,800.38)(1.600,0.560){3}{\\rule{2.120pt}{0.135pt}}\n\\multiput(748.00,797.34)(7.600,5.000){2}{\\rule{1.060pt}{0.800pt}}\n\\multiput(760.00,805.38)(1.768,0.560){3}{\\rule{2.280pt}{0.135pt}}\n\\multiput(760.00,802.34)(8.268,5.000){2}{\\rule{1.140pt}{0.800pt}}\n\\multiput(773.00,810.38)(1.600,0.560){3}{\\rule{2.120pt}{0.135pt}}\n\\multiput(773.00,807.34)(7.600,5.000){2}{\\rule{1.060pt}{0.800pt}}\n\\multiput(785.00,815.38)(1.600,0.560){3}{\\rule{2.120pt}{0.135pt}}\n\\multiput(785.00,812.34)(7.600,5.000){2}{\\rule{1.060pt}{0.800pt}}\n\\put(797,819.34){\\rule{2.800pt}{0.800pt}}\n\\multiput(797.00,817.34)(7.188,4.000){2}{\\rule{1.400pt}{0.800pt}}\n\\put(810,823.34){\\rule{2.600pt}{0.800pt}}\n\\multiput(810.00,821.34)(6.604,4.000){2}{\\rule{1.300pt}{0.800pt}}\n\\put(822,827.34){\\rule{2.600pt}{0.800pt}}\n\\multiput(822.00,825.34)(6.604,4.000){2}{\\rule{1.300pt}{0.800pt}}\n\\put(834,831.34){\\rule{2.600pt}{0.800pt}}\n\\multiput(834.00,829.34)(6.604,4.000){2}{\\rule{1.300pt}{0.800pt}}\n\\put(846,834.84){\\rule{3.132pt}{0.800pt}}\n\\multiput(846.00,833.34)(6.500,3.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(859,837.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(859.00,836.34)(6.000,3.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(871,840.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(871.00,839.34)(6.000,3.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(883,843.84){\\rule{3.132pt}{0.800pt}}\n\\multiput(883.00,842.34)(6.500,3.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(896,846.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(896.00,845.34)(6.000,3.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(908,849.34){\\rule{2.891pt}{0.800pt}}\n\\multiput(908.00,848.34)(6.000,2.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(920,851.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(920.00,850.34)(6.000,3.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(932,854.34){\\rule{3.132pt}{0.800pt}}\n\\multiput(932.00,853.34)(6.500,2.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(945,856.34){\\rule{2.891pt}{0.800pt}}\n\\multiput(945.00,855.34)(6.000,2.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(957,857.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(957.00,857.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(969,859.34){\\rule{3.132pt}{0.800pt}}\n\\multiput(969.00,858.34)(6.500,2.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(982,861.34){\\rule{2.891pt}{0.800pt}}\n\\multiput(982.00,860.34)(6.000,2.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(994,862.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(994.00,862.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(1006,863.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(1006.00,863.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(1018,865.34){\\rule{3.132pt}{0.800pt}}\n\\multiput(1018.00,864.34)(6.500,2.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(1031,866.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(1031.00,866.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(1043,867.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(1043.00,867.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(1055,868.84){\\rule{3.132pt}{0.800pt}}\n\\multiput(1055.00,868.34)(6.500,1.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(1080,869.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(1080.00,869.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(1092,870.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(1092.00,870.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(1068.0,871.0){\\rule[-0.400pt]{2.891pt}{0.800pt}}\n\\put(1117,871.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(1117.00,871.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(1104.0,873.0){\\rule[-0.400pt]{3.132pt}{0.800pt}}\n\\put(1141,872.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(1141.00,872.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(1129.0,874.0){\\rule[-0.400pt]{2.891pt}{0.800pt}}\n\\put(1178,873.84){\\rule{2.891pt}{0.800pt}}\n\\multiput(1178.00,873.34)(6.000,1.000){2}{\\rule{1.445pt}{0.800pt}}\n\\put(1153.0,875.0){\\rule[-0.400pt]{6.022pt}{0.800pt}}\n\\put(1239,874.84){\\rule{3.132pt}{0.800pt}}\n\\multiput(1239.00,874.34)(6.500,1.000){2}{\\rule{1.566pt}{0.800pt}}\n\\put(1190.0,876.0){\\rule[-0.400pt]{11.804pt}{0.800pt}}\n\\put(1252.0,877.0){\\rule[-0.400pt]{44.326pt}{0.800pt}}\n\\sbox{\\plotpoint}{\\rule[-0.500pt]{1.000pt}{1.000pt}}\n\\put(220,113){\\usebox{\\plotpoint}}\n\\put(220.00,113.00){\\usebox{\\plotpoint}}\n\\put(240.76,113.00){\\usebox{\\plotpoint}}\n\\multiput(245,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(261.51,113.00){\\usebox{\\plotpoint}}\n\\multiput(269,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(282.27,113.00){\\usebox{\\plotpoint}}\n\\put(303.02,113.00){\\usebox{\\plotpoint}}\n\\multiput(306,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(323.78,113.00){\\usebox{\\plotpoint}}\n\\multiput(331,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(344.53,113.00){\\usebox{\\plotpoint}}\n\\put(365.29,113.00){\\usebox{\\plotpoint}}\n\\multiput(367,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(386.04,113.00){\\usebox{\\plotpoint}}\n\\multiput(392,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(406.80,113.00){\\usebox{\\plotpoint}}\n\\put(427.55,113.00){\\usebox{\\plotpoint}}\n\\multiput(429,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(448.31,113.00){\\usebox{\\plotpoint}}\n\\multiput(453,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(469.07,113.00){\\usebox{\\plotpoint}}\n\\put(489.82,113.00){\\usebox{\\plotpoint}}\n\\multiput(490,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(510.58,113.00){\\usebox{\\plotpoint}}\n\\multiput(515,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(531.33,113.00){\\usebox{\\plotpoint}}\n\\multiput(539,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(552.09,113.00){\\usebox{\\plotpoint}}\n\\put(572.84,113.00){\\usebox{\\plotpoint}}\n\\multiput(576,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(593.60,113.00){\\usebox{\\plotpoint}}\n\\multiput(601,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(614.35,113.00){\\usebox{\\plotpoint}}\n\\put(635.11,113.00){\\usebox{\\plotpoint}}\n\\multiput(638,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(655.87,113.00){\\usebox{\\plotpoint}}\n\\multiput(662,113)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(676.62,113.00){\\usebox{\\plotpoint}}\n\\put(697.38,113.00){\\usebox{\\plotpoint}}\n\\multiput(699,113)(20.684,1.724){0}{\\usebox{\\plotpoint}}\n\\put(718.09,114.00){\\usebox{\\plotpoint}}\n\\multiput(724,114)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(738.85,114.00){\\usebox{\\plotpoint}}\n\\put(759.60,114.00){\\usebox{\\plotpoint}}\n\\multiput(760,114)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(780.33,114.61){\\usebox{\\plotpoint}}\n\\multiput(785,115)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(801.07,115.00){\\usebox{\\plotpoint}}\n\\put(821.79,115.98){\\usebox{\\plotpoint}}\n\\multiput(822,116)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(842.51,116.71){\\usebox{\\plotpoint}}\n\\multiput(846,117)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(863.24,117.35){\\usebox{\\plotpoint}}\n\\multiput(871,118)(20.684,1.724){0}{\\usebox{\\plotpoint}}\n\\put(883.92,119.07){\\usebox{\\plotpoint}}\n\\put(904.61,120.72){\\usebox{\\plotpoint}}\n\\multiput(908,121)(20.684,1.724){0}{\\usebox{\\plotpoint}}\n\\put(925.24,122.87){\\usebox{\\plotpoint}}\n\\multiput(932,124)(20.694,1.592){0}{\\usebox{\\plotpoint}}\n\\put(945.86,125.14){\\usebox{\\plotpoint}}\n\\put(966.33,128.55){\\usebox{\\plotpoint}}\n\\multiput(969,129)(20.514,3.156){0}{\\usebox{\\plotpoint}}\n\\put(986.75,132.19){\\usebox{\\plotpoint}}\n\\multiput(994,134)(20.473,3.412){0}{\\usebox{\\plotpoint}}\n\\put(1007.08,136.27){\\usebox{\\plotpoint}}\n\\put(1027.08,141.79){\\usebox{\\plotpoint}}\n\\multiput(1031,143)(19.690,6.563){0}{\\usebox{\\plotpoint}}\n\\put(1046.80,148.27){\\usebox{\\plotpoint}}\n\\put(1066.31,155.35){\\usebox{\\plotpoint}}\n\\multiput(1068,156)(19.159,7.983){0}{\\usebox{\\plotpoint}}\n\\put(1085.48,163.28){\\usebox{\\plotpoint}}\n\\put(1103.83,172.90){\\usebox{\\plotpoint}}\n\\multiput(1104,173)(18.275,9.840){0}{\\usebox{\\plotpoint}}\n\\put(1122.00,182.92){\\usebox{\\plotpoint}}\n\\put(1139.12,194.59){\\usebox{\\plotpoint}}\n\\multiput(1141,196)(16.604,12.453){0}{\\usebox{\\plotpoint}}\n\\put(1155.70,207.08){\\usebox{\\plotpoint}}\n\\put(1171.72,220.25){\\usebox{\\plotpoint}}\n\\put(1186.30,235.00){\\usebox{\\plotpoint}}\n\\put(1200.82,249.82){\\usebox{\\plotpoint}}\n\\put(1214.50,265.42){\\usebox{\\plotpoint}}\n\\put(1227.00,281.99){\\usebox{\\plotpoint}}\n\\put(1238.97,298.95){\\usebox{\\plotpoint}}\n\\put(1250.69,316.08){\\usebox{\\plotpoint}}\n\\put(1261.14,334.00){\\usebox{\\plotpoint}}\n\\put(1271.18,352.17){\\usebox{\\plotpoint}}\n\\put(1281.09,370.40){\\usebox{\\plotpoint}}\n\\multiput(1289,385)(8.698,18.845){2}{\\usebox{\\plotpoint}}\n\\put(1307.71,426.65){\\usebox{\\plotpoint}}\n\\multiput(1313,439)(7.708,19.271){2}{\\usebox{\\plotpoint}}\n\\put(1331.06,484.37){\\usebox{\\plotpoint}}\n\\multiput(1338,502)(6.563,19.690){2}{\\usebox{\\plotpoint}}\n\\multiput(1350,538)(6.250,19.792){2}{\\usebox{\\plotpoint}}\n\\multiput(1362,576)(6.137,19.827){2}{\\usebox{\\plotpoint}}\n\\multiput(1375,618)(5.461,20.024){2}{\\usebox{\\plotpoint}}\n\\multiput(1387,662)(5.034,20.136){3}{\\usebox{\\plotpoint}}\n\\multiput(1399,710)(4.667,20.224){2}{\\usebox{\\plotpoint}}\n\\multiput(1411,762)(4.774,20.199){3}{\\usebox{\\plotpoint}}\n\\multiput(1424,817)(4.070,20.352){3}{\\usebox{\\plotpoint}}\n\\put(1436,877){\\usebox{\\plotpoint}}\n\\put(220,113){\\usebox{\\plotpoint}}\n\\multiput(220,113)(4.070,20.352){3}{\\usebox{\\plotpoint}}\n\\multiput(232,173)(4.774,20.199){3}{\\usebox{\\plotpoint}}\n\\multiput(245,228)(4.667,20.224){3}{\\usebox{\\plotpoint}}\n\\multiput(257,280)(5.034,20.136){2}{\\usebox{\\plotpoint}}\n\\multiput(269,328)(5.461,20.024){2}{\\usebox{\\plotpoint}}\n\\multiput(281,372)(6.137,19.827){2}{\\usebox{\\plotpoint}}\n\\multiput(294,414)(6.250,19.792){2}{\\usebox{\\plotpoint}}\n\\multiput(306,452)(6.563,19.690){2}{\\usebox{\\plotpoint}}\n\\multiput(318,488)(7.607,19.311){2}{\\usebox{\\plotpoint}}\n\\put(335.63,532.59){\\usebox{\\plotpoint}}\n\\multiput(343,551)(8.176,19.077){2}{\\usebox{\\plotpoint}}\n\\put(360.02,589.87){\\usebox{\\plotpoint}}\n\\multiput(367,605)(9.885,18.250){2}{\\usebox{\\plotpoint}}\n\\put(388.77,645.07){\\usebox{\\plotpoint}}\n\\put(398.95,663.16){\\usebox{\\plotpoint}}\n\\put(409.97,680.73){\\usebox{\\plotpoint}}\n\\put(421.79,697.79){\\usebox{\\plotpoint}}\n\\put(433.95,714.60){\\usebox{\\plotpoint}}\n\\put(446.86,730.84){\\usebox{\\plotpoint}}\n\\put(461.01,746.01){\\usebox{\\plotpoint}}\n\\put(475.29,761.06){\\usebox{\\plotpoint}}\n\\multiput(478,764)(15.300,14.025){0}{\\usebox{\\plotpoint}}\n\\put(490.38,775.29){\\usebox{\\plotpoint}}\n\\put(506.87,787.90){\\usebox{\\plotpoint}}\n\\put(523.47,800.35){\\usebox{\\plotpoint}}\n\\multiput(527,803)(17.928,10.458){0}{\\usebox{\\plotpoint}}\n\\put(541.16,811.16){\\usebox{\\plotpoint}}\n\\put(559.29,821.25){\\usebox{\\plotpoint}}\n\\multiput(564,824)(19.159,7.983){0}{\\usebox{\\plotpoint}}\n\\put(578.13,829.89){\\usebox{\\plotpoint}}\n\\put(597.39,837.61){\\usebox{\\plotpoint}}\n\\multiput(601,839)(19.690,6.563){0}{\\usebox{\\plotpoint}}\n\\put(617.02,844.34){\\usebox{\\plotpoint}}\n\\put(636.80,850.63){\\usebox{\\plotpoint}}\n\\multiput(638,851)(20.136,5.034){0}{\\usebox{\\plotpoint}}\n\\put(657.03,855.17){\\usebox{\\plotpoint}}\n\\multiput(662,856)(20.136,5.034){0}{\\usebox{\\plotpoint}}\n\\put(677.31,859.51){\\usebox{\\plotpoint}}\n\\put(697.81,862.80){\\usebox{\\plotpoint}}\n\\multiput(699,863)(20.473,3.412){0}{\\usebox{\\plotpoint}}\n\\put(718.36,865.57){\\usebox{\\plotpoint}}\n\\multiput(724,866)(20.473,3.412){0}{\\usebox{\\plotpoint}}\n\\put(738.92,868.24){\\usebox{\\plotpoint}}\n\\put(759.60,869.97){\\usebox{\\plotpoint}}\n\\multiput(760,870)(20.694,1.592){0}{\\usebox{\\plotpoint}}\n\\put(780.30,871.61){\\usebox{\\plotpoint}}\n\\multiput(785,872)(20.684,1.724){0}{\\usebox{\\plotpoint}}\n\\put(800.99,873.00){\\usebox{\\plotpoint}}\n\\put(821.71,873.98){\\usebox{\\plotpoint}}\n\\multiput(822,874)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(842.43,874.70){\\usebox{\\plotpoint}}\n\\multiput(846,875)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(863.18,875.00){\\usebox{\\plotpoint}}\n\\multiput(871,875)(20.684,1.724){0}{\\usebox{\\plotpoint}}\n\\put(883.89,876.00){\\usebox{\\plotpoint}}\n\\put(904.65,876.00){\\usebox{\\plotpoint}}\n\\multiput(908,876)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(925.40,876.00){\\usebox{\\plotpoint}}\n\\multiput(932,876)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(946.15,876.10){\\usebox{\\plotpoint}}\n\\put(966.87,877.00){\\usebox{\\plotpoint}}\n\\multiput(969,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(987.63,877.00){\\usebox{\\plotpoint}}\n\\multiput(994,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1008.38,877.00){\\usebox{\\plotpoint}}\n\\put(1029.14,877.00){\\usebox{\\plotpoint}}\n\\multiput(1031,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1049.89,877.00){\\usebox{\\plotpoint}}\n\\multiput(1055,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1070.65,877.00){\\usebox{\\plotpoint}}\n\\put(1091.40,877.00){\\usebox{\\plotpoint}}\n\\multiput(1092,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1112.16,877.00){\\usebox{\\plotpoint}}\n\\multiput(1117,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1132.91,877.00){\\usebox{\\plotpoint}}\n\\multiput(1141,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1153.67,877.00){\\usebox{\\plotpoint}}\n\\put(1174.43,877.00){\\usebox{\\plotpoint}}\n\\multiput(1178,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1195.18,877.00){\\usebox{\\plotpoint}}\n\\multiput(1203,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1215.94,877.00){\\usebox{\\plotpoint}}\n\\put(1236.69,877.00){\\usebox{\\plotpoint}}\n\\multiput(1239,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1257.45,877.00){\\usebox{\\plotpoint}}\n\\multiput(1264,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1278.20,877.00){\\usebox{\\plotpoint}}\n\\put(1298.96,877.00){\\usebox{\\plotpoint}}\n\\multiput(1301,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1319.71,877.00){\\usebox{\\plotpoint}}\n\\multiput(1325,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1340.47,877.00){\\usebox{\\plotpoint}}\n\\put(1361.22,877.00){\\usebox{\\plotpoint}}\n\\multiput(1362,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1381.98,877.00){\\usebox{\\plotpoint}}\n\\multiput(1387,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1402.74,877.00){\\usebox{\\plotpoint}}\n\\put(1423.49,877.00){\\usebox{\\plotpoint}}\n\\multiput(1424,877)(20.756,0.000){0}{\\usebox{\\plotpoint}}\n\\put(1436,877){\\usebox{\\plotpoint}}\n\\sbox{\\plotpoint}{\\rule[-0.600pt]{1.200pt}{1.200pt}}\n\\put(220,113){\\usebox{\\plotpoint}}\n\\put(982,111.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(982.00,110.51)(6.000,1.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(220.0,113.0){\\rule[-0.600pt]{183.566pt}{1.200pt}}\n\\put(1043,112.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(1043.00,111.51)(6.000,1.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(994.0,114.0){\\rule[-0.600pt]{11.804pt}{1.200pt}}\n\\put(1068,113.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(1068.00,112.51)(6.000,1.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(1080,114.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(1080.00,113.51)(6.000,1.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(1092,115.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(1092.00,114.51)(6.000,1.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(1104,116.01){\\rule{3.132pt}{1.200pt}}\n\\multiput(1104.00,115.51)(6.500,1.000){2}{\\rule{1.566pt}{1.200pt}}\n\\put(1117,117.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(1117.00,116.51)(6.000,1.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(1129,118.51){\\rule{2.891pt}{1.200pt}}\n\\multiput(1129.00,117.51)(6.000,2.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(1141,120.51){\\rule{2.891pt}{1.200pt}}\n\\multiput(1141.00,119.51)(6.000,2.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(1153,123.01){\\rule{3.132pt}{1.200pt}}\n\\multiput(1153.00,121.51)(6.500,3.000){2}{\\rule{1.566pt}{1.200pt}}\n\\put(1166,126.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(1166.00,124.51)(6.000,3.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(1178,129.51){\\rule{2.891pt}{1.200pt}}\n\\multiput(1178.00,127.51)(6.000,4.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(1190,133.51){\\rule{3.132pt}{1.200pt}}\n\\multiput(1190.00,131.51)(6.500,4.000){2}{\\rule{1.566pt}{1.200pt}}\n\\multiput(1203.00,140.24)(0.792,0.509){2}{\\rule{2.700pt}{0.123pt}}\n\\multiput(1203.00,135.51)(6.396,6.000){2}{\\rule{1.350pt}{1.200pt}}\n\\multiput(1215.00,146.24)(0.792,0.509){2}{\\rule{2.700pt}{0.123pt}}\n\\multiput(1215.00,141.51)(6.396,6.000){2}{\\rule{1.350pt}{1.200pt}}\n\\multiput(1227.00,152.24)(0.588,0.502){8}{\\rule{1.900pt}{0.121pt}}\n\\multiput(1227.00,147.51)(8.056,9.000){2}{\\rule{0.950pt}{1.200pt}}\n\\multiput(1239.00,161.24)(0.651,0.502){8}{\\rule{2.033pt}{0.121pt}}\n\\multiput(1239.00,156.51)(8.780,9.000){2}{\\rule{1.017pt}{1.200pt}}\n\\multiput(1252.00,170.24)(0.444,0.501){14}{\\rule{1.500pt}{0.121pt}}\n\\multiput(1252.00,165.51)(8.887,12.000){2}{\\rule{0.750pt}{1.200pt}}\n\\multiput(1266.24,180.00)(0.501,0.489){14}{\\rule{0.121pt}{1.600pt}}\n\\multiput(1261.51,180.00)(12.000,9.679){2}{\\rule{1.200pt}{0.800pt}}\n\\multiput(1278.24,193.00)(0.501,0.616){16}{\\rule{0.121pt}{1.869pt}}\n\\multiput(1273.51,193.00)(13.000,13.120){2}{\\rule{1.200pt}{0.935pt}}\n\\multiput(1291.24,210.00)(0.501,0.759){14}{\\rule{0.121pt}{2.200pt}}\n\\multiput(1286.51,210.00)(12.000,14.434){2}{\\rule{1.200pt}{1.100pt}}\n\\multiput(1303.24,229.00)(0.501,0.939){14}{\\rule{0.121pt}{2.600pt}}\n\\multiput(1298.51,229.00)(12.000,17.604){2}{\\rule{1.200pt}{1.300pt}}\n\\multiput(1315.24,252.00)(0.501,1.119){14}{\\rule{0.121pt}{3.000pt}}\n\\multiput(1310.51,252.00)(12.000,20.773){2}{\\rule{1.200pt}{1.500pt}}\n\\multiput(1327.24,279.00)(0.501,1.233){16}{\\rule{0.121pt}{3.254pt}}\n\\multiput(1322.51,279.00)(13.000,25.246){2}{\\rule{1.200pt}{1.627pt}}\n\\multiput(1340.24,311.00)(0.501,1.614){14}{\\rule{0.121pt}{4.100pt}}\n\\multiput(1335.51,311.00)(12.000,29.490){2}{\\rule{1.200pt}{2.050pt}}\n\\multiput(1352.24,349.00)(0.501,1.929){14}{\\rule{0.121pt}{4.800pt}}\n\\multiput(1347.51,349.00)(12.000,35.037){2}{\\rule{1.200pt}{2.400pt}}\n\\multiput(1364.24,394.00)(0.501,2.055){16}{\\rule{0.121pt}{5.100pt}}\n\\multiput(1359.51,394.00)(13.000,41.415){2}{\\rule{1.200pt}{2.550pt}}\n\\multiput(1377.24,446.00)(0.501,2.694){14}{\\rule{0.121pt}{6.500pt}}\n\\multiput(1372.51,446.00)(12.000,48.509){2}{\\rule{1.200pt}{3.250pt}}\n\\multiput(1389.24,508.00)(0.501,3.144){14}{\\rule{0.121pt}{7.500pt}}\n\\multiput(1384.51,508.00)(12.000,56.433){2}{\\rule{1.200pt}{3.750pt}}\n\\multiput(1401.24,580.00)(0.501,3.683){14}{\\rule{0.121pt}{8.700pt}}\n\\multiput(1396.51,580.00)(12.000,65.943){2}{\\rule{1.200pt}{4.350pt}}\n\\multiput(1413.24,664.00)(0.501,3.947){16}{\\rule{0.121pt}{9.346pt}}\n\\multiput(1408.51,664.00)(13.000,78.602){2}{\\rule{1.200pt}{4.673pt}}\n\\multiput(1426.24,762.00)(0.501,5.078){14}{\\rule{0.121pt}{11.800pt}}\n\\multiput(1421.51,762.00)(12.000,90.509){2}{\\rule{1.200pt}{5.900pt}}\n\\put(1055.0,115.0){\\rule[-0.600pt]{3.132pt}{1.200pt}}\n\\put(220,113){\\usebox{\\plotpoint}}\n\\multiput(222.24,113.00)(0.501,5.078){14}{\\rule{0.121pt}{11.800pt}}\n\\multiput(217.51,113.00)(12.000,90.509){2}{\\rule{1.200pt}{5.900pt}}\n\\multiput(234.24,228.00)(0.501,3.947){16}{\\rule{0.121pt}{9.346pt}}\n\\multiput(229.51,228.00)(13.000,78.602){2}{\\rule{1.200pt}{4.673pt}}\n\\multiput(247.24,326.00)(0.501,3.683){14}{\\rule{0.121pt}{8.700pt}}\n\\multiput(242.51,326.00)(12.000,65.943){2}{\\rule{1.200pt}{4.350pt}}\n\\multiput(259.24,410.00)(0.501,3.144){14}{\\rule{0.121pt}{7.500pt}}\n\\multiput(254.51,410.00)(12.000,56.433){2}{\\rule{1.200pt}{3.750pt}}\n\\multiput(271.24,482.00)(0.501,2.694){14}{\\rule{0.121pt}{6.500pt}}\n\\multiput(266.51,482.00)(12.000,48.509){2}{\\rule{1.200pt}{3.250pt}}\n\\multiput(283.24,544.00)(0.501,2.055){16}{\\rule{0.121pt}{5.100pt}}\n\\multiput(278.51,544.00)(13.000,41.415){2}{\\rule{1.200pt}{2.550pt}}\n\\multiput(296.24,596.00)(0.501,1.929){14}{\\rule{0.121pt}{4.800pt}}\n\\multiput(291.51,596.00)(12.000,35.037){2}{\\rule{1.200pt}{2.400pt}}\n\\multiput(308.24,641.00)(0.501,1.614){14}{\\rule{0.121pt}{4.100pt}}\n\\multiput(303.51,641.00)(12.000,29.490){2}{\\rule{1.200pt}{2.050pt}}\n\\multiput(320.24,679.00)(0.501,1.233){16}{\\rule{0.121pt}{3.254pt}}\n\\multiput(315.51,679.00)(13.000,25.246){2}{\\rule{1.200pt}{1.627pt}}\n\\multiput(333.24,711.00)(0.501,1.119){14}{\\rule{0.121pt}{3.000pt}}\n\\multiput(328.51,711.00)(12.000,20.773){2}{\\rule{1.200pt}{1.500pt}}\n\\multiput(345.24,738.00)(0.501,0.939){14}{\\rule{0.121pt}{2.600pt}}\n\\multiput(340.51,738.00)(12.000,17.604){2}{\\rule{1.200pt}{1.300pt}}\n\\multiput(357.24,761.00)(0.501,0.759){14}{\\rule{0.121pt}{2.200pt}}\n\\multiput(352.51,761.00)(12.000,14.434){2}{\\rule{1.200pt}{1.100pt}}\n\\multiput(369.24,780.00)(0.501,0.616){16}{\\rule{0.121pt}{1.869pt}}\n\\multiput(364.51,780.00)(13.000,13.120){2}{\\rule{1.200pt}{0.935pt}}\n\\multiput(382.24,797.00)(0.501,0.489){14}{\\rule{0.121pt}{1.600pt}}\n\\multiput(377.51,797.00)(12.000,9.679){2}{\\rule{1.200pt}{0.800pt}}\n\\multiput(392.00,812.24)(0.444,0.501){14}{\\rule{1.500pt}{0.121pt}}\n\\multiput(392.00,807.51)(8.887,12.000){2}{\\rule{0.750pt}{1.200pt}}\n\\multiput(404.00,824.24)(0.651,0.502){8}{\\rule{2.033pt}{0.121pt}}\n\\multiput(404.00,819.51)(8.780,9.000){2}{\\rule{1.017pt}{1.200pt}}\n\\multiput(417.00,833.24)(0.588,0.502){8}{\\rule{1.900pt}{0.121pt}}\n\\multiput(417.00,828.51)(8.056,9.000){2}{\\rule{0.950pt}{1.200pt}}\n\\multiput(429.00,842.24)(0.792,0.509){2}{\\rule{2.700pt}{0.123pt}}\n\\multiput(429.00,837.51)(6.396,6.000){2}{\\rule{1.350pt}{1.200pt}}\n\\multiput(441.00,848.24)(0.792,0.509){2}{\\rule{2.700pt}{0.123pt}}\n\\multiput(441.00,843.51)(6.396,6.000){2}{\\rule{1.350pt}{1.200pt}}\n\\put(453,851.51){\\rule{3.132pt}{1.200pt}}\n\\multiput(453.00,849.51)(6.500,4.000){2}{\\rule{1.566pt}{1.200pt}}\n\\put(466,855.51){\\rule{2.891pt}{1.200pt}}\n\\multiput(466.00,853.51)(6.000,4.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(478,859.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(478.00,857.51)(6.000,3.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(490,862.01){\\rule{3.132pt}{1.200pt}}\n\\multiput(490.00,860.51)(6.500,3.000){2}{\\rule{1.566pt}{1.200pt}}\n\\put(503,864.51){\\rule{2.891pt}{1.200pt}}\n\\multiput(503.00,863.51)(6.000,2.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(515,866.51){\\rule{2.891pt}{1.200pt}}\n\\multiput(515.00,865.51)(6.000,2.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(527,868.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(527.00,867.51)(6.000,1.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(539,869.01){\\rule{3.132pt}{1.200pt}}\n\\multiput(539.00,868.51)(6.500,1.000){2}{\\rule{1.566pt}{1.200pt}}\n\\put(552,870.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(552.00,869.51)(6.000,1.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(564,871.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(564.00,870.51)(6.000,1.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(576,872.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(576.00,871.51)(6.000,1.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(601,873.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(601.00,872.51)(6.000,1.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(588.0,875.0){\\rule[-0.600pt]{3.132pt}{1.200pt}}\n\\put(662,874.01){\\rule{2.891pt}{1.200pt}}\n\\multiput(662.00,873.51)(6.000,1.000){2}{\\rule{1.445pt}{1.200pt}}\n\\put(613.0,876.0){\\rule[-0.600pt]{11.804pt}{1.200pt}}\n\\put(674.0,877.0){\\rule[-0.600pt]{183.566pt}{1.200pt}}\n\\end{picture}\n\n\\caption{For a fixed value $\\overline t$, a number of graphs of \n$R_p(\\overline t)$ (the reliability of the parallel system)\nand $R_s(\\overline t)$ (the reliability of the series system)\nare portrayed as functions of $R(\\overline t)$, the reliability of a Worker\nat time $\\overline t$, and $n$, the number of the components.\nEach graph is labeled with its value of $n$; those above the diagonal\nportray reliabilities of parallel systems, while those below the diagonal\npertain series systems.\nNote that for $n=1$ the models coincide, while for any $n>1$ \n$R_p(\\overline t)$ is\nalways above $R_s(\\overline t)$ except when $R(\\overline t)=0$ \n(no reliable Worker) and when\n$R(\\overline t)=1$ (totally reliable, failure-free Worker).}\\label{f2}\n\\end{figure}\n\n\\subsection{An Augmented LINDA Model}\nThe whole idea pictured in this paper may be implemented in\na LINDA tuple space manager (see for example \\cite{CaGe1,CaGe2}).\nApart from the standard functions to access ``common'' tuples,\na new set of functions may be supplied which deal with ``book-kept tuples''\ni.e., tuples that are distributed to requestors by means of\nthe algorithm sketched in~\\S\\ref{iSW}. As an example:\n\n\\begin{description}\n\\item[{\\tt fout}] (for fault tolerant {\\tt out}) may create a book-kept tuple \ni.e., a content-addressable object with book-kept accesses;\n\\item[{\\tt frd}] (fault tolerant {\\tt rd}) may get a copy of a matching \nbook-kept tuple, chosen according to the algorithm in~\\S\\ref{iSW};\n\\item[{\\tt fin}] (fault tolerant {\\tt in}) may read-and-erase a matching \nbook-kept tuple, chosen according to the algorithm in~\\S\\ref{iSW},\n\n\n\\end{description}\n\\noindent\nand so on. The ensuing augmented LINDA model results in an abstract, \nelegant, efficient, dependable, and transparent mechanism to exploit a \nparallel hardware. \n\n\\subsection{Future Directions}\nThe described technique is currently being implemented on a\nParsytec CC system with the EPX/AIX environment \\cite{CCpg}\nusing PowerPVM/EPX \\cite{powerpvm}, a homogeneous version\nof the PVM message passing library;\nit will also be tested in heterogeneous, networked environments \nmanaged by PVM. Some work towards the definition and the development\nof an augmented LINDA model is currently being done.\n\\paragraph{Acknowledgments.}\nThis project is partly sponsored by the Belgian Interuniversity Pole of\nAttraction IUAP-50, by an NFWO Krediet aan Navorsers, and by the\nEsprit-IV project 21012 EFTOS. Vincenzo De Florio is on leave\nfrom Tecnopolis CSATA Novus Ortus.\nGeert Deconinck has a grant from the \nFlemish Institute for the Promotion of Scientific and Technological Research\nin Industry (IWT). Rudy Lauwereins is a Senior Research Associate of the\nBelgian National Fund for Scientific Research.\n\n\n\n\\begin{thebibliography}{9}\n\n\\bibitem {CaGe1}\nCarriero, N., Gelernter, D.\nHow to write parallel programs: a guide to the perplexed.\nACM Comp. Surv. {\\bf 21} (1989) 323--357\n\n\\bibitem {CaGe2}\nCarriero, N., Gelernter, D.\nLINDA in context.\nCACM {\\bf 32} (1989) vol.4 444--558\n\n\\bibitem {Johnson}\nJohnson, B.W.:\nDesign and analysis of fault-tolerant digital systems.\n(Addison-Wesley, New York, 1989)\n\n\\bibitem {pvmlinda}\nDe Florio, V., Murgolo, F.P., Spinelli, V.:\nPvmLinda: Integration of two different computation paradigms.\nProc. First EuroMicro Conf. on Massively Parallel Computing Systems,\nIschia, Italy, 2--6 May 1994\n\n\\bibitem {CCpg}\nAnonymous.\nEmbedded Parix Programmer's Guide.\nIn Parsytec CC Series Hardware Documentation.\n(Parsytec GmbH, Aachen, 1996)\n\n\\bibitem {powerpvm}\nAnonymous.\nPowerPVM/EPX for Parsytec CC Systems.\n(Genias Software GmbH, Neutraubling, 1996)\n\n\\end{thebibliography}\n\n\n", "itemtype": "equation", "pos": 21860, "prevtext": "\n\n\\noindent\nbeing $R_s(t)$ the reliability of the farm as a series system, and\n\n\n", "index": 9, "text": "\\begin{equation}\nR_p(t) {\\mbox{\\ $\\stackrel{\\mbox{\\tiny def}}{=}$\\ }} 1 - P( \\bigcap_{i=1}^{n} \\overline{C_i}(t)) =\n            1 - \\prod_{i=1}^{n} (1 - R(t)) = 1 - (1-R(t))^n\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E2.m1\" class=\"ltx_Math\" alttext=\"R_{p}(t){\\mbox{\\ $\\stackrel{\\mbox{\\tiny def}}{=}$\\ }}1-P(\\bigcap_{i=1}^{n}%&#10;\\overline{C_{i}}(t))=1-\\prod_{i=1}^{n}(1-R(t))=1-(1-R(t))^{n}\" display=\"block\"><mrow><mrow><mrow><msub><mi>R</mi><mi>p</mi></msub><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mtext>\u00a0</mtext><mover><mo movablelimits=\"false\">=</mo><mtext mathsize=\"71%\">def</mtext></mover><mtext>\u00a0</mtext></mrow><mo>\u2062</mo><mn>1</mn></mrow><mo>-</mo><mrow><mi>P</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><munderover><mo largeop=\"true\" mathsize=\"160%\" movablelimits=\"false\" stretchy=\"false\" symmetric=\"true\">\u22c2</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mover accent=\"true\"><msub><mi>C</mi><mi>i</mi></msub><mo>\u00af</mo></mover><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>=</mo><mrow><mn>1</mn><mo>-</mo><mrow><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u220f</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mo stretchy=\"false\">(</mo><mrow><mn>1</mn><mo>-</mo><mrow><mi>R</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>=</mo><mrow><mn>1</mn><mo>-</mo><msup><mrow><mo stretchy=\"false\">(</mo><mrow><mn>1</mn><mo>-</mo><mrow><mi>R</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo stretchy=\"false\">)</mo></mrow><mi>n</mi></msup></mrow></mrow></math>", "type": "latex"}]