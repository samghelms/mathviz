[{"file": "1601.06915.tex", "nexttext": "\n\\newline\\newline\n2. Let $C_{1}, C_{2}$ be two distinct components of $B_{k}$.\nIf $C_{1},C_{2}$ are not node-disjoint then all edges in one of these\ncomponents are horizontal and all edges in the other one are vertical. A\nsimilar argument is valid for $R_{k}$.\n\\newline\\newline\n3. Since the components\nof $B_{k}$ are edge-disjoint, the edge-size of $B_k$\nis the sum of the edge-sizes of the components. The mappings $\\rho,\\sigma$\npreserve the edge-size of a graph. The same argument applies to $R_k$.\nTherefore, a summation of the edge-disjoint component sizes yields:\n\n", "itemtype": "equation", "pos": 21174, "prevtext": "\n\\title{Edge-Disjoint Node-Independent Spanning Trees in Dense Gaussian Networks}\n\n\\author{Bader~AlBdaiwi,\n        Zaid~Hussain,\n        Anton~Cerny,\n        and~Robert~Aldred\n\\thanks{B. AlBdaiwi and Z. Hussain are with the Computer Science Department, Kuwait University, Kuwait. P.O. Box 5969 Safat 13060. \nE-mail: \\{bdaiwi,zhussain\\}@cs.ku.edu.kw}\n\n\\thanks{A. Cerny is with the Department of Information Science, Kuwait University, Kuwait.\nE-mail: anton.cerny@ku.edu.kw}\n\\thanks{R. Aldred is with the Department of Mathematics and Statistics, University Of Otago, P.O. Box 56, Dunedin 9054, New Zealand. E-mail: raldred@maths.otago.ac.nz}\n\n}\n\\maketitle\n\n\\begin{abstract}\n\nIndependent trees are used in building secure and/or fault-tolerant network communication protocols.\nThey have been investigated for different network topologies including tori.\nDense Gaussian networks are potential alternatives for 2-dimensional tori.\nThey have similar topological properties; however,\nthey are superiors in carrying communications\ndue to their node-distance distributions and smaller diameters.\nIn this paper, we present constructions of edge-disjoint node-independent spanning trees in dense Gaussian networks.\nBased on the constructed trees, we design algorithms that could be used in fault-tolerant routing or secure message distribution.\n\\end{abstract}\n\n\n\n\\begin{IEEEkeywords}\nCirculant Graphs, Gaussian Networks, Spanning Trees, Edge-Disjoint Trees, Node-Independent Spanning Trees,\nFault-Tolerant Communications, Secure-Message Distribution.\n\\end{IEEEkeywords}\n\n\n\n\n\n\n\n\n\n\n\n\\section{Introduction}\\label{sec:introduction}\n\nParallelism is the performance improvement catalyst in nowadays computing\nindustry. More computing power and higher scalability are being achieved by\ndeploying multi-core processing units~\\cite{williams2009roofline}. This\ncould vary from multi-core single processing unit in personal computing\ndevices to multi-core multi-processing units on servers and supercomputers.\nCommunications and data exchanges among different processing elements are\nusually carried on their interconnection network. Thus, an interconnection\nnetwork is a critical limiting factor on a parallel system overall performance\nand scalability; consequently, interconnection networks have been receiving considerable research\nattention for more than forty years~\\cite{dally2004principles}.\n\nThe topology of an interconnection network is a main decisive criterion of its\nperformance qualities. It determines the network communication efficiency as\nwell as its fault tolerance capabilities. There has been plenty of research on\ninterconnection topologies like: arrays, trees, hypercubes, butterfly, meshes,\n$k$-ary $n$-cubes, and tori \\cite{bose1995lee} \\cite{dally2004principles}\n\\cite{leighton2014introduction}. A choice of a topology on which to build a\nparallel system is constrained by the target performance objectives,\ncontemporary available technology, and simplicity. In the 1960's arrays and\ntwo-dimensional meshes were used to build machines like Illiac\n\\cite{barnes1968illiac} and Soloman \\cite{Slotnick:1962:SC:1461518.1461528}.\nLater, hybercubes became popular topologies and machines like Cosmic Cube\n\\cite{seitz1985cosmic} and nCUBES \\cite{Ncube:1988:NFH:62297.62415} were built\non them. In late 1980's, meshes, $k$-ary $n$-cube, and toroidal networks\nstarted to become more favorable topologies. Cray T3D \\cite{cray1993}, Cray\nT3E \\cite{scott1996cray}, and Intel Paragon \\cite{esser1993intel} are examples\nfor machines built on these kinds of networks.\n\nAn efficient interconnection network called Gaussian network has been\nintroduced in~\\cite{10.1109/TC.2008.57}. It is also called a dense Gaussian network~\\cite{martinez2006dense}\nwhen it contains the maximum number of nodes for a given diameter. various facts on some important\nversions of such networks, defined in a different equivalent way, have been\ndescribed in~\\cite{martinez2006dense}. Several related studies on Gaussian\nnetworks followed in~\\cite{Flahive:2010:TGE:1850268.1850301}\n\\cite{Shamaei:2014:HDG:2672598.2673055} \\cite{touzene2015all}\n\\cite{zhang2013efficient}.\nDense Gaussian networks deserve special attention as they are potential alternatives\nfor $N \\times N$ tori.\nThey have similar structures, same number of nodes, same\nnumber of edges, and both are regular degree four graphs.\nDense Gaussian networks, however,\npossesses smaller diameters and better node-distance distributions.\nTherefore, they can carry communications more efficiently.\n\nIndependent spanning trees can be used in building reliable communication\nprotocols~\\cite{Bao19983}\\cite{Chang2015489}\\cite{6747363}\\cite{DBLP:journals/tc/FragopoulouA96}\n\\cite{ITAI198843}\\cite{Kong:2006:BRM:2692151.2692155}\\cite{Touzene:2002:EST:636533.636538}\n\\cite{DBLP:journals/jpdc/TouzeneDM05}\\cite{Tseng96efficientbroadcasting}\\cite{DBLP:journals/jpdc/WangB01}\n\\cite{Yang01012014}\\cite{6948321}\\cite{10.1007/s11227-014-1346-z}.\nGiven a network $\\mathcal{N}$ in which there exist $t$ independent spanning\ntrees rooted in $r$, then $r$ can successfully broadcast a message to every\nnon faulty node $v$ in $\\mathcal{N}$ even if up to $t-1$ faulty nodes exist.\nSince the number of faulty nodes is less than $t$, then at least one of those\n$t$ node disjoint paths from $r$ to $v$ is fault free. Thus, if $r$ broadcasts\nthrough all the existing $t$ independent spanning trees, every non faulty node\nin $\\mathcal{N}$ would receive the broadcasted message. Similarly, if\n$\\mathcal{N}$ has $t$ edge disjoint independent spanning trees, all rooted in\n$r$, it would be possible to broadcast from $r$ tolerating up to $t-1$ node or\nedge faults. The communication applications of independent spanning trees are\nnot limited to fault tolerance communication. Independent spanning trees could\nbe utilized in secure message distribution. A message can be split into $t$\npackets each of which is sent by $r$ through a different spanning tree to its\ndestination. In this case only the destination would receive all the $t$\npackets while every other node would receive at most one of the $t$ packets\n\\cite{Lin2010414}\\cite{Yang20111254}\\cite{Yang:2009:IST:1726593.1728973}. Edge disjoint\nindependent spanning trees can also be used in building efficient casting\nalgorithms. A message of size $M$ can be split into $t$ packets, each of size\n$M/t$, and simultaneously casted through different trees. Since the trees are\nedge disjoint, this splitting could result in less packet collisions and\nhigher edge utilization, hence it could reduce the average communication time when\nwormhole switching is used~\\cite{Alsaleh}\\cite{dally2004principles}.\n\n\nIn this paper, we present a construction of Edge-Disjoint Node-Independent Spanning Trees\n(EDNIST) in dense Gaussian networks.\nThe rest of the paper is organized as follows. Section~\\ref{SectionPrelim}\nintroduces some necessary preliminaries. Basic facts on Gaussian networks\nare briefly summarized in Section~\\ref{SectionGaussNet}.\nConstructions for two edge-disjoint node-independent spanning trees in\na dense Gaussian network is described in Section~\\ref{SectionEDNIST}.\nCommunication algorithms based on the constructed trees are provided in\nSection~\\ref{SectionRouting}. Finally, Section~\\ref{SectionConcl} concludes\nthe findings of this paper.\n\n\\section{Preliminaries\\label{SectionPrelim}}\n\nWe will denote by $\\mathbb{N}=\\{0,1,...\\}$ the set of all natural numbers and\nby {$\\mathbb{Z}=\\{  \\ldots,-2,-1,0,\\allowbreak\n1,2,\\ldots \\}  $ the set of all\nintegers. An interconnection network is usually modeled as a graph where the\ncomputing elements and their wiring are represented as vertices and edges,\nrespectively. An undirected \\textsl{graph} is a pair $G=(V,E)$ where $V$ is a\nset of \\textsl{vertices} or \\textsl{nodes}, and $E$ is a set of\n\\textsl{edges }. The edges are unordered pairs. We will use the\nnotation $V\\left(  G\\right)  =V$, $E\\left(  G\\right)  =E$. We are not considering directed graphs in this paper.\nIf $\\left(  u,v\\right)  \\in E$, we say that\n$u$ and $v$ are \\textsl{adjacent }and that the vertices $u,v$\nand the edge $\\left(  u,v\\right)$ are \\textsl{incident }with each other.\nThe \\textsl{degree} of $v\\in V$ is the number of\nedges in $E$ with which the vertex $v$ is incident.\nThe \\textsl{union }of two graphs is defined by $\\left(  V^{\\prime},E^{\\prime\n}\\right)  \\cup$ $\\left(  V^{\\prime\\prime},E^{\\prime\\prime}\\right)  =\\left(\nV^{\\prime}\\cup V^{\\prime\\prime},E^{\\prime}\\cup E^{\\prime\\prime}\\right)  $. A\n\\textsl{subgraph }of a graph $G$ is any graph $G^{\\prime}=(V^{\\prime\n},E^{\\prime})$ such that $V^{\\prime}\\subseteq V$ and $E^{\\prime}\\subseteq E$.\nTwo graphs are \\textsl{vertex-disjoint } if their sets\nof vertices are disjoint.\nSimilarly, two graphs are \\textsl{edge-disjoint } if their sets\nof edges are disjoint. An \\textsl{isomorphism} of graphs\n$G=\\left(  V,E\\right)  ,G^{\\prime}=\\left(  V^{\\prime},E^{\\prime}\\right)  $ is\na bijection $f:V\\rightarrow V^{\\prime}$ such that $E^{\\prime}=\\left\\{  \\left(\nf\\left(  u\\right)  ,f\\left(  v\\right)  \\right)  |\\left(  u,v\\right)  \\in\nE\\right\\}  $; $f$ is an \\textsl{automorphism} on $G$ if $G^{\\prime}=G$.\nA\\textsl{ path from vertex }$u$ to vertex $v$ in $G$ is a sequence\n$P_{G}\\left(  u,v\\right)  =\\left(  v_{0},v_{1},\\ldots,v_{n}\\right)  $ of\npairwise distinct (with the possible exception $v_{0}=v_{n}$) vertices from\n$V$ such that $u=v_{0}$, $v=v_{n}$, and $\\left(  v_{i},v_{i+1}\\right)  \\in E$\nfor $i\\in\\left\\{  0,1,\\ldots,n-1\\right\\}  $; $n$ is the \\textsl{length} of the\npath $P_{G}\\left(  u,v\\right)  $. We will identify the path $\\left(\nv_{0},v_{1},\\ldots,v_{n}\\right)  $ with the subgraph $\\left(  \\left\\{\nv_{0},v_{1},\\ldots,v_{n}\\right\\}  ,\\left\\{  \\left(  v_{i},v_{i+1}\\right)\n|i\\in\\left\\{  0,1,\\ldots,n-1\\right\\}  \\right\\}  \\right)  $. The\n\\textsl{distance }\\ $d\\left(  u,v\\right)  $ between vertices $u,v$ is the\nlength of the shortest path from $u$ to $v$. The \\textsl{diameter} of the\ngraph is the maximum distance of two nodes in the graph. A \\textsl{cycle }is a\npath from $u$ to $u$. A graph is \\textsl{connected} if, for any $u,v\\in V$,\nthere is a path from $u$ to $v$ in $G$. A graph is acyclic if it does not contain a cycle of\npositive length. A connected acyclic graph is called a \\textsl{tree}. In a\ntree, there is a unique path between any two vertices. A tree is\n\\textsl{rooted }if one of its vertices is denoted as its \\textsl{root}. The\n\\textsl{depth }of a rooted tree is the length of the longest path in the tree\nstarting at the root. Given a graph $G=(V,E)$, a spanning tree of $G$ is a\nsubgraph $T=\\left(  V,E^{\\prime}\\right)  $ being a tree. It is a well-known\nfact that a connected subgraph $\\left(  V,E^{\\prime}\\right)  $ of $G$ is a\nspanning tree if and only if $\\left\\vert E^{\\prime}\\right\\vert =\\left\\vert\nV-1\\right\\vert $. Spanning trees have applications in network broadcasting in\nwhich a source node sends a message to every other node in the network. A\ngraph may have a number of different spanning trees. Two rooted spanning trees $T_{1},T_{2}$ of $G=\\left(\nV,E\\right)  $ having the same root $r$ are \\textsl{node}\n\\textsl{independent} if, for any vertex $v\\in V$, the only common vertices of\nthe paths from $r$ to $v$ in $T_{1}$ and $T_{2}$ are $r$ and $v$.\n\n\\section{Gaussian Networks\\label{SectionGaussNet}}\n\nIn this paper, we will deal with a special type of graphs called Gaussian networks. The\nname comes from one possible approach to their definition, based on the subset\nof complex numbers $\\mathbb{Z}\\left[  \\mathbf{i}\\right]  =\\left\\{\nx+y\\mathbf{i}|x,y\\in\\mathbb{Z}\\right\\}  $ with the usual norm $\\left\\Vert\nx+y\\mathbf{i}\\right\\Vert =x^{2}+y^{2}$. The elements of this set are called\nGaussian integers. It is known that for every $\\alpha,\\beta\\in\\mathbb{Z}\n\\left[  \\mathbf{i}\\right]  $, $\\alpha\\neq0$, there exist unique $q,r\\in\nZ[\\mathbf{i}]$ such that $\\beta=q\\alpha+r$ with $\\left\\Vert r\\right\\Vert\n<\\left\\Vert \\alpha\\right\\Vert $. In analogue with integers, one can write\n$\\beta\\operatorname{mod}\\alpha=r$.  A \\textsl{Gaussian network}\n$G\\left(  \\alpha\\right)  =\\left(  \\mathbb{Z}\\left[  \\mathbf{i}\\right]\n_{\\alpha},E\\left(  \\alpha\\right)  \\right)  $ is given by a fixed Gaussian\ninteger $\\alpha\\neq0$. The set of nodes is the residue class modulo $\\alpha$.\nThe nodes $\\beta$ and $\\gamma$ are adjacent if and only if $(\\beta\n-\\gamma)\\operatorname{mod}\\alpha\\in\\left\\{  \\pm1,\\pm\\mathbf{i}\\right\\}  $.\nVarious representations of these residue classes are provided in \\cite{JordanPotratz}.\nGaussian networks are regular. The degree of each vertex is four. They are\nhighly symmetric; in fact they are vertex-transitive.\nFor every pair $u,v\\in\\mathbb{Z}\\left[  \\mathbf{i}\\right]\n_{\\alpha},$ there is an automorphism of $G\\left(  \\alpha\\right)  $ mapping\n$u$ to $v$. The total number of nodes in the network $G\\left(  \\alpha\\right)\n$ is $\\left\\Vert \\alpha\\right\\Vert $. The distance distribution for Gaussian\nnetworks can be found in~\\cite{10.1109/TC.2008.57} where the diameter of the\nnetwork $G\\left(  x+y\\mathbf{i}\\right)  $ is equal to $y$ if $\\left\\Vert\nx+y\\mathbf{i}\\right\\Vert $ is even and to $y-1$ otherwise. Gaussian networks are\nclosely related to circulant graphs. A \\textsl{circulant graph} with $N\\geq 1$\nvertices and two jumps $a,b$, where $1\\leq a<b$ is the graph\n$C_{N}\\left(  a,b\\right)$ where $V(C_N(a,b))=\\left\\{\n0,1,\\ldots,N-1\\right\\}  $ and, for $u,v\\in V$, $\\left(  u,v\\right)  \\in E(C_N(a,b))$ if\n$\\left\\vert u-v\\right\\vert \\operatorname{mod}N\\in\\left\\{a,b,N-a,N-b\\right\\}$.\n$C_{a^{2}+b^{2}}\\left(  a,b\\right)  $ is isomorphic to $G(a+bi)$ if and\nonly if $\\gcd\\left(  a,b\\right)  =1$~\\cite{10.1109/TC.2008.57}. A Gaussian\nnetwork is \\textsl{dense} when it has a maximum number of nodes for a given\ndiameter $k$. It is shown in \\cite{Beivide:1991:ODN:123467.123483} that this\nis the case in the graph $C_{k^{2}+\\left(  k+1\\right)  ^{2}}\\left(\nk,k+1\\right)  $. In this paper, we deal with these dense\ndiameter-optimal graph, which is isomorphic to the Gaussian network $G\\left(  \\alpha_{k}\\right)  $, where\n$\\alpha_{k}=k+\\left(  k+1\\right)  \\mathbf{i}$, since $\\gcd (k,k+1) = 1$.\nWe denote $G_{k}=\\left(\nV_{k},E_{k}\\right)  =G\\left(  \\alpha_{k}\\right)  $, $k\\geq1$.\nWe will call an\nedge in $G_{k}$ to be \\textsl{horizontal} if it is of the form $\\left(\nu,\\left(  u\\pm1\\right)  \\operatorname{mod}\\alpha_{k}\\right)  $ and\n\\textsl{vertical} if it is of the form $\\left(  u,\\left(  u\\pm\\mathbf{i}\\right)\n\\operatorname{mod}\\alpha_{k}\\right)  $.\nA path in $G_k$ is \\textsl{horizontal (vertical)} if does not contain a \\textsl{vertical (horizontal)} edge.\nWe depict the graph $G_{k}$ the\nusual way the complex numbers are depicted in the Cartesian plane. The vertex\n$a+b\\mathbf{i}$, $\\left\\vert a\\right\\vert +\\left\\vert b\\right\\vert \\leq k$,\nwill be positioned at point $\\left\\langle a,b\\right\\rangle $. The graph\n$G_{3}$ is depicted in Fig.~\\ref{34graph}.\n\n\n\\begin{figure}[H]\n\\centering\n\\includegraphics[scale=0.85]{3-4_graph} \\caption{Gaussian network generated with $\\alpha = 3+4i$.}\n\\label{34graph}\n\\end{figure}\n\n\\section{Edge-disjoint node-independent spanning trees in Gaussian\nnetworks\\label{SectionEDNIST}}\n\nWe will present here a solution to the problem of finding a set of\nedge-disjoint node-independent spanning trees in the Gaussian network $G_{k}$.\n\n\\bigskip\n\\begin{proposition}\n\\label{SpanningSet}Let $\\mathcal{T}_{k}$ be a set of edge-disjoint spanning\ntrees in $G_{k}$, then $\\left\\vert \\mathcal{T}_{k}\\right\\vert \\leq~2$.\n\\end{proposition}\n\n\\begin{proof}\nThe total number of nodes in $G_{k}=2k^{2}+2k+1$. Hence, each spanning tree in\n$\\mathcal{T}_{k}$ must have exactly $2k^{2}+2k$ edges. Since the total number\nof edges in $G_{k}=4k^{2}+4k+2$, and the trees in $\\mathcal{T}_{k}$ are edge\ndisjoint, it follows that $\\left\\vert \\mathcal{T}_{k}\\right\\vert \\leq2$.\n\\end{proof}\n\n\\bigskip\nIn our further considerations, we will use automorphisms $\\rho$ and $\\sigma$\nof the Gaussian network $G_{k}$, $k \\geq 2$. The mapping $\\rho$ is the\n$90^{\\circ}$ counterclockwise rotation. It is defined, for $a+b\\mathbf{i}\\in\nV_{k}$, by $\\rho\\left(  a+b\\mathbf{i}\\right)  =\\mathbf{i}\\left(\na+b\\mathbf{i}\\right)  =-b+a\\mathbf{i}$. The mapping $\\sigma$ is the symmetry\nwith respect to the axis of the second and the fourth quadrants. It is defined,\nfor $a+b\\mathbf{i}\\in V_{k}$, by $\\sigma\\left(  a+b\\mathbf{i}\\right)\n=-b-a\\mathbf{i}$. The mappings satisfy the relations $\\rho^{2}\\sigma\n=\\sigma\\rho^{2}$ and $\\rho^{4}=\\sigma^{2}=\\mathbf{1}$, where $\\mathbf{1}$ is\nthe identity mapping. Each of $\\rho$ and $\\sigma$ maps a horizontal edge to a\nvertical one and vice versa. We will now describe two subgraphs of $G_{k}$:\nthe \\textquotedblleft black subgraph\\textquotedblright\\ $B_{k}$, and the\n\\textquotedblleft red subgraph\\textquotedblright\\ $R_{k}$, being our\ncandidates for the two edge-disjoint node-independent spanning trees.\nEach of $B_k$ and $R_k$ is the union of several component subgraphs of $G_k$.\nThese components will be obtained by applying the mappings $\\rho$ and $\\sigma$ to\nthe following graphs:\n\\newline\\newline\n1. The array subgraph $A$:\n\\newline$V\\left(  A\\right)  =\\left\\{  a+b\\mathbf{i|}0\\leq a\\leq k-1,1\\leq\nb\\leq k,a+b\\leq k\\right\\}  ,$\n\\newline\n$E\\left(  A\\right)  =\\left\\{  \\left(\na+b\\mathbf{i},\\left(  a+1\\right)  +b\\mathbf{i}\\right)  |0\\leq a\\leq k-2,1\\leq\nb\\leq k-1,a+b\\leq k-1\\right\\}  $; $A$ contains all possible horizontal edges\namong $V(A)$. \\newline The edge size of $A\\ $is $\\left\\vert E\\left(  A\\right)\n\\right\\vert =k\\left(  k-1\\right)  /2$.\n\\newline\\newline\n2. The baseline subgraph $B$:\n\\newline$V\\left(  B\\right)  =\\left\\{  a\\mathbf{|}0\\leq a\\leq\nk\\right\\}  ,$ \\newline$E\\left(  B\\right)  =\\left\\{  \\left(  a,\\left(\na+1\\right)  \\right)  |0\\leq a\\leq k-1\\right\\}  $; $B$ contains all possible\nhorizontal edges among $V(B)$. \\newline The edge size of $B\\ $is $\\left\\vert\nE\\left(  B\\right)  \\right\\vert =k$.\n\\newline\\newline\n3. The $\\ B_{k}$-specific wrap-around graph $W^{B}$:\\newline$V\\left(  W^{B}\\right)  =\\left\\{\na+b\\mathbf{i}|,\\left\\vert a+b\\right\\vert =k\\text{, and }0\\leq a,1\\leq b\\text{\nor }a\\leq0,b\\leq-1\\right\\}  ,$ \\newline$E\\left(  W^{B}\\right)  =\\left\\{\n\\left(  a+b\\mathbf{i},-\\left(  b-1\\right)  +\\left(  -1-a\\right)\n\\mathbf{i}\\right)  |a+b=k,0\\leq a,1\\leq b\\right\\}  $; $W^{B}$ contains all\npossible horizontal edges among $V(W^{B})$.\\newline The edge size of $W^{B}\n\\ $is $\\left\\vert E\\left(  W^{B}\\right)  \\right\\vert =k$.\n\\newline\\newline\n4. The $\\ R_{k}$-specific wrap-around graph $W^{R}$:\\newline$V\\left(\nW^{R}\\right)  =\\left\\{  a+b\\mathbf{i}|1\\leq a,b\\leq0\\text{ or }a\\leq\n0,b\\geq1\\text{, and }\\left\\vert a+b\\right\\vert =k\\right\\}  ,$\\newline$E\\left(\nW^{R}\\right)  =\\left\\{  \\left(  a+b\\mathbf{i},b+a\\mathbf{i}\\right)\n|a-b=k,1\\leq a,b\\leq0\\right\\}  $; $W^{R}$ contains all possible horizontal\nedges among $V(W^{R})$\\newline The edge size of $W^{R}\\ \\left\\vert E\\left(\nW^{R}\\right)  \\right\\vert =k$.\n\n\\bigskip\nThe subgraph $B_{k}$ is defined as: \\begin{figure*}[ht!]\n    \\centering\n    \\begin{subfigure}[b]{0.5\\textwidth}\n        \\centering\n        \\includegraphics[scale=0.45]{45BlackA}\n        \\caption{Array graphs}\n    \\end{subfigure}\n    ~\n    \\begin{subfigure}[b]{0.5\\textwidth}\n        \\centering\n        \\includegraphics[scale=0.45]{45BlackBW}\n        \\caption{Baseline and $B_4$-specific wrap-around graphs}\n    \\end{subfigure}\n    \\caption{$B_4$ components ($k=4$)}\n    \\label{BlackAll}\n\\end{figure*}\n\nB_{k}=A\\cup\\rho\\left(  A\\right)  \\cup\\rho^{2}\\left(  A\\right)  \\cup\\rho\n^{3}\\left(  A\\right)  \\cup B\\cup\\rho\\left(  B\\right)  \\cup W^{B}\\cup\n\\rho\\left(  W^{B}\\right)  \\label{BU}\n\\end{equation}\n\n\n\\bigskip Fig.~\\ref{BlackAll} depicts the components of $B_{4}$.\n\n\\bigskip The subgraph $R_{k}$ is defined as: \\begin{figure*}[t!]\n    \\centering\n    \\begin{subfigure}[b]{0.5\\textwidth}\n        \\centering\n        \\includegraphics[scale=0.45]{45RedA}\n        \\caption{Array graphs}\n    \\end{subfigure}\n    ~\n    \\begin{subfigure}[b]{0.5\\textwidth}\n        \\centering\n        \\includegraphics[scale=0.45]{45RedBWnew}\n        \\caption{Baseline and $R_4$-specific wrap-around graphs}\n    \\end{subfigure}\n    \\caption{$R_4$ components ($k=4$)}\n    \\label{RedAll}\n\\end{figure*}\n\nR_{k}=\\sigma\\left(  A\\right)  \\cup\\rho\\sigma\\left(  A\\right)  \\cup\\rho\n^{2}\\sigma\\left(  A\\right)  \\cup\\rho^{3}\\sigma\\left(  A\\right)  \\cup\n\\sigma\\left(  B\\right)  \\cup\\sigma\\rho\\left(  B\\right)  \\cup W^{R}\\cup\n\\rho\\left(  W^{R}\\right)  \\label{RU}\n\\end{equation}\n\n\n\\bigskip Fig.~\\ref{RedAll} shows the components of $R_{4}$, and Fig.~\\ref{45BlackRedST} limns $B_4$ and $R_4$.\n\n\\bigskip\n\\begin{proposition}\n\\label{BasicRB} $B_{k}$ and $R_{k}$ have the following basic properties:\n\\newline\n1. The vertex set of each of the graphs $B_{k}$ and $R_{k}$ is $V_{k}$.\n\\newline\n2. The edge sets of all components of $B_{k}$, as stated in\n$(\\ref{BU})$ are pairwise disjoint. The edge sets of all components of $R_{k}$,\nas stated in $(\\ref{RU})$ are pairwise disjoint.\n\\newline\n3. Each of the graphs $B_{k}$ and $R_{k}$ consists of $2k^{2}+2k$ edges.\n\\newline\n4. The edge sets of $B_{k}$ and $R_{k}$ are disjoint.\n\\end{proposition}\n\n\\begin{proof}\n\\newline\n1. The following can be observed from the construction of the\nsubgraphs $B_{k}$ and $R_{k}$:\n\n", "index": 1, "text": "\\begin{align*}\nV_{k}  &  =V\\left(  A\\right)  \\cup V\\left(  \\rho\\left(  A\\right)  \\right)\n\\cup V\\left(  \\rho^{2}\\left(  A\\right)  \\right)  \\cup V\\left(  \\rho^{3}\\left(\nA\\right)  \\right)  \\cup V\\left(  B\\right) \\\\\nV_{k}  &  =V\\left(  \\sigma\\left(  A\\right)  \\right)  \\cup V\\left(  \\rho\n\\sigma\\left(  A\\right)  \\right)  \\cup V\\left(  \\rho^{2}\\sigma\\left(  A\\right)\n\\right)  \\cup V\\left(  \\rho^{3}\\sigma\\left(  A\\right)  \\right)  \\cup V\\left(\n\\sigma\\left(  B\\right)  \\right)\n\\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle V_{k}\" display=\"inline\"><msub><mi>V</mi><mi>k</mi></msub></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=V\\left(A\\right)\\cup V\\left(\\rho\\left(A\\right)\\right)\\cup V\\left(%&#10;\\rho^{2}\\left(A\\right)\\right)\\cup V\\left(\\rho^{3}\\left(A\\right)\\right)\\cup V%&#10;\\left(B\\right)\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mrow><mi>V</mi><mo>\u2062</mo><mrow><mo>(</mo><mi>A</mi><mo>)</mo></mrow></mrow><mo>\u222a</mo><mrow><mi>V</mi><mo>\u2062</mo><mrow><mo>(</mo><mrow><mi>\u03c1</mi><mo>\u2062</mo><mrow><mo>(</mo><mi>A</mi><mo>)</mo></mrow></mrow><mo>)</mo></mrow></mrow><mo>\u222a</mo><mrow><mi>V</mi><mo>\u2062</mo><mrow><mo>(</mo><mrow><msup><mi>\u03c1</mi><mn>2</mn></msup><mo>\u2062</mo><mrow><mo>(</mo><mi>A</mi><mo>)</mo></mrow></mrow><mo>)</mo></mrow></mrow><mo>\u222a</mo><mrow><mi>V</mi><mo>\u2062</mo><mrow><mo>(</mo><mrow><msup><mi>\u03c1</mi><mn>3</mn></msup><mo>\u2062</mo><mrow><mo>(</mo><mi>A</mi><mo>)</mo></mrow></mrow><mo>)</mo></mrow></mrow><mo>\u222a</mo><mrow><mi>V</mi><mo>\u2062</mo><mrow><mo>(</mo><mi>B</mi><mo>)</mo></mrow></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle V_{k}\" display=\"inline\"><msub><mi>V</mi><mi>k</mi></msub></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=V\\left(\\sigma\\left(A\\right)\\right)\\cup V\\left(\\rho\\sigma\\left(A%&#10;\\right)\\right)\\cup V\\left(\\rho^{2}\\sigma\\left(A\\right)\\right)\\cup V\\left(\\rho^%&#10;{3}\\sigma\\left(A\\right)\\right)\\cup V\\left(\\sigma\\left(B\\right)\\right)\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mrow><mi>V</mi><mo>\u2062</mo><mrow><mo>(</mo><mrow><mi>\u03c3</mi><mo>\u2062</mo><mrow><mo>(</mo><mi>A</mi><mo>)</mo></mrow></mrow><mo>)</mo></mrow></mrow><mo>\u222a</mo><mrow><mi>V</mi><mo>\u2062</mo><mrow><mo>(</mo><mrow><mi>\u03c1</mi><mo>\u2062</mo><mi>\u03c3</mi><mo>\u2062</mo><mrow><mo>(</mo><mi>A</mi><mo>)</mo></mrow></mrow><mo>)</mo></mrow></mrow><mo>\u222a</mo><mrow><mi>V</mi><mo>\u2062</mo><mrow><mo>(</mo><mrow><msup><mi>\u03c1</mi><mn>2</mn></msup><mo>\u2062</mo><mi>\u03c3</mi><mo>\u2062</mo><mrow><mo>(</mo><mi>A</mi><mo>)</mo></mrow></mrow><mo>)</mo></mrow></mrow><mo>\u222a</mo><mrow><mi>V</mi><mo>\u2062</mo><mrow><mo>(</mo><mrow><msup><mi>\u03c1</mi><mn>3</mn></msup><mo>\u2062</mo><mi>\u03c3</mi><mo>\u2062</mo><mrow><mo>(</mo><mi>A</mi><mo>)</mo></mrow></mrow><mo>)</mo></mrow></mrow><mo>\u222a</mo><mrow><mi>V</mi><mo>\u2062</mo><mrow><mo>(</mo><mrow><mi>\u03c3</mi><mo>\u2062</mo><mrow><mo>(</mo><mi>B</mi><mo>)</mo></mrow></mrow><mo>)</mo></mrow></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.06915.tex", "nexttext": "\n\\newline\\newline\n4. Comparing any component of $B_{k}$ to any component of\n$R_{k}$, one can observe that such pair of components either does not contain a\ncommon pair of vertices or the direction of the edges in the two components\nare different. Hence, $B_{k}$ and $R_{k}$ are edge-disjoint.\n\n\\end{proof}\n\n\\begin{figure}[H]\n\\centering\n\\includegraphics[scale=0.95]{45BlackRedST} \\caption{The trees $B_{4}$ and $R_{4}$}\n\\label{45BlackRedST}\n\\end{figure}\n\n\\bigskip\n\\begin{lemma}\n\\label{Connected} Each of the graphs $B_{k}$ and $R_{k}$ is a connected graph.\n\\end{lemma}\n\n\\begin{proof}\nFirst, we will show that $B_{k}$ is connected. $B$ is connected by\nconstruction. $\\rho(B)$ is a rotation of B, and hence, it is connected.\n$B \\cup \\rho(B)$ is connected since $B\\cap\\rho(B)=\\left\\{  0\\right\\}  \\neq\\phi$.\nThere exist paths between:\nevery node in $A$ and some node in $\\rho(B)\\subset A$,\nevery node in $\\rho^{3}(A)$ and some node in $B\\subset\\rho^{3}(A)$,\nevery node in $\\rho(A)$ and some node in $\\rho^{3}(A)$ through $\\rho(W^{B})$,\nand every node in $\\rho^{2}(A)$ and some node in $A$ through $W^{B}$.\n\n\n\n\n\n\nThus, $B_{k}$ is connected.\nA similar argument can be used to show that $R_k$ is connected.\n\n\\end{proof}\n\n\\bigskip\n\\begin{corollary}\n\\label{EDST} $B_{k}$ and $R_{k}$ are edge-disjoint spanning trees in $G_{k}$.\n\\end{corollary}\n\n\\begin{proof}\nFollowing Lemma~\\ref{Connected} and Proposition~\\ref{BasicRB}, $B_{k}$ and\n$R_{k}$ are connected, edge-disjoint, and the edge size of each of them is\n$\\left\\vert V_{k}\\right\\vert -1$. Therefore, they are edge-disjoint spanning\ntrees in $G_{k}$.\n\\end{proof}\n\n\\bigskip\nIn the remaining text we will assume that the spanning trees $B_{k}$ and\n$R_{k}$ are rooted at node $0$.\nThe following three lemmata will be useful in proving our main result expounded\nin~Theorem~\\ref{BasicProp} and Theorem~\\ref{EXTEND}.\n\nLet\n$H^{B}=A\\cup W^{B}\\cup\\rho^{2}\\left(  A\\right)$, and\n$H^{R}=\\rho\\sigma\\left(  A\\right)  \\cup W^{R}\\cup\\rho^{3}\\sigma\\left(A\\right)$.\n\n\\bigskip\n\\begin{lemma}\n\\label{QsPathSize}\nEach path in $H^{B}$ or in $H^{R}$ is horizontal and not longer than $k$ or $(k+1)$, respectively.\n\n\n\n\\end{lemma}\n\n\\begin{proof}\nThe paths being horizontal or vertical follow from the definition of the sets $A,B$ and\n$W^{B},W^{R}$. Each path in $A$ or $\\rho^{2}\\left(  A\\right)  $ is of some\nlength $i$, $i\\in\\left\\{  0,\\ldots,k-1\\right\\} $. Any path in $W^{B}$ is of\nlength one. A path of length~$i$ in $A$ is connected by an edge in $W^{B}$\nto a single path in $\\rho^{2}\\left(  A\\right) $ of length $k-i-1$. The\nmaximum length of a path in $H^{B}$ is therefore $i+1+\\left(  k-i-1\\right)=k$.\n\n\nFig.~\\ref{paths1} illustrates $H^B$ paths when $k=4$.\n\\begin{figure*}[t!]\n    \\centering\n    \\begin{subfigure}[b]{0.5\\textwidth}\n        \\centering\n        \\includegraphics[scale=0.45]{45BlackA_quadrantMoved1}\n        \\caption{$W^B$ wrapped-around edges}\n    \\end{subfigure}\n    ~\n    \\begin{subfigure}[b]{0.5\\textwidth}\n        \\centering\n        \\includegraphics[scale=0.45]{45BlackA_quadrantMoved2}\n        \\caption{$W^B$ straightened edges}\n    \\end{subfigure}\n    \\caption{$H^B$ paths in $B_4$}\n    \\label{paths1}\n\\end{figure*}\n\nEach path in $\\rho\\sigma\\left(A\\right) $ or in $\\rho^{3}\\sigma\\left(A\\right) $\nis of some length $i$, $i\\in\\left\\{  0,\\ldots,k-1\\right\\}$.\nAny path in $W^{R}$ is of length one.  A path of length $i$ in $\\rho\\sigma\\left(A\\right)$\nis connected by an edge in $W^{R}$ to a single path in\n$\\rho^{3}\\sigma\\left(  A\\right)$ of length $k-i$. The maximum length of a path in\n$H^{B}$ is therefore $i+1+\\left(k-i\\right)  =k+1$.\n\nFig.~\\ref{paths2} illustrates $H^R$ paths when $k=4$.\n\\begin{figure*}[t!]\n    \\centering\n    \\begin{subfigure}[b]{0.5\\textwidth}\n        \\centering\n        \\includegraphics[scale=0.45]{45RedA_quadrantMoved1}\n        \\caption{$W^R$ wrapped-araound edges}\n    \\end{subfigure}\n    ~\n    \\begin{subfigure}[b]{0.5\\textwidth}\n        \\centering\n        \\includegraphics[scale=0.45]{45RedA_quadrantMoved2}\n        \\caption{$W^R$ straightened edges}\n    \\end{subfigure}\n    \\caption{$H^R$ paths in $R_4$}\n    \\label{paths2}\n\\end{figure*}\n\\end{proof}\n\n\\bigskip\n\\begin{lemma}\n\\label{Depth}\nThe longest path in $B_{k}$ or in $R_k$\nstarting at node $0$ is of length $2k$, $k \\ge 2$.\n\\end{lemma}\n\n\\begin{proof}\nIt is useful to observe that the properties of the mapping $\\rho$ and\nLemma~\\ref{QsPathSize} imply that the length of a path is at most~$k$ in\n$\\rho\\left(H^{B}\\right) $ and at most $(k+1)$ in $\\rho\\left(  H^{R}\\right)$.\n\\newline\nThe longest path in $\\rho\\left(B\\right)$ is of length $k$. Any\npath in $B_{k}$ starting at node $0$ having an initial segment in\n$\\rho\\left(B\\right)$ may continue through $H^{B}$ only.\nFollowing Lemma~\\ref{QsPathSize}, the length of such path is at most $k+k=2k$.\nThis may happen only if the initial segment is of length $k$ and,\nconsequently, the path leads to node $-\\mathbf{i}$.\n\\newline\nSimilar reasoning applies to $B$ and $\\rho\\left(H^{B}\\right)$.\nAny path in $B_{k}$ starting at node $0$ having an initial segment in $B$\nmay continue through $\\rho\\left(H^{B}\\right)$ only.\nThe longest path of this kind is, therefore, of length $2k$ and leads to node $-1$.\n\\newline\nThe longest path in $\\sigma\\left(B\\right)$ starting at node $0$ is of\nlength $k$ and cannot be extended. Any other path in $\\sigma\\left(B\\right)$\nis of length $k-1$ or less. Any path in $R_{k}$ starting at node $0$\nhaving an initial segment in $\\sigma\\left(B\\right)$ may continue through\n$H^{R}$ only. Following Lemma~\\ref{QsPathSize}, the length of such path is at most\n$\\left(  k-1\\right)  +\\left(  k+1\\right)  =2k$. This may happen only if the\ninitial segment is of length $(k-1)$, and thus, the path leads to\nnode $\\mathbf{i}$.\n\\newline\nThe longest path in $\\sigma\\rho\\left(B\\right)$\nstarting at node $0$ is of length $k$ and may continue in $R_{k}$ by a path\nof length two or less. The total length is then not larger than $k+2 \\leq 2k$,\nsince $k \\geq 2$; the equality takes place for a path leading to node $k$ only if\n$k=2$. Any path in $R_{k}$ starting at node $0$ having an initial\nsegment shorter than $k$ in $\\sigma\\rho\\left(B\\right)$ may continue\nthrough $\\rho\\left(H^{R}\\right)$ only. Accordingly, The longest path of this kind is\nof length $\\left(k-1\\right)  +\\left(  k+1\\right)  =2k$. This may\nhappen only if the initial segment is of length $k-1$, and hence, the\npath leads to node $1$.\n\n\\end{proof}\n\n\\bigskip\n\\begin{lemma}\n\\label{HorVert}\nA horizontal path and a vertical path in $G_k$, each being of length\n$k+1$ or less, can have at most two common nodes. This may happen only if one of\nthe paths is of length $k+1$ and the two common nodes are its starting and ending nodes.\n\\end{lemma}\n\n\\begin{proof}\nAssume a horizontal and a vertical paths, each being of length $k+1$ or less,\nhaving at least one node in common. Since $G_{k}$ is vertex-transitive, we\ncan assume, without loss of generality, that the common node is $0$.\nThe paths initial segments of size $k$ starting from $0$ are line segments and cannot intersect\nin more than one node. Therefore, another\ncommon node may exist only if one of the paths is of length $k+1$\nand $0$ is its starting node, the last edge of such path is a wrap-around edge,\nand the other common node is the ending node of the path.\n\\end{proof}\n\n\\bigskip\n\\begin{theorem}\n\\label{BasicProp} $B_{k}$ and $R_{k}$ are edge-disjoint node-independent\nspanning trees in $G_{k}$ each of depth $2k$, $k \\geq 2$.\n\\end{theorem}\n\n\\begin{proof}\nLet $k\\geq2$. Then $B_{k}$ and $R_{k}$ are edge-disjoint spanning trees in\n$G_{k}$ by Corollary~\\ref{EDST}.\nSince both trees are rooted in $0$ and following Lemma~\\ref{Depth},\nthe depth of each tree is $2k$.\n\nTo complete the proof of this theorem, we\nneed to prove that $B_{k}$ and $R_{k}$ are node independent. Let $v\\in V_{k}$.\nAssume, in contrary, a node $u$ being an intermediate node of both: the path from\n$0$ to $v$ in $B_{k}$, and the path from $0$ to $v$ in $R_{k}$. Then $u$ is of\ndegree two in both trees. The node $v$ cannot belong to $V\\left(X\\right)$,\nwhere $X=B\\cup\\rho(B)\\cup\\sigma(B)\\cup\\sigma\\rho(B)$, since otherwise in one\nof the trees the path to $v$ leads exclusively through nodes of degree three.\nLet  $v\\in V\\left(  G_{k}\\right)  -V(X)$. The path from $0$ to $v$ starts in\nboth trees by a segment in $X$ and then continues by a segment in one of\n$H^{B},H^{R},\\rho\\left(  H^{B}\\right)  ,\\rho\\left(  H^{R}\\right)  $. The node\n$u$ cannot belong to $V\\left(  X\\right)  $, since the only such $u$ being of\ndegree two in both trees is $u=k\\mathbf{i}$; the only path in $R_{k}$ with\nintermediate node $k\\mathbf{i}$ leads to node $k$, while the path to $k$ in\n$B_{k}$ does not contain $k\\mathbf{i}$. Hence, $u$ belongs to one of\n$H^{B}\\cap\\rho\\left(  H^{R}\\right)  $ or $\\rho\\left(  H^{B}\\right)  \\cap H^{R}$.\nIt follows by Lemma~\\ref{QsPathSize} and the~$\\rho$\nmapping that $u$ belongs to an intersection of a\nhorizontal and a vertical paths, each being of length $k+1$ or less.\nLemma~\\ref{HorVert} implies that one of these paths is of length~$(k+1)$ and\nits starting and ending nodes are~$u$~and~$v$.\nThis leads to a contradiction since such a path may exist only\nif~$u,v \\in V(X)$.\n\n\n\\end{proof}\n\n\\bigskip\n\\begin{remark}\nThe only two edges in $E_{k}$ not belonging to the graphs $B_{k}$ or $R_{k}$ are\nthe edges $\\left(  -k,-k\\mathbf{i}\\right)  $ and $\\left(  k,-k\\mathbf{i}\\right) $.\n\\end{remark}\n\n\\bigskip\n$B_1$ and $R_1$ are depicted in Fig.~\\ref{b1r1}. As it can be seen, $B_1$ is of depth two;\nhowever, $R_1$ is of depth three.\nWe can define $R'_k = (V(R_k), E(R_k) - \\{(k, i)\\} + \\{(k, -i)\\})$.\n\n$R'_1$ is illustrated in Fig.~\\ref{r1prime}, and its depth is clearly two.\n\n\n\n\\begin{figure*}[t!]\n    \\centering\n    \\begin{subfigure}[b]{0.5\\textwidth}\n        \\centering\n        \\includegraphics[scale=0.45]{b1}\n        \\caption{$B_1$}\n        \\label{b1}\n    \\end{subfigure}\n    ~\n    \\begin{subfigure}[b]{0.5\\textwidth}\n        \\centering\n        \\includegraphics[scale=0.45]{r1}\n        \\caption{$R_1$}\n        \\label{r1}\n    \\end{subfigure}\n    ~\n    \\begin{subfigure}[b]{0.5\\textwidth}\n        \\centering\n        \\includegraphics[scale=0.45]{r1prime}\n        \\caption{$R'_1$}\n        \\label{r1prime}\n    \\end{subfigure}\n    \\caption{$B_1$, $R_1$, and $R'_1$}\n    \\label{b1r1}\n\\end{figure*}\n\n\\bigskip\n\\begin{remark}\n\\label{BkR'k}\nThe path $P_{R'_k}(0, k)$ is shorter than $P_{R_k}(0, k)$ by one, and\nthe only two edges in $E_{k}$ not belonging to the graphs $B_{k}$ or $R'_{k}$ are\n$\\left(-k,-k\\mathbf{i}\\right)  $ and $\\left(  k,k\\mathbf{i}\\right)$.\n\\end{remark}\n\n\\bigskip\nTheorem~\\ref{EXTEND} below extends Theorem~\\ref{BasicProp} to prove that $B_k$ and $R'_k$ are edge-disjoint\nnode-independent spanning trees in $G_k$, $k \\ge 1$.\n\n\n\n\n\n\\bigskip\n\\begin{theorem}\n\\label{EXTEND}\n$B_k$ and $R'_k$ are edge-disjoint\nnode-independent spanning trees in $G_k$ each of depth $2k$, $k \\ge 1$.\n\\end{theorem}\n\n\\begin{proof}\n\nBy Theorem~\\ref{BasicProp}, $B_k$ and $R_k$ are edge-disjoint node-independent spanning trees in $G_k$, $k \\ge 2$.\nDisconnecting a leaf node from $R_k$ and reconnecting it to another node results again in a connected graph.\n\nThis implies that $R'_k$ is a spanning tree in $G_k$.\n\\newline\nOnly one edge in $R'_k$ does not belong to $R_k$, and this edge is unused in $B_k$.\nThus, $B_k$ and $R'_k$ are edge-disjoint spanning trees in $G_k$.\n\\newline\nAll paths in $R'_k$ are identical to those in $R_k$ except for the path that leads to $k$.\nTo prove that $B_k$ and $R'_k$ are node-independent spanning trees, we only need\nto verify that the paths lead to $k$ in $B_k$ and in $R'_k$ are node-disjoint.\nIn $B_k$, the path form $0$ to $k$ leads exclusively through nodes of degree three. These nodes must be\nleaves in $R'_k$ and cannot be intermediate nodes in any path.\nHence, $B_k$ and $R'_k$ are edge-disjoint node-independent spanning trees in $G_k$, $k \\ge 2$.\n\\newline\n\nThe distance from $0$ to $k$ in $R'_k$ equals the distance from $0$ to $-k \\mathbf{i}$ plus one = $k+1 < 2k$, $k \\ge 2$.\nTherefore, $B_k$ and $R'_k$ are of depth $2k$, $k \\ge 2$.\n\\newline\nThe theorem can be easily verified for $k=1$, and this concludes the theorem proof.\n\\end{proof}\n\n\\bigskip\n$B_4$ and $R'_4$ are depicted in Fig.~\\ref{BT4}.\n\n\\begin{figure}[H]\n\\centering\n\\includegraphics[scale=0.95]{BT4} \\caption{The trees $B_{4}$ and $R'_{4}$}\n\\label{BT4}\n\\end{figure}\n\n\\section{Routing in $G_{k}$ using edge-disjoint node-independent\ntrees\\label{SectionRouting}}\n\nThe existence of two edge-disjoint node-independent spanning trees in $G_{k}$\nmakes it possible to tolerate either one node or one edge failure. Sending a\nmessage along both trees guarantees the message delivery in case of a single\nfailure of either a node or an edge. The trees also can be utilized to\nsecurely distribute a message by splitting it into two packages each of which\nis sent to the destination along a different tree. Since the trees are node\nindependents, the paths to the destinations in those trees are disjoint. This\nguarantees that only the destination will receive all the packages. Note that\nin both of the above applications the communications must be initiated from\nthe root. However, it is possible for each node~$v$ to implicitly construct\ntwo edge-disjoint node-independent spanning trees rooted in $v$ itself.\n\nWe present routing algorithms for such usage when the source node\n$s_{1}+s_{2}\\mathbf{i}$ sends a message to a destination node $d_{1}+d_{2}\\mathbf{i}$\nalong $B_{k}$ or $R'_{k}$, $k \\ge 1$. The algorithms are based on the vertex-transitive property of $G_k$.\nThe source node is mapped to node~$0$. The destination node and every transient\nnode are mapped accordingly.\nAlgorithm~1 outlines the routing in the source node.\nThe tree type and the destination mapped location determine the message direction\nfrom the source node.\nTable~\\ref{SourceRoutBlackRed} summarizes all possible directions form the source node and the exclusive condition\nassociated with each direction.\n\nAlgorithm~2 describes the routing in a non-source node. If a receiving node is the destination,\nthen no further routing is required.\nOtherwise the receiving node is a transient node and the message is rerouted after deciding its new direction.\nBy default, a message keeps flowing in the same direction unless it needs to make a turn.\nA message makes a turn only if the transient node lays on the horizontal axis or the vertical axis,\nand the destination lays on a continuing path in~$H^B$ or~$H^R$.\n\n\n\n\n\n\nTable~\\ref{TransRoutBlackRed} shows the two exclusive possible conditions in which a message needs to make a turn,\nand it associates each condition with the message new direction. If non of these conditions holds, then the default case\napplies.\n\n\\begin{algorithm}[H]\n\\caption{Routing algorithm for a source node $s_{1}+s_{2}\\mathbf{i}$ to send a message\nto a destination node $d_{1}+d_{2}\\mathbf{i}$ through $B_k$ or $R'_k$}\n\\begin{algorithmic}[1]\n\\STATE Compute the mapped location of the destination:\\\\\n\\hskip\\algorithmicindent \\hskip\\algorithmicindent\n$d_{1}^{m}+d_{2}^{m}\\mathbf{i=}\\left(  \\left(  d_{1}+d_{2}\\mathbf{i} \\right)\n-\\left(  s_{1}+s_{2}\\mathbf{i}\\right)  \\right)  \\operatorname{mod} \\alpha_{k}$\n\\STATE Use Table \\ref{SourceRoutBlackRed} to determine the message direction  \\textbf{Dir}\n\\STATE Create the message header: $\\left(  \\left\\langle s_{1},s_{2}\\right\\rangle ,\\left\\langle d_{1}^{m},d_{2}^{m}\\right\\rangle, \\textbf{Dir} \\right)$\nand send the message\n\\end{algorithmic}\n\\end{algorithm}\n\n\n\\begin{algorithm}[H]\n\\caption{Routing algorithm for a non-source node $t_{1}+t_{2}\\mathbf{i}$}\n\\begin{algorithmic}[1]\n\\STATE Read the message header $\\left(  \\left\\langle s_{1},s_{2}\\right\\rangle ,\\left\\langle d_{1}^{m},d_{2}^{m}\\right\\rangle, \\textbf{Dir} \\right)$\n\\STATE Compute the current node mapped location:\\\\\n\\hskip\\algorithmicindent \\hskip\\algorithmicindent $t_{1}^{m}+t_{2}^{m}\\mathbf{i=}\\left(  \\left(  t_{1}+t_{2}\\mathbf{i}\\right)  -\\left(  s_{1}+s_{2}\\mathbf{i}\\right)  \\right)\\operatorname{mod}\\alpha_{k}$\n\\IF{$\\left\\langle d_{1}^{m},d_{2}^{m}\\right\\rangle = \\left\\langle t_{1}^{m},t_{2}^{m}\\right\\rangle $}\n\\STATE Accept the message and \\textbf{exit}\n\\ELSE\n\\STATE Use Table \\ref{TransRoutBlackRed} to decide the message direction \\textbf{NewDir}\n\\STATE Create the new message header: $\\left(  \\left\\langle s_{1},s_{2}\\right\\rangle ,\\left\\langle d_{1}^{m},d_{2}^{m}\\right\\rangle, \\textbf{NewDir} \\right)$ and send the message\n\\ENDIF\n\\end{algorithmic}\n\\end{algorithm}\n\n\n\\begin{table}\n\\centering\n{\\footnotesize\n\\begin{tabular}\n[c]{|l|l|l|l|}\\hline\nCondition & $B_k$ Direction & $R'_k$ Direction & $d_{1}^{m}+d_{2}^{m}\\mathbf{i}$ Location\\\\\\hline\n$d_{1}^{m}\\times d_{2}^{m}>0$ & \\multicolumn{1}{|c|}{$+\\mathbf{i}$} &\n\\multicolumn{1}{|c|}{$-1$} & Quadrant 1 or 3\\\\\\hline\n$d_{1}^{m}\\times d_{2}^{m}<0$ & \\multicolumn{1}{|c|}{$+1$} &\n\\multicolumn{1}{|c|}{$-\\mathbf{i}$} & Quadrant 2 or 4\\\\\\hline\n$d_{2}^{m}=0$ & \\multicolumn{1}{|c|}{$+1$} & \\multicolumn{1}{|c|}{$-1$} &\nHorizontal Axis\\\\\\hline\n$d_{1}^{m}=0$ & \\multicolumn{1}{|c|}{$+\\mathbf{i}$} &\n\\multicolumn{1}{|c|}{$-\\mathbf{i}$} & Vertical Axis\\\\\\hline\n\\end{tabular}\n}\n\\caption{The source node routing table}\n\\label{SourceRoutBlackRed}\n\\end{table}\n\n\\begin{table}\n\\centering\n{\\footnotesize\n\\begin{tabular}\n[c]{|l|l|c|cc|}\\hline\nCondition & \\textbf{NewDir} & \\multicolumn{3}{|c|}{Location}\\\\\n\\cline{3-5}\n&  & $t_{1}^{m}+t_{2}^{m}\\mathbf{i}$ & \\multicolumn{2}{|c|}{$d_{1}^{m}+d_{2}^{m}\\mathbf{i}$}\\\\\n\\cline{4-5}\n&  &  & $B_k$ & \\multicolumn{1}{|c|}{$R'_k$} \\\\\n\\hline\n$(  t_{2}^{m}=0)$  AND &  & On Horizontal  Axis & Quadrant 2 or\n4 & \\multicolumn{1}{|c|}{Quadrant 1 or 3}\\\\\n$(  t_{1}^{m}=d_{1}^{m}$ OR $t_{1}^{m}=d_{1}^{m}\n+k+1$ OR $t_{1}^{m}=d_{1}^{m}-k)  $ &\n\\multicolumn{1}{|c|}{$-\\mathbf{i}$} &  &  & \\multicolumn{1}{|c|}{}\\\\\\hline\n$\\left(  t_{1}^{m}=0\\right)$ AND & \\multicolumn{1}{|c|}{} & On Vertical\nAxis & Quadrant 1 or 3 & \\multicolumn{1}{|c|}{Quadrant 2 or 4}\\\\\n$(  t_{2}^{m}=d_{2}^{m}$ OR $t_{2}^{m}=d_{2}^{m}+k+1$ OR\n$t_{2}^{m}=d_{2}^{m}-k)  $ & \\multicolumn{1}{|c|}{$+1$} &  &  &\n\\multicolumn{1}{|c|}{}\\\\\\hline\nDefault & \\multicolumn{1}{|c|}{\\textbf{Dir}} & \\multicolumn{3}{|c|}{\n\nKeep the message flowing in the same direction.}\\\\\\hline\n\\end{tabular}\n}\n\\caption{A transient node routing table}\n\\label{TransRoutBlackRed}\n\\end{table}\n\n\n\\newpage\n\\section{Conclusions\\label{SectionConcl}\\bigskip}\n\nWe introduced two constructions of edge-disjoint node-independent spanning trees in dense Gaussian networks.\nBy taking advantage of the node-transitivity in dense Gaussian networks,\nwe defined a limited number of subgraphs and deployed a rotation technique to construct the first pair of trees.\nThe depth of each tree in the first construction is $2k$, $k \\ge 2$, where $k$ is the network diameter.\nWe extended the first construction to construct the second pair of trees.\nThe depth of each tree in the second construction is $2k$, $k \\ge 1$.\nBased on the second construction, we designed algorithms that can be used in fault-tolerant routing or\nsecure message distribution.\nThe source node in these algorithms is not restricted to a specific node; it could be any node in~$G_k$.\n\nIn our future work we intend to investigate constructing independent spanning trees and completely independent\nspanning trees in dense Gaussian networks. Our initial investigations indicate that applying similar techniques\nto those deployed in this paper could lead to fruitful outcomes.\n\\bibliographystyle{IEEEtranS}\n\\bibliography{IEEEabrv,EDNIST}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "itemtype": "equation", "pos": 22226, "prevtext": "\n\\newline\\newline\n2. Let $C_{1}, C_{2}$ be two distinct components of $B_{k}$.\nIf $C_{1},C_{2}$ are not node-disjoint then all edges in one of these\ncomponents are horizontal and all edges in the other one are vertical. A\nsimilar argument is valid for $R_{k}$.\n\\newline\\newline\n3. Since the components\nof $B_{k}$ are edge-disjoint, the edge-size of $B_k$\nis the sum of the edge-sizes of the components. The mappings $\\rho,\\sigma$\npreserve the edge-size of a graph. The same argument applies to $R_k$.\nTherefore, a summation of the edge-disjoint component sizes yields:\n\n", "index": 3, "text": "\\begin{align*}\n\\left\\vert E\\left(  B_{k}\\right)  \\right\\vert  &  =4\\left\\vert E\\left(\nA\\right)  \\right\\vert +2\\left\\vert E\\left(  B\\right)  \\right\\vert +2\\left\\vert\nE\\left(  W^{B}\\right)  \\right\\vert \\\\\n&  =4\\Big[\\frac{k\\left(  k-1\\right)  }{2}\\Big]+2k+2k=2k^{2}+2k\\\\\n\\left\\vert E\\left(  R_{k}\\right)  \\right\\vert  &  =4\\left\\vert E\\left(\nA\\right)  \\right\\vert +2\\left\\vert E\\left(  B\\right)  \\right\\vert +2\\left\\vert\nE\\left(  W^{R}\\right)  \\right\\vert \\\\\n&  =4\\Big[\\frac{k\\left(  k-1\\right)  }{2}\\Big]+2k+2k=2k^{2}+2k\\text{.}\n\\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\left|E\\left(B_{k}\\right)\\right|\" display=\"inline\"><mrow><mo>|</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo>(</mo><msub><mi>B</mi><mi>k</mi></msub><mo>)</mo></mrow></mrow><mo>|</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=4\\left|E\\left(A\\right)\\right|+2\\left|E\\left(B\\right)\\right|+2%&#10;\\left|E\\left(W^{B}\\right)\\right|\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mrow><mn>4</mn><mo>\u2062</mo><mrow><mo>|</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo>(</mo><mi>A</mi><mo>)</mo></mrow></mrow><mo>|</mo></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo>|</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo>(</mo><mi>B</mi><mo>)</mo></mrow></mrow><mo>|</mo></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo>|</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo>(</mo><msup><mi>W</mi><mi>B</mi></msup><mo>)</mo></mrow></mrow><mo>|</mo></mrow></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex4.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=4\\Big{[}\\frac{k\\left(k-1\\right)}{2}\\Big{]}+2k+2k=2k^{2}+2k\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mrow><mn>4</mn><mo>\u2062</mo><mrow><mo maxsize=\"160%\" minsize=\"160%\">[</mo><mstyle displaystyle=\"true\"><mfrac><mrow><mi>k</mi><mo>\u2062</mo><mrow><mo>(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo>)</mo></mrow></mrow><mn>2</mn></mfrac></mstyle><mo maxsize=\"160%\" minsize=\"160%\">]</mo></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo>\u2062</mo><mi>k</mi></mrow><mo>+</mo><mrow><mn>2</mn><mo>\u2062</mo><mi>k</mi></mrow></mrow><mo>=</mo><mrow><mrow><mn>2</mn><mo>\u2062</mo><msup><mi>k</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>2</mn><mo>\u2062</mo><mi>k</mi></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\left|E\\left(R_{k}\\right)\\right|\" display=\"inline\"><mrow><mo>|</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo>(</mo><msub><mi>R</mi><mi>k</mi></msub><mo>)</mo></mrow></mrow><mo>|</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=4\\left|E\\left(A\\right)\\right|+2\\left|E\\left(B\\right)\\right|+2%&#10;\\left|E\\left(W^{R}\\right)\\right|\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mrow><mn>4</mn><mo>\u2062</mo><mrow><mo>|</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo>(</mo><mi>A</mi><mo>)</mo></mrow></mrow><mo>|</mo></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo>|</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo>(</mo><mi>B</mi><mo>)</mo></mrow></mrow><mo>|</mo></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo>\u2062</mo><mrow><mo>|</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo>(</mo><msup><mi>W</mi><mi>R</mi></msup><mo>)</mo></mrow></mrow><mo>|</mo></mrow></mrow></mrow></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=4\\Big{[}\\frac{k\\left(k-1\\right)}{2}\\Big{]}+2k+2k=2k^{2}+2k\\text{.}\" display=\"inline\"><mrow><mi/><mo>=</mo><mrow><mrow><mn>4</mn><mo>\u2062</mo><mrow><mo maxsize=\"160%\" minsize=\"160%\">[</mo><mstyle displaystyle=\"true\"><mfrac><mrow><mi>k</mi><mo>\u2062</mo><mrow><mo>(</mo><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><mo>)</mo></mrow></mrow><mn>2</mn></mfrac></mstyle><mo maxsize=\"160%\" minsize=\"160%\">]</mo></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo>\u2062</mo><mi>k</mi></mrow><mo>+</mo><mrow><mn>2</mn><mo>\u2062</mo><mi>k</mi></mrow></mrow><mo>=</mo><mrow><mrow><mn>2</mn><mo>\u2062</mo><msup><mi>k</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>2</mn><mo>\u2062</mo><mi>k</mi><mo>\u2062</mo><mtext>.</mtext></mrow></mrow></mrow></math>", "type": "latex"}]