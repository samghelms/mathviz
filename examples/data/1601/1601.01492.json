[{"file": "1601.01492.tex", "nexttext": "\n  where \\#$(i)$ denotes the number of voters which vote as the\n  $i$th preference order in the original election.\n\n  Then, we add the following constraint, ensuring\n  that the cost of our bribery action does not exceed the budget:\n \n", "itemtype": "equation", "pos": 29783, "prevtext": "\n\n\\maketitle\n\n\\begin{abstract}\n  We study the (parameterized) complexity of \\textsc{Shift Bribery}\n  for multiwinner voting rules. We focus on the SNTV, Bloc, $k$-Borda, and\n  Chamberlin-Courant, as well as on approximate variants of the\n  Chamberlin-Courant rule, since the original rule is ${\\ensuremath{\\mathrm{NP}}}$-hard to\n  compute. We show that \\textsc{Shift Bribery} tends to be\n  significantly harder in the multiwinner setting than in the\n  single-winner one by showing settings where \\textsc{Shift\n    Bribery} is easy in the single-winner cases, but is hard (and hard\n  to approximate) in the multiwinner ones.\n  Moreover, we show that the\n  non-monotonicity of those rules which are based on approximation algorithms for the\n  Chamberlin-Courant rule sometimes affects the complexity of \\textsc{Shift Bribery}.\n\\end{abstract}\n\n\n\n\\section{Introduction}\nWe study the complexity of campaign management---modeled as the\n\\textsc{Shift Bribery} problem---for the case of multiwinner\nelections. In the \\textsc{Shift Bribery} problem we want to ensure\nthat our candidate is in a winning committee by convincing some of the\nvoters---at a given price---to rank him or her more favorably.\nIn particular, this models campaigns based on direct meetings with voters, in which\nthe campaigner presents positive features of the candidate he or she\nworks for.  While the complexity of campaign management is relatively\nwell-studied for single-winner elections, it has not been studied for\nthe multiwinner setting yet\n(there are, however, studies of manipulation and control for multiwinner elections~\\cite{MPRZ08,AGGMMW15}).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBased on the preferences of the voters,\nthe goal of a multiwinner election is to pick a committee of $k$\ncandidates. These $k$\ncandidates might, for example, form the country's next parliament, be\na group of people short-listed for a job opening, or be a set of items\na company offers to its customers (see the papers of Lu and\nBoutilier~\\cite{BL11}, Skowron et al.~\\cite{SFL15}, and\nElkind et al.~\\cite{EFSS14} for a varied description of\napplications of multiwinner voting).\n\n\n\n\n\n\nSince the election results can affect the voters and the candidates\nquite significantly, we expect that they will run campaigns to achieve\nthe most desirable results: a person running for parliament would\nwant to promote her or his political platform; a job candidate would want to\nconvince the HR department of her or his qualities. \n\n\n\n\n\n\nWe study the standard, ordinal model of voting, where each voter\nranks the candidates from the one he or she likes best to the one he\nor she likes least. \n\nWe focus on rules that are based either on the Borda scores of the\ncandidates or on their $t$-Approval scores.\nBriefly put, if we have $m$ candidates, then a voter gives Borda score $m-1$\nto his or her most preferred candidate, score $m-2$ to the next one, and so on;\na voter gives $t$-Approval score $1$ to each of his or her top-$t$ candidates\nand score $0$ to the other ones.\n\nThe most basic multiwinner rules simply pick $k$ candidates with the\nhighest scores (for example, SNTV uses $1$-Approval scores, Bloc uses\n$k$-Approval scores, and $k$-Borda uses Borda scores). While\nsuch rules may be good for short-listing tasks, they do not seem to\nperform well for cases where the committee needs to be varied (or\nrepresent the voters proportionally; see the work of Elkind et\nal.~\\cite{EFSS14}). In this case, we may prefer other rules, such\nas the Chamberlin-Courant family of rules~\\cite{CC83}, which try to\nensure that every voter is represented well by some member of the\ncommittee (see the Preliminaries section for an exact definition).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnfortunately, while the winners of SNTV, Bloc, and $k$-Borda rules\nare polynomial-time computable, this is not the case for the\nChamberlin-Courant rules (Procaccia et al.~\\cite{PRZ08} and Lu\nand Boutilier~\\cite{BL11} show ${\\ensuremath{\\mathrm{NP}}}$-hardness). We deal with this\nproblem in two ways.  First, there are FPT algorithms for computing\nChamberlin-Courant winners (for example, for the case of few\nvoters). Second, there are good approximation\nalgorithms \n(due to Lu and Boutilier~\\cite{BL11} and Skowron et\nal.~\\cite{SFS15}). Following \nCaragiannis et al.~\\cite{CKKP14} and Elkind et al.~\\cite{EFSS14}, we\nconsider these approximation algorithms as voting rules in their own\nright (\nsocieties may \nuse them in place of the original, hard-to-compute ones).\n\n\nThe idea of the \\textsc{Shift Bribery} problem is as follows. We are\ngiven an election and a preferred candidate $p$, and we want to\nensure that $p$ is a winner (in our case, is a member of a winning\ncommittee) by shifting him or her forward in some of the votes, at an\nappropriate cost, without exceeding a given budget.  The costs of\nshifting $p$ correspond to investing resources into convincing the\nvoters that our candidate is of high quality. For example, if a company\nis choosing which of its products to continue selling, the manager\nresponsible for a given product may wish to prepare a demonstration\nfor the company's higher management. Similarly, a person running for\nparliament would invest money into meetings with the voters,\nappropriate leaflets, and so on. Thus, we view \\textsc{Shift Bribery}\nas a model of (a type of) campaign management.\n\n\\textsc{Shift Bribery} was introduced by Elkind et\nal.~\\cite{EFS09,EF10}, and since then a number of other\nresearchers studied both \\textsc{Shift Bribery}~(e.g. Schlotter et\nal.~\\cite{EFS11} and Bredereck et\nal.~\\cite{BCFNN14,BFNT15}), and related campaign management\nproblems (e.g. Dorn and Schlotter~\\cite{DS12}, Baumeister et\nal.~\\cite{BFLR12}, and Faliszewski et al.~\\cite{FRRS14}).\nNaturally, the problem also resembles other bribery problems, such as\nthe original bribery problem of Faliszewski et al.~\\cite{FHH09}\nor those studied by Mattei et al.~\\cite{MPRV12} and Mattei,\nGoldsmith, and Klapper~\\cite{MGK12}. We point the reader to the\noverview of Faliszewski and Rothe~\\cite{FR15} for more details\nand references.\n\n\nFor single-winner elections, \\textsc{Shift Bribery} is a relatively easy problem.\nSpecifically, it is polynomial-time solvable for the $t$-Approval rules.\nFor the Borda rule, for which it is ${\\ensuremath{\\mathrm{NP}}}$-hard, there are a good polynomial-time approximation\nalgorithm~\\cite{EF10} and exact ${\\ensuremath{\\mathrm{FPT}}}$ algorithms~\\cite{BCFNN14}.\n\nIn the multiwinner setting the situation is quite different.\nThe main findings of our research are as follows (see also \\autoref{table:results} in \\autoref{sec:shift-bribery}):\n\n\\begin{enumerate}\n\\item The computational complexity of \\textsc{Shift Bribery} for multiwinner rules\n  strongly depends on the setting. In general, for the cases of few\n  candidates we find ${\\ensuremath{\\mathrm{FPT}}}$ algorithms while for the cases where the\n  preferred candidate is shifted by few positions only we find\n  hardness results (even though these cases are often easy in the\n  single-winner setting). \n\n\\item The computational complexity for the case of few voters most\n  strongly depends on the underlying scoring rule. Generally, for the\n  rules based on $t$-Approval scores the complexity of \\textsc{Shift\n    Bribery} tends to be lower than for analogous rules based on\n  Borda scores.\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\end{enumerate}\n\n\\noindent\nWe did not study such multiwinner rules as the STV rule, the\nMonroe rule~\\cite{Mon95}, or other Approval-based rules (see, e.g.,\nthe works of Brams and Kilgour~\\cite{BK14} and Aziz et\nal.~\\cite{ABCEFW15,AGGMMW15}), in order to compare our\nresults to those for the single-winner setting, while keeping the\nconsidered set of rules small.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\section{Preliminaries}\\label{sec:prelim}\n\n\n\n\n \n\n\\noindent\\textbf{Elections and Voting Rules.}\\quad For each integer $n$, we set\n$[n] := \\{1, \\ldots, n\\}$.  An election~$E = (C,V)$ consists of a set\nof candidates $C = \\{c_1, \\ldots, c_m\\}$ and a collection of voters $V\n= (v_1, \\ldots, v_n)$. Each voter $v$ is associated with a preference\norder, i.e., with a ranking of the candidates in decreasing order\nof appreciation by the voter.  For example, if $C = \\{c_1, c_2, c_3\\}$,\nthen by writing $v \\colon c_1 {\\succ} c_2 {\\succ} c_3$ we mean that\n$v$~likes~$c_1$ best, then~$c_2$, and then~$c_3$. We write~${\\ensuremath{{{\\mathrm{pos}}}}}_v(c)$\nto denote the position of candidate~$c$ in voter~$v$'s preference order\n(e.g., in the preceding example we would have~${\\ensuremath{{{\\mathrm{pos}}}}}_v(c_1) = 1$).\nWhen we write a subset~$A \\subseteq C$ of candidates in a description\nof a preference order, we mean listing all members of~$A$ in some\nfixed, easily computable order. If we put~${\\overleftarrow{{A}}}$ in a preference\norder, then we mean listing members of~$A$ in the reverse of this fixed\norder.\n\nLet $E = (C,V)$ be an election with $m$~candidates and $n$~voters.\nThe Borda score of candidate~$c$ in the vote of~$v$, $v \\in V$, is\n$\\beta_v(c) = m-{\\ensuremath{{{\\mathrm{pos}}}}}_v(c)$.  The Borda score of~$c$ in the election~$E$ is\n$\\beta_E(c) = \\sum_{v \\in V}\\beta_v(c)$. The single-winner Borda rule\nelects the candidate with the highest Borda score (if there are\nseveral such candidates, they tie as winners).\n\nFor each $t \\in [m]$, we define the $t$-Approval score as follows: for\na candidate~$c$ and voter~$v$, $\\alpha^t_v(c) = 1$ if $v$~ranks~$c$\namong the top~$t$ positions and otherwise it is $0$; we set $\\alpha^t_E(c)\n= \\sum_{v \\in V}\\alpha^t_v(c)$. We define the single-winner\n$t$-Approval rule analogously to the Borda rule.\n\n\nA multiwinner voting rule~${\\ensuremath{{{\\mathcal{R}}}}}$ is a function that, given an\nelection~$E=(C,V)$ and an integer $k\\in [|C|]$, outputs a set\n${\\ensuremath{{{\\mathcal{R}}}}}(E,k)$ of $k$-element subsets of~$C$. Each size-$k$ subset of\n$C$ is called a \\emph{committee} and each member of ${\\ensuremath{{{\\mathcal{R}}}}}(E,k)$ is \ncalled a \\emph{winning committee}. \n\nThe most natural task that arises when considering (multiwinner) voting\nrules is the task of deciding whether a given candidate is among the winners\n(resp.\\ is part of some winning committee).\nWe will refer to this task as the \\textsc{Winner Determination} problem.\nSometimes, winner determination procedures considered in the literature\nconsider slightly different goals (e.g.\\ computing the score of a winning committee).\nHowever, all polynomial-time, ${\\ensuremath{\\mathrm{FPT}}}$, and ${\\ensuremath{\\mathrm{XP}}}$ winner determination procedures\nfor the rules we study in this paper can be modified to \nsolve \\textsc{Winner Determination}.\n\nWe consider the following \nrules\n\n(below, $E = (C,V)$ is an election and $k$ is the\ncommittee size):\n\n\n\n  \\emph{{SNTV\\xspace}}, \\emph{{Bloc\\xspace}}, and \\emph{{$k$-Borda\\xspace}} compute the score of each candidate\n  and output the committee of $k$~candidates with the highest scores\n  (or all such committees, if there are several).  {SNTV\\xspace} and\n  {Bloc\\xspace} use, respectively, $1$-Approval and $k$-Approval scores, while {$k$-Borda\\xspace} uses\n  Borda scores.\n  For these rules winners can be computed in polynomial time.\\footnote{\n    There may be exponentially many winning committees, but it is\n    easy to compute their score and to check \n    for a subset of candidates if it can be extended to a winning committee.}\n\n\n  Under the \\emph{Chamberlin-Courant rules} (the CC rules), for a\n  committee $S$, a candidate~$c \\in S$ is a representative of those\n  voters that rank $c$ highest among the members of~$S$.  The\n  score of a committee is the sum of the scores that the voters give\n  to their representatives (highest-scoring committees\n  win); \\emph{Borda-CC} uses Borda scores, \\emph{$t$-Approval-CC}\n  uses $t$-Approval scores.\n\n\n\n\n\n  \\textsc{Winner Determination} for CC rules is ${\\ensuremath{\\mathrm{NP}}}$-hard~\\cite{PRZ08,BL11},\n  but is in~${\\ensuremath{\\mathrm{FPT}}}$ when parameterized by the number of voters or\n  candidates~\\cite{BSU13}.\n\n\n  \\emph{Greedy-Borda-CC} is a $(1-\\frac{1}{e})$-approximation\n  algorithm for the Borda-CC rule, due to Lu and\n  Boutilier~\\cite{BL11}.  (The approximation is in the sense that\n  the score of the committee output by the algorithm is at least a\n  $1-\\frac{1}{e}$ fraction of the score of the winning committee\n  under Borda-CC.)  The algorithm starts with an empty set~$W$ and\n  executes $k$~iterations, in each one adding to~$W$ the candidate~$c$\n  that maximizes the Borda-CC score of~$(W \\cup \\{c\\})$.\\footnote{If\n    there is a tie between several candidates, then we assume that the\n    algorithm breaks it according to a prespecified\n    order. \n   \n   \n  }\n  For example, it always picks a Borda winner in the first iteration.\n  \n  Greedy-Borda-CC always outputs a unique winning committee.\n\n  \\emph{Greedy-Approval-CC} works in the same way, but\n  uses $t$-Approval scores instead of Borda scores.\n  \n  It is a $(1-\\frac{1}{e})$-approximation\n  algorithm  for  $t$-Approval-CC.\n\nWe refer to $t$-Approval-Greedy-CC for $t = \\lceil \\frac{m\n \\cdot \\mathrm{w}(k)}{k}\\rceil$ (where $\\mathrm{w}$ is Lambert's W\nfunction; $\\mathrm{w}(k)$ is $O(\\log k)$) as \\emph{PTAS-CC}; it is the main\npart of Skowron et al.'s~\\cite{SFS15} polynomial-time\napproximation scheme for Borda-CC.\\smallskip\n\n\n\\noindent\\textbf{Parameterized Complexity.}\\quad In a parameterized problem, we\ndeclare some part of the input as the \\emph{parameter} (e.g.,  \n\nthe number of voters). A parameterized problem\nis fixed-parameter tractable (is in ${\\ensuremath{\\mathrm{FPT}}}$) if there is an algorithm\nthat solves it in $f(\\rho) \\cdot |I|^{O(1)}$ time, where $|I|$ is the\nsize of a given instance encoding, $\\rho$ is the value of the parameter, and\n$f$ is some computable function. There is a hierarchy of classes of\nhard parameterized problems, ${\\ensuremath{\\mathrm{FPT}}} \\subseteq {\\ensuremath{\\mathrm{W[1]}}} \\subseteq {\\ensuremath{\\mathrm{W[2]}}}\n\\subseteq \\cdots \\subseteq {\\ensuremath{\\mathrm{XP}}}$.  It is widely believed that if a\nproblem is hard for one of the $\\mathrm{W[\\cdot]}$ classes, then it is\nnot in ${\\ensuremath{\\mathrm{FPT}}}$. The notions of hardness and completeness for\nparameterized classes are defined through parameterized reductions.\nFor this paper, it suffices to use standard polynomial-time many-one\nreductions that guarantee that the value of the parameter in the\nproblem we reduce to exclusively depends on the value of the parameter of the\nproblem we reduce from.\nThe following problems will be used in our reductions.\n\n\n\n\n\n\n\n\n\n\n\n\\begin{definition}\n  An instance of {\\textsc{Clique}\\xspace} consists of a graph $G = (V(G), E(G))$ and an integer $h$.\n  We ask whether there is a set of $h$ vertices such that there is an edge\n  between each two vertices from the set.\n\\end{definition}\n\n\n\\begin{definition}\n  An instance of {\\textsc{Multicolored}\\ \\textsc{Independent Set}\\xspace} consists of a graph $G = (V(G),E(G))$,\n  where each vertex has one of $h$ colors. We ask whether there are $h$\n  vertices of pairwise-distinct colors such that no two of them are\n  connected by an edge.\n\\end{definition}\n\n\n\\begin{definition}\n  An instance of {\\textsc{Set Cover}\\xspace} consists of a set~$U$ of elements, a family~${\\ensuremath{{{\\mathcal{S}}}}}$\n  of subsets of~$U$, and and integer~$h$. We ask whether there is a\n  subset of $h$ sets from ${\\ensuremath{{{\\mathcal{S}}}}}$ whose union is $U$.\n\\end{definition}\n \n \n{\\textsc{Clique}\\xspace} and {\\textsc{Multicolored}\\ \\textsc{Independent Set}\\xspace} are both ${\\ensuremath{\\mathrm{W[1]}}}$-complete while {\\textsc{Set Cover}\\xspace} is ${\\ensuremath{\\mathrm{W[2]}}}$-complete\n(in all cases, the solutions size $h$ is the parameter).\n\n\nIf a parameterized problem can be solved in polynomial time under the\nassumption that the parameter is constant, then we say that it is in~${\\ensuremath{\\mathrm{XP}}}$.\nRecall that membership in ${\\ensuremath{\\mathrm{FPT}}}$ additionally requires that the degree\nof the polynomial is a constant independent from the parameter.\nIf a problem is ${\\ensuremath{\\mathrm{NP}}}$-hard even for some constant value of the parameter,\nthen we say that it is para-${\\ensuremath{\\mathrm{NP}}}$-hard.\n\n\nFor details on parameterized complexity, we point to\nthe books of Cygan et al.~\\cite{CFKLMPPS15},\nDowney and Fellows~\\cite{DF13}, Flum and Grohe~\\cite{FG06},\nand Niedermeier~\\cite{Nie06}.\n\n\n\\section{Shift Bribery}\\label{sec:shift-bribery}\n\n\n\n\nLet ${\\ensuremath{{{\\mathcal{R}}}}}$ be a multiwinner rule. In the\n${\\ensuremath{{{\\mathcal{R}}}}}$-\\textsc{Shift Bribery} problem we are given an election $E =\n(C,V)$ with $m$~candidates and $n$~voters, a preferred candidate~$p$,\na committee size~$k$, voter price functions (see below), and an\ninteger~$B$, the budget. The goal is to ensure that $p$ belongs to at\nleast one winning committee (according to the\nrule~${\\ensuremath{{{\\mathcal{R}}}}}$),\\footnote{Our approach \n  is a natural extension of the non-unique winner model from the world of\n  single-winner rules.\n  Naturally, one might alternatively require that $p$ is a\n  member of all winning committees or put an even more demanding goal\n  that would involve other candidates.\n  We refer to a brief discussion in the Conclusion section.}\nand to achieve this goal we are allowed to\nshift~$p$ forward in the preference orders of the voters. However,\neach voter~$v$ has a price function $\\pi_v \\colon [m] \n\\rightarrow {\\ensuremath{{\\mathbb{N}}}}$, and if we shift~$p$ by $i$~positions forward\nin the vote of~$v$, then we have to pay $\\pi_v(i)$. We assume that the\nprice functions are nondecreasing (i.e., it cannot cost less to shift\nour candidate farther than to shift her or him nearer) and that the\ncost of not shifting~$p$ is zero (i.e., $\\pi_v(0) = 0$ for each~$v$).\n\nBredereck et al.~\\cite{BCFNN14} have considered several different\nfamilies of price functions. In this paper we focus on two of them:\nunit price functions, where for each voter~$v$ it holds that $\\pi_v(i)\n= i$, and all-or-nothing price functions, where for each voter~$v$ it\nholds that $\\pi_v(i) = q_v$ for each $i > 0$ (where $q_v$ is some\nvoter-dependent value) and $\\pi_v(0) = 0$.\n\nA shift action is a vector $(s_1, \\ldots, s_n)$ of natural numbers,\nthat for each voter specifies by how many positions to shift $p$.  If\n$\\vec{s} = (s_1, \\ldots, s_n)$ is a shift action, then we write\n${\\ensuremath{{{\\mathrm{shift}}}}}(E,\\vec{s})$ to denote the election obtained from~$E$ by\nshifting~$p$ an appropriate number of positions forward in each\nvote. If $\\Pi = (\\pi_1, \\ldots, \\pi_n)$ are the price functions of the\n$n$~voters, then we write $\\Pi(\\vec{s}) = \\sum_{i=1}^n\\pi_i(s_i)$ to\ndenote the total cost of applying $\\vec{s}$. For a shift action\n$\\vec{s}$, we define $\\#\\vec{s} = \\sum_{i=1}^n s_i$ and \nwe call it the number of unit shifts in~$\\vec{s}$. \n\n\n\n\n\nFormally, we define ${\\ensuremath{{{\\mathcal{R}}}}}$-\\textsc{Shift Bribery} as follows.\n\\begin{definition}\n  Let ${\\ensuremath{{{\\mathcal{R}}}}}$ be a multiwinner voting rule.\n  An instance~$I$ of ${\\ensuremath{{{\\mathcal{R}}}}}$-\\textsc{Shift Bribery} consists of an election $E = (C,V)$,\n  a preferred candidate $p \\in C$, a committee size~$k$, a collection\n  $\\Pi = (\\pi_1, \\ldots, \\pi_n)$ of price functions for the\n  voters, and an integer $B$, the budget.\n  We ask whether there is a\n  shift action $\\vec{s} = (s_1, \\ldots, s_n)$ such that:\n  \\begin{enumerate}\n   \\item $\\Pi(\\vec{s}) \\leq B$, and\n   \\item there is a committee $W \\in\n         {\\ensuremath{{{\\mathcal{R}}}}}({\\ensuremath{{{\\mathrm{shift}}}}}(E,\\vec{s}),k)$ such that $p \\in W$.\n  \\end{enumerate}\n  We refer to such a shift action as a \\emph{successful shift action};\n  we write ${\\ensuremath{{{\\mathrm{OPT}}}}}(I)$ to denote the cost of the least expensive successful\n  shift action.\n\\end{definition}\n\nFollowing Bredereck et al.~\\cite{BCFNN14}, we consider\nthe most natural parameterizations\n\nby the number~$n$ of voters, by the number~$m$ of candidates, \n\nand by the minimum number~$s$ of unit shifts in a successful shift action.\n\n\\begin{table*}[t]\n  {\\centering\n\\medskip\n\\resizebox{\\linewidth}{!}{\n\\begin{tabular}{l | c || c || c | c | c |}\n \\hline\n  \\multicolumn{2}{|c||}{\\multirow{2}{*}{voting rule ${\\ensuremath{{{\\mathcal{R}}}}}$}} & {\\rule{0cm}{0.35cm}} ${\\ensuremath{{{\\mathcal{R}}}}}$-\\textsc{Winner} & \\multicolumn{3}{c|}{${\\ensuremath{{{\\mathcal{R}}}}}$-{\\textsc{Shift Bribery}\\xspace}} \\\\\n \\cline{4-6}\n  \\multicolumn{2}{|c||}{}                                     & {\\rule{0cm}{0.35cm}} \\textsc{Determination}                 & \\#candidates ($m$)                         & \\#voters ($n$)                                     & \\#shifts ($s$) \\\\\n \\hline\n \\multicolumn{1}{l}{}\\multirow{5}{*}{{\\rotatebox{90}{{{\\hspace{-.75\\normalbaselineskip}} \\specialcell{single\\\\winner}}\\hspace{\\tabcolsep}}}} & \\multicolumn{5}{l}{}\\\\\n \\cline{2-6}\n {\\rule{0cm}{0.35cm}} & $t$-Approval              & \\multirow{3}{*}{{\\ensuremath{\\mathrm{P}}}{}$^\\bigstar$}  & \\multicolumn{3}{c|}{{\\ensuremath{\\mathrm{P}}}{}$^\\triangledown$} \\\\\n \\cline{2-2} \\cline{4-6}    \n {\\rule{0cm}{0.35cm}} & \\multirow{2}{*}{Borda}    &                                     & \\multirow{2}{*}{${\\ensuremath{\\mathrm{FPT}}}${}$^\\diamondsuit$} & {\\ensuremath{\\mathrm{FPT}}}(0/1-pr.){}, {\\ensuremath{\\mathrm{FPT}}}-AS{}$^\\diamondsuit$, & \\multirow{2}{*}{${\\ensuremath{\\mathrm{FPT}}}$$^\\diamondsuit$} \\\\\n  &                                          &                                     &                                            & and ${\\ensuremath{\\mathrm{W}}}[1]$-h (Thm.~\\ref{borda_wrt_n})   & ~ \\\\\n \\cline{2-6}\n \\multicolumn{6}{l}{}\\\\\n \\cline{2-6}\n \\multirow{8}{*}{{\\rotatebox{90}{{{\\hspace{-.75\\normalbaselineskip}} \\specialcell{\\multirow{2}{*}{multi winner}\\\\}}\\hspace{\\tabcolsep}}}}\n {\\rule{0cm}{0.35cm}} & SNTV                       &  \\multirow{4}{*}{{\\ensuremath{\\mathrm{P}}}{}$^\\bigstar$} & \\multicolumn{3}{c|}{\\multirow{2}{*}{{\\ensuremath{\\mathrm{P}}}{} (Thm.~\\ref{thm:sntvbloc})}}  \\\\\n \\cline{2-2}   \n {\\rule{0cm}{0.35cm}} & Bloc                      &           ~                          & \\multicolumn{3}{c|}{\\multirow{2}{*}{~}}  \\\\\n \\cline{2-2} \\cline{4-6}\n {\\rule{0cm}{0.35cm}} & $k$-Borda &           ~                          & \\multirow{8}{*}{${\\ensuremath{\\mathrm{FPT}}}$ (Thm.~\\ref{thm:m})} & {\\ensuremath{\\mathrm{FPT}}}(0/1-pr.) (Prop.~\\ref{prop:all-or-nothing-n}), & {\\ensuremath{\\mathrm{W[1]}}}-h (Thm.~\\ref{kborda_wrt_s})                     \\\\\n \\cline{2-3} \\cline{6-6}\n {\\rule{0cm}{0.35cm}} & \\multirow{2}{*}{Borda-CC} & ${\\ensuremath{\\mathrm{NP}}}$-h$^\\spadesuit$,              &       ~                                    & {\\ensuremath{\\mathrm{FPT}}}-AS (Thm.~\\ref{thm:fpt-as}), and               & \\multirow{3}{*}{{\\ensuremath{\\mathrm{Para}}}-{\\ensuremath{\\mathrm{NP}}}-h$^\\spadesuit$}           \\\\\n  & ~                         & ${\\ensuremath{\\mathrm{FPT}}}(n)$$^\\heartsuit$, and        &       ~                                    & ${\\ensuremath{\\mathrm{W}}}[1]$-h (Cor.~\\ref{cor:kBorda-n}+Cor.~\\ref{cor:BordaCC-n})                 & ~                                                     \\\\\n \\cline{2-2} \\cline{5-5}\n {\\rule{0cm}{0.35cm}} & Approval-CC               & ${\\ensuremath{\\mathrm{FPT}}}(m)$$^\\heartsuit$             &       ~                                    & \\multirow{3}{*}{{\\ensuremath{\\mathrm{FPT}}}{} (Prop.~\\ref{prop:greedy-approval-cc-n})} & ~                                          \\\\\n \\cline{2-3} \\cline{6-6}\n {\\rule{0cm}{0.35cm}} & Greedy-Approval-CC        & \\multirow{3}{*}{{\\ensuremath{\\mathrm{P}}}{}$^\\bigstar$}   &       ~                                    & ~                                                  & \\multirow{3}{*}{{\\ensuremath{\\mathrm{W[2]}}}-h (Thm.~\\ref{W2h-unitshifts})}  \\\\\n \\cline{2-2}   \n {\\rule{0cm}{0.35cm}} & PTAS-CC                   &           ~                          &       ~                                    & ~                                                  & ~                                                     \\\\\n \\cline{2-2} \\cline{5-5}\n {\\rule{0cm}{0.35cm}} & Greedy-Borda-CC &      ~                          &       ~                                    & ${\\ensuremath{\\mathrm{W}}}[1]$-h (Cor.~\\ref{cor:BordaCC-n})                 & ~                                                     \\\\\n \\cline{2-6}\n\\end{tabular}\n}\n}\n\n  \\caption{\n    Overview of our complexity results for the {\\textsc{Shift Bribery}\\xspace} problem\n    (for reference, we also mention the complexity of the \\textsc{Winner Determination} problem).\n    The results in each cell apply to all voting rules listed in the leftmost column which span the height of the cell.\n    All results are for the case of unit price functions, with the exceptions of those marked as {\\ensuremath{\\mathrm{FPT}}}(0/1-pr.), which are for all-or-nothing\n    price functions (many other results extend to other price functions, but we do not list them here).\n    {\\ensuremath{\\mathrm{FPT}}}-AS stands for ${\\ensuremath{\\mathrm{FPT}}}$ approximation scheme (see \\autoref{thm:fpt-as}).\n    Note that all variants which are ${\\ensuremath{\\mathrm{W}}}$[$\\cdot$]-hard are also in~${\\ensuremath{\\mathrm{XP}}}$.\n    Results marked\n    by $\\triangledown$ follow from the work of Elkind et al.~\\cite{EFS09},\n    by $\\diamondsuit$ follow from the work of Bredereck et al.~\\cite{BCFNN14},\n    by $\\spadesuit$ follow from the works of Procaccia et al.~\\cite{PRZ08} and Lu and Boutilier~\\cite{BL11},\n    by $\\heartsuit$ follow from the work of Betzler et al.~\\cite{BSU13},\n    and by $\\bigstar$ are folk results. \n  }\\label{table:results}\n\n\\end{table*}\n\nNow, we formally defined all central concepts and problems studied in this work,\nusing this, \\autoref{table:results} summarizes our and some previous results.\nThe reminder of this paper is structured as follows.\nIn \\autoref{sec:general_results}, we present findings applying to the\nmultiwinner context as a whole.\nIn \\autoref{sec:topk-results}, we present specific results for the voting\nrules SNTV, Bloc, and $k$-Borda.\nIn \\autoref{sec:CC-results}, we present our results for Chamberlin-Courant\nrules and their approximate variants.\nWe conclude with a final discussion and an outlook in \\autoref{sec:conclusion}.\n\n\n\\section{General Results}\n\\label{sec:general_results}\n\nWe start our discussion by providing several results that either apply\nto whole classes of multiwinner rules (including many of those that we\nfocus on) or that are proven using general, easily adaptable techniques.\nThese results form a baseline for our research regarding specific\nrules.\n\n\n\n\n\n\n\n\n\n\n\nFirst, we note that for each of the rules that we study, \\textsc{Shift\n  Bribery} with unit price functions is in ${\\ensuremath{\\mathrm{FPT}}}$ when parameterized\nby the number of candidates. This result follows by applying the\nstandard technique of modeling the problem through an integer linear\nprogram and invoking Lenstra's theorem~\\cite{Len83}. We believe that,\nusing the MILP technique of Bredereck et al.~\\cite{BFNST15}, it is also\npossible to generalize this result to all-or-nothing price functions.\n\nNote that the following theorem does not mention SNTV and Bloc since,\nas we will see in the next section, for them the problem is even in~${\\ensuremath{\\mathrm{P}}}$.\n\n\n\\begin{theorem}\\label{thm:m}\n  {Parameterized by the number of   candidates, \\textsc{Shift Bribery} with unit prices is in ${\\ensuremath{\\mathrm{FPT}}}$ for   $k$-Borda, Approval-CC, Borda-CC, Greedy-Approval-CC, PTAS-CC, and   Greedy-Borda-CC.}\n\\end{theorem}\n\nIn order to prove \\autoref{thm:m}, we introduce an algorithmic scheme similar\nto that of \\citet{DS12} for single-winner \\textsc{Swap Bribery}.\nWe will make use of the fact that integer linear programs (ILPs)\ncan be solved in FPT time with respect to the number of (integer) variables\n(following a famous result by \\citet{Len83} which was later improved\nby \\citet{Kan87} and by \\citet{FT87}).\nWe first introduce the algorithmic scheme and the basic ILP formulation.\nThen, we show how to extend the ILP such that the algorithmic scheme works\nfor {$k$-Borda\\xspace} (by proving \\autoref{lem:m:kBorda}),\nfor {Approval-CC\\xspace} and {Borda-CC\\xspace} (by proving \\autoref{lem:m:CCs}),\nand for {Greedy-Approval-CC\\xspace}, {PTAS-CC\\xspace}, and {Greedy-Borda-CC\\xspace} (by proving \\autoref{lem:m:Greedys}).\n\nThe idea of the algorithmic scheme is to guess the members of the winning committee\n$W \\subseteq C$, $|W|=k$, $p \\in W$, and to\nverify the guess by an ILP.\nMore precisely, we try all possible winning committees in the outer loop of our\nalgorithm and call the corresponding ILP for each of the (less than~$2^m$)\npotential winning committees that contain~$p$.\nFor the round-based rules ({Greedy-Approval-CC\\xspace}, {PTAS-CC\\xspace}, and {Greedy-Borda-CC\\xspace})\nwe furthermore guess a function $w: [k] \\rightarrow W$ mapping each ``position''\nin the committee to a specific candidate from~$W$.\nThis allows to specify when each member joined the committee according\nto the round-based rules and can be realized with an additional factor of $k!\\le m!$\nto the running time.\nFor the ease of presentation let~$W^j$ denote the set containing the first~$j$\nmembers according to the function~$w$, that is, $W^j=\\{w(j') \\mid 1\\le j' \\le j\\}$.\n\nObserve that there are $m!$ different preference orders,\nand, by ordering them arbitrarily, we can consider the $i$th\npreference order (for $i \\in [m!]$).\n\n\n\n\n  For each $i \\in [m!]$ and $j \\in [m!]$ we create an integer variable\n  $S_{i,j}$ which represents the number of voters which vote as the\n  $i$th preference order in the original election and vote as the\n  $j$th preference order in the bribed election.\n\n   Based on these variables we add the following constraints\n   for each $i \\in [m!]$,\n   ensuring that each original vote is turned into exactly\n   one bribed vote:\n \n", "index": 1, "text": "\\[\n  \\sum_{j \\in [m!]} S_{i,j} = \\textrm{\\#}(i),\n  \\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"\\sum_{j\\in[m!]}S_{i,j}=\\textrm{\\#}(i),\" display=\"block\"><mrow><mrow><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>j</mi><mo>\u2208</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>m</mi><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow><mo stretchy=\"false\">]</mo></mrow></mrow></munder><msub><mi>S</mi><mrow><mi>i</mi><mo>,</mo><mi>j</mi></mrow></msub></mrow><mo>=</mo><mrow><mtext>#</mtext><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n  where $\\textrm{cost}(i,j)$ is the budget needed to transform the\n  $i$th preference order to the $j$th preference order (and, for\n  formal correctness, equals $B+1$ if it is not possible at all\n  by shifting only~$p$).\n\n  For each $i \\in [m!]$ we create an integer variable $N_{i}$ which represents\n  the number of voters which vote as the $i$th preference order in the\n  bribed election.  Based on the $S_{i,j}$ variables, we make sure\n  that the $N_{i}$~variables are correct, by adding, for each $i \\in\n  [m!]$, the following constraint:\n \n", "itemtype": "equation", "pos": 30070, "prevtext": "\n  where \\#$(i)$ denotes the number of voters which vote as the\n  $i$th preference order in the original election.\n\n  Then, we add the following constraint, ensuring\n  that the cost of our bribery action does not exceed the budget:\n \n", "index": 3, "text": "\\[\n  \\sum_{i \\in [m!], j \\in [m!]} S_{i,j} \\cdot \\textrm{cost}(i,j) \\leq\n  B,\n  \\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"\\sum_{i\\in[m!],j\\in[m!]}S_{i,j}\\cdot\\textrm{cost}(i,j)\\leq B,\" display=\"block\"><mrow><mrow><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mrow><mi>i</mi><mo>\u2208</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>m</mi><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow><mo stretchy=\"false\">]</mo></mrow></mrow><mo>,</mo><mrow><mi>j</mi><mo>\u2208</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>m</mi><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow><mo stretchy=\"false\">]</mo></mrow></mrow></mrow></munder><mrow><mrow><msub><mi>S</mi><mrow><mi>i</mi><mo>,</mo><mi>j</mi></mrow></msub><mo>\u22c5</mo><mtext>cost</mtext></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>\u2264</mo><mi>B</mi></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n\nThis describes the basic ILP which will be extended in\nthe proofs of the following lemmas.\n\n\\begin{lemma}\\label{lem:m:kBorda}\n  Parameterized by the number $m$ of candidates,\n  {$k$-Borda\\xspace} {\\textsc{Shift Bribery}\\xspace} is in FPT.\n\\end{lemma}\n\n\\begin{proof}\n  To make~$p$ a member of the winning committee for {$k$-Borda\\xspace}\n  we have to ensure that only the other members of the winner committee\n  may have a larger Borda score than~$p$.\n\n  Hence, for each $c \\notin W$, we add the following constraint to the basic ILP,\n  ensuring that, in the bribed election, $p$~has at least as much Borda score\n  (based on the $N_{i}$ variables) as all candidates\n  that are not in the winning committee:\n \n", "itemtype": "equation", "pos": 30698, "prevtext": "\n  where $\\textrm{cost}(i,j)$ is the budget needed to transform the\n  $i$th preference order to the $j$th preference order (and, for\n  formal correctness, equals $B+1$ if it is not possible at all\n  by shifting only~$p$).\n\n  For each $i \\in [m!]$ we create an integer variable $N_{i}$ which represents\n  the number of voters which vote as the $i$th preference order in the\n  bribed election.  Based on the $S_{i,j}$ variables, we make sure\n  that the $N_{i}$~variables are correct, by adding, for each $i \\in\n  [m!]$, the following constraint:\n \n", "index": 5, "text": "\\[\n    N_{i} = \\sum_{j \\in [m!]} S_{j,i}. \n  \\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"N_{i}=\\sum_{j\\in[m!]}S_{j,i}.\" display=\"block\"><mrow><mrow><msub><mi>N</mi><mi>i</mi></msub><mo>=</mo><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>j</mi><mo>\u2208</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>m</mi><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow><mo stretchy=\"false\">]</mo></mrow></mrow></munder><msub><mi>S</mi><mrow><mi>j</mi><mo>,</mo><mi>i</mi></mrow></msub></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n  where $\\beta_i(c)$ is the Borda score of candidate~$c$ in\n  the $i$th preference order.\n\n  This finishes the description of the extended ILP.\n\n\\end{proof}\n\n\n\\begin{lemma}\\label{lem:m:CCs}\n  Parameterized by the number~$m$ of candidates, both {Approval-CC\\xspace}\n  {\\textsc{Shift Bribery}\\xspace} and {Borda-CC\\xspace} {\\textsc{Shift Bribery}\\xspace} are in ${\\ensuremath{\\mathrm{FPT}}}$.\n\\end{lemma}\n\n\n\\begin{proof}\n  To make~$p$ a member of the winning committee~$W$ for {Approval-CC\\xspace} (respectively, {Borda-CC\\xspace})\n  we have to ensure that no other committee has a larger Approval score (respectively, Borda score)\n  than our guessed committee~$W$.\n\n  Hence, for each other committee $W'$, we add the following constraint to the basic ILP,\n  ensuring that, in the bribed election, the score of~$W$ (based on the $N_{i}$~variables)\n  is at least as high as the score of $W'$:\n \n", "itemtype": "equation", "pos": 31455, "prevtext": "\n\nThis describes the basic ILP which will be extended in\nthe proofs of the following lemmas.\n\n\\begin{lemma}\\label{lem:m:kBorda}\n  Parameterized by the number $m$ of candidates,\n  {$k$-Borda\\xspace} {\\textsc{Shift Bribery}\\xspace} is in FPT.\n\\end{lemma}\n\n\\begin{proof}\n  To make~$p$ a member of the winning committee for {$k$-Borda\\xspace}\n  we have to ensure that only the other members of the winner committee\n  may have a larger Borda score than~$p$.\n\n  Hence, for each $c \\notin W$, we add the following constraint to the basic ILP,\n  ensuring that, in the bribed election, $p$~has at least as much Borda score\n  (based on the $N_{i}$ variables) as all candidates\n  that are not in the winning committee:\n \n", "index": 7, "text": "\\[\n  \\sum_{i \\in [m!]} N_{i} \\cdot \\beta_i(p) \\geq \\sum_{i \\in\n    [m!]} N_{i} \\cdot \\beta_i(c),\n  \\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex4.m1\" class=\"ltx_Math\" alttext=\"\\sum_{i\\in[m!]}N_{i}\\cdot\\beta_{i}(p)\\geq\\sum_{i\\in[m!]}N_{i}\\cdot\\beta_{i}(c),\" display=\"block\"><mrow><mrow><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>\u2208</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>m</mi><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow><mo stretchy=\"false\">]</mo></mrow></mrow></munder><mrow><mrow><msub><mi>N</mi><mi>i</mi></msub><mo>\u22c5</mo><msub><mi>\u03b2</mi><mi>i</mi></msub></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>\u2265</mo><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>\u2208</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>m</mi><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow><mo stretchy=\"false\">]</mo></mrow></mrow></munder><mrow><mrow><msub><mi>N</mi><mi>i</mi></msub><mo>\u22c5</mo><msub><mi>\u03b2</mi><mi>i</mi></msub></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n  where $\\phi(i,X)$ is the score given by a voter voting as the $i$th\n  preference order to the committee $X$.\n  Note that this can be computed in polynomial-time by selecting the\n  right representative and taking the underlying scoring rule, that is,\n  either Approval or Borda, into account.\n\n  This finishes the description of the extended ILP.\n\n\\end{proof}\n\n\n\n\\begin{lemma}\\label{lem:m:Greedys}\n  Parameterized by the number~$m$ of candidates, {\\textsc{Shift Bribery}\\xspace} is in\n  ${\\ensuremath{\\mathrm{FPT}}}$ for {Greedy-Approval-CC\\xspace}, {PTAS-CC\\xspace}, and {Greedy-Borda-CC\\xspace}.\n\\end{lemma}\n\n\n\\begin{proof}\n  Since {PTAS-CC\\xspace} is a special case of {Greedy-Approval-CC\\xspace} it suffices to describe the extension of the ILP\n  for {Greedy-Approval-CC\\xspace} and {Greedy-Borda-CC\\xspace}.\n \n  To make~$p$ a member of the winning committee~$W$ for {Greedy-Approval-CC\\xspace} (respectively, {Greedy-Borda-CC\\xspace})\n  we have to ensure that the candidate~$w(j)$ (which joined to the committee\n  in the $j$th round) maximizes the Approval score (respectively, Borda score)\n  among all possible extensions. \n\n  Hence, for each round~$j$ and each $c \\in C \\setminus W^j$\n  we add the following constraint to the basic ILP,\n  ensuring that, in the bribed election, the score of~$W^j$\n  is at least as large as the score of $W^{j-1} \\cup \\{c\\}$:\n \n", "itemtype": "equation", "pos": 32449, "prevtext": "\n  where $\\beta_i(c)$ is the Borda score of candidate~$c$ in\n  the $i$th preference order.\n\n  This finishes the description of the extended ILP.\n\n\\end{proof}\n\n\n\\begin{lemma}\\label{lem:m:CCs}\n  Parameterized by the number~$m$ of candidates, both {Approval-CC\\xspace}\n  {\\textsc{Shift Bribery}\\xspace} and {Borda-CC\\xspace} {\\textsc{Shift Bribery}\\xspace} are in ${\\ensuremath{\\mathrm{FPT}}}$.\n\\end{lemma}\n\n\n\\begin{proof}\n  To make~$p$ a member of the winning committee~$W$ for {Approval-CC\\xspace} (respectively, {Borda-CC\\xspace})\n  we have to ensure that no other committee has a larger Approval score (respectively, Borda score)\n  than our guessed committee~$W$.\n\n  Hence, for each other committee $W'$, we add the following constraint to the basic ILP,\n  ensuring that, in the bribed election, the score of~$W$ (based on the $N_{i}$~variables)\n  is at least as high as the score of $W'$:\n \n", "index": 9, "text": "\\[\n    \\sum_{i \\in [m!]} \\phi(i,W) \\cdot N_i \\geq \\sum_{i \\in [m!]} \\phi(i,W') \\cdot N_i,\n  \\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m1\" class=\"ltx_Math\" alttext=\"\\sum_{i\\in[m!]}\\phi(i,W)\\cdot N_{i}\\geq\\sum_{i\\in[m!]}\\phi(i,W^{\\prime})\\cdot N%&#10;_{i},\" display=\"block\"><mrow><mrow><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>\u2208</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>m</mi><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow><mo stretchy=\"false\">]</mo></mrow></mrow></munder><mrow><mrow><mi>\u03d5</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>,</mo><mi>W</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><msub><mi>N</mi><mi>i</mi></msub></mrow></mrow><mo>\u2265</mo><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>\u2208</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>m</mi><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow><mo stretchy=\"false\">]</mo></mrow></mrow></munder><mrow><mrow><mi>\u03d5</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>,</mo><msup><mi>W</mi><mo>\u2032</mo></msup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><msub><mi>N</mi><mi>i</mi></msub></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n  where $\\phi(i,X)$ is the score given by a voter voting as the $i$th\n  preference order to the committee $X$.\n\n  This finishes the description of the extended ILP.\n\n\\end{proof}\n\n\nAs second general result, we note that for the parameterization by the number of voters\nwe can provide a strong, general ${\\ensuremath{\\mathrm{FPT}}}$ approximation scheme for\ncandidate-monotone rules. \\emph{Candidate monotonicity}, a notion\nintroduced by Elkind et al.~\\cite{EFSS14}, requires that if a\nmember of a winning committee is shifted forward in some vote, then\nthis candidate still belongs to some (possibly different) winning\ncommittee.\n\n\n\\begin{theorem}\\label{thm:fpt-as}\n  Consider parameterization by the number of voters.\n  Let ${\\ensuremath{{{\\mathcal{R}}}}}$ be a candidate-monotone multiwinner rule with an\n  ${\\ensuremath{\\mathrm{FPT}}}$ algorithm for \\textsc{Winner Determination}.\n  Then, for every positive constant number~$\\varepsilon$\n  there is an ${\\ensuremath{\\mathrm{FPT}}}$ algorithm that, given an instance~$I$\n  of~${\\ensuremath{{{\\mathcal{R}}}}}$-\\textsc{Shift Bribery} (for arbitrary price functions),\n  outputs a successful shift action $\\vec{s}$ \n  with cost at most $(1+\\varepsilon){\\ensuremath{{{\\mathrm{OPT}}}}}(I)$.\n\\end{theorem}\n\n\n\\begin{proof}\n  Bredereck et al.~\\cite{BCFNN14} show an ${\\ensuremath{\\mathrm{FPT}}}$ algorithm\n  (parameterized by the number of voters) that, given an instance~$I$\n  of \\textsc{Shift Bribery} and a positive value $\\varepsilon$, for\n  each possible shift action $\\vec{s} = (s_1, \\ldots, s_n)$ tries a\n  shift action $\\vec{s}' = (s'_1, \\ldots, s'_n)$ such that for each $i\n  \\in [n]$ we have $s'_i \\geq s_i$, and the cost of $\\vec{s}'$ is at\n  most $(1+\\varepsilon)$ greater than that of $\\vec{s}$.\n  \n  This algorithm also works for multiwinner rules.\n\\end{proof}\n\n\nAmong the rules considered in this work, only {Greedy-Borda-CC\\xspace}, {Greedy-Approval-CC\\xspace}, and {PTAS-CC\\xspace}\nare not candidate-monotone (see the work of Elkind et\nal.~\\cite{EFSS14} for the argument regarding Greedy-Borda-CC).\nThus, the above result applies to all the remaining rules.\n\nFor the case of all-or-nothing prices, we can strengthen the above\nresult to an exact ${\\ensuremath{\\mathrm{FPT}}}$ algorithm.\n\n\n\\begin{proposition}\\label{prop:all-or-nothing-n}\n  Consider parameterization by the number of voters.  Let ${\\ensuremath{{{\\mathcal{R}}}}}$ be a \\linebreak\n  candidate-monotone multiwinner rule with an ${\\ensuremath{\\mathrm{FPT}}}$ algorithm for\n  \\textsc{Winner Determination}.\n  Then, there is an ${\\ensuremath{\\mathrm{FPT}}}$ algorithm for\n  ${\\ensuremath{{{\\mathcal{R}}}}}$-\\textsc{Shift Bribery} with all-or-nothing price functions.\n\\end{proposition}\n\n\n\\begin{proof}\n   Since ${\\ensuremath{{{\\mathcal{R}}}}}$ is candidate-monotone and we have all-or-nothing\n   prices, for every vote where we shift the candidate~$p$\n   forward, we can shift~$p$ to the top. \n   In effect, it suffices to try all subsets of voters: For each subset\n   check whether shifting~$p$ forward in each vote from the subset\n   ensures the victory of~$p$ without exceeding the budget.\n\\end{proof}\n\n\n Using a very similar approach, we can solve \\textsc{Shift Bribery} for\n those of our rules which are based on approval scores, even for\n arbitrary price functions (even the round-based ones). The trick is\n that, with approval scores, for each voter we either shift our\n candidate right to the first approved position or we do not shift him\n or her at all. Thus, again, trying all subsets of voters suffices.\n\n\n\\begin{proposition}\\label{prop:greedy-approval-cc-n}\n  There is an ${\\ensuremath{\\mathrm{FPT}}}$ algorithm for \\textsc{Shift Bribery} under\n  Approval-CC, Greedy-Approval-CC, and PTAS-CC, for the\n  parameterization by the number of voters and for arbitrary price\n  functions.\n\\end{proposition}\n\n\nFinally, using smart brute-force, we provide ${\\ensuremath{\\mathrm{XP}}}$\nalgorithms for \\textsc{Shift Bribery} parameterized either by the\nnumber of voters or the number of unit shifts (for rules that can be\nefficiently computed in the given setting).\n\n\n\n\n\n\n\n\n\n\n\\begin{proposition}\\label{prop:xpn}\n  {Consider parameterization by the number of voters.   Then, for every multiwinner rule with an ${\\ensuremath{\\mathrm{XP}}}$ algorithm for   \\textsc{Winner Determination}, there is an ${\\ensuremath{\\mathrm{XP}}}$ algorithm for   \\textsc{Shift Bribery} and arbitrary price functions.}\n\\end{proposition}\n\n\n\\begin{proof}\n  For each voter, we guess the amount which the preferred candidate\n  is shifted by.  Since the maximum amount is $m$, and we have $n$\n  voters, we have $O(m^n)$ possibilities to check.  For each\n  possibility we check if the preferred candidate is a member of a\n  winning committee in ${\\ensuremath{\\mathrm{XP}}}$ time.\n\\end{proof}\n\n\n\n\n\\begin{proposition}\\label{prop:xps}\n  {Consider parameterization by the number of unit shifts.   Then, for every multiwinner rule with a polynomial-time algorithm   for \\textsc{Winner Determination}, there is an ${\\ensuremath{\\mathrm{XP}}}$ algorithm for   \\textsc{Shift Bribery} and arbitrary price functions.}\n\\end{proposition}\n\n\n\\begin{proof}\n  The idea of the proof is similar to that behind\n  \\autoref{prop:xpn}.  Let $s$ be the number of unit shifts that we\n  can perform and let $n$ be the number of voters.  We can view a\n  solution as a vector of length at most $s$, where an entry in the\n  $i$th position specifies the number of voters in whose\n  preference order we perform the $i$th unit shifts. We try all\n  $O(n^s)$ such vectors and for each we test if the shift action it\n  defines is within budget and ensures that the preferred candidate is in\n  the winning committee.\n\\end{proof}\n\n\n\\section{SNTV, Bloc, and $k$-Borda}\n\\label{sec:topk-results}\n\nWe now move on to results specific \nto\n\nthe voting rules SNTV, Bloc, and $k$-Borda. These rules \n\npick $k$\ncandidates with the highest $1$-Approval, $k$-Approval, and Borda\nscores, respectively, and, so, one might suspect that the efficient\nalgorithms for corresponding single-winner rules would translate to\nthe multiwinner setting. While this is the case for SNTV and Bloc, for\n$k$-Borda the situation is more intricate. \n\nAs a side effect of our research,\nwe resolve the parameterized complexity of Borda-\\textsc{Shift\n  Bribery},\n\nleft open by Bredereck et\nal.~\\cite{BCFNN14}.\n\n\n\nWe first show that {\\textsc{Shift Bribery}\\xspace} is polynomial-time solvable for {SNTV\\xspace}\nand {Bloc\\xspace}.\n\n\nWe use the same algorithm for both SNTV and Bloc. Briefly put, the\nidea is to guess the final score of the preferred candidate and\nto compute the set of candidates that have higher scores. Then, it is easy\nto compute the cheapest way to ensure that all but $k-1$ of them,\nwhere $k$ is the committee size,  have smaller score than the\nguessed score of~$p$, while ensuring that $p$ indeed obtains this\nguessed score.\n\n\n\n\n\\begin{theorem}\\label{thm:sntvbloc}\n  {SNTV-{\\textsc{Shift Bribery}\\xspace} and Bloc-{\\textsc{Shift Bribery}\\xspace}   are both in ${\\ensuremath{\\mathrm{P}}}$ (for arbitrary price functions).  }\n\\end{theorem}\n\n\n\\begin{proof}\n\n  We use the same algorithm for both SNTV and Bloc. Consider an input\n  instance $I$ with an election $E = (C,V)$, where $p$ is the\n  preferred candidate, and where the committee size is $k$. Our\n  algorithm proceeds as follows.\n  \n  As first step, we guess the final score that $p$ would have after a\n  successful bribery, denoted by $\\mathrm{endscore}(p)$.\n  Since there are only polynomially many possibilities, we can simply\n  branch into all possible values of $\\mathrm{endscore}(p)$ to realize the first step.\n  Then, we consider the set  $C' \\subseteq C$ of those candidates whose\n  score is greater than $\\mathrm{endscore}(p)$.\n  It is clear that to ensure that $p$ is in\n  some winning committee, we need to decrease the score of all but\n  $k-1$ candidates from $C'$.\n  If $C'$ contains at most $k-1$\n  candidates, we do not need to decrease the scores of any\n  candidates.\n\n  To this end, we sort the candidates in $C'$ by the cost of\n  decreasing their score (by appropriate shifts of $p$) to be equal to\n  $\\mathrm{endscore}(p)$, and pick all of the candidates in $C'$,\n  besides the $k - 1$ most expensive ones. Since for each bribed vote one can\n  decrease the score of exactly one candidate, this defines a shift\n  action. If this shift action does not guarantee that $p$ has score\n  $\\mathrm{endscore}(p)$, then we complement it by shifting $p$ to the\n  first approved position in sufficiently many cheapest votes, to\n  ensure that $p$ has score $\\mathrm{endscore}(p)$.\n\n  If the thus computed shift action is within budget, we\n  accept. Otherwise, we try another guess of\n  $\\mathrm{endscore}(p)$. If we try all possibilities without accepting,\n  then we reject.\n\\end{proof}\n\n\nThe situation for {$k$-Borda\\xspace} is different.  \n\n\n\n\n\n{\\textsc{Shift Bribery}\\xspace} is ${\\ensuremath{\\mathrm{NP}}}$-hard for Borda due to Elkind et\nal.~\\cite{EFS09}, so the same holds for {$k$-Borda\\xspace}.\nWe show that Borda-\\textsc{Shift Bribery} is ${\\ensuremath{\\mathrm{W[1]}}}$-hard for parameterization\nby the number of voters, resolving a previously open case \\cite{BCFNN14}.\nThis result immediately implies the same hardness for all our Borda-based rules.\n\n\n\\begin{theorem}\\label{borda_wrt_n}\n  Parameterized by the number of voters, {Borda\\xspace} {\\textsc{Shift Bribery}\\xspace} is ${\\ensuremath{\\mathrm{W}}}[1]$-hard\n  (even for unit price functions).\n\\end{theorem}\n\n\n\\begin{proof}\n  We give a parameterized reduction from \n  the {\\textsc{Multicolored}\\ \\textsc{Independent Set}\\xspace} problem.  Let~$(G,h)$ be our\n  input instance.  Without loss of generality, we assume that the\n  number of vertices of each color is the same and that there are no\n  edges between vertices of the same color.\n\n  We write $V(G)$ to denote the set of $G$'s vertices, and $E(G)$ to\n  denote the set of $G$'s edges. Further, for every color $i \\in [h]$,\n  we write $V^{(i)} = \\{v_1^{(i)}, \\ldots, v_q^{(i)}\\}$ to denote the\n  set of vertices of color~$i$. For each vertex $v$, we write $E(v)$\n  to denote the set of edges incident to~$v$.  For each vertex $v$, we\n  write $\\delta(v)$ to denote its degree, i.e., $\\delta(v) = |E(v)|$\n  and we let $\\Delta = \\max_{u \\in V(G)}\\delta(u)$ be the highest\n  degree of a vertex~$G$. \n\n  We form an instance of Borda-\\textsc{Shift-Bribery} as follows.  We\n  let the candidate set be \n", "itemtype": "equation", "pos": 33912, "prevtext": "\n  where $\\phi(i,X)$ is the score given by a voter voting as the $i$th\n  preference order to the committee $X$.\n  Note that this can be computed in polynomial-time by selecting the\n  right representative and taking the underlying scoring rule, that is,\n  either Approval or Borda, into account.\n\n  This finishes the description of the extended ILP.\n\n\\end{proof}\n\n\n\n\\begin{lemma}\\label{lem:m:Greedys}\n  Parameterized by the number~$m$ of candidates, {\\textsc{Shift Bribery}\\xspace} is in\n  ${\\ensuremath{\\mathrm{FPT}}}$ for {Greedy-Approval-CC\\xspace}, {PTAS-CC\\xspace}, and {Greedy-Borda-CC\\xspace}.\n\\end{lemma}\n\n\n\\begin{proof}\n  Since {PTAS-CC\\xspace} is a special case of {Greedy-Approval-CC\\xspace} it suffices to describe the extension of the ILP\n  for {Greedy-Approval-CC\\xspace} and {Greedy-Borda-CC\\xspace}.\n \n  To make~$p$ a member of the winning committee~$W$ for {Greedy-Approval-CC\\xspace} (respectively, {Greedy-Borda-CC\\xspace})\n  we have to ensure that the candidate~$w(j)$ (which joined to the committee\n  in the $j$th round) maximizes the Approval score (respectively, Borda score)\n  among all possible extensions. \n\n  Hence, for each round~$j$ and each $c \\in C \\setminus W^j$\n  we add the following constraint to the basic ILP,\n  ensuring that, in the bribed election, the score of~$W^j$\n  is at least as large as the score of $W^{j-1} \\cup \\{c\\}$:\n \n", "index": 11, "text": "\\[\n    \\sum_{i \\in [m!]} \\phi(i,W^j) \\cdot N_i \\geq \\sum_{i \\in [m!]} \\phi(i,W^{j-1} \\cup \\{c\\}) \\cdot N_i,\n  \\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m1\" class=\"ltx_Math\" alttext=\"\\sum_{i\\in[m!]}\\phi(i,W^{j})\\cdot N_{i}\\geq\\sum_{i\\in[m!]}\\phi(i,W^{j-1}\\cup\\{%&#10;c\\})\\cdot N_{i},\" display=\"block\"><mrow><mrow><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>\u2208</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>m</mi><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow><mo stretchy=\"false\">]</mo></mrow></mrow></munder><mrow><mrow><mi>\u03d5</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>,</mo><msup><mi>W</mi><mi>j</mi></msup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><msub><mi>N</mi><mi>i</mi></msub></mrow></mrow><mo>\u2265</mo><mrow><munder><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211</mo><mrow><mi>i</mi><mo>\u2208</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>m</mi><mo lspace=\"0pt\" rspace=\"3.5pt\">!</mo></mrow><mo stretchy=\"false\">]</mo></mrow></mrow></munder><mrow><mrow><mi>\u03d5</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>,</mo><mrow><msup><mi>W</mi><mrow><mi>j</mi><mo>-</mo><mn>1</mn></mrow></msup><mo>\u222a</mo><mrow><mo stretchy=\"false\">{</mo><mi>c</mi><mo stretchy=\"false\">}</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u22c5</mo><msub><mi>N</mi><mi>i</mi></msub></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": " where $F(G)$, $D'$, and $D''$ are sets of special\n  dummy candidates.  For each vertex $v$, we let $F(v)$ be a set of\n  $\\Delta - \\delta(v)$ dummy candidates, and we let\n  $F(G) = \\bigcup_{v \\in V(G)}F(v)$\n  and $F(V,{-i}) = \\bigcup_{v \\in V^{(i')},i'\\neq i}F(v)$.\n  We will specify $D'$ and $D''$ later.\n\n  For each vertex $v$, we define the partial preference order $S(v)$ to\n  be $v {\\succ} E(v) {\\succ} F(v)$.\n  For each color $i$, we define $R(i)$ to be a partial preference order\n  that ranks first all members of $D'$, then all\n  vertex candidates of colors other than $i$, then all \n  edge candidates corresponding to edges that are not incident\n  to a vertex of color~$i$, then all\n  dummy vertices from $F(V,-i)$,\n  and finally all candidates from~$D''$.\n\n  We use unit price functions and we set the budget to be $B = h(q +\n  (q-1)\\Delta)$. We set~$D'$ and~$D''$ to consist of $2B$~dummy candidates\n  each.\n\n We create the following voters:\n  \\begin{enumerate}\n  \\item\n  For each color $i \\in [h]$, we introduce four voters:\n  voters $x_i$ and $x'_i$ with the following preference orders:\n    \n", "itemtype": "equation", "pos": -1, "prevtext": "\n  where $\\phi(i,X)$ is the score given by a voter voting as the $i$th\n  preference order to the committee $X$.\n\n  This finishes the description of the extended ILP.\n\n\\end{proof}\n\n\nAs second general result, we note that for the parameterization by the number of voters\nwe can provide a strong, general ${\\ensuremath{\\mathrm{FPT}}}$ approximation scheme for\ncandidate-monotone rules. \\emph{Candidate monotonicity}, a notion\nintroduced by Elkind et al.~\\cite{EFSS14}, requires that if a\nmember of a winning committee is shifted forward in some vote, then\nthis candidate still belongs to some (possibly different) winning\ncommittee.\n\n\n\\begin{theorem}\\label{thm:fpt-as}\n  Consider parameterization by the number of voters.\n  Let ${\\ensuremath{{{\\mathcal{R}}}}}$ be a candidate-monotone multiwinner rule with an\n  ${\\ensuremath{\\mathrm{FPT}}}$ algorithm for \\textsc{Winner Determination}.\n  Then, for every positive constant number~$\\varepsilon$\n  there is an ${\\ensuremath{\\mathrm{FPT}}}$ algorithm that, given an instance~$I$\n  of~${\\ensuremath{{{\\mathcal{R}}}}}$-\\textsc{Shift Bribery} (for arbitrary price functions),\n  outputs a successful shift action $\\vec{s}$ \n  with cost at most $(1+\\varepsilon){\\ensuremath{{{\\mathrm{OPT}}}}}(I)$.\n\\end{theorem}\n\n\n\\begin{proof}\n  Bredereck et al.~\\cite{BCFNN14} show an ${\\ensuremath{\\mathrm{FPT}}}$ algorithm\n  (parameterized by the number of voters) that, given an instance~$I$\n  of \\textsc{Shift Bribery} and a positive value $\\varepsilon$, for\n  each possible shift action $\\vec{s} = (s_1, \\ldots, s_n)$ tries a\n  shift action $\\vec{s}' = (s'_1, \\ldots, s'_n)$ such that for each $i\n  \\in [n]$ we have $s'_i \\geq s_i$, and the cost of $\\vec{s}'$ is at\n  most $(1+\\varepsilon)$ greater than that of $\\vec{s}$.\n  \n  This algorithm also works for multiwinner rules.\n\\end{proof}\n\n\nAmong the rules considered in this work, only {Greedy-Borda-CC\\xspace}, {Greedy-Approval-CC\\xspace}, and {PTAS-CC\\xspace}\nare not candidate-monotone (see the work of Elkind et\nal.~\\cite{EFSS14} for the argument regarding Greedy-Borda-CC).\nThus, the above result applies to all the remaining rules.\n\nFor the case of all-or-nothing prices, we can strengthen the above\nresult to an exact ${\\ensuremath{\\mathrm{FPT}}}$ algorithm.\n\n\n\\begin{proposition}\\label{prop:all-or-nothing-n}\n  Consider parameterization by the number of voters.  Let ${\\ensuremath{{{\\mathcal{R}}}}}$ be a \\linebreak\n  candidate-monotone multiwinner rule with an ${\\ensuremath{\\mathrm{FPT}}}$ algorithm for\n  \\textsc{Winner Determination}.\n  Then, there is an ${\\ensuremath{\\mathrm{FPT}}}$ algorithm for\n  ${\\ensuremath{{{\\mathcal{R}}}}}$-\\textsc{Shift Bribery} with all-or-nothing price functions.\n\\end{proposition}\n\n\n\\begin{proof}\n   Since ${\\ensuremath{{{\\mathcal{R}}}}}$ is candidate-monotone and we have all-or-nothing\n   prices, for every vote where we shift the candidate~$p$\n   forward, we can shift~$p$ to the top. \n   In effect, it suffices to try all subsets of voters: For each subset\n   check whether shifting~$p$ forward in each vote from the subset\n   ensures the victory of~$p$ without exceeding the budget.\n\\end{proof}\n\n\n Using a very similar approach, we can solve \\textsc{Shift Bribery} for\n those of our rules which are based on approval scores, even for\n arbitrary price functions (even the round-based ones). The trick is\n that, with approval scores, for each voter we either shift our\n candidate right to the first approved position or we do not shift him\n or her at all. Thus, again, trying all subsets of voters suffices.\n\n\n\\begin{proposition}\\label{prop:greedy-approval-cc-n}\n  There is an ${\\ensuremath{\\mathrm{FPT}}}$ algorithm for \\textsc{Shift Bribery} under\n  Approval-CC, Greedy-Approval-CC, and PTAS-CC, for the\n  parameterization by the number of voters and for arbitrary price\n  functions.\n\\end{proposition}\n\n\nFinally, using smart brute-force, we provide ${\\ensuremath{\\mathrm{XP}}}$\nalgorithms for \\textsc{Shift Bribery} parameterized either by the\nnumber of voters or the number of unit shifts (for rules that can be\nefficiently computed in the given setting).\n\n\n\n\n\n\n\n\n\n\n\\begin{proposition}\\label{prop:xpn}\n  {Consider parameterization by the number of voters.   Then, for every multiwinner rule with an ${\\ensuremath{\\mathrm{XP}}}$ algorithm for   \\textsc{Winner Determination}, there is an ${\\ensuremath{\\mathrm{XP}}}$ algorithm for   \\textsc{Shift Bribery} and arbitrary price functions.}\n\\end{proposition}\n\n\n\\begin{proof}\n  For each voter, we guess the amount which the preferred candidate\n  is shifted by.  Since the maximum amount is $m$, and we have $n$\n  voters, we have $O(m^n)$ possibilities to check.  For each\n  possibility we check if the preferred candidate is a member of a\n  winning committee in ${\\ensuremath{\\mathrm{XP}}}$ time.\n\\end{proof}\n\n\n\n\n\\begin{proposition}\\label{prop:xps}\n  {Consider parameterization by the number of unit shifts.   Then, for every multiwinner rule with a polynomial-time algorithm   for \\textsc{Winner Determination}, there is an ${\\ensuremath{\\mathrm{XP}}}$ algorithm for   \\textsc{Shift Bribery} and arbitrary price functions.}\n\\end{proposition}\n\n\n\\begin{proof}\n  The idea of the proof is similar to that behind\n  \\autoref{prop:xpn}.  Let $s$ be the number of unit shifts that we\n  can perform and let $n$ be the number of voters.  We can view a\n  solution as a vector of length at most $s$, where an entry in the\n  $i$th position specifies the number of voters in whose\n  preference order we perform the $i$th unit shifts. We try all\n  $O(n^s)$ such vectors and for each we test if the shift action it\n  defines is within budget and ensures that the preferred candidate is in\n  the winning committee.\n\\end{proof}\n\n\n\\section{SNTV, Bloc, and $k$-Borda}\n\\label{sec:topk-results}\n\nWe now move on to results specific \nto\n\nthe voting rules SNTV, Bloc, and $k$-Borda. These rules \n\npick $k$\ncandidates with the highest $1$-Approval, $k$-Approval, and Borda\nscores, respectively, and, so, one might suspect that the efficient\nalgorithms for corresponding single-winner rules would translate to\nthe multiwinner setting. While this is the case for SNTV and Bloc, for\n$k$-Borda the situation is more intricate. \n\nAs a side effect of our research,\nwe resolve the parameterized complexity of Borda-\\textsc{Shift\n  Bribery},\n\nleft open by Bredereck et\nal.~\\cite{BCFNN14}.\n\n\n\nWe first show that {\\textsc{Shift Bribery}\\xspace} is polynomial-time solvable for {SNTV\\xspace}\nand {Bloc\\xspace}.\n\n\nWe use the same algorithm for both SNTV and Bloc. Briefly put, the\nidea is to guess the final score of the preferred candidate and\nto compute the set of candidates that have higher scores. Then, it is easy\nto compute the cheapest way to ensure that all but $k-1$ of them,\nwhere $k$ is the committee size,  have smaller score than the\nguessed score of~$p$, while ensuring that $p$ indeed obtains this\nguessed score.\n\n\n\n\n\\begin{theorem}\\label{thm:sntvbloc}\n  {SNTV-{\\textsc{Shift Bribery}\\xspace} and Bloc-{\\textsc{Shift Bribery}\\xspace}   are both in ${\\ensuremath{\\mathrm{P}}}$ (for arbitrary price functions).  }\n\\end{theorem}\n\n\n\\begin{proof}\n\n  We use the same algorithm for both SNTV and Bloc. Consider an input\n  instance $I$ with an election $E = (C,V)$, where $p$ is the\n  preferred candidate, and where the committee size is $k$. Our\n  algorithm proceeds as follows.\n  \n  As first step, we guess the final score that $p$ would have after a\n  successful bribery, denoted by $\\mathrm{endscore}(p)$.\n  Since there are only polynomially many possibilities, we can simply\n  branch into all possible values of $\\mathrm{endscore}(p)$ to realize the first step.\n  Then, we consider the set  $C' \\subseteq C$ of those candidates whose\n  score is greater than $\\mathrm{endscore}(p)$.\n  It is clear that to ensure that $p$ is in\n  some winning committee, we need to decrease the score of all but\n  $k-1$ candidates from $C'$.\n  If $C'$ contains at most $k-1$\n  candidates, we do not need to decrease the scores of any\n  candidates.\n\n  To this end, we sort the candidates in $C'$ by the cost of\n  decreasing their score (by appropriate shifts of $p$) to be equal to\n  $\\mathrm{endscore}(p)$, and pick all of the candidates in $C'$,\n  besides the $k - 1$ most expensive ones. Since for each bribed vote one can\n  decrease the score of exactly one candidate, this defines a shift\n  action. If this shift action does not guarantee that $p$ has score\n  $\\mathrm{endscore}(p)$, then we complement it by shifting $p$ to the\n  first approved position in sufficiently many cheapest votes, to\n  ensure that $p$ has score $\\mathrm{endscore}(p)$.\n\n  If the thus computed shift action is within budget, we\n  accept. Otherwise, we try another guess of\n  $\\mathrm{endscore}(p)$. If we try all possibilities without accepting,\n  then we reject.\n\\end{proof}\n\n\nThe situation for {$k$-Borda\\xspace} is different.  \n\n\n\n\n\n{\\textsc{Shift Bribery}\\xspace} is ${\\ensuremath{\\mathrm{NP}}}$-hard for Borda due to Elkind et\nal.~\\cite{EFS09}, so the same holds for {$k$-Borda\\xspace}.\nWe show that Borda-\\textsc{Shift Bribery} is ${\\ensuremath{\\mathrm{W[1]}}}$-hard for parameterization\nby the number of voters, resolving a previously open case \\cite{BCFNN14}.\nThis result immediately implies the same hardness for all our Borda-based rules.\n\n\n\\begin{theorem}\\label{borda_wrt_n}\n  Parameterized by the number of voters, {Borda\\xspace} {\\textsc{Shift Bribery}\\xspace} is ${\\ensuremath{\\mathrm{W}}}[1]$-hard\n  (even for unit price functions).\n\\end{theorem}\n\n\n\\begin{proof}\n  We give a parameterized reduction from \n  the {\\textsc{Multicolored}\\ \\textsc{Independent Set}\\xspace} problem.  Let~$(G,h)$ be our\n  input instance.  Without loss of generality, we assume that the\n  number of vertices of each color is the same and that there are no\n  edges between vertices of the same color.\n\n  We write $V(G)$ to denote the set of $G$'s vertices, and $E(G)$ to\n  denote the set of $G$'s edges. Further, for every color $i \\in [h]$,\n  we write $V^{(i)} = \\{v_1^{(i)}, \\ldots, v_q^{(i)}\\}$ to denote the\n  set of vertices of color~$i$. For each vertex $v$, we write $E(v)$\n  to denote the set of edges incident to~$v$.  For each vertex $v$, we\n  write $\\delta(v)$ to denote its degree, i.e., $\\delta(v) = |E(v)|$\n  and we let $\\Delta = \\max_{u \\in V(G)}\\delta(u)$ be the highest\n  degree of a vertex~$G$. \n\n  We form an instance of Borda-\\textsc{Shift-Bribery} as follows.  We\n  let the candidate set be \n", "index": 13, "text": "$$C = \\{p\\} \\cup V(G) \\cup E(G) \\cup F(G)  \n  \n  \\cup D' \\cup D''\\text{,}$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex7.m1\" class=\"ltx_Math\" alttext=\"C=\\{p\\}\\cup V(G)\\cup E(G)\\cup F(G)\\par&#10;\\cup D^{\\prime}\\cup D^{\\prime\\prime}%&#10;\\text{,}\" display=\"block\"><mrow><mi>C</mi><mo>=</mo><mrow><mrow><mo stretchy=\"false\">{</mo><mi>p</mi><mo stretchy=\"false\">}</mo></mrow><mo>\u222a</mo><mrow><mi>V</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u222a</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u222a</mo><mrow><mi>F</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u222a</mo><msup><mi>D</mi><mo>\u2032</mo></msup><mo>\u222a</mo><mrow><msup><mi>D</mi><mi>\u2032\u2032</mi></msup><mo>\u2062</mo><mtext>,</mtext></mrow></mrow></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n    and voters $y_i$ and $y'_i$ whose preference orders are reverses\n    of those of $x_i$ and $x'_i$, respectively, except that candidates\n    from~$D''$ are ranked last in their votes as well.\n\n  \\item\n  We create a voter~$z$ with the preference order\n   \n", "itemtype": "equation", "pos": 45618, "prevtext": " where $F(G)$, $D'$, and $D''$ are sets of special\n  dummy candidates.  For each vertex $v$, we let $F(v)$ be a set of\n  $\\Delta - \\delta(v)$ dummy candidates, and we let\n  $F(G) = \\bigcup_{v \\in V(G)}F(v)$\n  and $F(V,{-i}) = \\bigcup_{v \\in V^{(i')},i'\\neq i}F(v)$.\n  We will specify $D'$ and $D''$ later.\n\n  For each vertex $v$, we define the partial preference order $S(v)$ to\n  be $v {\\succ} E(v) {\\succ} F(v)$.\n  For each color $i$, we define $R(i)$ to be a partial preference order\n  that ranks first all members of $D'$, then all\n  vertex candidates of colors other than $i$, then all \n  edge candidates corresponding to edges that are not incident\n  to a vertex of color~$i$, then all\n  dummy vertices from $F(V,-i)$,\n  and finally all candidates from~$D''$.\n\n  We use unit price functions and we set the budget to be $B = h(q +\n  (q-1)\\Delta)$. We set~$D'$ and~$D''$ to consist of $2B$~dummy candidates\n  each.\n\n We create the following voters:\n  \\begin{enumerate}\n  \\item\n  For each color $i \\in [h]$, we introduce four voters:\n  voters $x_i$ and $x'_i$ with the following preference orders:\n    \n", "index": 15, "text": "\\begin{align*}\n      x_i \\colon & S(v^{(i)}_1) {\\succ} S(v^{(i)}_2) {\\succ} \\cdots {\\succ} S(v^{(i)}_q) {\\succ} p {\\succ} R(i),  \\\\\n      x_i' \\colon & {\\overleftarrow{{S(v^{(i)}_q)}}} {\\succ} {\\overleftarrow{{S(v^{(i)}_{q-1})}}}\n      {\\succ} \\cdots {\\succ} {\\overleftarrow{{S(v^{(i)}_1)}}} {\\succ} p {\\succ} R(i),\n    \\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex8.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle x_{i}\\colon\" display=\"inline\"><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>:</mo><mi/></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex8.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle S(v^{(i)}_{1}){\\succ}S(v^{(i)}_{2}){\\succ}\\cdots{\\succ}S(v^{(i)}%&#10;_{q}){\\succ}p{\\succ}R(i),\" display=\"inline\"><mrow><mrow><mrow><mi>S</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>v</mi><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><mi>S</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>v</mi><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mi mathvariant=\"normal\">\u22ef</mi><mo>\u227b</mo><mrow><mi>S</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>v</mi><mi>q</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mi>p</mi><mo>\u227b</mo><mrow><mi>R</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex9.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle x_{i}^{\\prime}\\colon\" display=\"inline\"><mrow><msubsup><mi>x</mi><mi>i</mi><mo>\u2032</mo></msubsup><mo>:</mo><mi/></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex9.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle{\\overleftarrow{{S(v^{(i)}_{q})}}}{\\succ}{\\overleftarrow{{S(v^{(i%&#10;)}_{q-1})}}}{\\succ}\\cdots{\\succ}{\\overleftarrow{{S(v^{(i)}_{1})}}}{\\succ}p{%&#10;\\succ}R(i),\" display=\"inline\"><mrow><mrow><mover accent=\"true\"><mrow><mi>S</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>v</mi><mi>q</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2190</mo></mover><mo>\u227b</mo><mover accent=\"true\"><mrow><mi>S</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>v</mi><mrow><mi>q</mi><mo>-</mo><mn>1</mn></mrow><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2190</mo></mover><mo>\u227b</mo><mi mathvariant=\"normal\">\u22ef</mi><mo>\u227b</mo><mover accent=\"true\"><mrow><mi>S</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>v</mi><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2190</mo></mover><mo>\u227b</mo><mi>p</mi><mo>\u227b</mo><mrow><mi>R</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n    and a voter $z'$ with the preference order that is obtained from that of~$z$\n    by first reversing it, and then shifting each member of $V(G) \\cup\n    E(G)$ by one position forward, and shifting $p$ by $B$\n    positions back.\n  \\end{enumerate}\n\n  Let $L$ be the score of $p$ prior to executing any shift\n  actions. The scores of the candidates in our election are as\n  follows: each candidate in $V(G) \\cup E(G)$ has score $L + B + 1$,\n  and each candidate in $F(G) \\cup D' \\cup D''$ has score at most $L+B$.\n\n  We show that it is possible to ensure the victory of $p$ in our\n  election by a bribery of cost at most~$B$ if and only if there is a\n  multicolored independent set for $G$ of size $h$.\n\n  For the ``if'' case, we show that if $G$ has a multicolored independent set, then\n  there is a successful shift action of cost $B$ in our election.  Let\n  us fix a multicolored independent set for $G$ and, for each color $i\n  \\in [h]$, let $v^{(i)}_{s_i}$ be the vertex of color $i$ from this\n  set. For each pair of voters $x_i, x'_i$, we shift $p$ so that in\n  $x_i$ he or she ends up right in front of $v^{(i)}_{s_i+1}$ (or $p$\n  does not move if $s_i = q$), and in $x'_i$ he or she ends up right in\n  front of $v^{(i)}_{s_i}$. This way, $p$ passes every vertex candidate\n  from $V^{(i)}$ and every edge candidate from $\\left(\\bigcup_{t \\in\n      [q]}E(v^{(i)}_t) \\right) \\setminus E(v^{(i)}_{s_i})$.  This\n  shift action costs $B/h$ for every pair of voters $x_i,x'_i$, so, in\n  total, costs exactly $B$. Further, clearly, it ensures that $p$\n  passes every vertex candidate so each of them has score~$L+B$.\n  Finally, since we chose vertices from an independent set, every edge\n  candidate also has score at most~$L+B$:\n  If $p$ does not pass some edge~$e$ between vertices of colors~$i$ and~$j$\n  for a pair of voters $x_i, x'_i$, then $p$ certainly passes $e$ in the\n  pair of votes $x_j, x'_j$ because $v^i_{s_i}$ and $v^j_{s_j}$ are not adjacent.\n  \n\n  For the ``only if'' case, we show that if there is a successful shift action for our\n  instance, then there is a multicolored independent set for $G$.  We\n  note that a shift action of cost $B$ gives $p$ score $L+B$. Thus,\n  for the shift action to be successful, it has to cause all\n  candidates in $V(G) \\cup E(G)$ to lose a point. We claim that a\n  successful shift bribery has to use exactly $B/h = (q +\n  (q-1)\\Delta)$ unit shifts for every pair of voters $x_i$, $x'_i$.\n  Why is this so? Let us fix some color $i \\in [h]$.  Every successful\n  shift action has to decrease the score of every vertex candidate\n  and $x_i$, $x'_i$ are the only votes where $p$ can pass the vertex\n  candidates from $V^{(i)}$ without exceeding the budget.\n  If we spend less than $B/h$ units of budget on $x_i, x'_i$, then there\n  will be some vertex candidates corresponding to a vertex from $V^{(i)}$\n  that $p$ did not pass (and, in effect, which does not lose a point),\n  and so $p$ will not be a winner.\n  Thus, we know that a successful shift action spends $B/h$ units of budget\n  on every pair of voters $x_i, x'_i$. Further, we can assume that for\n  each color~$i$ there is a vertex $v_{s_i}^{(i)} \\in V^{(i)}$\n  such that in $x_i$ candidate~$p$ is shifted to be right in front of\n  $v^{(i)}_{s_i+1}$ and in $x'_i$ candidate~$p$ is shifted to be right\n  in front of $v^{(i)}_{s_i}$. We call such a vertex $v^{(i)}_{s_i}$ \n  \\emph{selected}.\n  If for a given pair of voters $x_i, x'_i$ neither of the vertices\n  from~$V^{(i)}$ was selected, then there would be some vertex\n  candidate in~$V^{(i)}$ that $p$ does not pass. \n  \n  \n  If for some pair of voters $x_i, x'_i$ vertex\n  $v^{(i)}_{s_i}$ is selected, then in this pair of votes $p$ does not pass\n  the edge candidates from $E(v^{(i)}_{s_i})$. However, this means that in\n  a successful shift action the selected vertices form an independent\n  set of~$G$. If two vertices $v^{(i)}_{s_i}$ and $v^{(j)}_{s_j}$ were\n  selected, $i \\neq j$, and if there were an edge $e$ connecting them,\n  then $p$ would not pass the candidate~$e$ in either of the pairs\n  of votes $x_i,x'_i$ or $x_j, x'_j$. Since these are the only votes where\n  $p$ can pass~$e$ without exceeding the budget, in this case $e$\n  would have $L+B+1$ points, $p$ would have $L+B$ points and would lose. \n  \n  \n  \n  \n\n\n\n \n \n \n \n\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n \n \n \n\n \n \n \n \n\n \n \n \n \n \n \n \n\n \n \n\n \n \n\\end{proof}\n\nIn effect, we have the following corollary \n(we discuss other Borda-based rules later).\n\n\n\n\\begin{corollary}\\label{cor:kBorda-n}\n  Parameterized by the number of voters,\n $k$-Borda-\\textsc{Shift Bribery} is ${\\ensuremath{\\mathrm{W[1]}}}$-hard.\n\\end{corollary}\n\n\n\\autoref{cor:kBorda-n} shows that the ${\\ensuremath{\\mathrm{FPT}}}$ approximation scheme\nfrom \\autoref{thm:fpt-as} can presumably not be replaced by an ${\\ensuremath{\\mathrm{FPT}}}$ algorithm.\nBy \\autoref{prop:all-or-nothing-n}, we also know that\n$k$-Borda-\\textsc{Shift Bribery} is in ${\\ensuremath{\\mathrm{FPT}}}$ for all-or-nothing\nprices and the parameterization by the number of voters.\n\nThe next result is, perhaps, even more surprising than \\autoref{borda_wrt_n}:\nIt turns out that $k$-Borda-\\textsc{Shift Bribery} is ${\\ensuremath{\\mathrm{W[1]}}}$-hard \nalso for the parameterization by the number of unit shifts,\nwhereas Borda-\\textsc{Shift Bribery} is in ${\\ensuremath{\\mathrm{FPT}}}$.\nTo this end, we describe a parameterized reduction from \\textsc{Clique}.\n\n\n\n\\begin{theorem}\\label{kborda_wrt_s}\n  {Parameterized by the number $s$ of unit shifts,   {$k$-Borda\\xspace} {\\textsc{Shift Bribery}\\xspace} is ${\\ensuremath{\\mathrm{W}}}[1]$-hard.}\n\\end{theorem}\n\n\n\\begin{proof}\n\n  We provide a parameterized reduction from the \n  ${\\ensuremath{\\mathrm{W[1]}}}$-complete {\\textsc{Clique}\\xspace} problem in which we are\n  given a graph $G$ with $V(G) = \\{v_1, \\ldots, v_n\\}$ and $E(G) =\n  \\{e_1, \\ldots, e_m\\}$ and we ask whether there is a set of $h$ pairwise\n  adjacent vertices in~$G$. \n  \n\n  Given an instance for the {\\textsc{Clique}\\xspace} problem, create an instance\n  for {$k$-Borda\\xspace} {\\textsc{Shift Bribery}\\xspace} as follows.  Set the budget $B := {h\n    \\choose 2} \\cdot (2 + h^3)$, use unit price functions, and\n  set the size of the committee $k := n - h + 1$. The\n  candidate set is $C = \\{p\\} \\cup V(G) \\cup D(G) \\cup F$, where the sets\n  $D(G)$ and~$F$ are defined as follows. Let $H$ be a set of $B$ dummy\n  candidates and for each edge $e$ from the graph let $D(e)$ be a set\n  of $h^3$ dummy candidates. Set $D(G) := \\left( \\bigcup_{e \\in\n      E(G)}D(e) \\right) \\cup H$. Define $F$ to contain $B + (h-1)$\n  dummy candidates. \n\n  We form the set of voters as follows:\n  \\begin{enumerate}\n  \\item\n  For each edge $e = \\{u, v\\}$ from $G$ we introduce voter $x_e$\n    with preference order:\n  $\n  u {\\succ} v {\\succ} D(e) {\\succ} p {\\succ} D(G) \\setminus D(e) {\\succ} V(G)\n  \\setminus \\{u,v\\} {\\succ} F,\n  $ \n  and voter $y_e$ whose preference order is the reverse of that \n  of~$x_e$ with candidates from $F$ shifted to the bottom positions.\n\n  \\item\n  We introduce two voters, $z$ and $z'$, where $z$ has preference\n  order $V(G) {\\succ} F {\\succ} p {\\succ} D(G)$ and $z'$ has preference\n  order $F {\\succ} p  {\\succ} {\\overleftarrow{{V(G)}}} {\\succ} D(G)$.\n  \\end{enumerate}\n\n  All vertex candidates have the same score in this election, and we\n  denote it by $L$. Candidate $p$ has score $L - (h-1) -B$, and all\n  remaining candidates have score lower than $L$ (note that we can\n  assume that $G$ has more than $\\binom{h}{2}$ edges as otherwise it\n  certainly does not contain a size-$h$ clique).\n  Intuitively, shifting $p$ to the top positions in votes $x_e$\n  corresponding to a size-$h$ clique is the only way to ensure $p$'s~victory\n\n  It remains to show the correctness of the construction.\n\n  More precisely, we show that $G$ contains a clique of size $h$ if and only if there is a\n  successful shift action for our instance of $k$-Borda-\\textsc{Shift Bribery}.\n\n  For the ``only if'' case, assume that there is a clique if size~$h$ in~$G$.\n  Then, a successful bribery can shift $p$ to the\n  front of all $x_e$ voters corresponding to the edges inside this\n  clique. This gives $p$ additional $B$ points and causes each vertex\n  from the clique to lose $h-1$ points. In effect, there are $n-h$\n  vertex candidates with score higher than that of $p$ and $h$ vertex\n  candidates with the same score as $p$. Since all other\n  candidates already had lower scores, $p$~belongs to at least one\n  winning committee.\n\n  For the ``if'' case, note that $p$ can join some winning\n  committee only if at least $h$ vertex candidates lose $h-1$ points\n  each. Without exceeding the budget, $p$ can pass vertex candidates\n  only in $x_e$ votes. Through simple arithmetic, we see that within a\n  given budget we can shift $p$ to pass some vertex candidates in at\n  most $\\binom{h}{2}$ of these votes and, so, in each of them we can\n  shift $p$ to the top position. That is, a successful shift action\n  passes vertices corresponding to $\\binom{h}{2}$ edges. This can lead\n  to $h$ candidates losing at least $h-1$ points each (or, in fact,\n  exactly $h-1$ points each) only if these edges form a size-$h$\n  clique.\n\\end{proof}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\section{Chamberlin-Courant and Its Variants}\n\\label{sec:CC-results}\n\nWe now move on to the Chamberlin-Courant (CC) rules and their approximate variants.\nThese rules try to find a committee such that every voter is represented well by\nsome member of the committee.\nRecall that \\textsc{Winner determination} for Borda-CC and Approval-CC\nis NP-hard but can be solved efficiently for the approximate variants.\nTo some extend, this difference in the computational complexity is\nalso reflected by our finding for \\textsc{Shift Bribery}.\n\nNote that many results for the CC-based rules (see also \\autoref{table:results})\nfollow from our results from previous sections.\nFor the parameterizations by the number of candidates, \n\\autoref{thm:m} gives ${\\ensuremath{\\mathrm{FPT}}}$ results for all CC-based rules.\nFor the parameterization by the number of voters,\nby \\autoref{prop:greedy-approval-cc-n} we\nhave ${\\ensuremath{\\mathrm{FPT}}}$ results for Approval-CC, Greedy-Approval-CC, \nand PTAS-CC.\nWe inherit ${\\ensuremath{\\mathrm{W[1]}}}$-hardness for Borda-CC and Greedy-Borda-CC \nfrom \\autoref{borda_wrt_n}, since both rules coincide with\nthe single-winner Borda rule in case of committee size~$k=1$.\n\n\\begin{corollary}\\label{cor:BordaCC-n}\n  \\textsc{Shift Bribery} parameterized by the number of voters is\n  ${\\ensuremath{\\mathrm{W[1]}}}$-hard for Borda-CC and for Greedy-Borda-CC even for unit\n  price functions.\n\\end{corollary}\n\nBy \\autoref{thm:fpt-as}, we have that there is an\n${\\ensuremath{\\mathrm{FPT}}}$ approximation scheme for Borda-CC. However, since\n\\autoref{thm:fpt-as} strongly relies on candidate monotonicity of\nthe rule, it does not apply to Greedy-Borda-CC. Indeed, we believe\nthat there is no constant-factor ${\\ensuremath{\\mathrm{FPT}}}$ approximation algorithm for\nGreedy-Borda-CC-\\textsc{Shift Bribery} (parameterized by the number of\nvoters). \nSo far we could prove this only for the case of\nweighted elections, i.e., for the case where each voter $v$ has an\ninteger weight $w_v$ and counts as $w_v$ separate voters for computing\nthe result of the election (but not for the computation of the\nparameter). On the one hand, one could say that \nusing weighted votes goes against the spirit of\nparameterization by the number of voters and, to some extent, we agree.\nOn the other hand, however, all our ${\\ensuremath{\\mathrm{FPT}}}$ results for\nparameterization by the number of voters (including the ${\\ensuremath{\\mathrm{FPT}}}$\napproximation scheme) do hold for the weighted case.\nBy a parameterized reduction from the \\textsc{Multicolored Clique}\nproblem, we obtain the following.\n\n\n\n\n\\begin{theorem}\\label{thm:greedy-borda-cc-inapprox}\n  {Unless ${\\ensuremath{\\mathrm{W[1]}}}={\\ensuremath{\\mathrm{FPT}}}$, Greedy-Borda-CC-\\textsc{Shift Bribery} with   weighted votes is not $\\alpha$-approximable for any constant   $\\alpha$, even in ${\\ensuremath{\\mathrm{FPT}}}$ time with respect to the number of voters   and even for unit price functions.}\n\\end{theorem}\n\n\n\\begin{proof}\n  We first prove ${\\ensuremath{\\mathrm{W[1]}}}$-hardness of the problem and then argue that\n  this proof implies the claimed inapproximability result.  \n\n  We give a reduction from the \\textsc{Multicolored Clique} problem\n  for the case of regular graphs which is ${\\ensuremath{\\mathrm{W[1]}}}$-complete\n  for the parameter solution size~$h$ (e.g.~\\cite[Lemma 3.2]{MS12}).\n  To this end, let $G = (V(G),E(G))$ be our input\n  graph and let $h$ be the size of the desired clique (and the number\n  of vertex colors). We use the following notation. For each color $i\n  \\in [h]$, we let $V^{(i)} = \\{v^{(i)}_1, \\ldots, v^{(i)}_n\\}$ be the\n  set of vertices from $G$ with color $i$. For each vertex $v \\in\n  V(G)$, we write $E(v)$ to denote the set of edges incident to $v$.\n  Since $G$ is regular, we let $d$ be the common degree of all the\n  vertices (i.e., for each vertex $v$, $|E(v)| = d$).  For each pair\n  of distinct colors $i,j \\in [h]$, $i < j$, we write $E(i,j)$ to\n  denote the set of edges between vertices of color $i$ and vertices\n  of color $j$.\n\n  We make the following observation regarding Greedy-Borda-CC.  In\n  each iteration it picks a candidate with the highest score, where\n  this score is computed as follows: Let $W$ be the set of candidates\n  already selected by Greedy-Borda-CC at this point. Consider\n  candidate $c$ and voter $v$, and let $d$ be the candidate from $W$\n  that $v$ ranks highest. Voter $v$ gives $\\max(0,\n  {\\ensuremath{{{\\mathrm{pos}}}}}_v(c)-{\\ensuremath{{{\\mathrm{pos}}}}}_v(d))$ points to $c$ (i.e., the number of points by\n  which adding $c$ to $W$ would increase the score of $v$'s\n  representative). The score of a candidate in a given iteration is\n  the sum of the scores it receives from all the voters.\n\n  \n  We form an instance of Greedy-Borda-CC-\\textsc{Shift Bribery} as follows.\n\n  \\smallskip\n  \\emph{The candidates.}\\quad\n  We let the candidate set be $C = \\{b,p,p'\\} \\cup V(G) \\cup E(G)\n  \\cup D$, where $p$ is the preferred candidate,\n  $p'$ is $p$'s direct competitor in the sense that either~$p$ or~$p'$\n  will be the committee,\n  $b$ is the ``bar'' candidate (see explanation below),\n  and $D$ is a set of dummy candidates.\n  Throughout the construction we will introduce many dummy candidates\n  and we do not give them special names; at the end of the construction\n  it will be clear that we add only polynomially many of them.\n  We will ensure that $b$, the bar\n  candidate, is always chosen first into the committee, so---in\n  essence---the scores of all other candidates can be computed\n  relative to $b$. So when we describe a preference order, we list\n  only top parts of the voters' preference orders, until candidate~$b$.\n  Candidate~$p$ is ranked last in every vote in which we do not\n  explicitly require otherwise.\n\n  We also use the following notation in the descriptions of the\n  preference orders. For a number $L$, by writing $[L]$ in a\n  preference order we mean introducing $L$ new dummy candidates that\n  are put in the following positions in this preference order, but\n  that in every other preference order are ranked below $b$ (and,\n  thus, after $b$ is selected receive no points from these voters).\n\n  \\smallskip\n  \\emph{The voters.}\\quad\n  We introduce the following voters, where $N$, $T_v$, $T_e$, and $T_p$ are\n  four large numbers such that $N$ is much bigger than $T_v$, $T_v$\n  is much bigger than $T_e$, and $T_e$ is much bigger than $T_p$; we\n  will provide their exact values later.  Each voter has weight one\n  unless specified otherwise.\n  \\begin{enumerate}\n\n  \\item For each color $i \\in [h]$, we introduce two \\emph{vertex-score}\n    voters with the following preference orders:\n    \n", "itemtype": "equation", "pos": 46209, "prevtext": "\n    and voters $y_i$ and $y'_i$ whose preference orders are reverses\n    of those of $x_i$ and $x'_i$, respectively, except that candidates\n    from~$D''$ are ranked last in their votes as well.\n\n  \\item\n  We create a voter~$z$ with the preference order\n   \n", "index": 17, "text": "\\[\n    z \\colon F(G) {\\succ} V(G) {\\succ} E(G) {\\succ} D' {\\succ} p {\\succ} D'',\n    \\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex10.m1\" class=\"ltx_Math\" alttext=\"z\\colon F(G){\\succ}V(G){\\succ}E(G){\\succ}D^{\\prime}{\\succ}p{\\succ}D^{\\prime%&#10;\\prime},\" display=\"block\"><mrow><mrow><mi>z</mi><mo>:</mo><mrow><mrow><mi>F</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><mi>V</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><msup><mi>D</mi><mo>\u2032</mo></msup><mo>\u227b</mo><mi>p</mi><mo>\u227b</mo><msup><mi>D</mi><mi>\u2032\u2032</mi></msup></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n    and two \\emph{vertex-selection voters} with the following preference orders:\n    \n", "itemtype": "equation", "pos": 62286, "prevtext": "\n    and a voter $z'$ with the preference order that is obtained from that of~$z$\n    by first reversing it, and then shifting each member of $V(G) \\cup\n    E(G)$ by one position forward, and shifting $p$ by $B$\n    positions back.\n  \\end{enumerate}\n\n  Let $L$ be the score of $p$ prior to executing any shift\n  actions. The scores of the candidates in our election are as\n  follows: each candidate in $V(G) \\cup E(G)$ has score $L + B + 1$,\n  and each candidate in $F(G) \\cup D' \\cup D''$ has score at most $L+B$.\n\n  We show that it is possible to ensure the victory of $p$ in our\n  election by a bribery of cost at most~$B$ if and only if there is a\n  multicolored independent set for $G$ of size $h$.\n\n  For the ``if'' case, we show that if $G$ has a multicolored independent set, then\n  there is a successful shift action of cost $B$ in our election.  Let\n  us fix a multicolored independent set for $G$ and, for each color $i\n  \\in [h]$, let $v^{(i)}_{s_i}$ be the vertex of color $i$ from this\n  set. For each pair of voters $x_i, x'_i$, we shift $p$ so that in\n  $x_i$ he or she ends up right in front of $v^{(i)}_{s_i+1}$ (or $p$\n  does not move if $s_i = q$), and in $x'_i$ he or she ends up right in\n  front of $v^{(i)}_{s_i}$. This way, $p$ passes every vertex candidate\n  from $V^{(i)}$ and every edge candidate from $\\left(\\bigcup_{t \\in\n      [q]}E(v^{(i)}_t) \\right) \\setminus E(v^{(i)}_{s_i})$.  This\n  shift action costs $B/h$ for every pair of voters $x_i,x'_i$, so, in\n  total, costs exactly $B$. Further, clearly, it ensures that $p$\n  passes every vertex candidate so each of them has score~$L+B$.\n  Finally, since we chose vertices from an independent set, every edge\n  candidate also has score at most~$L+B$:\n  If $p$ does not pass some edge~$e$ between vertices of colors~$i$ and~$j$\n  for a pair of voters $x_i, x'_i$, then $p$ certainly passes $e$ in the\n  pair of votes $x_j, x'_j$ because $v^i_{s_i}$ and $v^j_{s_j}$ are not adjacent.\n  \n\n  For the ``only if'' case, we show that if there is a successful shift action for our\n  instance, then there is a multicolored independent set for $G$.  We\n  note that a shift action of cost $B$ gives $p$ score $L+B$. Thus,\n  for the shift action to be successful, it has to cause all\n  candidates in $V(G) \\cup E(G)$ to lose a point. We claim that a\n  successful shift bribery has to use exactly $B/h = (q +\n  (q-1)\\Delta)$ unit shifts for every pair of voters $x_i$, $x'_i$.\n  Why is this so? Let us fix some color $i \\in [h]$.  Every successful\n  shift action has to decrease the score of every vertex candidate\n  and $x_i$, $x'_i$ are the only votes where $p$ can pass the vertex\n  candidates from $V^{(i)}$ without exceeding the budget.\n  If we spend less than $B/h$ units of budget on $x_i, x'_i$, then there\n  will be some vertex candidates corresponding to a vertex from $V^{(i)}$\n  that $p$ did not pass (and, in effect, which does not lose a point),\n  and so $p$ will not be a winner.\n  Thus, we know that a successful shift action spends $B/h$ units of budget\n  on every pair of voters $x_i, x'_i$. Further, we can assume that for\n  each color~$i$ there is a vertex $v_{s_i}^{(i)} \\in V^{(i)}$\n  such that in $x_i$ candidate~$p$ is shifted to be right in front of\n  $v^{(i)}_{s_i+1}$ and in $x'_i$ candidate~$p$ is shifted to be right\n  in front of $v^{(i)}_{s_i}$. We call such a vertex $v^{(i)}_{s_i}$ \n  \\emph{selected}.\n  If for a given pair of voters $x_i, x'_i$ neither of the vertices\n  from~$V^{(i)}$ was selected, then there would be some vertex\n  candidate in~$V^{(i)}$ that $p$ does not pass. \n  \n  \n  If for some pair of voters $x_i, x'_i$ vertex\n  $v^{(i)}_{s_i}$ is selected, then in this pair of votes $p$ does not pass\n  the edge candidates from $E(v^{(i)}_{s_i})$. However, this means that in\n  a successful shift action the selected vertices form an independent\n  set of~$G$. If two vertices $v^{(i)}_{s_i}$ and $v^{(j)}_{s_j}$ were\n  selected, $i \\neq j$, and if there were an edge $e$ connecting them,\n  then $p$ would not pass the candidate~$e$ in either of the pairs\n  of votes $x_i,x'_i$ or $x_j, x'_j$. Since these are the only votes where\n  $p$ can pass~$e$ without exceeding the budget, in this case $e$\n  would have $L+B+1$ points, $p$ would have $L+B$ points and would lose. \n  \n  \n  \n  \n\n\n\n \n \n \n \n\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n \n \n \n\n \n \n \n \n\n \n \n \n \n \n \n \n\n \n \n\n \n \n\\end{proof}\n\nIn effect, we have the following corollary \n(we discuss other Borda-based rules later).\n\n\n\n\\begin{corollary}\\label{cor:kBorda-n}\n  Parameterized by the number of voters,\n $k$-Borda-\\textsc{Shift Bribery} is ${\\ensuremath{\\mathrm{W[1]}}}$-hard.\n\\end{corollary}\n\n\n\\autoref{cor:kBorda-n} shows that the ${\\ensuremath{\\mathrm{FPT}}}$ approximation scheme\nfrom \\autoref{thm:fpt-as} can presumably not be replaced by an ${\\ensuremath{\\mathrm{FPT}}}$ algorithm.\nBy \\autoref{prop:all-or-nothing-n}, we also know that\n$k$-Borda-\\textsc{Shift Bribery} is in ${\\ensuremath{\\mathrm{FPT}}}$ for all-or-nothing\nprices and the parameterization by the number of voters.\n\nThe next result is, perhaps, even more surprising than \\autoref{borda_wrt_n}:\nIt turns out that $k$-Borda-\\textsc{Shift Bribery} is ${\\ensuremath{\\mathrm{W[1]}}}$-hard \nalso for the parameterization by the number of unit shifts,\nwhereas Borda-\\textsc{Shift Bribery} is in ${\\ensuremath{\\mathrm{FPT}}}$.\nTo this end, we describe a parameterized reduction from \\textsc{Clique}.\n\n\n\n\\begin{theorem}\\label{kborda_wrt_s}\n  {Parameterized by the number $s$ of unit shifts,   {$k$-Borda\\xspace} {\\textsc{Shift Bribery}\\xspace} is ${\\ensuremath{\\mathrm{W}}}[1]$-hard.}\n\\end{theorem}\n\n\n\\begin{proof}\n\n  We provide a parameterized reduction from the \n  ${\\ensuremath{\\mathrm{W[1]}}}$-complete {\\textsc{Clique}\\xspace} problem in which we are\n  given a graph $G$ with $V(G) = \\{v_1, \\ldots, v_n\\}$ and $E(G) =\n  \\{e_1, \\ldots, e_m\\}$ and we ask whether there is a set of $h$ pairwise\n  adjacent vertices in~$G$. \n  \n\n  Given an instance for the {\\textsc{Clique}\\xspace} problem, create an instance\n  for {$k$-Borda\\xspace} {\\textsc{Shift Bribery}\\xspace} as follows.  Set the budget $B := {h\n    \\choose 2} \\cdot (2 + h^3)$, use unit price functions, and\n  set the size of the committee $k := n - h + 1$. The\n  candidate set is $C = \\{p\\} \\cup V(G) \\cup D(G) \\cup F$, where the sets\n  $D(G)$ and~$F$ are defined as follows. Let $H$ be a set of $B$ dummy\n  candidates and for each edge $e$ from the graph let $D(e)$ be a set\n  of $h^3$ dummy candidates. Set $D(G) := \\left( \\bigcup_{e \\in\n      E(G)}D(e) \\right) \\cup H$. Define $F$ to contain $B + (h-1)$\n  dummy candidates. \n\n  We form the set of voters as follows:\n  \\begin{enumerate}\n  \\item\n  For each edge $e = \\{u, v\\}$ from $G$ we introduce voter $x_e$\n    with preference order:\n  $\n  u {\\succ} v {\\succ} D(e) {\\succ} p {\\succ} D(G) \\setminus D(e) {\\succ} V(G)\n  \\setminus \\{u,v\\} {\\succ} F,\n  $ \n  and voter $y_e$ whose preference order is the reverse of that \n  of~$x_e$ with candidates from $F$ shifted to the bottom positions.\n\n  \\item\n  We introduce two voters, $z$ and $z'$, where $z$ has preference\n  order $V(G) {\\succ} F {\\succ} p {\\succ} D(G)$ and $z'$ has preference\n  order $F {\\succ} p  {\\succ} {\\overleftarrow{{V(G)}}} {\\succ} D(G)$.\n  \\end{enumerate}\n\n  All vertex candidates have the same score in this election, and we\n  denote it by $L$. Candidate $p$ has score $L - (h-1) -B$, and all\n  remaining candidates have score lower than $L$ (note that we can\n  assume that $G$ has more than $\\binom{h}{2}$ edges as otherwise it\n  certainly does not contain a size-$h$ clique).\n  Intuitively, shifting $p$ to the top positions in votes $x_e$\n  corresponding to a size-$h$ clique is the only way to ensure $p$'s~victory\n\n  It remains to show the correctness of the construction.\n\n  More precisely, we show that $G$ contains a clique of size $h$ if and only if there is a\n  successful shift action for our instance of $k$-Borda-\\textsc{Shift Bribery}.\n\n  For the ``only if'' case, assume that there is a clique if size~$h$ in~$G$.\n  Then, a successful bribery can shift $p$ to the\n  front of all $x_e$ voters corresponding to the edges inside this\n  clique. This gives $p$ additional $B$ points and causes each vertex\n  from the clique to lose $h-1$ points. In effect, there are $n-h$\n  vertex candidates with score higher than that of $p$ and $h$ vertex\n  candidates with the same score as $p$. Since all other\n  candidates already had lower scores, $p$~belongs to at least one\n  winning committee.\n\n  For the ``if'' case, note that $p$ can join some winning\n  committee only if at least $h$ vertex candidates lose $h-1$ points\n  each. Without exceeding the budget, $p$ can pass vertex candidates\n  only in $x_e$ votes. Through simple arithmetic, we see that within a\n  given budget we can shift $p$ to pass some vertex candidates in at\n  most $\\binom{h}{2}$ of these votes and, so, in each of them we can\n  shift $p$ to the top position. That is, a successful shift action\n  passes vertices corresponding to $\\binom{h}{2}$ edges. This can lead\n  to $h$ candidates losing at least $h-1$ points each (or, in fact,\n  exactly $h-1$ points each) only if these edges form a size-$h$\n  clique.\n\\end{proof}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\section{Chamberlin-Courant and Its Variants}\n\\label{sec:CC-results}\n\nWe now move on to the Chamberlin-Courant (CC) rules and their approximate variants.\nThese rules try to find a committee such that every voter is represented well by\nsome member of the committee.\nRecall that \\textsc{Winner determination} for Borda-CC and Approval-CC\nis NP-hard but can be solved efficiently for the approximate variants.\nTo some extend, this difference in the computational complexity is\nalso reflected by our finding for \\textsc{Shift Bribery}.\n\nNote that many results for the CC-based rules (see also \\autoref{table:results})\nfollow from our results from previous sections.\nFor the parameterizations by the number of candidates, \n\\autoref{thm:m} gives ${\\ensuremath{\\mathrm{FPT}}}$ results for all CC-based rules.\nFor the parameterization by the number of voters,\nby \\autoref{prop:greedy-approval-cc-n} we\nhave ${\\ensuremath{\\mathrm{FPT}}}$ results for Approval-CC, Greedy-Approval-CC, \nand PTAS-CC.\nWe inherit ${\\ensuremath{\\mathrm{W[1]}}}$-hardness for Borda-CC and Greedy-Borda-CC \nfrom \\autoref{borda_wrt_n}, since both rules coincide with\nthe single-winner Borda rule in case of committee size~$k=1$.\n\n\\begin{corollary}\\label{cor:BordaCC-n}\n  \\textsc{Shift Bribery} parameterized by the number of voters is\n  ${\\ensuremath{\\mathrm{W[1]}}}$-hard for Borda-CC and for Greedy-Borda-CC even for unit\n  price functions.\n\\end{corollary}\n\nBy \\autoref{thm:fpt-as}, we have that there is an\n${\\ensuremath{\\mathrm{FPT}}}$ approximation scheme for Borda-CC. However, since\n\\autoref{thm:fpt-as} strongly relies on candidate monotonicity of\nthe rule, it does not apply to Greedy-Borda-CC. Indeed, we believe\nthat there is no constant-factor ${\\ensuremath{\\mathrm{FPT}}}$ approximation algorithm for\nGreedy-Borda-CC-\\textsc{Shift Bribery} (parameterized by the number of\nvoters). \nSo far we could prove this only for the case of\nweighted elections, i.e., for the case where each voter $v$ has an\ninteger weight $w_v$ and counts as $w_v$ separate voters for computing\nthe result of the election (but not for the computation of the\nparameter). On the one hand, one could say that \nusing weighted votes goes against the spirit of\nparameterization by the number of voters and, to some extent, we agree.\nOn the other hand, however, all our ${\\ensuremath{\\mathrm{FPT}}}$ results for\nparameterization by the number of voters (including the ${\\ensuremath{\\mathrm{FPT}}}$\napproximation scheme) do hold for the weighted case.\nBy a parameterized reduction from the \\textsc{Multicolored Clique}\nproblem, we obtain the following.\n\n\n\n\n\\begin{theorem}\\label{thm:greedy-borda-cc-inapprox}\n  {Unless ${\\ensuremath{\\mathrm{W[1]}}}={\\ensuremath{\\mathrm{FPT}}}$, Greedy-Borda-CC-\\textsc{Shift Bribery} with   weighted votes is not $\\alpha$-approximable for any constant   $\\alpha$, even in ${\\ensuremath{\\mathrm{FPT}}}$ time with respect to the number of voters   and even for unit price functions.}\n\\end{theorem}\n\n\n\\begin{proof}\n  We first prove ${\\ensuremath{\\mathrm{W[1]}}}$-hardness of the problem and then argue that\n  this proof implies the claimed inapproximability result.  \n\n  We give a reduction from the \\textsc{Multicolored Clique} problem\n  for the case of regular graphs which is ${\\ensuremath{\\mathrm{W[1]}}}$-complete\n  for the parameter solution size~$h$ (e.g.~\\cite[Lemma 3.2]{MS12}).\n  To this end, let $G = (V(G),E(G))$ be our input\n  graph and let $h$ be the size of the desired clique (and the number\n  of vertex colors). We use the following notation. For each color $i\n  \\in [h]$, we let $V^{(i)} = \\{v^{(i)}_1, \\ldots, v^{(i)}_n\\}$ be the\n  set of vertices from $G$ with color $i$. For each vertex $v \\in\n  V(G)$, we write $E(v)$ to denote the set of edges incident to $v$.\n  Since $G$ is regular, we let $d$ be the common degree of all the\n  vertices (i.e., for each vertex $v$, $|E(v)| = d$).  For each pair\n  of distinct colors $i,j \\in [h]$, $i < j$, we write $E(i,j)$ to\n  denote the set of edges between vertices of color $i$ and vertices\n  of color $j$.\n\n  We make the following observation regarding Greedy-Borda-CC.  In\n  each iteration it picks a candidate with the highest score, where\n  this score is computed as follows: Let $W$ be the set of candidates\n  already selected by Greedy-Borda-CC at this point. Consider\n  candidate $c$ and voter $v$, and let $d$ be the candidate from $W$\n  that $v$ ranks highest. Voter $v$ gives $\\max(0,\n  {\\ensuremath{{{\\mathrm{pos}}}}}_v(c)-{\\ensuremath{{{\\mathrm{pos}}}}}_v(d))$ points to $c$ (i.e., the number of points by\n  which adding $c$ to $W$ would increase the score of $v$'s\n  representative). The score of a candidate in a given iteration is\n  the sum of the scores it receives from all the voters.\n\n  \n  We form an instance of Greedy-Borda-CC-\\textsc{Shift Bribery} as follows.\n\n  \\smallskip\n  \\emph{The candidates.}\\quad\n  We let the candidate set be $C = \\{b,p,p'\\} \\cup V(G) \\cup E(G)\n  \\cup D$, where $p$ is the preferred candidate,\n  $p'$ is $p$'s direct competitor in the sense that either~$p$ or~$p'$\n  will be the committee,\n  $b$ is the ``bar'' candidate (see explanation below),\n  and $D$ is a set of dummy candidates.\n  Throughout the construction we will introduce many dummy candidates\n  and we do not give them special names; at the end of the construction\n  it will be clear that we add only polynomially many of them.\n  We will ensure that $b$, the bar\n  candidate, is always chosen first into the committee, so---in\n  essence---the scores of all other candidates can be computed\n  relative to $b$. So when we describe a preference order, we list\n  only top parts of the voters' preference orders, until candidate~$b$.\n  Candidate~$p$ is ranked last in every vote in which we do not\n  explicitly require otherwise.\n\n  We also use the following notation in the descriptions of the\n  preference orders. For a number $L$, by writing $[L]$ in a\n  preference order we mean introducing $L$ new dummy candidates that\n  are put in the following positions in this preference order, but\n  that in every other preference order are ranked below $b$ (and,\n  thus, after $b$ is selected receive no points from these voters).\n\n  \\smallskip\n  \\emph{The voters.}\\quad\n  We introduce the following voters, where $N$, $T_v$, $T_e$, and $T_p$ are\n  four large numbers such that $N$ is much bigger than $T_v$, $T_v$\n  is much bigger than $T_e$, and $T_e$ is much bigger than $T_p$; we\n  will provide their exact values later.  Each voter has weight one\n  unless specified otherwise.\n  \\begin{enumerate}\n\n  \\item For each color $i \\in [h]$, we introduce two \\emph{vertex-score}\n    voters with the following preference orders:\n    \n", "index": 19, "text": "\\begin{align*}\n      V^{(i)} {\\succ} [N\\cdot(T_v-i)] {\\succ} b,\\\\\n      {\\overleftarrow{{V^{(i)}}}} {\\succ} [N\\cdot(T_v-i)] {\\succ} b,\n    \\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex11.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle V^{(i)}{\\succ}[N\\cdot(T_{v}-i)]{\\succ}b,\" display=\"inline\"><mrow><mrow><msup><mi>V</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo>\u227b</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>N</mi><mo>\u22c5</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>T</mi><mi>v</mi></msub><mo>-</mo><mi>i</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">]</mo></mrow><mo>\u227b</mo><mi>b</mi></mrow><mo>,</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex12.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle{\\overleftarrow{{V^{(i)}}}}{\\succ}[N\\cdot(T_{v}-i)]{\\succ}b,\" display=\"inline\"><mrow><mrow><mover accent=\"true\"><msup><mi>V</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo>\u2190</mo></mover><mo>\u227b</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>N</mi><mo>\u22c5</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>T</mi><mi>v</mi></msub><mo>-</mo><mi>i</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">]</mo></mrow><mo>\u227b</mo><mi>b</mi></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n\n  \\item For each pair of distinct colors $i, j \\in [h]$, $i < j$, we\n    introduce two \\emph{edge-score voters} with the following preference\n    orders:\n    \n", "itemtype": "equation", "pos": 62523, "prevtext": "\n    and two \\emph{vertex-selection voters} with the following preference orders:\n    \n", "index": 21, "text": "\\begin{align*}\n      V^{(i)} {\\succ} p {\\succ} b, \\\\\n      {\\overleftarrow{{V^{(i)}}}} {\\succ} p {\\succ} b.\n    \\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex13.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle V^{(i)}{\\succ}p{\\succ}b,\" display=\"inline\"><mrow><mrow><msup><mi>V</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo>\u227b</mo><mi>p</mi><mo>\u227b</mo><mi>b</mi></mrow><mo>,</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex14.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle{\\overleftarrow{{V^{(i)}}}}{\\succ}p{\\succ}b.\" display=\"inline\"><mrow><mrow><mover accent=\"true\"><msup><mi>V</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo>\u2190</mo></mover><mo>\u227b</mo><mi>p</mi><mo>\u227b</mo><mi>b</mi></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n    and two \\emph{edge-selection voters} with the following preference orders:\n    \n", "itemtype": "equation", "pos": 62807, "prevtext": "\n\n  \\item For each pair of distinct colors $i, j \\in [h]$, $i < j$, we\n    introduce two \\emph{edge-score voters} with the following preference\n    orders:\n    \n", "index": 23, "text": "\\begin{align*}\n      E(i,j) {\\succ} [N\\cdot(T_e-(i \\cdot h + j))] {\\succ} b,\\\\\n      {\\overleftarrow{{E(i,j)}}} {\\succ} [N\\cdot(T_e-(i \\cdot h + j))] {\\succ} b,\n    \\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex15.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle E(i,j){\\succ}[N\\cdot(T_{e}-(i\\cdot h+j))]{\\succ}b,\" display=\"inline\"><mrow><mrow><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>N</mi><mo>\u22c5</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>T</mi><mi>e</mi></msub><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>i</mi><mo>\u22c5</mo><mi>h</mi></mrow><mo>+</mo><mi>j</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">]</mo></mrow><mo>\u227b</mo><mi>b</mi></mrow><mo>,</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex16.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle{\\overleftarrow{{E(i,j)}}}{\\succ}[N\\cdot(T_{e}-(i\\cdot h+j))]{%&#10;\\succ}b,\" display=\"inline\"><mrow><mrow><mover accent=\"true\"><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2190</mo></mover><mo>\u227b</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>N</mi><mo>\u22c5</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>T</mi><mi>e</mi></msub><mo>-</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>i</mi><mo>\u22c5</mo><mi>h</mi></mrow><mo>+</mo><mi>j</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">]</mo></mrow><mo>\u227b</mo><mi>b</mi></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n    Each of the edge-selection voters has weight $\\omega = 4\\binom{h}{2}n(d+1)$\n    (and these are the only voters with non-unit weights).\n    \n  \\item For each color $i \\in [h]$ we introduce two \\emph{verification voters}\n  with the following preference orders:\n    \n", "itemtype": "equation", "pos": 63068, "prevtext": "\n    and two \\emph{edge-selection voters} with the following preference orders:\n    \n", "index": 25, "text": "\\begin{align*}\n      E(i,j) {\\succ} p {\\succ} b, \\\\\n      {\\overleftarrow{{E(i,j)}}} {\\succ} p {\\succ} b.\n    \\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex17.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle E(i,j){\\succ}p{\\succ}b,\" display=\"inline\"><mrow><mrow><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mi>p</mi><mo>\u227b</mo><mi>b</mi></mrow><mo>,</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex18.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle{\\overleftarrow{{E(i,j)}}}{\\succ}p{\\succ}b.\" display=\"inline\"><mrow><mrow><mover accent=\"true\"><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2190</mo></mover><mo>\u227b</mo><mi>p</mi><mo>\u227b</mo><mi>b</mi></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n\n  \\item We introduce the following two voters, the \\emph{$p/p'$-score\n    voters}, with the following preference orders:\n    \n", "itemtype": "equation", "pos": 63458, "prevtext": "\n    Each of the edge-selection voters has weight $\\omega = 4\\binom{h}{2}n(d+1)$\n    (and these are the only voters with non-unit weights).\n    \n  \\item For each color $i \\in [h]$ we introduce two \\emph{verification voters}\n  with the following preference orders:\n    \n", "index": 27, "text": "\\begin{align*}\n      p {\\succ} v^{(i)}_1 {\\succ} E(v^{(i)}_1) {\\succ} \\cdots  {\\succ} v^{(i)}_n {\\succ} E(v^{(i)}_n)   {\\succ} b, \\\\\n      p {\\succ} v^{(i)}_n {\\succ} {\\overleftarrow{{E(v^{(i)}_n)}}} {\\succ} \\cdots  {\\succ} v^{(i)}_1 {\\succ} {\\overleftarrow{{E(v^{(i)}_1)}}}   {\\succ} b. \n    \\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex19.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle p{\\succ}v^{(i)}_{1}{\\succ}E(v^{(i)}_{1}){\\succ}\\cdots{\\succ}v^{(%&#10;i)}_{n}{\\succ}E(v^{(i)}_{n}){\\succ}b,\" display=\"inline\"><mrow><mrow><mi>p</mi><mo>\u227b</mo><msubsup><mi>v</mi><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo>\u227b</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>v</mi><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mi mathvariant=\"normal\">\u22ef</mi><mo>\u227b</mo><msubsup><mi>v</mi><mi>n</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo>\u227b</mo><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>v</mi><mi>n</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mi>b</mi></mrow><mo>,</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex20.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle p{\\succ}v^{(i)}_{n}{\\succ}{\\overleftarrow{{E(v^{(i)}_{n})}}}{%&#10;\\succ}\\cdots{\\succ}v^{(i)}_{1}{\\succ}{\\overleftarrow{{E(v^{(i)}_{1})}}}{\\succ}b.\" display=\"inline\"><mrow><mrow><mi>p</mi><mo>\u227b</mo><msubsup><mi>v</mi><mi>n</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo>\u227b</mo><mover accent=\"true\"><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>v</mi><mi>n</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2190</mo></mover><mo>\u227b</mo><mi mathvariant=\"normal\">\u22ef</mi><mo>\u227b</mo><msubsup><mi>v</mi><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo>\u227b</mo><mover accent=\"true\"><mrow><mi>E</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>v</mi><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u2190</mo></mover><mo>\u227b</mo><mi>b</mi></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n\n  \\item Let $H$ be the total weight of voters introduced so far (clearly,\n    $H$ is polynomially upper-bounded in the input size of the \\textsc{Multicolored\n    Clique} instance $(G,h)$). We introduce $H+1$ pairs of\n    voters with preference orders $b {\\succ} C \\setminus \\{b\\}$ and $b\n    {\\succ} {\\overleftarrow{{C \\setminus \\{b\\}}}}$. We refer to these voters as the\n    \\emph{bar-score voters}.\n  \\end{enumerate}\n\n  We assume that the internal tie-breaking prefers $p$ to $p'$---we\n  could modify the construction slightly if it were the other way round.\n\n  \\smallskip\n  \\emph{Committee size and budget.}\\quad\n  We set the committee size to be $k = 1 +h + \\binom{h}{2}+1$.\n  We use unit prices for the voters and we set the budget $B = |V|-h + |E|-\\binom{h}{2}$.\n\n  We claim that for an appropriate choice of $N$, $T_v$, $T_e$, and\n  $T_p$ it is possible to ensure that $p$ is in a winning committee\n  if and only if there is multicolored size-$h$ clique for $G$.\n  We now argue why this is the case.\n\n  \\smallskip\n  \\emph{The idea.}\\quad\n  The general idea is to show that every shift action (even the zero-vector,\n  that means not bribing the voters) of costs at most~$B$ leads to a committee\n  that contains\n  \\begin{enumerate}\n   \\item the bar vertex~$b$,\n   \\item for each color~$i$ one candidate corresponding to a vertex of color~$i$,\n   \\item for each color pair~$\\{i,j\\}, i \\neq j$ one candidate corresponding to\n         an edge incident to a vertex of color~$i$ and to a vertex of color~$j$\n   \\item candidate~$p$ if the selected vertices and edges encode a multicolored\n         clique; otherwise the committee contains~$p'$.\n  \\end{enumerate}\n  Furthermore, any such combination of vertices and edges can be selected\n  within the given budget, that is, there is a successful shift action\n  if a multicolored clique of size~$h$ exists.\n  \n  \\smallskip\n  \\emph{Correctness.}\\quad\n  Observe that due to the bar-score voters, irrespective how\n  we shift $p$ within the budget, Greedy-Borda-CC will first choose~$b$.\n  Thus, from this point on, we compute the score of all\n  candidates relative to $b$ (and, in later rounds, the other selected\n  members of the committee, but there is a limited number of such\n  interactions). \n\n  We now describe the next $h + \\binom{h}{2}+1$ rounds, first describing\n  the situation as if $p$ were not shifted, and then indicate how it\n  could be changed with appropriate shifts.\n  \n  After the first iteration, when $b$ is selected, for each color $i \\in [h]$,\n  every vertex in $V^{(i)}$ has score:\n \n", "itemtype": "equation", "pos": 63890, "prevtext": "\n\n  \\item We introduce the following two voters, the \\emph{$p/p'$-score\n    voters}, with the following preference orders:\n    \n", "index": 29, "text": "\\begin{align*}\n      &p' {\\succ} [N \\cdot T_p] {\\succ} b, \\\\\n      &p  {\\succ} [N \\cdot T_p + h(n+1)(d+1)] {\\succ} b.\n    \\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex21.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle p^{\\prime}{\\succ}[N\\cdot T_{p}]{\\succ}b,\" display=\"inline\"><mrow><mrow><msup><mi>p</mi><mo>\u2032</mo></msup><mo>\u227b</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>N</mi><mo>\u22c5</mo><msub><mi>T</mi><mi>p</mi></msub></mrow><mo stretchy=\"false\">]</mo></mrow><mo>\u227b</mo><mi>b</mi></mrow><mo>,</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex22.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle p{\\succ}[N\\cdot T_{p}+h(n+1)(d+1)]{\\succ}b.\" display=\"inline\"><mrow><mrow><mi>p</mi><mo>\u227b</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mrow><mi>N</mi><mo>\u22c5</mo><msub><mi>T</mi><mi>p</mi></msub></mrow><mo>+</mo><mrow><mi>h</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo stretchy=\"false\">]</mo></mrow><mo>\u227b</mo><mi>b</mi></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n  The points in the first bracket come from the vertex-score voters,\n  in the second bracket from the vertex-selection voters, and in the\n  last bracket from the verification voters. Further, since $T_v$ is\n  much larger than $T_e$ and $T_p$, every non-vertex candidate has\n  significantly lower score. \n\n  Thus, in the next $h$ rounds, for each color $i \\in [h]$,\n  Greedy-Borda-CC adds into the committee one vertex candidate of\n  color $i$.\n  Note that as soon as it picks some vertex candidate of\n  color $i$, the score of all the other vertex candidates of this\n  color immediately drops by at least $2N\\cdot(T_v-i)$ and, so,\n  their score is much too low to be selected.\n\n  By shifting candidate $p$ in the vertex-selection votes, for each\n  color $i \\in [h]$ and each vertex in~$V^{(i)}$ it is possible to\n  ensure that exactly this vertex is selected (it suffices to ensure\n  that every other vertex candidate of this color loses one point due\n  to $p$ passing him or her). The costs of such shifts are at most\n  $|V|-h$ in total. \n\n  In other words, we can assume that after these $h$ iterations\n  Greedy-Borda-CC picks one vertex candidate of each color, and that\n  by shift action of cost at most $|V|-h$ it is possible to choose\n  precisely which ones.\n\n\n  In the next $\\binom{h}{2}$ iterations, Greedy-Borda-CC picks one\n  edge candidate for each pair of colors. Not counting the\n  verification voters, for each pair of colors $i,j\\in [h]$, $i < j$,\n  every edge candidate connecting vertices of colors $i$ and $j$ has\n  score:\n  \n", "itemtype": "equation", "pos": 66578, "prevtext": "\n\n  \\item Let $H$ be the total weight of voters introduced so far (clearly,\n    $H$ is polynomially upper-bounded in the input size of the \\textsc{Multicolored\n    Clique} instance $(G,h)$). We introduce $H+1$ pairs of\n    voters with preference orders $b {\\succ} C \\setminus \\{b\\}$ and $b\n    {\\succ} {\\overleftarrow{{C \\setminus \\{b\\}}}}$. We refer to these voters as the\n    \\emph{bar-score voters}.\n  \\end{enumerate}\n\n  We assume that the internal tie-breaking prefers $p$ to $p'$---we\n  could modify the construction slightly if it were the other way round.\n\n  \\smallskip\n  \\emph{Committee size and budget.}\\quad\n  We set the committee size to be $k = 1 +h + \\binom{h}{2}+1$.\n  We use unit prices for the voters and we set the budget $B = |V|-h + |E|-\\binom{h}{2}$.\n\n  We claim that for an appropriate choice of $N$, $T_v$, $T_e$, and\n  $T_p$ it is possible to ensure that $p$ is in a winning committee\n  if and only if there is multicolored size-$h$ clique for $G$.\n  We now argue why this is the case.\n\n  \\smallskip\n  \\emph{The idea.}\\quad\n  The general idea is to show that every shift action (even the zero-vector,\n  that means not bribing the voters) of costs at most~$B$ leads to a committee\n  that contains\n  \\begin{enumerate}\n   \\item the bar vertex~$b$,\n   \\item for each color~$i$ one candidate corresponding to a vertex of color~$i$,\n   \\item for each color pair~$\\{i,j\\}, i \\neq j$ one candidate corresponding to\n         an edge incident to a vertex of color~$i$ and to a vertex of color~$j$\n   \\item candidate~$p$ if the selected vertices and edges encode a multicolored\n         clique; otherwise the committee contains~$p'$.\n  \\end{enumerate}\n  Furthermore, any such combination of vertices and edges can be selected\n  within the given budget, that is, there is a successful shift action\n  if a multicolored clique of size~$h$ exists.\n  \n  \\smallskip\n  \\emph{Correctness.}\\quad\n  Observe that due to the bar-score voters, irrespective how\n  we shift $p$ within the budget, Greedy-Borda-CC will first choose~$b$.\n  Thus, from this point on, we compute the score of all\n  candidates relative to $b$ (and, in later rounds, the other selected\n  members of the committee, but there is a limited number of such\n  interactions). \n\n  We now describe the next $h + \\binom{h}{2}+1$ rounds, first describing\n  the situation as if $p$ were not shifted, and then indicate how it\n  could be changed with appropriate shifts.\n  \n  After the first iteration, when $b$ is selected, for each color $i \\in [h]$,\n  every vertex in $V^{(i)}$ has score:\n \n", "index": 31, "text": "\\[\n    \\underbrace{(2N\\cdot(T_v-i) + (n+1))}_{\\text{vertex score voters}} +\n    \\underbrace{(2n+3)}_{\\text{vertex-selection voters}} +\n    \\underbrace{((n+1)(d+1))}_{\\text{verification voters}}.\n  \\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex23.m1\" class=\"ltx_Math\" alttext=\"\\underbrace{(2N\\cdot(T_{v}-i)+(n+1))}_{\\text{vertex score voters}}+\\underbrace%&#10;{(2n+3)}_{\\text{vertex-selection voters}}+\\underbrace{((n+1)(d+1))}_{\\text{%&#10;verification voters}}.\" display=\"block\"><mrow><mrow><munder><munder accentunder=\"true\"><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mrow><mrow><mrow><mn>2</mn><mo movablelimits=\"false\">\u2062</mo><mi>N</mi></mrow><mo movablelimits=\"false\">\u22c5</mo><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mrow><msub><mi>T</mi><mi>v</mi></msub><mo movablelimits=\"false\">-</mo><mi>i</mi></mrow><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow></mrow><mo movablelimits=\"false\">+</mo><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mrow><mi>n</mi><mo movablelimits=\"false\">+</mo><mn>1</mn></mrow><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow></mrow><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow><mo movablelimits=\"false\">\u23df</mo></munder><mtext>vertex score voters</mtext></munder><mo>+</mo><munder><munder accentunder=\"true\"><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mrow><mrow><mn>2</mn><mo movablelimits=\"false\">\u2062</mo><mi>n</mi></mrow><mo movablelimits=\"false\">+</mo><mn>3</mn></mrow><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow><mo movablelimits=\"false\">\u23df</mo></munder><mtext>vertex-selection voters</mtext></munder><mo>+</mo><munder><munder accentunder=\"true\"><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mrow><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mrow><mi>n</mi><mo movablelimits=\"false\">+</mo><mn>1</mn></mrow><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow><mo movablelimits=\"false\">\u2062</mo><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mrow><mi>d</mi><mo movablelimits=\"false\">+</mo><mn>1</mn></mrow><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow></mrow><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow><mo movablelimits=\"false\">\u23df</mo></munder><mtext>verification voters</mtext></munder></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n  where the points from the first bracket come from the edge-score\n  voters and the points in the second bracket come from the\n  edge-selection voters. Further, every such candidate receives less than\n  $\\frac{\\omega}{2}$ points from the verification voters.\n\n  Since $T_e$ is much larger than $T_p$, and since by shifting $p$\n  forward in the votes of edge-selection voters it is possible to\n  remove $\\omega$ points from the scores of all but one edge candidate\n  in each $E(i,j)$.\n  Moreover, it is possible to precisely select for each $E(i,j)$ which\n  of its members is added to the committee with a shift action of\n  total cost $|E|-\\binom{h}{2}$.\n  Analogously to the case of vertices, note that whenever some candidate\n  from $E(i,j)$ is selected, the other ones lose so many points that they\n  have no chance of being selected in any of the following iterations.\n\n  In the final iteration, the algorithm either selects $p'$ or $p$.\n  Candidate $p'$ has score $N \\cdot T_p$, whereas the score of $p$\n  depends on the vertex and edge candidates that were so far introduced\n  into the committee. If we disregarded all committee members selected\n  after $b$, $p$ would have score:\n \n", "itemtype": "equation", "pos": 68321, "prevtext": "\n  The points in the first bracket come from the vertex-score voters,\n  in the second bracket from the vertex-selection voters, and in the\n  last bracket from the verification voters. Further, since $T_v$ is\n  much larger than $T_e$ and $T_p$, every non-vertex candidate has\n  significantly lower score. \n\n  Thus, in the next $h$ rounds, for each color $i \\in [h]$,\n  Greedy-Borda-CC adds into the committee one vertex candidate of\n  color $i$.\n  Note that as soon as it picks some vertex candidate of\n  color $i$, the score of all the other vertex candidates of this\n  color immediately drops by at least $2N\\cdot(T_v-i)$ and, so,\n  their score is much too low to be selected.\n\n  By shifting candidate $p$ in the vertex-selection votes, for each\n  color $i \\in [h]$ and each vertex in~$V^{(i)}$ it is possible to\n  ensure that exactly this vertex is selected (it suffices to ensure\n  that every other vertex candidate of this color loses one point due\n  to $p$ passing him or her). The costs of such shifts are at most\n  $|V|-h$ in total. \n\n  In other words, we can assume that after these $h$ iterations\n  Greedy-Borda-CC picks one vertex candidate of each color, and that\n  by shift action of cost at most $|V|-h$ it is possible to choose\n  precisely which ones.\n\n\n  In the next $\\binom{h}{2}$ iterations, Greedy-Borda-CC picks one\n  edge candidate for each pair of colors. Not counting the\n  verification voters, for each pair of colors $i,j\\in [h]$, $i < j$,\n  every edge candidate connecting vertices of colors $i$ and $j$ has\n  score:\n  \n", "index": 33, "text": "\\begin{align*}\n    \\underbrace{(N(T_e -(i \\cdot h +j )) + |E(i,j)|+1)}_{\\text{edge-score voters}} +\n    \\underbrace{(\\omega (|E(i,j)|+2))}_{\\text{edge-selection voters}},\n  \\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex24.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\underbrace{(N(T_{e}-(i\\cdot h+j))+|E(i,j)|+1)}_{\\text{edge-score%&#10; voters}}+\\underbrace{(\\omega(|E(i,j)|+2))}_{\\text{edge-selection voters}},\" display=\"inline\"><mrow><mrow><munder><munder accentunder=\"true\"><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mrow><mrow><mi>N</mi><mo movablelimits=\"false\">\u2062</mo><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mrow><msub><mi>T</mi><mi>e</mi></msub><mo movablelimits=\"false\">-</mo><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mrow><mrow><mi>i</mi><mo movablelimits=\"false\">\u22c5</mo><mi>h</mi></mrow><mo movablelimits=\"false\">+</mo><mi>j</mi></mrow><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow></mrow><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow></mrow><mo movablelimits=\"false\">+</mo><mrow><mo movablelimits=\"false\" stretchy=\"false\">|</mo><mrow><mi>E</mi><mo movablelimits=\"false\">\u2062</mo><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mi>i</mi><mo movablelimits=\"false\">,</mo><mi>j</mi><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow></mrow><mo movablelimits=\"false\" stretchy=\"false\">|</mo></mrow><mo movablelimits=\"false\">+</mo><mn>1</mn></mrow><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow><mo movablelimits=\"false\">\u23df</mo></munder><mtext>edge-score voters</mtext></munder><mo>+</mo><munder><munder accentunder=\"true\"><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mrow><mi>\u03c9</mi><mo movablelimits=\"false\">\u2062</mo><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mrow><mrow><mo movablelimits=\"false\" stretchy=\"false\">|</mo><mrow><mi>E</mi><mo movablelimits=\"false\">\u2062</mo><mrow><mo movablelimits=\"false\" stretchy=\"false\">(</mo><mi>i</mi><mo movablelimits=\"false\">,</mo><mi>j</mi><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow></mrow><mo movablelimits=\"false\" stretchy=\"false\">|</mo></mrow><mo movablelimits=\"false\">+</mo><mn>2</mn></mrow><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow></mrow><mo movablelimits=\"false\" stretchy=\"false\">)</mo></mrow><mo movablelimits=\"false\">\u23df</mo></munder><mtext>edge-selection voters</mtext></munder></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n  For each color $i \\in [h]$, however, $p$ loses $(n+1)(d+1)$ points\n  from the verification voters.\n  This is true since some candidate from $V^{(i)}$ is\n  in the committee, we compute $p$'s score relative to this vertex\n  candidate and not relative to $b$.\n  If these were the only points that $p$ loses due to the committee members\n  already selected, then---by tie-breaking--- $p$ would win against~$p'$.\n  However, if for\n  some pair of colors $i,j \\in [h]$, $i < j$, the committee contains\n  some edge $e$ that connects vertices that are not both in the\n  committee, then $p$ loses at least one more point from the\n  verification voters (either for color $i$ or for color $j$ or for\n  both) because at least one of these verification voters ranks $e$\n  ahead of all the vertex candidates from the committee.  Then $p'$ is\n  selected.  This means that $p$ ends up in the committee if and only\n  if due to an appropriate shift action we select vertices and edges\n  corresponding to a multicolored clique.\n  This proves the correctness of the reduction for\n  an appropriate choice of $N$, $T_v$, $T_e$, and $T_p$,\n  which is discussed next.\n\n  \\smallskip\n  \\emph{The values of $N$, $T_v$, $T_e$, and $T_p$.}\\quad\n  While one could pick tight precise values, for the\n  correctness of the proof it suffices to take, say, $T_p =\n  (\\binom{h}{2}\\cdot|V|\\cdot|E|)^3$, $T_e = T_p^3$, $T_v = T_e^3$, and\n  $N = T_v^3$.\n\n  Finally, we finally discuss the inapproximability result that is implied by our reduction.\n\n  \\smallskip\n  \\emph{Inapproximability.}\\quad\n  Observe that, in fact, the above proof gives our\n  inapproximability result. The reason is that for a given constant\n  factor $\\alpha$, we could increase $N$ by the same factor and it\n  would be impossible for $p$ to pass the bar candidate in any of the\n  votes, even if we were to spend $\\alpha$ times the necessary\n  budget. In effect, for $p$ to succeed we would still have to find a\n  multicolored clique.\n\\end{proof}\n\n\nFor the parameterization by the number of unit shift actions,\n\nboth Borda-CC and\nApproval-CC are para-${\\ensuremath{\\mathrm{NP}}}$-hard due to the hardness of\n\\textsc{Winner Determination}.\\footnote{The \n  literature~\\cite{BL11,PRZ08}\n  speaks of hardness of computing the score of a winning committee, \n  but one can show that deciding whether a given\n  candidate is in some winning committee is ${\\ensuremath{\\mathrm{NP}}}$-hard as well.}  For\nGreedy-Approval-CC, PTAS-CC, and Greedy-Borda-CC we obtain\n${\\ensuremath{\\mathrm{W[2]}}}$-hardness results and inapproximability results.\n\n\n\n\n\n\\begin{theorem} \\label{W2h-unitshifts} \n  {Parameterized by the total number~$s$ of   unit shifts, {\\textsc{Shift Bribery}\\xspace} is ${\\ensuremath{\\mathrm{W[2]}}}$-hard even in case of unit prices   for Greedy-Borda-CC, Greedy-Approval-CC, and PTAS-CC.   Further, unless ${\\ensuremath{\\mathrm{W[2]}}}={\\ensuremath{\\mathrm{FPT}}}$, in these cases the problem is not   $\\alpha$-approximable for any constant~$\\alpha$.}\n\\end{theorem}\n\n\n\\begin{proof}\n First, we show the result for Greedy-Approval-CC for \n $t$-Approval satisfaction function with $t\\ge3$ (which includes PTAS-CC).\n Second, we show how the proof ideas can be adapted to obtain the same\n result for Greedy-Borda-CC.\n \n \\paragraph{Greedy-Approcal-CC.}\n We reduce from the {\\textsc{Set Cover}\\xspace} problem which is {\\ensuremath{\\mathrm{W[2]}}}-hard parameterized\n by the set cover size~$h$.\n Given an instance $({\\ensuremath{{{\\mathcal{S}}}}},U,h)$ of {\\textsc{Set Cover}\\xspace}\n with ${\\ensuremath{{{\\mathcal{S}}}}} = (S_1, \\ldots, S_s)$ denoting the given sets over\n the universe~$U =\\{u_1, \\ldots, u_r\\}$,\n we construct a {Greedy-Approval-CC\\xspace} {\\textsc{Shift Bribery}\\xspace} instance as follows.\n\n \\smallskip\n \\emph{Important candidates.}\\quad\n Our election will consist of $2|U|+2|{\\ensuremath{{{\\mathcal{S}}}}}|+2$ \\emph{important candidates}:\n For each element~$u\\in U$ we create two \\emph{element candidates}~$c^-(u)$ and~$c^+(u)$.\n Analogously, we create two \\emph{set candidates}~$c^-(S)$ and~$c^+(S)$ for each set $S\\in{\\ensuremath{{{\\mathcal{S}}}}}$.\n Furthermore, we create the preferred candidate~$p$ and a candidate~$p'$.\n\n \\emph{Dummy candidate.}\\quad\n  For each voter (to be specified later), we introduce up to $(t-1)$ further dummy candidates.\n  The dummy candidates will not have any chance to be part of the\n  committee, because each of them will only be approved once and\n  there are enough important candidates that have at least two approvals\n  no matter how one bribes the election.\n  However, the dummy candidates intuitively allow some voter to\n  approve any number~$t'$, $1 \\le t' \\le t$, of important candidates\n  by approving the desired set of important candidates and some further dummy\n  candidates which are exclusively approved by this voter.\n\n We have basically everything needed to explain the rough idea of the construction.\n\n \\smallskip\n \\emph{The idea.}\\quad\n In the unbribed election the candidates~$c^-(u)$ and~$c^-(S)$ for each $u\\in U$ and $S\\in{\\ensuremath{{{\\mathcal{S}}}}}$\n together with the candidate~$p'$ are elected as committee.\n The decisive direct effect of successfully bribing the voters will be to decrease\n the score of at most~$h$ candidates~$c^-(S)$.\n Doing this will replace the corresponding $c^-(S)$ with $c^+(S)$ in the committee.\n Furthermore, each~$c^-(u)$ with $u \\in S$ for some replaced candidate~$c(S)$ will\n then be replaced by $c^+(u)$.\n Finally our preferred candidate~$p$ will replace candidate~$p'$ in the committee\n if and only if $c^-(u)$ is replaced by the corresponding~$c^+(u)$ for each $u \\in U$.\n\n \\smallskip\n \\emph{Committee size and budget.}\\quad\n As already indicated in the description of the idea,\n we set the budget equal to the size~$h$ of the set cover\n and the committee size to~$|{\\ensuremath{{{\\mathcal{S}}}}}|+|U|+1$.\n\n Next, we discuss the voters of the election that allow us to implement the above idea.\n\n \\smallskip\n \\emph{Specifying the voters.}\\quad\n  Observe that for {Greedy-Approval-CC\\xspace} {\\textsc{Shift Bribery}\\xspace}, specifying\n  the set of approved candidates, the last-ranked approved candidate, that is,\n  the candidate at position~$t$, and the price for shifting the preferred\n  candidate~$p$ to position~$t$ completely describes the influence of a voter\n  to the unbribed and bribed election:\n  Shifting~$p$ to any position greater than~$t$ will not change the score of\n  any candidate in any step of {Greedy-Approval-CC\\xspace}.\n  Shifting~$p$ to some position $\\le t$ will increase the score of~$p$ by one\n  and decrease the score of the last-ranked approved candidate by one---independently\n  how far beyond position~$t$ we shift~$p$.\n  Hence, for each voter we simply say which important candidates this voter approves,\n  which candidate among the approved candidates is ranked last, and\n  the price of moving~$p$ the the first approved position.\n\n \\smallskip\n \\emph{The voters.}\\quad\n The set of voters contains $|{\\ensuremath{{{\\mathcal{S}}}}}|$~many \\emph{${\\ensuremath{{{\\mathcal{S}}}}}$-voters},\n $|{\\ensuremath{{{\\mathcal{S}}}}}|\\cdot|U|$~many \\emph{${\\ensuremath{{{\\mathcal{S}}}}}$-$U$-voters}, and\n $|U|$~many $U$-voters:\n \\begin{itemize}\n  \\item For each set~$S \\in {\\ensuremath{{{\\mathcal{S}}}}}$ there is one\n        $S$-voter that approves~$c^-(S)$ (and some dummy candidates)\n        such that it costs one to disapprove~$c^-(S)$ but approve~$p$ instead.\n  \\item For each set~$S \\in {\\ensuremath{{{\\mathcal{S}}}}}$ and element~$u \\in U$ there is one\n        $S$-$u$-voter that approves~$c^-(u)$ only if $u \\in S$ and that\n        approves approves~$c^+(S)$ (and some dummy candidates) in any case.\n  \\item For each element~$u \\in U$ there is one\n        $u$-voter that approves~$p'$ and $c^+(u)$.\n \\end{itemize}\n There are further auxiliary voters that allow us to appropriately set\n the number of approvals for each candidate:\n \\begin{itemize}\n  \\item For each $S_j \\in {\\ensuremath{{{\\mathcal{S}}}}}$ there are $|{\\ensuremath{{{\\mathcal{S}}}}}|^5\\cdot|U|^5-j$ voters\n        that approve~$c^-(S)$ and~$c^+(S)$ (and some dummy candidates)\n        and $|U|-1$~voters that only approve~$c^-(S)$ (and some dummy\n        candidates).\n  \\item For each $u_i \\in U$ there are $|{\\ensuremath{{{\\mathcal{S}}}}}|^4\\cdot|U|^4-i$ voters\n        that approve~$c^-(u)$ and~$c^+(u)$ (and some dummy candidates)\n        and $|\\{S \\in {\\ensuremath{{{\\mathcal{S}}}}} \\mid u_i \\in S\\}|-1$ voters that only approve~$c^+(u)$\n        (and some dummy candidates). \n        \n  \\item There are $|{\\ensuremath{{{\\mathcal{S}}}}}|^2\\cdot|U|^2$ voters\n        that approve~$p$ and~$p'$ (and some dummy candidates) and\n        $h-1$~voters that only approve~$p'$ (and some dummy candidates).\n \\end{itemize}\n Except for the ${\\ensuremath{{{\\mathcal{S}}}}}$-voters, it is too expensive to bribe some voter\n with the effect that~$p$ is approved instead of some other candidate.\n This can be easily implemented by putting~$p$ more than budget many\n positions behind the last approved candidate.\n\n This construction can clearly be computed in polynomial time\n and our parameter, the number of unit shifts, which is upper bounded by the budget,\n is identical to the set cover size~$h$.\n Before we prove the correctness of the reduction,\n let us briefly discuss (properties of) the unbribed election.\n\n \\smallskip\n \\emph{Scores, ties, and the unbribed election.}\\quad\n First, consider the scores of the candidates in the very first\n round of the voting rule which are as follows.\n \\begin{itemize}\n  \\item Both, candidate~$c^-(S_j)$ and candidate~$c^+(S_j)$ have\n        $|{\\ensuremath{{{\\mathcal{S}}}}}|^5\\cdot|U|^5-j + |U|$ approvals.\n  \\item Both candidate~$c^-(u_i)$ and candidate~$c^+(u_i)$ have\n        $|{\\ensuremath{{{\\mathcal{S}}}}}|^4\\cdot|U|^4-i + |\\{S \\in {\\ensuremath{{{\\mathcal{S}}}}} \\mid u_i \\in S\\}|$ approvals.\n  \\item Candidate~$p'$ has\n        $|{\\ensuremath{{{\\mathcal{S}}}}}|^2\\cdot|U|^2 + |U|+ h-1$ approvals.\n  \\item Candidate~$p$ has\n        $|{\\ensuremath{{{\\mathcal{S}}}}}|^2\\cdot|U|^2$ approvals.\n \\end{itemize}\n We assume that candidate~$c^-(\\cdot)$ is always preferred to candidate~$c^+(\\cdot)$\n and candidate~$p'$ to candidate~$p$ by the tie-breaking of {Greedy-Approval-CC\\xspace}.\\footnote{The\n reduction can be adapted to work for any tie-breaking.}\n\n It is easy to verify that in the unbribed election the candidates will join the committee\n in the following order: $c^-(S_1),c^-(S_2),\\dots,c^-(S_s),c^-(u_1),c^-(u_2),\\dots,c^-(u_r)$\n and finally~$p'$.\n To see this, observe that each pair of candidates~$c^-(\\cdot)$ and~$c^+(\\cdot)$ is approved\n by almost the same set of candidates.\n As soon as one of~$c^-(\\cdot)$ and~$c^+(\\cdot)$ joins the committee, the other loses\n nearly all approvals and has no chance to join into the committee.\n \n \\smallskip\n \\emph{The possible impact of shift actions.}\\quad\n The only shift actions with any effect that can be performed within the given budget~$B=h$\n are to shift~$p$ forward in the preference lists of up to~$h$ set voters.\n Let $c^-(S_{j_1}),\\dots,c^-(S_{j_h})$ be the candidates that were originally approved\n by the bribed voters instead of approving~$p$.\n We call ${\\ensuremath{{{\\mathcal{S}}}}}^*:=\\{S_{j_1},S_{j_2},\\dots,S_{j_h}\\}$ the \\emph{selected sets}.\n Applying the corresponding shift actions will decrease the score of each candidate\n $c^-(S_{j_\\ell}), 1 \\le \\ell \\le h$, by one and increase the score of~$p$ by~$h$.\n It is easy to verify that, in effect, for each $1 \\le \\ell \\le h$,\n {Greedy-Approval-CC\\xspace} will select $c^+(S_{j_\\ell})$ instead of $c^-(S_{j_\\ell})$\n to join the committee.\n Now, observe that for each $u \\in S_{j_\\ell}$, there is one voter that approves\n $c^+(S_{j_\\ell})$ and $c^-(u)$.\n This means that the score of each~$c^-(u)$ for $u \\in \\bigcup_{S \\in {\\ensuremath{{{\\mathcal{S}}}}}^*}S$\n is decreased by at least one after the first~$|{\\ensuremath{{{\\mathcal{S}}}}}|$ candidates joined the committee.\n Hence, if $c^+(S_{j_\\ell})$ joins the committee instead of $c^+(S_{j_\\ell})$, then\n also~$c^+(u)$ joins instead of~$c^-(u)$.\n Finally, observe that, after $s+r$ candidates joined the committee, the score of~$p'$\n is decreased by the number of candidates~$c^+(u)$ that joined the committee instead\n of $c^-(u)$.\n\n \\smallskip\n \\emph{Correctness.}\\quad\n We show that there is a subset of $h$~sets from~${\\ensuremath{{{\\mathcal{S}}}}}$ whose union is~$U$\n if and only if there is a successful set of shift actions of cost~$h$.\n\n For the ``only if'' case, assume that there is a set ${\\ensuremath{{{\\mathcal{S}}}}}' \\subseteq {\\ensuremath{{{\\mathcal{S}}}}}$ of\n $h$~sets whose union is~$U$.\n Then, bribing the $S$-voter for each~$S\\in {\\ensuremath{{{\\mathcal{S}}}}}'$ to approve~$p$ instead of~$c^-(S)$\n costs~$h$ and successfully makes~$p$ a winner:\n From the above discussion about the impact of shift actions, we can immediately infer\n that the score of each candidate~$c^-(u),u \\in U$, is decreased by one and, hence,\n the score of~$p'$ is decreased by~$|U|$.\n Furthermore, the score of~$p$ was increased by~$h$.\n Thus, $p$~has score $|{\\ensuremath{{{\\mathcal{S}}}}}|^2\\cdot|U|^2 + h$ whereas~$p'$ has score $|{\\ensuremath{{{\\mathcal{S}}}}}|^2\\cdot|U|^2 + h-1$.\n This means that~$p$ joins the committee in the last round of {Greedy-Approval-CC\\xspace}.\n\n For the ``if'' case, assume that there is a set of shift actions with costs~$h$ that\n makes $p$~join the committee.\n Since $p$~can gain at most~$h$ points, $p'$ has to lose at least~$|U|$ points.\n However, the only (important) candidates that are approved together with~$p'$\n by some voters are the element candidates~$c^+(u),u \\in U$.\n To decrease the score of~$p'$ by~$|U|$, all these candidates $c^+(u),u \\in U$,\n must join the committee instead of $c^-(u),u \\in U$.\n From the above discussion about the impact of shift actions, we can infer\n that the union of the selected set is~$U$.\n\n \\smallskip\n \\emph{Inapproximability.}\\quad\n By a slight adaption of the above construction \n we can conclude (fixed-parameter) inapproximability:\n First, ensure that even within a budget of~$\\alpha \\cdot B$, one\n can only afford to bribe the set voters.\n This can be reached by putting $(\\alpha+1)\\cdot B$ dummy candidates\n between~$p$ and the first approved candidate for all but the set voters.\n Second, introduce another pair of important candidates~$d$ and~$d'$\n and let the set voters additionally approve~$d$.\n Introduce $|{\\ensuremath{{{\\mathcal{S}}}}}|^3\\cdot|U|^3$ voters\n that approve~$d$ and~$d'$ (and some dummy candidates) and\n $|S|-h$~voters that only approve~$d'$ (and some dummy candidates).\n Introduce $|{\\ensuremath{{{\\mathcal{S}}}}}|\\cdot|U|$ voters\n that approve~$p'$ and~$d$ (and some dummy candidates)\n and further $|{\\ensuremath{{{\\mathcal{S}}}}}|\\cdot|U|$ voters\n that only approve~$d'$ (and some dummy candidates).\n Increase the committee size by one.\n\n The first $|{\\ensuremath{{{\\mathcal{S}}}}}|+|U|$ rounds of the {Greedy-Approval-CC\\xspace} procedure\n clearly work analogously to the original construction.\n As long as less than~$h$ set voters are bribed,\n candidate~$d$ will join the committee in round~$|{\\ensuremath{{{\\mathcal{S}}}}}|+|U|+1$.\n (We assume that {Greedy-Approval-CC\\xspace} prefers $d$ to $d'$ when there is a tie.)\n Then, candidate~$d'$ loses almost all points and has no chance to join the committee\n and candidate~$p'$ loses all additional approvals (introduced by the extension\n of the construction).\n That is, the last round works analogously to the original construction.\n However, if one bribes more than~$h$ set voters, then candidate~$d'$  will join the\n committee in round~$|{\\ensuremath{{{\\mathcal{S}}}}}|+|U|+1$, $p'$~keeps the additionally introduced approvals,\n and $p$~has no chance to join the committee in the last round.\n\n It follows that, even with a budget of~$\\alpha\\cdot B$, one can only make~$p$\n become member of a winning committee if one selects a subset of at most~$h$\n sets from~${\\ensuremath{{{\\mathcal{S}}}}}$ whose union is~$U$.\n\n\n\n\n\n\n\n\n\n\n  \\paragraph{Greedy-Borda-CC.}\n  We give a reduction from the {\\textsc{Set Cover}\\xspace} problem.\n  The basic idea of the construction is very similar to that in the\n  proof for Greedy-Approval-CC.\n  However, to implement this idea, we also use some concepts from\n  the proof of \\autoref{thm:greedy-borda-cc-inapprox}.\n  To this and, we use the same\n  notational conventions as in the proof of\n  \\autoref{thm:greedy-borda-cc-inapprox}, and we use the bar\n  candidate in the same way.\n\n  Given an instance $({\\ensuremath{{{\\mathcal{S}}}}},U,h)$ of {\\textsc{Set Cover}\\xspace}\n  with ${\\ensuremath{{{\\mathcal{S}}}}} = (S_1, \\ldots, S_s)$ denoting the given sets over\n  the universe~$U =\\{u_1, \\ldots, u_r\\}$,\n  we construct a {Greedy-Borda-CC\\xspace} {\\textsc{Shift Bribery}\\xspace} instance as follows.\n\n  We form the following set of candidates:\n  \\begin{enumerate} \n  \\item We introduce the preferred candidate $p$, his or her opponent\n    $p'$, and the bar candidate.\n\n\n\n  \\item For each set $S_i \\in {\\ensuremath{{{\\mathcal{S}}}}}$, we introduce two candidates $c^-(S_i)$ and $c^+(S_i)$.\n  \\item For each element $u_j \\in U$, we introduce candidates $c^-(u_j)$\n    and $c^+(u_j)$.\n  \\item We introduce sufficiently many dummy candidates.\n  \\end{enumerate}\n  \n  \n  \n\n  Let $N$, $T_s$, $T_u$, and $T_p$ be some sufficiently large numbers\n  such that $N$ is much larger than $T_s$, $T_s$ is much larger than\n  $T_u$, and $T_u$ is much larger than $T_p$ (we will specify their\n  values later).  We introduce the following voters:\n  \\begin{enumerate}\n  \\item For each set $S_i \\in {\\ensuremath{{{\\mathcal{S}}}}}$, we introduce two \\emph{set-score\n    voters} with preference orders\n    \n", "itemtype": "equation", "pos": 69695, "prevtext": "\n  where the points from the first bracket come from the edge-score\n  voters and the points in the second bracket come from the\n  edge-selection voters. Further, every such candidate receives less than\n  $\\frac{\\omega}{2}$ points from the verification voters.\n\n  Since $T_e$ is much larger than $T_p$, and since by shifting $p$\n  forward in the votes of edge-selection voters it is possible to\n  remove $\\omega$ points from the scores of all but one edge candidate\n  in each $E(i,j)$.\n  Moreover, it is possible to precisely select for each $E(i,j)$ which\n  of its members is added to the committee with a shift action of\n  total cost $|E|-\\binom{h}{2}$.\n  Analogously to the case of vertices, note that whenever some candidate\n  from $E(i,j)$ is selected, the other ones lose so many points that they\n  have no chance of being selected in any of the following iterations.\n\n  In the final iteration, the algorithm either selects $p'$ or $p$.\n  Candidate $p'$ has score $N \\cdot T_p$, whereas the score of $p$\n  depends on the vertex and edge candidates that were so far introduced\n  into the committee. If we disregarded all committee members selected\n  after $b$, $p$ would have score:\n \n", "index": 35, "text": "\\[\n     N \\cdot T_p + h(n+1)(d+1).\n  \\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex25.m1\" class=\"ltx_Math\" alttext=\"N\\cdot T_{p}+h(n+1)(d+1).\" display=\"block\"><mrow><mrow><mrow><mi>N</mi><mo>\u22c5</mo><msub><mi>T</mi><mi>p</mi></msub></mrow><mo>+</mo><mrow><mi>h</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": " Further, for each set we introduce two \\emph{set-selection\n    voters} with preference orders \n    \n", "itemtype": "equation", "pos": -1, "prevtext": "\n  For each color $i \\in [h]$, however, $p$ loses $(n+1)(d+1)$ points\n  from the verification voters.\n  This is true since some candidate from $V^{(i)}$ is\n  in the committee, we compute $p$'s score relative to this vertex\n  candidate and not relative to $b$.\n  If these were the only points that $p$ loses due to the committee members\n  already selected, then---by tie-breaking--- $p$ would win against~$p'$.\n  However, if for\n  some pair of colors $i,j \\in [h]$, $i < j$, the committee contains\n  some edge $e$ that connects vertices that are not both in the\n  committee, then $p$ loses at least one more point from the\n  verification voters (either for color $i$ or for color $j$ or for\n  both) because at least one of these verification voters ranks $e$\n  ahead of all the vertex candidates from the committee.  Then $p'$ is\n  selected.  This means that $p$ ends up in the committee if and only\n  if due to an appropriate shift action we select vertices and edges\n  corresponding to a multicolored clique.\n  This proves the correctness of the reduction for\n  an appropriate choice of $N$, $T_v$, $T_e$, and $T_p$,\n  which is discussed next.\n\n  \\smallskip\n  \\emph{The values of $N$, $T_v$, $T_e$, and $T_p$.}\\quad\n  While one could pick tight precise values, for the\n  correctness of the proof it suffices to take, say, $T_p =\n  (\\binom{h}{2}\\cdot|V|\\cdot|E|)^3$, $T_e = T_p^3$, $T_v = T_e^3$, and\n  $N = T_v^3$.\n\n  Finally, we finally discuss the inapproximability result that is implied by our reduction.\n\n  \\smallskip\n  \\emph{Inapproximability.}\\quad\n  Observe that, in fact, the above proof gives our\n  inapproximability result. The reason is that for a given constant\n  factor $\\alpha$, we could increase $N$ by the same factor and it\n  would be impossible for $p$ to pass the bar candidate in any of the\n  votes, even if we were to spend $\\alpha$ times the necessary\n  budget. In effect, for $p$ to succeed we would still have to find a\n  multicolored clique.\n\\end{proof}\n\n\nFor the parameterization by the number of unit shift actions,\n\nboth Borda-CC and\nApproval-CC are para-${\\ensuremath{\\mathrm{NP}}}$-hard due to the hardness of\n\\textsc{Winner Determination}.\\footnote{The \n  literature~\\cite{BL11,PRZ08}\n  speaks of hardness of computing the score of a winning committee, \n  but one can show that deciding whether a given\n  candidate is in some winning committee is ${\\ensuremath{\\mathrm{NP}}}$-hard as well.}  For\nGreedy-Approval-CC, PTAS-CC, and Greedy-Borda-CC we obtain\n${\\ensuremath{\\mathrm{W[2]}}}$-hardness results and inapproximability results.\n\n\n\n\n\n\\begin{theorem} \\label{W2h-unitshifts} \n  {Parameterized by the total number~$s$ of   unit shifts, {\\textsc{Shift Bribery}\\xspace} is ${\\ensuremath{\\mathrm{W[2]}}}$-hard even in case of unit prices   for Greedy-Borda-CC, Greedy-Approval-CC, and PTAS-CC.   Further, unless ${\\ensuremath{\\mathrm{W[2]}}}={\\ensuremath{\\mathrm{FPT}}}$, in these cases the problem is not   $\\alpha$-approximable for any constant~$\\alpha$.}\n\\end{theorem}\n\n\n\\begin{proof}\n First, we show the result for Greedy-Approval-CC for \n $t$-Approval satisfaction function with $t\\ge3$ (which includes PTAS-CC).\n Second, we show how the proof ideas can be adapted to obtain the same\n result for Greedy-Borda-CC.\n \n \\paragraph{Greedy-Approcal-CC.}\n We reduce from the {\\textsc{Set Cover}\\xspace} problem which is {\\ensuremath{\\mathrm{W[2]}}}-hard parameterized\n by the set cover size~$h$.\n Given an instance $({\\ensuremath{{{\\mathcal{S}}}}},U,h)$ of {\\textsc{Set Cover}\\xspace}\n with ${\\ensuremath{{{\\mathcal{S}}}}} = (S_1, \\ldots, S_s)$ denoting the given sets over\n the universe~$U =\\{u_1, \\ldots, u_r\\}$,\n we construct a {Greedy-Approval-CC\\xspace} {\\textsc{Shift Bribery}\\xspace} instance as follows.\n\n \\smallskip\n \\emph{Important candidates.}\\quad\n Our election will consist of $2|U|+2|{\\ensuremath{{{\\mathcal{S}}}}}|+2$ \\emph{important candidates}:\n For each element~$u\\in U$ we create two \\emph{element candidates}~$c^-(u)$ and~$c^+(u)$.\n Analogously, we create two \\emph{set candidates}~$c^-(S)$ and~$c^+(S)$ for each set $S\\in{\\ensuremath{{{\\mathcal{S}}}}}$.\n Furthermore, we create the preferred candidate~$p$ and a candidate~$p'$.\n\n \\emph{Dummy candidate.}\\quad\n  For each voter (to be specified later), we introduce up to $(t-1)$ further dummy candidates.\n  The dummy candidates will not have any chance to be part of the\n  committee, because each of them will only be approved once and\n  there are enough important candidates that have at least two approvals\n  no matter how one bribes the election.\n  However, the dummy candidates intuitively allow some voter to\n  approve any number~$t'$, $1 \\le t' \\le t$, of important candidates\n  by approving the desired set of important candidates and some further dummy\n  candidates which are exclusively approved by this voter.\n\n We have basically everything needed to explain the rough idea of the construction.\n\n \\smallskip\n \\emph{The idea.}\\quad\n In the unbribed election the candidates~$c^-(u)$ and~$c^-(S)$ for each $u\\in U$ and $S\\in{\\ensuremath{{{\\mathcal{S}}}}}$\n together with the candidate~$p'$ are elected as committee.\n The decisive direct effect of successfully bribing the voters will be to decrease\n the score of at most~$h$ candidates~$c^-(S)$.\n Doing this will replace the corresponding $c^-(S)$ with $c^+(S)$ in the committee.\n Furthermore, each~$c^-(u)$ with $u \\in S$ for some replaced candidate~$c(S)$ will\n then be replaced by $c^+(u)$.\n Finally our preferred candidate~$p$ will replace candidate~$p'$ in the committee\n if and only if $c^-(u)$ is replaced by the corresponding~$c^+(u)$ for each $u \\in U$.\n\n \\smallskip\n \\emph{Committee size and budget.}\\quad\n As already indicated in the description of the idea,\n we set the budget equal to the size~$h$ of the set cover\n and the committee size to~$|{\\ensuremath{{{\\mathcal{S}}}}}|+|U|+1$.\n\n Next, we discuss the voters of the election that allow us to implement the above idea.\n\n \\smallskip\n \\emph{Specifying the voters.}\\quad\n  Observe that for {Greedy-Approval-CC\\xspace} {\\textsc{Shift Bribery}\\xspace}, specifying\n  the set of approved candidates, the last-ranked approved candidate, that is,\n  the candidate at position~$t$, and the price for shifting the preferred\n  candidate~$p$ to position~$t$ completely describes the influence of a voter\n  to the unbribed and bribed election:\n  Shifting~$p$ to any position greater than~$t$ will not change the score of\n  any candidate in any step of {Greedy-Approval-CC\\xspace}.\n  Shifting~$p$ to some position $\\le t$ will increase the score of~$p$ by one\n  and decrease the score of the last-ranked approved candidate by one---independently\n  how far beyond position~$t$ we shift~$p$.\n  Hence, for each voter we simply say which important candidates this voter approves,\n  which candidate among the approved candidates is ranked last, and\n  the price of moving~$p$ the the first approved position.\n\n \\smallskip\n \\emph{The voters.}\\quad\n The set of voters contains $|{\\ensuremath{{{\\mathcal{S}}}}}|$~many \\emph{${\\ensuremath{{{\\mathcal{S}}}}}$-voters},\n $|{\\ensuremath{{{\\mathcal{S}}}}}|\\cdot|U|$~many \\emph{${\\ensuremath{{{\\mathcal{S}}}}}$-$U$-voters}, and\n $|U|$~many $U$-voters:\n \\begin{itemize}\n  \\item For each set~$S \\in {\\ensuremath{{{\\mathcal{S}}}}}$ there is one\n        $S$-voter that approves~$c^-(S)$ (and some dummy candidates)\n        such that it costs one to disapprove~$c^-(S)$ but approve~$p$ instead.\n  \\item For each set~$S \\in {\\ensuremath{{{\\mathcal{S}}}}}$ and element~$u \\in U$ there is one\n        $S$-$u$-voter that approves~$c^-(u)$ only if $u \\in S$ and that\n        approves approves~$c^+(S)$ (and some dummy candidates) in any case.\n  \\item For each element~$u \\in U$ there is one\n        $u$-voter that approves~$p'$ and $c^+(u)$.\n \\end{itemize}\n There are further auxiliary voters that allow us to appropriately set\n the number of approvals for each candidate:\n \\begin{itemize}\n  \\item For each $S_j \\in {\\ensuremath{{{\\mathcal{S}}}}}$ there are $|{\\ensuremath{{{\\mathcal{S}}}}}|^5\\cdot|U|^5-j$ voters\n        that approve~$c^-(S)$ and~$c^+(S)$ (and some dummy candidates)\n        and $|U|-1$~voters that only approve~$c^-(S)$ (and some dummy\n        candidates).\n  \\item For each $u_i \\in U$ there are $|{\\ensuremath{{{\\mathcal{S}}}}}|^4\\cdot|U|^4-i$ voters\n        that approve~$c^-(u)$ and~$c^+(u)$ (and some dummy candidates)\n        and $|\\{S \\in {\\ensuremath{{{\\mathcal{S}}}}} \\mid u_i \\in S\\}|-1$ voters that only approve~$c^+(u)$\n        (and some dummy candidates). \n        \n  \\item There are $|{\\ensuremath{{{\\mathcal{S}}}}}|^2\\cdot|U|^2$ voters\n        that approve~$p$ and~$p'$ (and some dummy candidates) and\n        $h-1$~voters that only approve~$p'$ (and some dummy candidates).\n \\end{itemize}\n Except for the ${\\ensuremath{{{\\mathcal{S}}}}}$-voters, it is too expensive to bribe some voter\n with the effect that~$p$ is approved instead of some other candidate.\n This can be easily implemented by putting~$p$ more than budget many\n positions behind the last approved candidate.\n\n This construction can clearly be computed in polynomial time\n and our parameter, the number of unit shifts, which is upper bounded by the budget,\n is identical to the set cover size~$h$.\n Before we prove the correctness of the reduction,\n let us briefly discuss (properties of) the unbribed election.\n\n \\smallskip\n \\emph{Scores, ties, and the unbribed election.}\\quad\n First, consider the scores of the candidates in the very first\n round of the voting rule which are as follows.\n \\begin{itemize}\n  \\item Both, candidate~$c^-(S_j)$ and candidate~$c^+(S_j)$ have\n        $|{\\ensuremath{{{\\mathcal{S}}}}}|^5\\cdot|U|^5-j + |U|$ approvals.\n  \\item Both candidate~$c^-(u_i)$ and candidate~$c^+(u_i)$ have\n        $|{\\ensuremath{{{\\mathcal{S}}}}}|^4\\cdot|U|^4-i + |\\{S \\in {\\ensuremath{{{\\mathcal{S}}}}} \\mid u_i \\in S\\}|$ approvals.\n  \\item Candidate~$p'$ has\n        $|{\\ensuremath{{{\\mathcal{S}}}}}|^2\\cdot|U|^2 + |U|+ h-1$ approvals.\n  \\item Candidate~$p$ has\n        $|{\\ensuremath{{{\\mathcal{S}}}}}|^2\\cdot|U|^2$ approvals.\n \\end{itemize}\n We assume that candidate~$c^-(\\cdot)$ is always preferred to candidate~$c^+(\\cdot)$\n and candidate~$p'$ to candidate~$p$ by the tie-breaking of {Greedy-Approval-CC\\xspace}.\\footnote{The\n reduction can be adapted to work for any tie-breaking.}\n\n It is easy to verify that in the unbribed election the candidates will join the committee\n in the following order: $c^-(S_1),c^-(S_2),\\dots,c^-(S_s),c^-(u_1),c^-(u_2),\\dots,c^-(u_r)$\n and finally~$p'$.\n To see this, observe that each pair of candidates~$c^-(\\cdot)$ and~$c^+(\\cdot)$ is approved\n by almost the same set of candidates.\n As soon as one of~$c^-(\\cdot)$ and~$c^+(\\cdot)$ joins the committee, the other loses\n nearly all approvals and has no chance to join into the committee.\n \n \\smallskip\n \\emph{The possible impact of shift actions.}\\quad\n The only shift actions with any effect that can be performed within the given budget~$B=h$\n are to shift~$p$ forward in the preference lists of up to~$h$ set voters.\n Let $c^-(S_{j_1}),\\dots,c^-(S_{j_h})$ be the candidates that were originally approved\n by the bribed voters instead of approving~$p$.\n We call ${\\ensuremath{{{\\mathcal{S}}}}}^*:=\\{S_{j_1},S_{j_2},\\dots,S_{j_h}\\}$ the \\emph{selected sets}.\n Applying the corresponding shift actions will decrease the score of each candidate\n $c^-(S_{j_\\ell}), 1 \\le \\ell \\le h$, by one and increase the score of~$p$ by~$h$.\n It is easy to verify that, in effect, for each $1 \\le \\ell \\le h$,\n {Greedy-Approval-CC\\xspace} will select $c^+(S_{j_\\ell})$ instead of $c^-(S_{j_\\ell})$\n to join the committee.\n Now, observe that for each $u \\in S_{j_\\ell}$, there is one voter that approves\n $c^+(S_{j_\\ell})$ and $c^-(u)$.\n This means that the score of each~$c^-(u)$ for $u \\in \\bigcup_{S \\in {\\ensuremath{{{\\mathcal{S}}}}}^*}S$\n is decreased by at least one after the first~$|{\\ensuremath{{{\\mathcal{S}}}}}|$ candidates joined the committee.\n Hence, if $c^+(S_{j_\\ell})$ joins the committee instead of $c^+(S_{j_\\ell})$, then\n also~$c^+(u)$ joins instead of~$c^-(u)$.\n Finally, observe that, after $s+r$ candidates joined the committee, the score of~$p'$\n is decreased by the number of candidates~$c^+(u)$ that joined the committee instead\n of $c^-(u)$.\n\n \\smallskip\n \\emph{Correctness.}\\quad\n We show that there is a subset of $h$~sets from~${\\ensuremath{{{\\mathcal{S}}}}}$ whose union is~$U$\n if and only if there is a successful set of shift actions of cost~$h$.\n\n For the ``only if'' case, assume that there is a set ${\\ensuremath{{{\\mathcal{S}}}}}' \\subseteq {\\ensuremath{{{\\mathcal{S}}}}}$ of\n $h$~sets whose union is~$U$.\n Then, bribing the $S$-voter for each~$S\\in {\\ensuremath{{{\\mathcal{S}}}}}'$ to approve~$p$ instead of~$c^-(S)$\n costs~$h$ and successfully makes~$p$ a winner:\n From the above discussion about the impact of shift actions, we can immediately infer\n that the score of each candidate~$c^-(u),u \\in U$, is decreased by one and, hence,\n the score of~$p'$ is decreased by~$|U|$.\n Furthermore, the score of~$p$ was increased by~$h$.\n Thus, $p$~has score $|{\\ensuremath{{{\\mathcal{S}}}}}|^2\\cdot|U|^2 + h$ whereas~$p'$ has score $|{\\ensuremath{{{\\mathcal{S}}}}}|^2\\cdot|U|^2 + h-1$.\n This means that~$p$ joins the committee in the last round of {Greedy-Approval-CC\\xspace}.\n\n For the ``if'' case, assume that there is a set of shift actions with costs~$h$ that\n makes $p$~join the committee.\n Since $p$~can gain at most~$h$ points, $p'$ has to lose at least~$|U|$ points.\n However, the only (important) candidates that are approved together with~$p'$\n by some voters are the element candidates~$c^+(u),u \\in U$.\n To decrease the score of~$p'$ by~$|U|$, all these candidates $c^+(u),u \\in U$,\n must join the committee instead of $c^-(u),u \\in U$.\n From the above discussion about the impact of shift actions, we can infer\n that the union of the selected set is~$U$.\n\n \\smallskip\n \\emph{Inapproximability.}\\quad\n By a slight adaption of the above construction \n we can conclude (fixed-parameter) inapproximability:\n First, ensure that even within a budget of~$\\alpha \\cdot B$, one\n can only afford to bribe the set voters.\n This can be reached by putting $(\\alpha+1)\\cdot B$ dummy candidates\n between~$p$ and the first approved candidate for all but the set voters.\n Second, introduce another pair of important candidates~$d$ and~$d'$\n and let the set voters additionally approve~$d$.\n Introduce $|{\\ensuremath{{{\\mathcal{S}}}}}|^3\\cdot|U|^3$ voters\n that approve~$d$ and~$d'$ (and some dummy candidates) and\n $|S|-h$~voters that only approve~$d'$ (and some dummy candidates).\n Introduce $|{\\ensuremath{{{\\mathcal{S}}}}}|\\cdot|U|$ voters\n that approve~$p'$ and~$d$ (and some dummy candidates)\n and further $|{\\ensuremath{{{\\mathcal{S}}}}}|\\cdot|U|$ voters\n that only approve~$d'$ (and some dummy candidates).\n Increase the committee size by one.\n\n The first $|{\\ensuremath{{{\\mathcal{S}}}}}|+|U|$ rounds of the {Greedy-Approval-CC\\xspace} procedure\n clearly work analogously to the original construction.\n As long as less than~$h$ set voters are bribed,\n candidate~$d$ will join the committee in round~$|{\\ensuremath{{{\\mathcal{S}}}}}|+|U|+1$.\n (We assume that {Greedy-Approval-CC\\xspace} prefers $d$ to $d'$ when there is a tie.)\n Then, candidate~$d'$ loses almost all points and has no chance to join the committee\n and candidate~$p'$ loses all additional approvals (introduced by the extension\n of the construction).\n That is, the last round works analogously to the original construction.\n However, if one bribes more than~$h$ set voters, then candidate~$d'$  will join the\n committee in round~$|{\\ensuremath{{{\\mathcal{S}}}}}|+|U|+1$, $p'$~keeps the additionally introduced approvals,\n and $p$~has no chance to join the committee in the last round.\n\n It follows that, even with a budget of~$\\alpha\\cdot B$, one can only make~$p$\n become member of a winning committee if one selects a subset of at most~$h$\n sets from~${\\ensuremath{{{\\mathcal{S}}}}}$ whose union is~$U$.\n\n\n\n\n\n\n\n\n\n\n  \\paragraph{Greedy-Borda-CC.}\n  We give a reduction from the {\\textsc{Set Cover}\\xspace} problem.\n  The basic idea of the construction is very similar to that in the\n  proof for Greedy-Approval-CC.\n  However, to implement this idea, we also use some concepts from\n  the proof of \\autoref{thm:greedy-borda-cc-inapprox}.\n  To this and, we use the same\n  notational conventions as in the proof of\n  \\autoref{thm:greedy-borda-cc-inapprox}, and we use the bar\n  candidate in the same way.\n\n  Given an instance $({\\ensuremath{{{\\mathcal{S}}}}},U,h)$ of {\\textsc{Set Cover}\\xspace}\n  with ${\\ensuremath{{{\\mathcal{S}}}}} = (S_1, \\ldots, S_s)$ denoting the given sets over\n  the universe~$U =\\{u_1, \\ldots, u_r\\}$,\n  we construct a {Greedy-Borda-CC\\xspace} {\\textsc{Shift Bribery}\\xspace} instance as follows.\n\n  We form the following set of candidates:\n  \\begin{enumerate} \n  \\item We introduce the preferred candidate $p$, his or her opponent\n    $p'$, and the bar candidate.\n\n\n\n  \\item For each set $S_i \\in {\\ensuremath{{{\\mathcal{S}}}}}$, we introduce two candidates $c^-(S_i)$ and $c^+(S_i)$.\n  \\item For each element $u_j \\in U$, we introduce candidates $c^-(u_j)$\n    and $c^+(u_j)$.\n  \\item We introduce sufficiently many dummy candidates.\n  \\end{enumerate}\n  \n  \n  \n\n  Let $N$, $T_s$, $T_u$, and $T_p$ be some sufficiently large numbers\n  such that $N$ is much larger than $T_s$, $T_s$ is much larger than\n  $T_u$, and $T_u$ is much larger than $T_p$ (we will specify their\n  values later).  We introduce the following voters:\n  \\begin{enumerate}\n  \\item For each set $S_i \\in {\\ensuremath{{{\\mathcal{S}}}}}$, we introduce two \\emph{set-score\n    voters} with preference orders\n    \n", "index": 37, "text": "\\begin{align*}\n\n\n      c^-(S_i) {\\succ} c^+(S_i) {\\succ} [N\\cdot(T_s-i)] {\\succ} b, \\\\\n      c^+(S_i) {\\succ} c^-(S_i) {\\succ} [N\\cdot(T_s-i)] {\\succ} b.\n    \\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex26.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle\\par&#10;\\par&#10; c^{-}(S_{i}){\\succ}c^{+}(S_{i}){\\succ}[N\\cdot(T_{s}-i)%&#10;]{\\succ}b,\" display=\"inline\"><mrow><mrow><mrow><msup><mi>c</mi><mo>-</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><msup><mi>c</mi><mo>+</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>N</mi><mo>\u22c5</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>T</mi><mi>s</mi></msub><mo>-</mo><mi>i</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">]</mo></mrow><mo>\u227b</mo><mi>b</mi></mrow><mo>,</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex27.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle c^{+}(S_{i}){\\succ}c^{-}(S_{i}){\\succ}[N\\cdot(T_{s}-i)]{\\succ}b.\" display=\"inline\"><mrow><mrow><mrow><msup><mi>c</mi><mo>+</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><msup><mi>c</mi><mo>-</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>N</mi><mo>\u22c5</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>T</mi><mi>s</mi></msub><mo>-</mo><mi>i</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">]</mo></mrow><mo>\u227b</mo><mi>b</mi></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n\n  \\item For each element $u_j \\in U$, we introduce two \\emph{element-score\n    voters} with preference orders:\n    \n", "itemtype": "equation", "pos": 87718, "prevtext": " Further, for each set we introduce two \\emph{set-selection\n    voters} with preference orders \n    \n", "index": 39, "text": "\\begin{align*}\n    c^-(S_i) {\\succ} p {\\succ} b,\\\\\n    c^+(S_i) {\\succ} [1] {\\succ} b.\n    \\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex28.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle c^{-}(S_{i}){\\succ}p{\\succ}b,\" display=\"inline\"><mrow><mrow><mrow><msup><mi>c</mi><mo>-</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mi>p</mi><mo>\u227b</mo><mi>b</mi></mrow><mo>,</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex29.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle c^{+}(S_{i}){\\succ}[1]{\\succ}b.\" display=\"inline\"><mrow><mrow><mrow><msup><mi>c</mi><mo>+</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><mo>\u227b</mo><mi>b</mi></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": "\n\n\n  \\item For each $u_j \\in U$, we introduce a \\emph{verification voter} $c^+(u_j)\n    {\\succ} p' {\\succ} b$.\n\n\n  \\item For each element $u_j \\in U$, and each set $S_i \\in {\\ensuremath{{{\\mathcal{S}}}}}$\n    such that $u_j \\in S_i$, we introduce a \\emph{covering voter} with\n    preference order:\n   \n", "itemtype": "equation", "pos": 87938, "prevtext": "\n\n  \\item For each element $u_j \\in U$, we introduce two \\emph{element-score\n    voters} with preference orders:\n    \n", "index": 41, "text": "\\begin{align*}\n       c^-(u_j) {\\succ} c^+(u_j) {\\succ} [N\\cdot(T_u-j)] {\\succ} b, \\\\\n       c^+(u_j) {\\succ} c^-(u_j) {\\succ} [N\\cdot(T_u-j)] {\\succ} b.\n    \\end{align*}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex30.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle c^{-}(u_{j}){\\succ}c^{+}(u_{j}){\\succ}[N\\cdot(T_{u}-j)]{\\succ}b,\" display=\"inline\"><mrow><mrow><mrow><msup><mi>c</mi><mo>-</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>u</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><msup><mi>c</mi><mo>+</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>u</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>N</mi><mo>\u22c5</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>T</mi><mi>u</mi></msub><mo>-</mo><mi>j</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">]</mo></mrow><mo>\u227b</mo><mi>b</mi></mrow><mo>,</mo></mrow></math>\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex31.m1\" class=\"ltx_Math\" alttext=\"\\displaystyle c^{+}(u_{j}){\\succ}c^{-}(u_{j}){\\succ}[N\\cdot(T_{u}-j)]{\\succ}b.\" display=\"inline\"><mrow><mrow><mrow><msup><mi>c</mi><mo>+</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>u</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><msup><mi>c</mi><mo>-</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>u</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><mo stretchy=\"false\">[</mo><mrow><mi>N</mi><mo>\u22c5</mo><mrow><mo stretchy=\"false\">(</mo><mrow><msub><mi>T</mi><mi>u</mi></msub><mo>-</mo><mi>j</mi></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">]</mo></mrow><mo>\u227b</mo><mi>b</mi></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01492.tex", "nexttext": " Further, for each candidate $c \\in U\n    \\cup \\{c^-(S_1), c^+(S_1)$, $\\ldots, c^-(S_s), c^+(S_s)\\}$, we introduce\n    exactly so many \\emph{filler voters} with preference orders of the form $c {\\succ} b$,\n    so that, relative to $b$, all these candidates receive the same score from\n    the verification, covering, and filler voters (taken together).\n\n  \\item We introduce two \\emph{$p$/$p'$-score voters} with preference orders\n    $p' {\\succ} [N\\cdot(T_p) + h] {\\succ} b$ and $p {\\succ} [N\\cdot(T_p)] {\\succ}\n    b$.\n\n  \\item Let $H$ be the number of voters introduced so far (clearly,\n    $H$ is polynomially upper-bounded in the size of the input instance). We\n    introduce $H+1$ pairs of voters with preference orders $b {\\succ} C\n    \\setminus \\{b\\}$ and $b {\\succ} {\\overleftarrow{{C \\setminus \\{b\\}}}}$. We\n    refer to these voters as the \\emph{bar-score voters}.\n  \\end{enumerate}\n\n  We set the committee size to be $1 + s + r +1$, and we set the\n  budget $B = h$. We use unit price functions. The internal\n  tie-breaking is such that $p$ precedes $p'$, for each $S_i \\in\n  {\\ensuremath{{{\\mathcal{S}}}}}$, $c^-(S_i)$ precedes~$c^+(S_i)$, and for each $u_j \\in U$,\n  $c^-(u_j)$ precedes~$c^+(u_j)$.\n\n  The correctness proof works analogous to that for {Greedy-Approval-CC\\xspace}.\n  To see this, let us now analyze how {Greedy-Borda-CC\\xspace} proceeds on the\n  just-constructed election.  As in the proof of\n  \\autoref{thm:greedy-borda-cc-inapprox}, it is clear that in the\n  first iteration it picks $b$.  Due to the values of $N$ and $T_s$, in\n  the next $s$ iterations, for each $S_i \\in {\\ensuremath{{{\\mathcal{S}}}}}$, Greedy-Borda-CC\n  either adds $c^-(S_i)$ to the committee or it adds $c^+(S_i)$ to the\n  committee. With a shift action of cost $h$---by shifting $p$ forward\n  in the votes of the set-selection voters---we can select which $h$\n  of the $c^+(S_i)$ candidates are introduced into the committee (indeed,\n  we need to introduce~$h$ for them to increase $p$'s score---in the final\n  iteration---by~$h$). \n  \n\n  In the next $r$ iterations, for each $j$ Greedy-Borda-CC picks\n  either $c^-(u_j)$ or $c^+(u_j)$. It is easy to verify that it picks exactly\n  those $c^+(u_j)$ candidates for which in the preceding iterations it has\n  picked at least one candidate $c^+(S_i)$ such that $u_j \\in S_i$.\n\n  In the final iteration, Greedy-Borda-CC either picks~$p$ or~$p'$. It\n  picks the former one exactly if it managed to pick $h$ candidates\n  from ${\\ensuremath{{{\\mathcal{S}}}}}':=\\{c^+(S_{j_1}), \\ldots, c^+(S_{j_h})\\}$ and all candidates $c^+(u_j)$\n  (since then $p$ gains additional~$h$ points\n  \n  and $p'$ loses all points from the\n  verification voters; $p$ wins due to tie-breaking). This happens if\n  and only if we applied a shift action that ensured selection of\n  those $h$ of the $c^+(S_i)$ candidates that correspond to a set cover,\n  that is, $\\bigcup_{S\\in{\\ensuremath{{{\\mathcal{S}}}}}'}S=U$.\n\n  To complete the proof for the {Greedy-Borda-CC\\xspace} case, we need to pick the\n  values of $N$, $T_s$,  $T_u$, and $T_p$.\n  It is easy to see that the values $T_p = (r\\cdot s \\cdot h)^3$,\n  $T_u = T_p^3$, $T_s = T_u^3$, and $N = T_s^3$ suffice.\n\n  This proves ${\\ensuremath{\\mathrm{W[2]}}}$-hardness of \\textsc{Shift-Bribery} for\n  Greedy-Borda-CC.\n  To see the inapproximability result, one can use an extension to\n  the construction that works analogously to the extension in the\n  proof for {Greedy-Approval-CC\\xspace}.\n\n\\end{proof}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n\n\n\n\n\n\n\n\n\\section{Conclusion}\n\\label{sec:conclusion}\n\nWe studied the complexity of \\textsc{Shift Bribery} for two families\nof multiwinner rules: SNTV, Bloc, and $k$-Borda, which \npick $k$ best candidates according to appropriate single-winner\nscoring rules, and the Chamberlin-Courant family of rules and their\napproximate variants, which focus on providing good representatives.\n\nWhile we have shown low complexity for SNTV and Bloc\n\n\n(just like for the single-winner rules on which they are based), we\nhave shown that \\textsc{Shift Bribery} is significantly harder to\nsolve for $k$-Borda than for its single-winner variant, Borda. The\nsituation is even more dramatic for the Chamberlin-Courant family of\nrules, where in addition to ${\\ensuremath{\\mathrm{W[1]}}}$- and ${\\ensuremath{\\mathrm{W[2]}}}$-hardness results, we\nalso obtain inapproximability results.\n\n\nWe focused on the case where we want to ensure a candidate's\nmembership in \\emph{some} winning committee; it would also be natural\nto require membership in \\emph{all} winning committees.  In fact,\nall our results hold in this model as well. Below we briefly explain why this\nis so for the tractability results (for the intractability ones, it\nrequires minor tweaks).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor the tractability results with respect to the \\emph{number of candidates}\nthis can be seen as follows.\n\\begin{itemize}\n \\item\nFor {SNTV\\xspace}, {Bloc\\xspace}, and {$k$-Borda\\xspace}, we can ensure in our ILP formulations\nthat the score of~$p$ is strictly greater than the score of the\ncandidates which are not part of the committee.\n \\item\nFor the round-based rules, the committee is always unique and, hence,\nour results already apply.\n \\item\nFor the CC rules, we can build upon the maximum matching\nalgorithm of \\citet{BSU13} (trying matchings where~$p$ is already\nmatched to one part of the voters, and other ones, where~$p$ is not\nmatched at all).\n\\end{itemize}\n\nFor the tractability results with respect to the \\emph{number of voters}\nor \\emph{number of shifts}, our algorithms basically try all bribed\nelections where~$p$ is in at least one winning committee (except for\nthe FPT-AS, where we overshoot; due to monotonicity, this does not\nhurt). Then, for each bribed election we can adopt the \\textsc{Winner Determination}\nalgorithm of \\citet[Proposition 1]{BSU13} that partitions the voters into groups of\nvoters with the same representative and checks whether~$p$ is part of all cheapest\nmatchings of representatives to candidates (basically checking all possible partitions).\n\nPutting an even more demanding bribery goal of involving more than one candidate\nto become part of the winning committee(s) is left to future studies.\nAreas of future research also include studying bribery problems for\nmultiwinner settings with partial preference orders and studying\nmultiwinner rules based on the Condorcet criterion.\nFurthermore, our fixed-parameter algorithms with respect to the parameter\nnumber of candidates rely on integer linear programming formulations.\nIt seems challenging to replace these algorithms by direct combinatorial\nalgorithms that give us a better understanding of the problems and\npotentially better running times.\nThis refers to a general challenge in context of parameterized algorithms\nfor Computation Social Choice problem~\\cite[Key question 1]{BCFGNW14}.\n\n\\section{Acknowledgments}\nThe authors were supported in part by the DFG project PAWS (NI\n369/10), the NCN project DEC-2012/06/M/ST1/00358.\nNimrod Talmon was supported by the DFG Research Training Group MDS (GRK 1408).\nPiotr Faliszewski's visit to TU Berlin was supported by the COST action IC1205.\n\n\n\n\n\n\n\n\n\n\n\n\n{\\small\n\\bibliographystyle{abbrvnat}\n\\bibliography{bibliography}\n}\n\n\n\n", "itemtype": "equation", "pos": -1, "prevtext": "\n\n\n  \\item For each $u_j \\in U$, we introduce a \\emph{verification voter} $c^+(u_j)\n    {\\succ} p' {\\succ} b$.\n\n\n  \\item For each element $u_j \\in U$, and each set $S_i \\in {\\ensuremath{{{\\mathcal{S}}}}}$\n    such that $u_j \\in S_i$, we introduce a \\emph{covering voter} with\n    preference order:\n   \n", "index": 43, "text": "\\[ c^+(S_i) {\\succ} c^-(u_j) {\\succ} b. \\]\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex32.m1\" class=\"ltx_Math\" alttext=\"c^{+}(S_{i}){\\succ}c^{-}(u_{j}){\\succ}b.\" display=\"block\"><mrow><mrow><mrow><msup><mi>c</mi><mo>+</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mrow><msup><mi>c</mi><mo>-</mo></msup><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>u</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mrow></mrow><mo>\u227b</mo><mi>b</mi></mrow><mo>.</mo></mrow></math>", "type": "latex"}]