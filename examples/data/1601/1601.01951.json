[{"file": "1601.01951.tex", "nexttext": "\nwhere $u$ is an input index indicating prime order from beginning ($u = 1,2, \\ldots, 30\\,000\\,000$) and $y$ is $u$--th prime number. Obviously, $2=p(1)$, $29=p(10)$, $541=p(100)$, $7\\,919=p(1\\,000)$, $15\\,485\\,863=p(1\\,000\\,000)$ etc. Relation (\\ref{primeprocess}) is called {\\it prime process}. This process assigns some prime number to each natural index--order $u$, i.e. a one--to--one correspondence between the finite set of natural order indexes and the finite set of primes is set up.\\\\\n\\\\\nIn the automatic control, it is usual to first deal with the process gain $K$. A quick view of the static characteristics of the prime process given in Fig. \\ref{statchar} indicates that it corresponds to a nearly linear process. An analysis of the values above, however, maintains a distinctive style, since $ p(1) / 1 = 2$, $p(10) / 10 = 2.9$, $p(100) / 100 = 5.41 $, $p(1\\,000) / 1 \\, 000 = 7.919$, $p(1 \\, 000 \\, 000) / 1 \\, 000 \\, 000 = 15.485863$ etc. Prime process gain grows steadily even though from one million of primes very slightly. Actual gain for the first $20$ millions of primes is shown in Fig. \\ref{gain}. The latter confirms a nonlinear dependence specifically in the process beginning. Note, that the average gain of the prime process approximately is $K =  18$.\n\n\\begin{figure}[htb]\n\\centering\n\\includegraphics[scale=0.7]{scharprimes.eps}\n\\caption{\\small Static characteristics of the prime process.}\n\\label{statchar}\n\\end{figure}\n\n\\begin{figure}[htb]\n\\centering\n\\includegraphics[scale=0.7]{gainprimes.eps}\n\\caption{\\small Gain of the prime process.}\n\\label{gain}\n\\end{figure}\n\n\\vspace{0.3cm}\\noindent From the theory of prime numbers it is known \\cite{cogu} that for $u$--th prime number $p (u)$ is $p(u) \\sim u\\ln u$. Hence, the relation $K(u) \\sim \\ln u$ is easily obtained for the corresponding actual gain. Notation $\\sim$ denotes asymptotic equality, i.e. $\\lim_ {u \\rightarrow \\infty} K (u) / \\ln u = 1$. In other words, for a sufficiently large $u$, there is possible to substitute $K (u)$ by $\\ln u $. In the case of $u = 30 \\, 000 \\, 000$, $ K (u) = p (30 \\, 000 \\, 000) / 30 \\, 000 \\, 000 = 19.1$ and $ \\ln (30 \\, 000 \\, 000) = 17.2$ which indicates $10\\%$ error. According to the updated asymptotic estimate $ p (u) \\sim u  \\ln u + u [\\ln \\ln u-1] $ is $ K (u) \\sim \\ln u + \\ln \\ln u  -1$ which relates to the refined estimate of $ K (30 \\, 000 \\, 000) $ in the form $ \\ln (30 \\, 000 \\, 000) + \\ln \\ln (30 \\, 000 \\, 000) -1 = 19.06$. The latter nearly presents the gain accurate value.  \\\\  \n\\\\\nNote that time constants of processes represent another common parameter. Prime process is static, in that case, therefore, the time constant stays zero.\n\n\\section{Use of I algorithm}   \n\n\\vspace{0.3cm}\\noindent Consider a preselected prime number $y$. The objective is to find a prime process input $u$ associated with the prime $y$. In order to show that it is not a trivial task, try out a series of manual searches. Consider more carefully the preselected prime e.g. $ y = 141 \\, 661 \\ 147 = p (u=?)$ where the input index is not a priori known. Manual control of the trained author can be represented by the following sequence of $10$ steps (initial state is determined by $ u (0) = 1 $ and $ y (0) = 2 $): \n\n\\begin{itemize}\n\\item $u(1)=10\\,000\\,000$, $y(1)=179\\,424\\,673$ \n\\item $u(2)=9\\,000\\,000$, $y(2)=160\\,481\\,183$\n\\item $u(3)=8\\,000\\,000$, $y(3)=141\\,650\\,939$\n\\item $u(4)=8\\,000\\,200$, $y(4)=141\\,654\\,581$\n\\item $u(5)=8\\,000\\,400$, $y(5)=141\\,658\\,373$\n\\item $u(6)=8\\,000\\,500$, $y(6)=141\\,660\\,191$\n\\item $u(7)=8\\,000\\,550$, $y(7)=141\\,661\\,081$\n\\item $u(8)=8\\,000\\,553$, $y(8)=141\\,661\\,129$\n\\item $u(9)=8\\,000\\,554$, $y(9)=141\\,661\\,139$\n\\item $u(10)=8\\,000\\,555$, $y(10)=141\\,661\\,147$\n\\end{itemize}  \nSearch sequence shows that the selected prime is $ 8 \\, 000 \\,  555$--th in the order from beginning. By other formulation $ 141 \\, 661 \\ 147 = p (8 \\, 000 \\, 555) $ or $8 \\, 000 \\, 555  = p^{-1} (141 \\, 661 \\ 147) $, where $p^{-1}(.)$ denotes inverse of prime process (\\ref{primeprocess}). Manual search is arduous since comparing large numbers and it very much depends on the estimate for the first order $u(1) $. Clearly, there can be used information about average gain in the prime process $ K = 18$. However, it does not reduce arduous work when comparing large numbers.\\\\\n\\\\\nBasic feedback layout for the automatic solution of similar task is shown in Fig. \\ref{fb}.  Schematically, the latter is equivalent to the classical feedback control incorporating a process and a controller. Set--point $w$ represents the preselected prime number whose index--order is requested to determine. Output of integral controller immediately acts on prime index--orders which results in a final balance determined by $y = w$.\n\n\\begin{figure}[hbt]\\begin{center}\n\\setlength{\\unitlength}{1mm}\n\n\\begin{picture}(155,80)\n\n\\thicklines \\put(35,40){\\framebox(23,15){I controller}}\n\\put(92,40){\\framebox(23,15){$p(u)$}} \\thinlines\n\n\\thicklines \\put(21,47.5){\\circle{8}}  \\thinlines\n\n\\put(1,47.5){\\vector(1,0){16}}\n\\put(25,47.5){\\vector(1,0){10}}\\put(58,47.5){\\vector(1,0){34}}\n\\put(115,47.5){\\vector(1,0){40}}\n\n\\put(1,49.5){\\makebox(0,0)[l]{\\small $w$}}\n\\put(67,49.5){\\makebox(0,0)[l]{\\small $u$}}\n\\put(149,49.5){\\makebox(0,0){\\small $y$}}\n\\put(13.5,49.5){\\makebox(0,0)[l]{\\small $+$}}\n\\put(16,41.5){\\makebox(0,0)[l]{\\small $-$}}\n\n\\put(141,47.5){\\line(0,-1){27.5}}\\put(141,47.5){\\circle*{0.5}}\n\\put(21,20){\\vector(0,1){23.5}} \\put(21,20){\\line(1,0){120}}\n\\end{picture}\n\\caption{Prime searches via feedback organization.} \\label{fb}\n\\end{center}\n\\end{figure} \n\n\\vspace{0.3cm}\\noindent Since the output of the I controller can generally produce real numbers and the prime process input considers natural numbers only, the controller output is adapted by rounding operation known as $u = floor(x)$ where $x$ is rounded to the nearest natural number lower or equal to $ x $. For example, $ 3 = floor (3.71) $ etc. Currently, $floor$ operations are routinely denoted by $ \\lfloor x \\rfloor$. \\\\\n\\\\\nIn this paper, integral control is based on the continuous--like case \\cite{sem}. If the I control is specifically represented by transfer function $ K_c / (T_i s) $ where $K_c$ is a controller gain and $T_i$ an integration time constant then the transfer function of the feedback arrangement according to Fig. \\ref {fb} will be\n\n\n", "itemtype": "equation", "pos": 3583, "prevtext": "\n\n\\begin{center}\n{\\LARGE\\bf Optimized Integral Controller Searching Prime Number Orders}\n\\end{center}\n\n\\vspace{0.1cm}\n\\begin{center}\n{\\it Petr Kl\\'{a}n, Dept. of System Analysis, University of Economics in Prague, Czech Republic, petr.klan@vse.cz}\n\\end{center}\n\n\\vspace{0.7cm}\n\\noindent\n{\\bf Abstract:} The concept of integration is generally applicable to automatic control of processes. As shown in this paper, integral controller performs efficient searches in the extensive prime sets, too. An inspiration by the simple analytic rules for PID controller tuning results in integral controller that ensures predictable work regardless of the cardinality of primes. It gives an innovative application of the feedback control which relates to a gradient method. \n\n\\vspace{1cm}\n\\noindent\n{\\bf Keywords:} PID control; Integral controller; Controller tuning; Static process; Table of primes\n\n\n\\section{Introduction}\n\n\\vspace{0.3cm}\\noindent Integral (shortened by I) part of PID (Proportional plus Integral plus Derivative) control of dynamic processes is one of the most frequently used components due to its ability to eliminate control errors \\cite{sem}. Much attention is therefore focused to its analytic tuning  as shown e.g. in \\cite{odw}. Simultaneously, I algorithm represents a dynamic process model. If I acts in the stage of a PID controller, it is possible to state that one dynamic process maintains another dynamic process. But can a dynamic process adjust a static process, which is the opposite of dynamic process?\\\\\n\\\\\nConversely, it is possible partially. It is the case where a static process (P controller) maintains the dynamic process. For non--integrating processes it is known that P controller decreases control errors, a complete elimination of the latters is possible only in singular cases of infinite proportional gains \\cite{kg1}. A similar function is performed by the so--called signal followers. Conversely, when I controller is used in adjusting of a static process, errors can be quickly eliminated due to integration effects as it can be easily derived.\\\\   \n\\\\\nA prime number is a natural number greater than $1$, that has no divisors others than $1$ and itself \\cite{cogu}. For example, number $17$ is the prime because it has only two divisors: numbers $1$ and $17$. Tables of primes are very frequent in history of numbers. Online tables on {\\it The Prime Pages} incorporate the first $50$ millions of primes as well as many research results in the subject of prime number theory. In this paper, a process with the first $30$ millions of primes will be used. Considering the prime process, the following objective will be formulated: design a controller such that for an arbitrarily selected prime a corresponding index--order will be determined via a good control manner. The latter includes fast searches with predictable number of steps at minimum changes consumed by searches \\cite{mmi}.\\\\\n\\\\\nThe static prime process is introduced and some properties from control point of view are established in the following. This process is represented by a single block having one input (natural index--order) and one output (associated prime). A concept of the feedback loop is then formed with presence of I controller in an incremental form. Adaptive tuning of this controller is proposed. It results in the effective searching of primes by the control of order indexes associated with these primes.   \n\n\\section{Prime Process}   \n\n\\vspace{0.3cm}\\noindent In order to form a static prime process, prime numbers are arranged into a countable array \n\n\n", "index": 1, "text": "\\begin{equation}\ny=p(u), \\label{primeprocess}\n\\end{equation}\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.E1.m1\" class=\"ltx_Math\" alttext=\"y=p(u),\" display=\"block\"><mrow><mrow><mi>y</mi><mo>=</mo><mrow><mi>p</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>u</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01951.tex", "nexttext": " \nwith the resulting closed--loop gain $1$ and the possibility of accelerating searches of prime numbers by decreasing integration constant $T_i $  (under simplification of $ K_c = 1 $). \\\\ \n\\\\\nIntegral algorithm is used in a conventional incremental form\n\n\n", "itemtype": "equation", "pos": -1, "prevtext": "\nwhere $u$ is an input index indicating prime order from beginning ($u = 1,2, \\ldots, 30\\,000\\,000$) and $y$ is $u$--th prime number. Obviously, $2=p(1)$, $29=p(10)$, $541=p(100)$, $7\\,919=p(1\\,000)$, $15\\,485\\,863=p(1\\,000\\,000)$ etc. Relation (\\ref{primeprocess}) is called {\\it prime process}. This process assigns some prime number to each natural index--order $u$, i.e. a one--to--one correspondence between the finite set of natural order indexes and the finite set of primes is set up.\\\\\n\\\\\nIn the automatic control, it is usual to first deal with the process gain $K$. A quick view of the static characteristics of the prime process given in Fig. \\ref{statchar} indicates that it corresponds to a nearly linear process. An analysis of the values above, however, maintains a distinctive style, since $ p(1) / 1 = 2$, $p(10) / 10 = 2.9$, $p(100) / 100 = 5.41 $, $p(1\\,000) / 1 \\, 000 = 7.919$, $p(1 \\, 000 \\, 000) / 1 \\, 000 \\, 000 = 15.485863$ etc. Prime process gain grows steadily even though from one million of primes very slightly. Actual gain for the first $20$ millions of primes is shown in Fig. \\ref{gain}. The latter confirms a nonlinear dependence specifically in the process beginning. Note, that the average gain of the prime process approximately is $K =  18$.\n\n\\begin{figure}[htb]\n\\centering\n\\includegraphics[scale=0.7]{scharprimes.eps}\n\\caption{\\small Static characteristics of the prime process.}\n\\label{statchar}\n\\end{figure}\n\n\\begin{figure}[htb]\n\\centering\n\\includegraphics[scale=0.7]{gainprimes.eps}\n\\caption{\\small Gain of the prime process.}\n\\label{gain}\n\\end{figure}\n\n\\vspace{0.3cm}\\noindent From the theory of prime numbers it is known \\cite{cogu} that for $u$--th prime number $p (u)$ is $p(u) \\sim u\\ln u$. Hence, the relation $K(u) \\sim \\ln u$ is easily obtained for the corresponding actual gain. Notation $\\sim$ denotes asymptotic equality, i.e. $\\lim_ {u \\rightarrow \\infty} K (u) / \\ln u = 1$. In other words, for a sufficiently large $u$, there is possible to substitute $K (u)$ by $\\ln u $. In the case of $u = 30 \\, 000 \\, 000$, $ K (u) = p (30 \\, 000 \\, 000) / 30 \\, 000 \\, 000 = 19.1$ and $ \\ln (30 \\, 000 \\, 000) = 17.2$ which indicates $10\\%$ error. According to the updated asymptotic estimate $ p (u) \\sim u  \\ln u + u [\\ln \\ln u-1] $ is $ K (u) \\sim \\ln u + \\ln \\ln u  -1$ which relates to the refined estimate of $ K (30 \\, 000 \\, 000) $ in the form $ \\ln (30 \\, 000 \\, 000) + \\ln \\ln (30 \\, 000 \\, 000) -1 = 19.06$. The latter nearly presents the gain accurate value.  \\\\  \n\\\\\nNote that time constants of processes represent another common parameter. Prime process is static, in that case, therefore, the time constant stays zero.\n\n\\section{Use of I algorithm}   \n\n\\vspace{0.3cm}\\noindent Consider a preselected prime number $y$. The objective is to find a prime process input $u$ associated with the prime $y$. In order to show that it is not a trivial task, try out a series of manual searches. Consider more carefully the preselected prime e.g. $ y = 141 \\, 661 \\ 147 = p (u=?)$ where the input index is not a priori known. Manual control of the trained author can be represented by the following sequence of $10$ steps (initial state is determined by $ u (0) = 1 $ and $ y (0) = 2 $): \n\n\\begin{itemize}\n\\item $u(1)=10\\,000\\,000$, $y(1)=179\\,424\\,673$ \n\\item $u(2)=9\\,000\\,000$, $y(2)=160\\,481\\,183$\n\\item $u(3)=8\\,000\\,000$, $y(3)=141\\,650\\,939$\n\\item $u(4)=8\\,000\\,200$, $y(4)=141\\,654\\,581$\n\\item $u(5)=8\\,000\\,400$, $y(5)=141\\,658\\,373$\n\\item $u(6)=8\\,000\\,500$, $y(6)=141\\,660\\,191$\n\\item $u(7)=8\\,000\\,550$, $y(7)=141\\,661\\,081$\n\\item $u(8)=8\\,000\\,553$, $y(8)=141\\,661\\,129$\n\\item $u(9)=8\\,000\\,554$, $y(9)=141\\,661\\,139$\n\\item $u(10)=8\\,000\\,555$, $y(10)=141\\,661\\,147$\n\\end{itemize}  \nSearch sequence shows that the selected prime is $ 8 \\, 000 \\,  555$--th in the order from beginning. By other formulation $ 141 \\, 661 \\ 147 = p (8 \\, 000 \\, 555) $ or $8 \\, 000 \\, 555  = p^{-1} (141 \\, 661 \\ 147) $, where $p^{-1}(.)$ denotes inverse of prime process (\\ref{primeprocess}). Manual search is arduous since comparing large numbers and it very much depends on the estimate for the first order $u(1) $. Clearly, there can be used information about average gain in the prime process $ K = 18$. However, it does not reduce arduous work when comparing large numbers.\\\\\n\\\\\nBasic feedback layout for the automatic solution of similar task is shown in Fig. \\ref{fb}.  Schematically, the latter is equivalent to the classical feedback control incorporating a process and a controller. Set--point $w$ represents the preselected prime number whose index--order is requested to determine. Output of integral controller immediately acts on prime index--orders which results in a final balance determined by $y = w$.\n\n\\begin{figure}[hbt]\\begin{center}\n\\setlength{\\unitlength}{1mm}\n\n\\begin{picture}(155,80)\n\n\\thicklines \\put(35,40){\\framebox(23,15){I controller}}\n\\put(92,40){\\framebox(23,15){$p(u)$}} \\thinlines\n\n\\thicklines \\put(21,47.5){\\circle{8}}  \\thinlines\n\n\\put(1,47.5){\\vector(1,0){16}}\n\\put(25,47.5){\\vector(1,0){10}}\\put(58,47.5){\\vector(1,0){34}}\n\\put(115,47.5){\\vector(1,0){40}}\n\n\\put(1,49.5){\\makebox(0,0)[l]{\\small $w$}}\n\\put(67,49.5){\\makebox(0,0)[l]{\\small $u$}}\n\\put(149,49.5){\\makebox(0,0){\\small $y$}}\n\\put(13.5,49.5){\\makebox(0,0)[l]{\\small $+$}}\n\\put(16,41.5){\\makebox(0,0)[l]{\\small $-$}}\n\n\\put(141,47.5){\\line(0,-1){27.5}}\\put(141,47.5){\\circle*{0.5}}\n\\put(21,20){\\vector(0,1){23.5}} \\put(21,20){\\line(1,0){120}}\n\\end{picture}\n\\caption{Prime searches via feedback organization.} \\label{fb}\n\\end{center}\n\\end{figure} \n\n\\vspace{0.3cm}\\noindent Since the output of the I controller can generally produce real numbers and the prime process input considers natural numbers only, the controller output is adapted by rounding operation known as $u = floor(x)$ where $x$ is rounded to the nearest natural number lower or equal to $ x $. For example, $ 3 = floor (3.71) $ etc. Currently, $floor$ operations are routinely denoted by $ \\lfloor x \\rfloor$. \\\\\n\\\\\nIn this paper, integral control is based on the continuous--like case \\cite{sem}. If the I control is specifically represented by transfer function $ K_c / (T_i s) $ where $K_c$ is a controller gain and $T_i$ an integration time constant then the transfer function of the feedback arrangement according to Fig. \\ref {fb} will be\n\n\n", "index": 3, "text": "$$\n\\dfrac{\\dfrac{K}{T_i s}}{1+\\dfrac{K}{T_i s}}=\\dfrac{1}{\\dfrac{T_i}{K}s+1}\n$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex1.m1\" class=\"ltx_Math\" alttext=\"\\dfrac{\\dfrac{K}{T_{i}s}}{1+\\dfrac{K}{T_{i}s}}=\\dfrac{1}{\\dfrac{T_{i}}{K}s+1}\" display=\"block\"><mrow><mfrac><mstyle displaystyle=\"true\"><mfrac><mi>K</mi><mrow><msub><mi>T</mi><mi>i</mi></msub><mo>\u2062</mo><mi>s</mi></mrow></mfrac></mstyle><mrow><mn>1</mn><mo>+</mo><mstyle displaystyle=\"true\"><mfrac><mi>K</mi><mrow><msub><mi>T</mi><mi>i</mi></msub><mo>\u2062</mo><mi>s</mi></mrow></mfrac></mstyle></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mrow><mstyle displaystyle=\"true\"><mfrac><msub><mi>T</mi><mi>i</mi></msub><mi>K</mi></mfrac></mstyle><mo>\u2062</mo><mi>s</mi></mrow><mo>+</mo><mn>1</mn></mrow></mfrac></mrow></math>", "type": "latex"}, {"file": "1601.01951.tex", "nexttext": "\nwhere $ e (k) = w-y (k) $ denotes control error and $ k $ denotes step. If the input of the prime process is $ \\lfloor u (k) \\rfloor $, then the related output is $y (k) = p (\\lfloor u (k) \\rfloor) $ for each step $ k $. Searches finish when $ y (k) = w $ are equable. Here, the final controller output $\\lfloor u (k)\\rfloor$ determines the natural order of the preselected prime set--point. In Matlab (similarly Scilab), it associates source code in each step:\n\n\\begin{verbatim}\ny=p(floor(u));\ne=w-y;\nu=u+(1/Ti)*e;\n\\end{verbatim}\nWhen an overflow outlet of the integral controller is indicated, it is requested to disable integration by activating an antiwindup technique. Single antiwindup restrictions are provided for the set of $30$ millions primes as follows:\n\n\\begin{verbatim}\nif (u>30000000) u=30000000; end\nif (u<1) u=1; end\n\\end{verbatim}\n   \n\\section{Tuning of I algorithm}   \n\n\\vspace{0.3cm}\\noindent A natural setting of the integral time constant (associated with so called balanced tuning of PI controller \\cite{kg2} is \n\n\n", "itemtype": "equation", "pos": 10331, "prevtext": " \nwith the resulting closed--loop gain $1$ and the possibility of accelerating searches of prime numbers by decreasing integration constant $T_i $  (under simplification of $ K_c = 1 $). \\\\ \n\\\\\nIntegral algorithm is used in a conventional incremental form\n\n\n", "index": 5, "text": "$$\nu(k+1)=u(k)+\\frac{1}{T_i} e(k),\n$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex2.m1\" class=\"ltx_Math\" alttext=\"u(k+1)=u(k)+\\frac{1}{T_{i}}e(k),\" display=\"block\"><mrow><mrow><mrow><mi>u</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mrow><mi>u</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo>+</mo><mrow><mfrac><mn>1</mn><msub><mi>T</mi><mi>i</mi></msub></mfrac><mo>\u2062</mo><mi>e</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01951.tex", "nexttext": " \nThis tuning ensures finding of prime orders practically in three steps, as it is verified in Fig. \\ref{primesearch} for various preselected primes: $ w = 86 \\, 028 \\,  121$, $ w = 141 \\ 650 \\,  939$ and $ w = 533 \\, 000 \\,  389$. Horizontal axis represents the steps of $k$ movement. Searching dynamics of course varies due to changes of the actual prime process gain. Corresponding sequence of natural prime orders $ u $ is in Fig. \\ref {primesearchu}. In comparison with manual searches of the author above, more than three times acceleration in search speed is observed. Moreover, these searches are predictable with regard to the number of steps, which is almost unattainable in the case of manual searches.\n\n\\begin{figure}[htbp]\n\\begin{center}\n\\includegraphics[scale=0.7]{primesearch.eps}\n\\end{center}\n\\caption{\\small Automatic prime searches $y$ for $w=86\\,028\\,121$, $w=141\\,650\\,939$ and $w=533\\,000\\,389$.}\n\\label{primesearch}\n\\end{figure}\n\n\\begin{figure}[htbp]\n\\begin{center}\n\\includegraphics[scale=0.7]{primesearchu.eps}\n\\end{center}\n\\caption{\\small Prime orders $u$ in prime searches for $w=86\\,028\\,121$, $w=141\\,650\\,939$ and $w=533\\,000\\,389$.}\n\\label{primesearchu}\n\\end{figure}\n\n\\vspace{0.3cm}\\noindent Due to the aforementioned prime theorem estimation $p(u) \\sim u\\ln u$ and in the case of sufficiently large primes, tuning of the integral time constant is preferred in the form \n\n\n", "itemtype": "equation", "pos": -1, "prevtext": "\nwhere $ e (k) = w-y (k) $ denotes control error and $ k $ denotes step. If the input of the prime process is $ \\lfloor u (k) \\rfloor $, then the related output is $y (k) = p (\\lfloor u (k) \\rfloor) $ for each step $ k $. Searches finish when $ y (k) = w $ are equable. Here, the final controller output $\\lfloor u (k)\\rfloor$ determines the natural order of the preselected prime set--point. In Matlab (similarly Scilab), it associates source code in each step:\n\n\\begin{verbatim}\ny=p(floor(u));\ne=w-y;\nu=u+(1/Ti)*e;\n\\end{verbatim}\nWhen an overflow outlet of the integral controller is indicated, it is requested to disable integration by activating an antiwindup technique. Single antiwindup restrictions are provided for the set of $30$ millions primes as follows:\n\n\\begin{verbatim}\nif (u>30000000) u=30000000; end\nif (u<1) u=1; end\n\\end{verbatim}\n   \n\\section{Tuning of I algorithm}   \n\n\\vspace{0.3cm}\\noindent A natural setting of the integral time constant (associated with so called balanced tuning of PI controller \\cite{kg2} is \n\n\n", "index": 7, "text": "$$T_i=K.$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex3.m1\" class=\"ltx_Math\" alttext=\"T_{i}=K.\" display=\"block\"><mrow><mrow><msub><mi>T</mi><mi>i</mi></msub><mo>=</mo><mi>K</mi></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01951.tex", "nexttext": " \nwhere $ w = p (u=?)$ is the $u$--th known prime set--point. Since $ \\ln w = \\ln u + \\ln \\ln u $ which presents an estimate of $K (u) $ plus some small number given by a very few growing double logarithm, the setting of the integral time constant is a few higher than the actual gain is. It improves safety of I control against instability while slowing down the prime searches very slightly.\n\n\\section{Simple Proportion--Based Controller}\n\n\\vspace{0.3cm}\\noindent The integration algorithm $u(k + 1) = u (k) + e (k) /T_i$ can be replaced by the following simple proportion--based way. Considering the prime process approximate relation $y (k) = Ku(k) $, one can make the following deduction \n\n\n", "itemtype": "equation", "pos": -1, "prevtext": " \nThis tuning ensures finding of prime orders practically in three steps, as it is verified in Fig. \\ref{primesearch} for various preselected primes: $ w = 86 \\, 028 \\,  121$, $ w = 141 \\ 650 \\,  939$ and $ w = 533 \\, 000 \\,  389$. Horizontal axis represents the steps of $k$ movement. Searching dynamics of course varies due to changes of the actual prime process gain. Corresponding sequence of natural prime orders $ u $ is in Fig. \\ref {primesearchu}. In comparison with manual searches of the author above, more than three times acceleration in search speed is observed. Moreover, these searches are predictable with regard to the number of steps, which is almost unattainable in the case of manual searches.\n\n\\begin{figure}[htbp]\n\\begin{center}\n\\includegraphics[scale=0.7]{primesearch.eps}\n\\end{center}\n\\caption{\\small Automatic prime searches $y$ for $w=86\\,028\\,121$, $w=141\\,650\\,939$ and $w=533\\,000\\,389$.}\n\\label{primesearch}\n\\end{figure}\n\n\\begin{figure}[htbp]\n\\begin{center}\n\\includegraphics[scale=0.7]{primesearchu.eps}\n\\end{center}\n\\caption{\\small Prime orders $u$ in prime searches for $w=86\\,028\\,121$, $w=141\\,650\\,939$ and $w=533\\,000\\,389$.}\n\\label{primesearchu}\n\\end{figure}\n\n\\vspace{0.3cm}\\noindent Due to the aforementioned prime theorem estimation $p(u) \\sim u\\ln u$ and in the case of sufficiently large primes, tuning of the integral time constant is preferred in the form \n\n\n", "index": 9, "text": "$$T_i=\\ln w,$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex4.m1\" class=\"ltx_Math\" alttext=\"T_{i}=\\ln w,\" display=\"block\"><mrow><mrow><msub><mi>T</mi><mi>i</mi></msub><mo>=</mo><mrow><mi>ln</mi><mo>\u2061</mo><mi>w</mi></mrow></mrow><mo>,</mo></mrow></math>", "type": "latex"}, {"file": "1601.01951.tex", "nexttext": "\nHence ($K=T_i$)\n\n\n", "itemtype": "equation", "pos": 13526, "prevtext": " \nwhere $ w = p (u=?)$ is the $u$--th known prime set--point. Since $ \\ln w = \\ln u + \\ln \\ln u $ which presents an estimate of $K (u) $ plus some small number given by a very few growing double logarithm, the setting of the integral time constant is a few higher than the actual gain is. It improves safety of I control against instability while slowing down the prime searches very slightly.\n\n\\section{Simple Proportion--Based Controller}\n\n\\vspace{0.3cm}\\noindent The integration algorithm $u(k + 1) = u (k) + e (k) /T_i$ can be replaced by the following simple proportion--based way. Considering the prime process approximate relation $y (k) = Ku(k) $, one can make the following deduction \n\n\n", "index": 11, "text": "$$\n\\frac{u(k+1)-u(k)}{u(k)}=\\frac{K}{T_i}\\frac{e(k)}{y(k)}=\\frac{w-y(k)}{y(k)}.\n$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex5.m1\" class=\"ltx_Math\" alttext=\"\\frac{u(k+1)-u(k)}{u(k)}=\\frac{K}{T_{i}}\\frac{e(k)}{y(k)}=\\frac{w-y(k)}{y(k)}.\" display=\"block\"><mrow><mrow><mfrac><mrow><mrow><mi>u</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>-</mo><mrow><mi>u</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mrow><mi>u</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mfrac><mo>=</mo><mrow><mfrac><mi>K</mi><msub><mi>T</mi><mi>i</mi></msub></mfrac><mo>\u2062</mo><mfrac><mrow><mi>e</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mrow><mi>y</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mfrac></mrow><mo>=</mo><mfrac><mrow><mi>w</mi><mo>-</mo><mrow><mi>y</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mrow><mrow><mi>y</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mfrac></mrow><mo>.</mo></mrow></math>", "type": "latex"}, {"file": "1601.01951.tex", "nexttext": "\nrepresents an iterative formula for finding the prime order based on the use of simple proportion $w/u(k+1)=y(k)/u(k)$. It is associated with an one--step ahead Matlab iteration \n\n \\begin{verbatim}\n y=p(floor(u));\n u=u*w/y;\n \\end{verbatim} \nThere is the one iteration only in the case of a purely linear relationship $y = Ku$, since $y (k + 1) = Ku(k+1) = Ku(k) w / y (k) = w $. Experiments show that in the case of nonlinear prime process iterations converge very quickly in a few steps.\n\n\\section{Conclusion}\n\n\\vspace{0.3cm}\\noindent The paper shows how it is possible to use the integration algorithm to solve the problem so far away with respect to the current control, such as automatic searches in prime tables. Feedback arrangement with use of a pure integral controller guarantees that searches work efficiently with a minimal amount of energy. It is associated with a good controller tuning. \\\\\n\\\\\nIllustratively, there is shown the benefit of automatic searches, when a very simple algorithm, unlike the manual search, provides predictable results regardless of the size of the prime numbers and the extent used sizes.\\\\\n\\\\\nAs illustrated above, the very simple feedback procedure yields surprisingly good results. In fact, it gives an alternative to feedback scheme proposed in \\cite{ggs} aimed at finding the inverse of a general function or an alternative to searches of measurable records in relational databases.\\\\\n\\\\  \nIn prime numbers in general, apparently experimental evidence often carries much less weight than it seems. An open question is whether proposed I algorithm applies to any prime outside the first $30$ million table.\n\n\\vspace{0.2cm}\n\\begin{thebibliography}{9}\n\n\\bibitem{cogu} Conway J.H., Guy R., \\emph{The Book of Numbers}, Springer, 1996.\n\\bibitem{ggs}  Goodwin G.C., Graebe S.F., Salgado M.E., \\emph{Control System Design}, Prentice Hall, 2000.\n\\bibitem{kg1} Kl\\'{a}n P., Gorez R., \\emph{Process Control}, FCC Public, 2011.\n\\bibitem{kg2} Kl\\'{a}n P. , Gorez R., \\emph{Balanced tuning of PI controllers}, European Journal of Control, Vol. 6, No. 6, pp. 541--550, 2000. \n\\bibitem{mmi} McMillan G. K., \\emph{Good Tuning: A Pocket Guide}, Instrument Society of America, 2000.\n\\bibitem{prip} \\emph{The Prime Pages}, The first 50,000,000 primes, primes.utm.edu.\n\\bibitem{odw} O'Dwyer A., \\emph{Handbook Of Pi And Pid Controller Tuning Rules}, Imperial College Press.\n\\bibitem{sem} Seborg D., Edgar T., Mellichamp T., \\emph{Process Dynamics and Control}, John Wiley $\\&$ Sons, 1989.\n\\end{thebibliography}\n\n\n", "itemtype": "equation", "pos": 13626, "prevtext": "\nHence ($K=T_i$)\n\n\n", "index": 13, "text": "$$\nu(k+1)=u(k)\\frac{w}{y(k)}=u(k)\\frac{w}{p(\\lfloor u(k)\\rfloor)}\n$$\n", "mathml": "<math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"S0.Ex6.m1\" class=\"ltx_Math\" alttext=\"u(k+1)=u(k)\\frac{w}{y(k)}=u(k)\\frac{w}{p(\\lfloor u(k)\\rfloor)}\" display=\"block\"><mrow><mrow><mi>u</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow><mo stretchy=\"false\">)</mo></mrow></mrow><mo>=</mo><mrow><mi>u</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mfrac><mi>w</mi><mrow><mi>y</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow></mfrac></mrow><mo>=</mo><mrow><mi>u</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><mo>\u2062</mo><mfrac><mi>w</mi><mrow><mi>p</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mrow><mo stretchy=\"false\">\u230a</mo><mrow><mi>u</mi><mo>\u2062</mo><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow></mrow><mo stretchy=\"false\">\u230b</mo></mrow><mo stretchy=\"false\">)</mo></mrow></mrow></mfrac></mrow></mrow></math>", "type": "latex"}]